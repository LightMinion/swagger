{
    "swagger": "2.0",
    "info": {
      "description": "The current set of APIs will be available in Q3 2025 on Worldline Global Issuing Platforms.\nAdditional APIs are under construction and planned to be available in 2025.",
      "version": "2.31.X",
      "title": "Worldline Card Issuing API",
      "contact": {}
    },
    "host": "issuing-solutions.eae.apis.svc.as8677.net/issbox",
    "basePath": "/api/v2",
    "tags": [
      {
        "name": "Account",
        "description": "Account Api Controller"
      },
      {
        "name": "Account - Authorization",
        "description": "Account Authorization Controller"
      },
      {
        "name": "Account - Authorization Restriction",
        "description": "Account Authorization Restriction Controller"
      },
      {
        "name": "Account - BankDetails",
        "description": "Get Bank Details Controller"
      },
      {
        "name": "Account - Future Update",
        "description": "Account Future Updates Api Controller"
      },
      {
        "name": "Account - Insurance Contract",
        "description": "Account Insurance Contract Api Controller"
      },
      {
        "name": "Account - Operation",
        "description": "Account Operation Api Controller"
      },
      {
        "name": "Account - Statement",
        "description": "Account Statement Api Controller"
      },
      {
        "name": "Account - Temporary Credit Limit",
        "description": "Account Temporary Credit Limit Api Controller"
      },
      {
        "name": "Account - Velocity Limit",
        "description": "Account Velocity Limit Controller"
      },
      {
        "name": "Api Meta Info",
        "description": "Api Meta Info Api Controller"
      },
      {
        "name": "Card",
        "description": "Card Api Controller"
      },
      {
        "name": "Card - CVV",
        "description": "Card CVV Api Controller"
      },
      {
        "name": "Card - Order",
        "description": "Card Order Api Controller"
      },
      {
        "name": "Card - Pin",
        "description": "Card Pin Api Controller"
      },
      {
        "name": "Card - CardPinState",
        "description": "Card Pin State"
      },
      {
        "name": "Card - Pin Try Counter",
        "description": "Card Pin Try Counter Api Controller"
      },
      {
        "name": "Card - Letter",
        "description": "Card Letter API Controller"
      },
      {
        "name": "Card Contract",
        "description": "Card Contract Api Controller"
      },
      {
        "name": "Contract",
        "description": "Contract Api Controller"
      },
      {
        "name": "Contract - Global Search",
        "description": "Contract Global Search API Controller"
      },
      {
        "name": "Credit Transfer",
        "description": "Credit Transfer Api Controller"
      },
      {
        "name": "Customer",
        "description": "Customer Api Controller"
      },
      {
        "name": "Customer - Address",
        "description": "Customer Address Api Controller"
      },
      {
        "name": "Customer - Related",
        "description": "Customer Related Api Controller"
      },     
      {
        "name": "Company",
        "description": "Company Api Controller"
      },
      {
        "name": "Company - Address",
        "description": "Company Address Api Controller"
      },
      {
        "name": "Company - Related",
        "description": "Company Related Api Controller"
      },    
      {
        "name": "Direct Debit",
        "description": "Direct Debit Api Controller"
      },
      {
        "name": "Event Store",
        "description": "Event Store Controller"
      },
      {
        "name": "Issuer",
        "description": "Issuer Api Controller"
      },
      {
        "name": "Dispute",
        "description": "Dispute Api Controller"
      },
      {
        "name": "Mobile Payment Operations",
        "description": "Apple Pay Controller"
      },
      {
        "name": "Corporate Contract",
        "description": "Corporate Contract API Controller"
      },
      {
        "name": "Corporate Contract - Global Search",
        "description": "Corporate Contract Global Search API Controller"
      },
      {
        "name": "Message - Subscription",
        "description": "Message Subscription Api Controller"
      },
      {
        "name": "Message - Subscription Event",
        "description": "Message Subscription Event Api Controller"
      },
      {
        "name": "Message - Subscription Service",
        "description": "Message Subscription Service Api Controller"
      },
      {
        "name": "Transaction - Global Search",
        "description": "Transaction Global Search  API Controller"
      },
      {
        "name": "Transaction",
        "description": "Transaction API Controller"
      },
      {
        "name": "Operation - Global Search",
        "description": "Operation Global Search API Controller"
      },
      {
        "name": "Product Override",
        "description": "Product Override API Controller"
      }
    ],
    "schemes": [
      "https"
    ],
    "paths": {
      "/issuers/{issuerId}/cards/{cardReference}/create-apple-tokenized-card": {
        "post": {
          "tags": [
            "Mobile Payment Operations"
          ],
          "summary": "Token Provisioning: Apple push provisioning",
          "description": "The following web service generates the complete Payment Data Payload for ApplePay",
          "operationId": "createAppleTokenizedCard",
          "parameters": [
            {
              "name": "issuerId",
              "in": "path",
              "description": "Max length 32. Unique identifier of the Issuer on I-TSP",
              "required": true,
              "schema": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Max 64 length. Anonymized card identifier (Surrogate of PAN), as defined by Issuer",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "Max length 64. Unique ID for the API request",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "description": "Content-Type used in request, For example, “application/json;charset=UTF-8”",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "Authorization",
              "in": "header",
              "description": "Authentication credentials passed in the HTTPS Basic Authorization header. Credentials are provided to the Issuer and need to be different for test and production environments",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2CreateAppleTokenizedCardV2Response"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReA",
                      "statusMessage": "BAD_DATA",
                      "statusCode": 400,
                      "responseDateTime": "2023-03-09T10:23:30.748Z",
                      "timeTakenMs": 35
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "examples": {
                    "Forbidden": {
                      "description": "Forbidden",
                      "value": {
                        "responseMetadata": {
                          "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReC",
                          "statusMessage": "NOT_ALLOWED",
                          "statusCode": 403,
                          "responseDateTime": "2023-03-09T10:23:30.746Z",
                          "timeTakenMs": 37
                        }
                      }
                    },
                    "Declined": {
                      "description": "Service cannot be processed",
                      "value": {
                        "responseMetadata": {
                          "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReI",
                          "statusMessage": "DECLINED",
                          "statusCode": 403,
                          "responseDateTime": "2023-03-09T10:23:30.753Z",
                          "timeTakenMs": 138
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Resource not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReD",
                      "statusMessage": "NOT_FOUND",
                      "statusCode": 404,
                      "responseDateTime": "2023-03-09T10:23:30.747Z",
                      "timeTakenMs": 38
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReB",
                      "statusMessage": "TECHNICAL_ERROR",
                      "statusCode": 500,
                      "responseDateTime": "2023-03-09T10:23:30.749Z",
                      "timeTakenMs": 36
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/create-vts-tokenized-card": {
        "post": {
          "tags": [
            "Mobile Payment Operations"
          ],
          "summary": "Token Provisioning: Google or Samsung push provisioning (Visa variant)",
          "description": "Generates the complete Payment Data Payload for VTS",
          "operationId": "createVtsTokenizedCard",
          "parameters": [
            {
              "name": "issuerId",
              "in": "path",
              "description": "Max length 32. Unique identifier of the Issuer on I-TSP",
              "required": true,
              "schema": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Max 64 length. Anonymized card identifier (Surrogate of PAN), as defined by Issuer",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "Max length 64. Unique ID for the API request",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "description": "Content-Type used in request, For example, “application/json;charset=UTF-8”",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "Authorization",
              "in": "header",
              "description": "Authentication credentials passed in the HTTPS Basic Authorization header. Credentials are provided to the Issuer and need to be different for test and production environments",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/VtsCommonPushProvisioningRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2CreateVtsTokenizedCardV2Response"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReA",
                      "statusMessage": "BAD_DATA",
                      "statusCode": 400,
                      "responseDateTime": "2023-03-09T10:23:30.748Z",
                      "timeTakenMs": 35
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "examples": {
                    "Forbidden": {
                      "description": "Forbidden",
                      "value": {
                        "responseMetadata": {
                          "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReC",
                          "statusMessage": "NOT_ALLOWED",
                          "statusCode": 403,
                          "responseDateTime": "2023-03-09T10:23:30.746Z",
                          "timeTakenMs": 37
                        }
                      }
                    },
                    "Declined": {
                      "description": "Service cannot be processed",
                      "value": {
                        "responseMetadata": {
                          "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReI",
                          "statusMessage": "DECLINED",
                          "statusCode": 403,
                          "responseDateTime": "2023-03-09T10:23:30.753Z",
                          "timeTakenMs": 138
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Resource not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReD",
                      "statusMessage": "NOT_FOUND",
                      "statusCode": 404,
                      "responseDateTime": "2023-03-09T10:23:30.747Z",
                      "timeTakenMs": 38
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReB",
                      "statusMessage": "TECHNICAL_ERROR",
                      "statusCode": 500,
                      "responseDateTime": "2023-03-09T10:23:30.749Z",
                      "timeTakenMs": 36
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/create-mdes-tokenized-card": {
        "post": {
          "tags": [
            "Mobile Payment Operations"
          ],
          "summary": "Token Provisioning: Google or Samsung push provisioning (Mastercard variant)",
          "description": "This service enables generates the complete google Payment Data Payload for MDES",
          "operationId": "createMdesTokenizedCard",
          "parameters": [
            {
              "name": "issuerId",
              "in": "path",
              "description": "Max length 32. Unique identifier of the Issuer on I-TSP",
              "required": true,
              "schema": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Max 64 length. Anonymized card identifier (Surrogate of PAN), as defined by Issuer",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "Max length 64. Unique ID for the API request",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "description": "Content-Type used in request, For example, “application/json;charset=UTF-8”",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "Authorization",
              "in": "header",
              "description": "Authentication credentials passed in the HTTPS Basic Authorization header. Credentials are provided to the Issuer and need to be different for test and production environments",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/CreateMdesTokenizedCardV2Request"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2CreateMdesTokenizedCardV2Response"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReA",
                      "statusMessage": "BAD_DATA",
                      "statusCode": 400,
                      "responseDateTime": "2023-03-09T10:23:30.748Z",
                      "timeTakenMs": 35
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "examples": {
                    "Forbidden": {
                      "description": "Forbidden",
                      "value": {
                        "responseMetadata": {
                          "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReC",
                          "statusMessage": "NOT_ALLOWED",
                          "statusCode": 403,
                          "responseDateTime": "2023-03-09T10:23:30.746Z",
                          "timeTakenMs": 37
                        }
                      }
                    },
                    "Declined": {
                      "description": "Service cannot be processed",
                      "value": {
                        "responseMetadata": {
                          "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReI",
                          "statusMessage": "DECLINED",
                          "statusCode": 403,
                          "responseDateTime": "2023-03-09T10:23:30.753Z",
                          "timeTakenMs": 138
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Resource not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReD",
                      "statusMessage": "NOT_FOUND",
                      "statusCode": 404,
                      "responseDateTime": "2023-03-09T10:23:30.747Z",
                      "timeTakenMs": 38
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReB",
                      "statusMessage": "TECHNICAL_ERROR",
                      "statusCode": 500,
                      "responseDateTime": "2023-03-09T10:23:30.749Z",
                      "timeTakenMs": 36
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/tokens/{tokenReference}/generate-crypto-otp": {
        "post": {
          "tags": [
            "Mobile Payment Operations"
          ],
          "summary": "Token Provisioning: Get-Crypto-OTP by Token",
          "description": "This service computes OTP, according to either VTS or MDES App to App authentication",
          "operationId": "getCryptoOTPByToken",
          "parameters": [
            {
              "name": "issuerId",
              "in": "path",
              "description": "Max length 32. Unique identifier of the Issuer on I-TSP",
              "required": true,
              "schema": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "tokenReference",
              "in": "path",
              "description": "Max length 64. Anonymized token identifier, as defined by Token Service Provider",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "Max length 64. Unique ID for the API request",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "description": "Content-Type used in request, For example, “application/json;charset=UTF-8”",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "Authorization",
              "in": "header",
              "description": "Authentication credentials passed in the HTTPS Basic Authorization header. Credentials are provided to the Issuer and need to be different for test and production environments",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/AddBaseRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2GetCryptoOTPV2Response"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReA",
                      "statusMessage": "BAD_DATA",
                      "statusCode": 400,
                      "responseDateTime": "2023-03-09T10:23:30.748Z",
                      "timeTakenMs": 35
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "examples": {
                    "Forbidden": {
                      "description": "Forbidden",
                      "value": {
                        "responseMetadata": {
                          "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReC",
                          "statusMessage": "NOT_ALLOWED",
                          "statusCode": 403,
                          "responseDateTime": "2023-03-09T10:23:30.746Z",
                          "timeTakenMs": 37
                        }
                      }
                    },
                    "Declined": {
                      "description": "Service cannot be processed",
                      "value": {
                        "responseMetadata": {
                          "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReI",
                          "statusMessage": "DECLINED",
                          "statusCode": 403,
                          "responseDateTime": "2023-03-09T10:23:30.753Z",
                          "timeTakenMs": 138
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Resource not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReD",
                      "statusMessage": "NOT_FOUND",
                      "statusCode": 404,
                      "responseDateTime": "2023-03-09T10:23:30.747Z",
                      "timeTakenMs": 38
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReB",
                      "statusMessage": "TECHNICAL_ERROR",
                      "statusCode": 500,
                      "responseDateTime": "2023-03-09T10:23:30.749Z",
                      "timeTakenMs": 36
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/generate-crypto-otp": {
        "post": {
          "tags": [
            "Mobile Payment Operations"
          ],
          "summary": "Token Provisioning: Get-Crypto-OTP by card reference",
          "description": "This service computes OTP, according to either VTS or MDES App to App authentication",
          "operationId": "getCryptoOTPByCardReference",
          "parameters": [
            {
              "name": "issuerId",
              "in": "path",
              "description": "Max length 32. Unique identifier of the Issuer on I-TSP",
              "required": true,
              "schema": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Max 64 length. Anonymized card identifier (Surrogate of PAN), as defined by Issuer",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "Max length 64. Unique ID for the API request",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "description": "Content-Type used in request, For example, “application/json;charset=UTF-8”",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "Authorization",
              "in": "header",
              "description": "Authentication credentials passed in the HTTPS Basic Authorization header. Credentials are provided to the Issuer and need to be different for test and production environments",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/AddBaseRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2GetCryptoOTPV2Response"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReA",
                      "statusMessage": "BAD_DATA",
                      "statusCode": 400,
                      "responseDateTime": "2023-03-09T10:23:30.748Z",
                      "timeTakenMs": 35
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "examples": {
                    "Forbidden": {
                      "description": "Forbidden",
                      "value": {
                        "responseMetadata": {
                          "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReC",
                          "statusMessage": "NOT_ALLOWED",
                          "statusCode": 403,
                          "responseDateTime": "2023-03-09T10:23:30.746Z",
                          "timeTakenMs": 37
                        }
                      }
                    },
                    "Declined": {
                      "description": "Service cannot be processed",
                      "value": {
                        "responseMetadata": {
                          "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReI",
                          "statusMessage": "DECLINED",
                          "statusCode": 403,
                          "responseDateTime": "2023-03-09T10:23:30.753Z",
                          "timeTakenMs": 138
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Resource not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReD",
                      "statusMessage": "NOT_FOUND",
                      "statusCode": 404,
                      "responseDateTime": "2023-03-09T10:23:30.747Z",
                      "timeTakenMs": 38
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReB",
                      "statusMessage": "TECHNICAL_ERROR",
                      "statusCode": 500,
                      "responseDateTime": "2023-03-09T10:23:30.749Z",
                      "timeTakenMs": 36
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/token-list": {
        "get": {
          "tags": [
            "Mobile Payment Operations"
          ],
          "summary": "Selfcare : Get Token list from a Card Reference",
          "description": "This service returns a token list attached to a given card. The data are the current G-itsp data and could face a desynchronization with scheme referential",
          "operationId": "getTokenData_1",
          "parameters": [
            {
              "name": "issuerId",
              "in": "path",
              "description": "Max length 32. Unique identifier of the Issuer on I-TSP",
              "required": true,
              "schema": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Max 64 length. Anonymized card identifier (Surrogate of PAN), as defined by Issuer",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "Max length 64. Unique ID for the API request",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "Authorization",
              "in": "header",
              "description": "Authentication credentials passed in the HTTPS Basic Authorization header. Credentials are provided to the Issuer and need to be different for test and production environments",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2GetTokenDataV2Response"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReA",
                      "statusMessage": "BAD_DATA",
                      "statusCode": 400,
                      "responseDateTime": "2023-03-09T10:23:30.748Z",
                      "timeTakenMs": 35
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReC",
                      "statusMessage": "NOT_ALLOWED",
                      "statusCode": 403,
                      "responseDateTime": "2023-03-09T10:23:30.746Z",
                      "timeTakenMs": 37
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Resource not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReD",
                      "statusMessage": "NOT_FOUND",
                      "statusCode": 404,
                      "responseDateTime": "2023-03-09T10:23:30.747Z",
                      "timeTakenMs": 38
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReB",
                      "statusMessage": "TECHNICAL_ERROR",
                      "statusCode": 500,
                      "responseDateTime": "2023-03-09T10:23:30.749Z",
                      "timeTakenMs": 36
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/tokens/{tokenReference}/tokenRequestors/{tokenRequestorId}/details": {
        "get": {
          "tags": [
            "Mobile Payment Operations"
          ],
          "summary": "Selfcare : Get token details",
          "description": "This webservice retrieve token information, if existing on G-iTSP side, updated with the tokenProvider data",
          "operationId": "getTokenDetails",
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "Max length 64. Unique ID for the API request",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "Authorization",
              "in": "header",
              "description": "Authentication credentials passed in the HTTPS Basic Authorization header. Credentials are provided to the Issuer and need to be different for test and production environments",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Max length 32. Unique identifier of the Issuer on I-TSP",
              "required": true,
              "schema": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "tokenReference",
              "in": "path",
              "description": "Max length 64. Anonymized token identifier, as defined by Token Service Provider",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "tokenRequestorId",
              "in": "path",
              "description": "Max length 11 with only Integers. Id of the token requestor as known today",
              "required": true,
              "schema": {
                "maxLength": 11,
                "minLength": 11,
                "pattern": "\\d{11}",
                "type": "string"
              }
            },
            {
              "name": "provider",
              "in": "query",
              "description": "Information about the token provider",
              "required": true,
              "schema": {
                "pattern": "MDES|VTS",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2DetailsDataResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReA",
                      "statusMessage": "BAD_DATA",
                      "statusCode": 400,
                      "responseDateTime": "2023-03-09T10:23:30.748Z",
                      "timeTakenMs": 35
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReC",
                      "statusMessage": "NOT_ALLOWED",
                      "statusCode": 403,
                      "responseDateTime": "2023-03-09T10:23:30.746Z",
                      "timeTakenMs": 37
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Resource not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReD",
                      "statusMessage": "NOT_FOUND",
                      "statusCode": 404,
                      "responseDateTime": "2023-03-09T10:23:30.747Z",
                      "timeTakenMs": 38
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Resource belonging to another entity",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReK",
                      "statusMessage": "MISMATCH",
                      "statusCode": 409,
                      "responseDateTime": "2023-02-09T10:23:30.755Z",
                      "timeTakenMs": 121
                    }
                  }
                }
              }
            },
            "410": {
              "description": "Resource is expired",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReH",
                      "statusMessage": "EXPIRED",
                      "statusCode": 410,
                      "responseDateTime": "2023-03-09T10:23:30.752Z",
                      "timeTakenMs": 136
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReB",
                      "statusMessage": "TECHNICAL_ERROR",
                      "statusCode": 500,
                      "responseDateTime": "2023-03-09T10:23:30.749Z",
                      "timeTakenMs": 36
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/tokens/{tokenReference}/update": {
        "post": {
          "tags": [
            "Mobile Payment Operations"
          ],
          "summary": "Selfcare : Update a token status",
          "description": "This webservice performs update on existing token",
          "operationId": "updateToken",
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "Max length 64. Unique ID for the API request",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "Authorization",
              "in": "header",
              "description": "Authentication credentials passed in the HTTPS Basic Authorization header. Credentials are provided to the Issuer and need to be different for test and production environments",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Max length 32. Unique identifier of the Issuer on I-TSP",
              "required": true,
              "schema": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "tokenReference",
              "in": "path",
              "description": "Max length 64. Anonymized token identifier, as defined by Token Service Provider",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "provider",
              "in": "query",
              "description": "Information about the token provider",
              "required": true,
              "schema": {
                "pattern": "MDES|VTS",
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/TokenSelfcareUpdateRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReE",
                      "statusMessage": "ACCEPTED",
                      "statusCode": 202,
                      "responseDateTime": "2024-07-11T12:45:18.473Z",
                      "timeTakenMs": 185
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReA",
                      "statusMessage": "BAD_DATA",
                      "statusCode": 400,
                      "responseDateTime": "2023-03-09T10:23:30.748Z",
                      "timeTakenMs": 35
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReC",
                      "statusMessage": "NOT_ALLOWED",
                      "statusCode": 403,
                      "responseDateTime": "2023-03-09T10:23:30.746Z",
                      "timeTakenMs": 37
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Resource not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReD",
                      "statusMessage": "NOT_FOUND",
                      "statusCode": 404,
                      "responseDateTime": "2023-03-09T10:23:30.747Z",
                      "timeTakenMs": 38
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Conflict",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "examples": {
                    "MISMATCH": {
                      "description": "Resource belonging to another entity",
                      "value": {
                        "responseMetadata": {
                          "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReK",
                          "statusMessage": "MISMATCH",
                          "statusCode": 409,
                          "responseDateTime": "2023-02-09T10:23:30.755Z",
                          "timeTakenMs": 121
                        }
                      }
                    },
                    "TOKEN_ALREADY_IN_REQUESTED_STATUS": {
                      "description": "Failure of request due to token_status conflict",
                      "value": {
                        "responseMetadata": {
                          "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReG",
                          "statusMessage": "TOKEN_ALREADY_IN_REQUESTED_STATUS",
                          "statusCode": 409,
                          "responseDateTime": "2023-02-09T10:23:30.751Z",
                          "timeTakenMs": 120
                        }
                      }
                    },
                    "FUNCTIONAL_ERROR": {
                      "description": "Failure of request on TSP due to functional issue",
                      "value": {
                        "responseMetadata": {
                          "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReF",
                          "statusMessage": "FUNCTIONAL_ERROR",
                          "statusCode": 409,
                          "responseDateTime": "2023-03-09T10:23:30.750Z",
                          "timeTakenMs": 39
                        }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReB",
                      "statusMessage": "TECHNICAL_ERROR",
                      "statusCode": 500,
                      "responseDateTime": "2023-03-09T10:23:30.749Z",
                      "timeTakenMs": 36
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/tokens/{tokenReference}/card-reference": {
        "get": {
          "tags": [
            "Mobile Payment Operations"
          ],
          "summary": "Selfcare : Get Card Reference From Token",
          "description": "This webservice allows local lookup for card identifier (issuerCardId) on a specific Token",
          "operationId": "getCardIdFromToken_1",
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "Max length 64. Unique ID for the API request",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "Authorization",
              "in": "header",
              "description": "Authentication credentials passed in the HTTPS Basic Authorization header. Credentials are provided to the Issuer and need to be different for test and production environments",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Max length 32. Unique identifier of the Issuer on I-TSP",
              "required": true,
              "schema": {
                "maxLength": 32,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "tokenReference",
              "in": "path",
              "description": "Max length 64. Anonymized token identifier, as defined by Token Service Provider",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "provider",
              "in": "query",
              "description": "Information about the token provider",
              "required": true,
              "schema": {
                "pattern": "MDES|VTS",
                "type": "string",
                "enum": [
                  "VTS",
                  "MDES"
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2GetCardIdFromTokenV2Response"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReA",
                      "statusMessage": "BAD_DATA",
                      "statusCode": 400,
                      "responseDateTime": "2023-03-09T10:23:30.748Z",
                      "timeTakenMs": 35
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReC",
                      "statusMessage": "NOT_ALLOWED",
                      "statusCode": 403,
                      "responseDateTime": "2023-03-09T10:23:30.746Z",
                      "timeTakenMs": 37
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Resource not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReD",
                      "statusMessage": "NOT_FOUND",
                      "statusCode": 404,
                      "responseDateTime": "2023-03-09T10:23:30.747Z",
                      "timeTakenMs": 38
                    }
                  }
                }
              }
            },
            "409": {
              "description": "Resource belonging to another entity",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReK",
                      "statusMessage": "MISMATCH",
                      "statusCode": 409,
                      "responseDateTime": "2023-02-09T10:23:30.755Z",
                      "timeTakenMs": 121
                    }
                  }
                }
              }
            },
            "500": {
              "description": "",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "examples": {
                    "TECHNICAL_ERROR": {
                      "description": "TECHNICAL_ERROR",
                      "value": {
                        "responseMetadata": {
                          "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReB",
                          "statusMessage": "TECHNICAL_ERROR",
                          "statusCode": 500,
                          "responseDateTime": "2023-03-09T10:23:30.749Z",
                          "timeTakenMs": 36
                        }
                      }
                    },
                    "NO_ID": {
                      "description": "Resource data incomplete",
                      "value": {
                        "responseMetadata": {
                          "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReJ",
                          "statusMessage": "NO_ID",
                          "statusCode": 500,
                          "responseDateTime": "2023-03-09T10:23:30.754Z",
                          "timeTakenMs": 166
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/click-to-pay-enroll": {
        "post": {
          "tags": [
            "Mobile Payment Operations"
          ],
          "summary": "Click-To-Pay: Enroll a card",
          "description": "Enroll a card into click-to-pay. If account does not exist it will be created. For an account creation (first card) full data must be provided",
          "operationId": "clickToPayEnroll",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "description": "Authentication credentials passed in the HTTPS Basic Authorization header. Credentials are provided to the Issuer and need to be different for test and production environments",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "description": "Content-Type used in request, For example, “application/json;charset=UTF-8”",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "Max length 64. Unique ID for the API request",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Max length 32. Unique identifier of the Issuer on I-TSP",
              "required": true,
              "schema": {
                "maxLength": 32,
                "minLength": 1,
                "type": "string"
              }
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Max 64 length. Anonymized card identifier (Surrogate of PAN), as defined by Issuer",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 1,
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ClickToPayEnrollRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "202": {
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReE",
                      "statusMessage": "ACCEPTED",
                      "statusCode": 202,
                      "responseDateTime": "2024-07-11T12:45:18.473Z",
                      "timeTakenMs": 185
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReA",
                      "statusMessage": "BAD_DATA",
                      "statusCode": 400,
                      "responseDateTime": "2023-03-09T10:23:30.748Z",
                      "timeTakenMs": 35
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReC",
                      "statusMessage": "NOT_ALLOWED",
                      "statusCode": 403,
                      "responseDateTime": "2023-03-09T10:23:30.746Z",
                      "timeTakenMs": 37
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Resource not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReD",
                      "statusMessage": "NOT_FOUND",
                      "statusCode": 404,
                      "responseDateTime": "2023-03-09T10:23:30.747Z",
                      "timeTakenMs": 38
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable entity",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReK",
                      "statusMessage": "UNPROCESSABLE",
                      "statusCode": 422,
                      "responseDateTime": "2023-02-09T10:23:30.755Z",
                      "timeTakenMs": 121
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReB",
                      "statusMessage": "TECHNICAL_ERROR",
                      "statusCode": 500,
                      "responseDateTime": "2023-03-09T10:23:30.749Z",
                      "timeTakenMs": 36
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/click-to-pay-remove": {
        "post": {
          "tags": [
            "Mobile Payment Operations"
          ],
          "summary": "Click-To-Pay: Remove a card or complete account",
          "description": "API to remove a card or complete account from click-to-pay",
          "operationId": "clickToPayRemove",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "description": "Authentication credentials passed in the HTTPS Basic Authorization header. Credentials are provided to the Issuer and need to be different for test and production environments",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "description": "Content-Type used in request, For example, “application/json;charset=UTF-8”",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "Max length 64. Unique ID for the API request",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Max length 32. Unique identifier of the Issuer on I-TSP",
              "required": true,
              "schema": {
                "maxLength": 32,
                "minLength": 1,
                "type": "string"
              }
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Max 64 length. Anonymized card identifier (Surrogate of PAN), as defined by Issuer",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 1,
                "type": "string"
              }
            },
          {
            "name": "removeAll",
            "in": "query",
            "description": "Flag to force removal of complete click-to-pay account, including potential other cards.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
          ],
          "responses": {
            "202": {
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReE",
                      "statusMessage": "ACCEPTED",
                      "statusCode": 202,
                      "responseDateTime": "2024-07-11T12:45:18.473Z",
                      "timeTakenMs": 185
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReA",
                      "statusMessage": "BAD_DATA",
                      "statusCode": 400,
                      "responseDateTime": "2023-03-09T10:23:30.748Z",
                      "timeTakenMs": 35
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReC",
                      "statusMessage": "NOT_ALLOWED",
                      "statusCode": 403,
                      "responseDateTime": "2023-03-09T10:23:30.746Z",
                      "timeTakenMs": 37
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Resource not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReD",
                      "statusMessage": "NOT_FOUND",
                      "statusCode": 404,
                      "responseDateTime": "2023-03-09T10:23:30.747Z",
                      "timeTakenMs": 38
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable entity",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReK",
                      "statusMessage": "UNPROCESSABLE",
                      "statusCode": 422,
                      "responseDateTime": "2023-02-09T10:23:30.755Z",
                      "timeTakenMs": 121
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReB",
                      "statusMessage": "TECHNICAL_ERROR",
                      "statusCode": 500,
                      "responseDateTime": "2023-03-09T10:23:30.749Z",
                      "timeTakenMs": 36
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/click-to-pay-account-data": {
        "get": {
          "tags": [
            "Mobile Payment Operations"
          ],
          "summary": "Click-To-Pay: Return all data provisioned for a given card",
          "description": "This API will return all data stored into Visa Click-to-Pay for a given card.",
          "operationId": "retrieveAccountData",
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "description": "Authentication credentials passed in the HTTPS Basic Authorization header. Credentials are provided to the Issuer and need to be different for test and production environments",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "description": "Content-Type used in request, For example, “application/json;charset=UTF-8”",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "Max length 64. Unique ID for the API request",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Max length 32. Unique identifier of the Issuer on I-TSP",
              "required": true,
              "schema": {
                "maxLength": 32,
                "minLength": 1,
                "type": "string"
              }
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Max 64 length. Anonymized card identifier (Surrogate of PAN), as defined by Issuer",
              "required": true,
              "schema": {
                "maxLength": 64,
                "minLength": 1,
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2ClickToPayRetrieveAccountDataResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReA",
                      "statusMessage": "BAD_DATA",
                      "statusCode": 400,
                      "responseDateTime": "2023-03-09T10:23:30.748Z",
                      "timeTakenMs": 35
                    }
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReC",
                      "statusMessage": "NOT_ALLOWED",
                      "statusCode": 403,
                      "responseDateTime": "2023-03-09T10:23:30.746Z",
                      "timeTakenMs": 37
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Resource not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReD",
                      "statusMessage": "NOT_FOUND",
                      "statusCode": 404,
                      "responseDateTime": "2023-03-09T10:23:30.747Z",
                      "timeTakenMs": 38
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Unprocessable entity",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReK",
                      "statusMessage": "UNPROCESSABLE",
                      "statusCode": 422,
                      "responseDateTime": "2023-02-09T10:23:30.755Z",
                      "timeTakenMs": 121
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/definitions/ResponseV2"
                  },
                  "example": {
                    "responseMetadata": {
                      "correlationId": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReB",
                      "statusMessage": "TECHNICAL_ERROR",
                      "statusCode": 500,
                      "responseDateTime": "2023-03-09T10:23:30.749Z",
                      "timeTakenMs": 36
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/vts-apple-push-data": {
        "post": {
          "tags": [
            "Mobile Payment Operations"
          ],
          "summary": "Issuer service aimed to generate data specific elements for push provisioning with ApplePay (MBPAD, MBPAC)",
          "operationId": "vtsApplePushDataUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "X-Issuer-Id",
              "in": "header",
              "description": "Issuer ID (referenced as coid in I-TSP configuration)",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-Request-Id",
              "in": "header",
              "description": "Unique ID for the API request",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseApplePayPushProvisioning"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": true
        }
      },
      "/issuers/{issuerId}/vts-mobile-banking-auth-code": {
        "post": {
          "tags": [
            "Mobile Payment Operations"
          ],
          "summary": "Issuer service aimed to generate data specific elements for app to app provisioning (MBAAC)",
          "operationId": "vtsPushProvisioningRequestUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "X-Issuer-Id",
              "in": "header",
              "description": "Issuer ID (referenced as coid in I-TSP configuration)",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-Request-Id",
              "in": "header",
              "description": "Unique ID for the API request",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityMobileBankingAppAuthCodeResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": true
        }
      },
      "/issuers/{issuerId}/vts-payment-instrument-details": {
        "post": {
          "tags": [
            "Mobile Payment Operations"
          ],
          "summary": "Issuer service aimed to generate data specific elements for push provisioning for VTS",
          "operationId": "vtsPushProvisioningRequestUsingPOST_1",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "X-Issuer-Id",
              "in": "header",
              "description": "Issuer ID (referenced as coid in I-TSP configuration)",
              "required": false,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-Request-Id",
              "in": "header",
              "description": "Unique ID for the API request",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityVtsPushProvisioningResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": true
        }
      },
      "/health": {
        "get": {
          "tags": [
            "HealthCheck"
          ],
          "summary": "getHealthCheckResponse",
          "operationId": "getHealthCheckResponseUsingGET",
          "description": "This API enables the caller to check globally the status of our solution. This can be considered as a watch-dog message.",
          "produces": [
            "*/*"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/apiResponseEntityHealthCheckStatus"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/info": {
        "get": {
          "tags": [
            "Api Meta Info"
          ],
          "summary": "Retrieve API Metadata Information",
          "operationId": "info",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityInfo"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers": {
        "get": {
          "tags": [
            "Issuer"
          ],
          "summary": "List issuers",
          "operationId": "listIssuers",
          "description": "This API enables to retrieve the list of issuer configured in our solution.\nIn response a list is provided with the name of the issuer and for each issuer if a parent issuer level is present. (In our solution, an issuer hierarchy can be set-up)",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "rootIssuer",
              "in": "query",
              "description": "rootIssuer : allow to retrieve the hierarchy of issuer starting from this root issuer",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListIssuer"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
     "/issuers/{issuerId}/cards/{cardReference}/letters/{letterId}": {
        "get": {
          "tags": [
            "Card - Letter"
          ],
          "summary": "Retrieve letter for the card (beta)",
          "operationId": "retrieveLetterCardRef",
          "description": "The API allows to retreive a specific letter for a card.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe card for which the letter is requested: It can be provided by using the card reference or the issuer external card reference\n•\tThe letter reference by providing the letterId\n\nIn return, the interface provides letter information for the requested card. Deleted letters are not returned by this interface.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "letterId",
              "in": "path",
              "description": "Letter Id",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRetrieveLetter"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Card - Letter"
          ],
          "summary": "Delete a letter for a card (beta)",
          "description": "The API allows to delete a letter for a card.\nThe main input fields requested by the API are:\n• The issuer ID\n• The card for which the letter deletion is requested: It can be provided by using the card reference or the issuer external card reference\n• The letter reference by providing the letterId\n\nThe following controls will be performed during letter deletion:\n- If a cut off hour is configured the deletion is allowed if the generation and deletion occurs during the same 24 hour period between one cut-off time and the next cut off time\n- if no cut off hour is configured then the letter can be deleted only on the same day it was generated",
          "operationId": "deleteLetterCardRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "letterId",
              "in": "path",
              "description": "Letter ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteCardLetterResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
       "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/letters/{letterId}": {
        "get": {
          "tags": [
            "Card - Letter"
          ],
          "summary": "Retrieve letter for a card by external reference (beta)",
          "operationId": "retrieveLetterCardExtRef",
          "description": "The API allows to retreive a specific letter for a card.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe card for which the letter is requested: It can be provided by using the card reference or the issuer external card reference\n•\tThe letter reference by providing the letterId\n\nIn return, the interface provides letter information for the requested card. Deleted letters are not returned by this interface.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "letterId",
              "in": "path",
              "description": "Letter Id",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRetrieveLetter"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Card - Letter"
          ],
          "summary": "Delete a letter for a card by external reference (beta)",
          "description": "The API allows to delete a letter for a card.\nThe main input fields requested by the API are:\n• The issuer ID\n• The card for which the letter deletion is requested: It can be provided by using the card reference or the issuer external card reference\n• The letter reference by providing the letterId\n\nThe following controls will be performed during letter deletion:\n- If a cut off hour is configured the deletion is allowed if the generation and deletion occurs during the same 24 hour period between one cut-off time and the next cut off time\n- if no cut off hour is configured then the letter can be deleted only on the same day it was generated",
          "operationId": "deleteLetterCardExtRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "letterId",
              "in": "path",
              "description": "Letter ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteCardLetterResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/letters/{letterId}/validate": {
        "post": {
          "tags": [
            "Card - Letter"
          ],
          "summary": "Validate a letter for a card (beta)",
          "operationId": "validateLetterCardRef",
          "description": "The API allows to validate a letter for a card.\nThe validation status of the letter must be VALIDATION_NEEDED.\nThe main input fields requested by the API are:\n• The issuer ID\n• The card for which the letter validation is requested: It can be provided by using the card reference or the issuer external card reference\n• The letter reference by providing the letterId\n\nAs a result, the validation status of the letter is changed to VALIDATED.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer Id",
              "required": true,
              "type": "string"
            },
            {
              "name": "letterId",
              "in": "path",
              "description": "Letter Id",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityValidateCardLetterResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
       "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/letters/{letterId}/validate": {
        "post": {
          "tags": [
            "Card - Letter"
          ],
          "summary": "Validate a letter for a card by external reference (beta)",
          "operationId": "validateLetterCardExtRef",
          "description": "The API allows to validate a letter for a card.\nThe validation status of the letter must be VALIDATION_NEEDED.\nThe main input fields requested by the API are:\n• The issuer ID\n• The card for which the letter validation is requested: It can be provided by using the card reference or the issuer external card reference\n• The letter reference by providing the letterId\n\nAs a result, the validation status of the letter is changed to VALIDATED.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer Id",
              "required": true,
              "type": "string"
            },
            {
              "name": "letterId",
              "in": "path",
              "description": "Letter Id",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityValidateCardLetterResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/generate-letter": {
        "post": {
          "tags": [
            "Card - Letter"
          ],
          "summary": "Generate letter for a card (beta)",
          "operationId": "generateLetterCardRef",
          "description": "The API allows to generate a letter for a card. \nThe main input fields requested by the API are:\n• The issuer ID\n• The card for which the letter generation is requested: It can be provided by using the card reference or the issuer external card reference\n• The letter template reference which is used to generate the letter\n\nDuring letter generation following controls will be performed:\n- If the template parameter is defined with a validator, the validator will be applied on the provided value.\n- If the template parameter is a list (display type = list), the system will check that the provided value belongs to the list.\n- If the template parameter is not modifiable, the system will check that the provided value is equal to dynamically computed value.\n- If the value is defined as invalid, the system will check that the provided value is not equal to dynamically computed value.\n- If the template is configured with a validator (xsd file for instance), the validator will be applied on the generated letter.\n- If the value is not provided in input, the value dynamically computed by the system will be used.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer Id",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GenerateCardLetterRequest"
              }
              }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGenerateCardLetterResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
       "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/generate-letter": {
        "post": {
          "tags": [
            "Card - Letter"
          ],
          "summary": "Generate letter for a card by external reference (beta)",
          "operationId": "generateLetterCardExtRef",
          "description": "The API allows to generate a letter for a card. \nThe main input fields requested by the API are:\n• The issuer ID\n• The card for which the letter generation is requested: It can be provided by using the card reference or the issuer external card reference\n• The letter template reference which is used to generate the letter\n\nDuring letter generation following controls will be performed:\n- If the template parameter is defined with a validator, the validator will be applied on the provided value.\n- If the template parameter is a list (display type = list), the system will check that the provided value belongs to the list.\n- If the template parameter is not modifiable, the system will check that the provided value is equal to dynamically computed value.\n- If the value is defined as invalid, the system will check that the provided value is not equal to dynamically computed value.\n- If the template is configured with a validator (xsd file for instance), the validator will be applied on the generated letter.\n- If the value is not provided in input, the value dynamically computed by the system will be used.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer Id",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GenerateCardLetterRequest"
              }
              }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGenerateCardLetterResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
       "/issuers/{issuerId}/cards/{cardReference}/prefilled-letter-templates/{letterTemplateReference}": {
        "get": {
          "tags": [
            "Card - Letter"
          ],
          "summary": "Get parameters for the defined letter templates (beta)",
          "operationId": "prefillLetterTemplatesCardRef",
          "description": "The API allows to retrieve the prefilled parameters of a letter template for a card.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe card for which the template parameters are requested: It can be provided by using the card reference or the issuer external card reference\n•\tThe letter template reference\n\nAs a result, the list of the letter template parameter names with the default values assigned to them, are returned, which can be used to prefill the letter template with default values.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "letterTemplateReference",
              "in": "path",
              "description": "Letter Template Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer Id",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityPrefilledLetterTemplatesResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/prefilled-letter-templates/{letterTemplateReference}": {
        "get": {
          "tags": [
            "Card - Letter"
          ],
          "summary": "Get parameters for the defined letter templates by external reference(beta)",
          "operationId": "prefillLetterTemplatesCardExtRef",
          "description": "The API allows to retrieve the prefilled parameters of a letter template for a card.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe card for which the template parameters are requested: It can be provided by using the card reference or the issuer external card reference\n•\tThe letter template reference\n\nAs a result, the list of the letter template parameter names with the default values assigned to them, are returned, which can be used to prefill the letter template with default values.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "letterTemplateReference",
              "in": "path",
              "description": "Letter Template Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer Id",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityPrefilledLetterTemplatesResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
       "/issuers/{issuerId}/cards/letter-templates": {
        "get": {
          "tags": [
            "Card - Letter"
          ],
          "summary": "List of available letter templates for cards (beta)",
          "operationId": "letterTemplateList",
          "description": "The API allows to retrieve the list of available letter templates for an Issuer related to the cards.\nThe main input fields are:\n•\tThe issuer ID\n\nIf requested, the API allows also to\trequest to enrich the response with additional data relative to the template parameters by using embedded fields.\n\nIn return, the interface provides the list of available letter templates for the requested issuer with the related parameters if requested.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
             {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "parameters"
                ]
              },
              "collectionFormat": "multi"
            },
             {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer Id",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRetrieveLetterTemplates"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
       "/issuers/{issuerId}/cards/letter-templates/{letterTemplateReference}": {
        "get": {
          "tags": [
            "Card - Letter"
          ],
          "summary": "Retrieve a specific letter template (beta)",
          "operationId": "retrieveLetterTemplate",
          "description": "The API  allows to retreive a specific letter template by its reference.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe letter template reference for which its details is requested\n\nIf requested, the API allows also to\trequest to enrich the response with additional data relative to the template parameters by using embedded fields.\n\nIn return, the interface provides letter template information with the related parameters if requested.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
             {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer Id",
              "required": true,
              "type": "string"
            },
             {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "parameters"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "name": "letterTemplateReference",
              "in": "path",
              "description": "Letter Template Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRetrieveLetterTemplate"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve account by external reference",
          "operationId": "retrieveAccountByIssuerExtRef",
          "description": "The \"retrieve account\" API allows the account details to be retrieved.\nThe main input fields are:\n- The issuer ID\n- The account for which the detail is requested: It can be provided by using the account reference or the issuer external account reference \n\nIt is also possible to request some additional data by using the embedded fields.\n\nIn return, the interface provides generic account information (mainly master data). For credit cards, payment mode, the due amount calculation is provided back.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "childrenAccountIdentifiers",
                  "insuranceContracts",
                  "loyaltyPoints",
                  "selectedModels",
                  "statusHistory",
                  "rootAccount",
                  "hierarchyOperationStatusHistory"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAccount"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Account"
          ],
          "summary": "Update account parameters by external reference",
          "description": "The \"update account parameters\" API allows the list of pre-defined parameters (attributes) of an account to be updated.\nThe main input fields requested by the API are:\n- The issuer ID\n- The account for which updates are required: It can be provided by using the account reference or the issuer external account reference\n- Parameters to be updated\n\nThe account information can be initially retrieved by using the retrieve Account API.\nThe updated parameters should be consistent with the initial product configuration defined in the system.\n(e.g a change of closure calendar is accepted only if the provided calendar reference is allowed in the product definition).\nThis API is used for example to change the IBAN, closure date.",
          "operationId": "modifyAccountByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ModifyAccountRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyAccountResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/account-future-updates": {
        "get": {
          "tags": [
            "Account - Future Update"
          ],
          "summary": "Retrieve list of future changes of the account by external reference",
          "description": "The API is used to get the account updates that have to be applied at a schedule date.\nThe main input fields requested by the API are:\n- The issuer ID\n- The account involved by the change: It can be provided by using the account reference or the issuer external account reference\nIn response, a list of updates with the schedule date is provided.\n\nIt is also possible to request the account updates planned in the past and already processed.",
          "operationId": "listAccountFutureUpdatesByIssuerExtRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "all",
              "in": "query",
              "description": "Retrieve also updates already processed",
              "required": false,
              "type": "boolean",
              "default": false
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListAccountFutureUpdate"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Account - Future Update"
          ],
          "summary": "Schedule new account parameters update in future by external reference",
          "description": "The API is used to enter the account updates that should be applied on a schedule date.\nThe main input fields requested by the API are:\n- The issuer ID\n- The account involved by the change: It can be provided by using the account reference or the issuer external account reference\n- The plan date\n- The updates",
          "operationId": "createAccountFutureUpdateByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateAccountFutureUpdateRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAccountFutureUpdateResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/account-future-updates/{futureChangeReference}": {
        "get": {
          "tags": [
            "Account - Future Update"
          ],
          "summary": "Retrieve future changes for the account by external reference",
          "description": "The API allows to get the account updates that have to be applied at a schedule date.\nThe main input fields requested by the API are:\n- The issuer ID\n- The account involved by the change: It can be provided by using the account reference or the issuer external account reference\n- The future change reference (unique per account)",
          "operationId": "retrieveAccountFutureUpdateByIssuerExtRefAndFutureRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "futureChangeReference",
              "in": "path",
              "description": "future change reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAccountFutureUpdate"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Account - Future Update"
          ],
          "summary": "Update future changes of the account by external reference",
          "description": "The API is used to modify the account updates that should be applied on a schedule date (not yet reached).\nThe main input fields requested by the API are:\n- The issuer ID\n- The account involved by the change: It can be provided by using the account reference or the issuer external account reference\n- The future change reference (unique per account)\n- The updates\n- The reason of the future update modification",
          "operationId": "modifyAccountFutureUpdateByExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "futureChangeReference",
              "in": "path",
              "description": "Future Change Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ModifyAccountFutureUpdateRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyAccountFutureUpdateResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/account-guarantor": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve account guarantor for an account by external reference",
          "operationId": "retrieveAccountGuarantorByIssuerExtRef",
          "description": "The API allows information on the account guarantor to be retrieved.\nThe main input fields are:\n- The issuer ID\n- The account for which information is requested.\n\nIt is also possible to request additional data like addresses by using the embedded fields.\n\nThe API response contains :\n- either customer information if the contract owner is a person\n- or company information if the contract owner is a company.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressIdentifiers",
                  "addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityContractMember"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/account-history": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve list of historic updates of an account by external reference",
          "description" :"The API allows the account update history of an account to be retrieved.\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe account for which information is requested : It can be provided by using the account reference or the issuer account external reference.\nA start date and an end date can be provided in order to limit the search of the history.\nIn response, the interface provides a list of changes with the effective date of the update.",
          "operationId": "listAccountHistoryByIssuerExtRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "periodStartDateTime",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Format : yyyy-MM-ddTHH:mm:ssZ"
            },
            {
              "name": "periodEndDateTime",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Format : yyyy-MM-ddTHH:mm:ssZ"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListAccountHistory"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/account-owner": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve account owner for an account by external reference",
          "operationId": "retrieveAccountOwnerByIssuerExtRef",
          "description": "The API allows information on the account owner to be retrieved.\nThe main input fields are:\n- The issuer ID\n- The account for which information is requested.\n\nIt is also possible to request additional data like addresses by using the embedded fields.\n\nThe API response contains :\n- either customer information if the contract owner is a person\n- or company information if the contract owner is a company",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressIdentifiers",
                  "addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityContractMember"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/authorization-business-cases": {
        "get": {
          "tags": [
            "Account - Authorization"
          ],
          "summary": "Get business cases by external account reference",
          "operationId": "getBusinessCasesByExternalAccountReferenceUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "endTime",
              "required": true,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "startTime",
              "required": true,
              "type": "string",
              "format": "date-time"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetBusinessCases"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/authorization-business-cases/{businessCaseId}": {
        "get": {
          "tags": [
            "Account - Authorization"
          ],
          "summary": "Get business case by external account reference",
          "description": "This operation enables to retrieve the details of an authorization identified by its business case Id.",
          "operationId": "getBusinessCaseByExternalAccountReferenceUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "businessCaseId",
              "in": "path",
              "description": "businessCaseId",
              "required": true,
              "type": "string"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "example: 2012-12-31T22:00:00.000\nEnd of time period (excluded) for which transactions have to be provided.",
              "required": true,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "example: 2012-12-31T22:00:00.000\nStart of time period (included) for which transactions have to be provided.",
              "required": true,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi",
              "allowEmptyValue": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetBusinessCase"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/authorization-restrictions": {
        "get": {
          "tags": [
            "Account - Authorization Restriction"
          ],
          "summary": "Get authorization restrictions by external account reference",
          "operationId": "getAuthorizationRestrictionsByExternalAccountReferenceUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetAuthorizationRestrictions"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/authorization-restrictions/{authorizationRestrictionReference}/authorization-restriction-overrides": {
        "get": {
          "tags": [
            "Account - Authorization Restriction"
          ],
          "summary": "Get authorization restriction overrides by external account reference",
          "operationId": "getAuthorizationRestrictionOverridesByExternalAccountReferenceUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "all",
              "in": "query",
              "description": "all",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "name": "authorizationRestrictionReference",
              "in": "path",
              "description": "authorizationRestrictionReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetAuthorizationRestrictionOverrides"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Account - Authorization Restriction"
          ],
          "summary": "Create authorization restriction override by external account reference",
          "operationId": "createAuthorizationRestrictionOverrideByExternalAccountRefUsingPOST_1",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionReference",
              "in": "path",
              "description": "authorizationRestrictionReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateAuthorizationRestrictionOverrideRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAuthorizationRestrictionOverride"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/authorization-restrictions/{authorizationRestrictionReference}/authorization-restriction-overrides/{authorizationRestrictionOverrideReference}": {
        "get": {
          "tags": [
            "Account - Authorization Restriction"
          ],
          "summary": "Get authorization restriction override by external account reference",
          "operationId": "getAuthorizationRestrictionOverrideByExternalAccountReferenceUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionOverrideReference",
              "in": "path",
              "description": "authorizationRestrictionOverrideReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionReference",
              "in": "path",
              "description": "authorizationRestrictionReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetAuthorizationRestrictionOverride"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Account - Authorization Restriction"
          ],
          "summary": "Modify authorization restriction override by external account reference",
          "operationId": "modifyAuthorizationRestrictionOverrideByExternalAccountRefUsingPUT_1",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionOverrideReference",
              "in": "path",
              "description": "authorizationRestrictionOverrideReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionReference",
              "in": "path",
              "description": "authorizationRestrictionReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ModifyAuthorizationRestrictionOverrideRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyAuthorizationRestrictionOverride"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Account - Authorization Restriction"
          ],
          "summary": "Delete authorization restriction override by external account reference",
          "operationId": "deleteAuthorizationRestrictionOverrideByExternalAccountRefUsingDELETE_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionOverrideReference",
              "in": "path",
              "description": "authorizationRestrictionOverrideReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionReference",
              "in": "path",
              "description": "authorizationRestrictionReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteAuthorizationRestrictionOverride"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/authorizations": {
        "get": {
          "tags": [
            "Account - Authorization"
          ],
          "summary": "Get authorizations by external account reference",
          "operationId": "getAuthorizationsByExternalAccountReferenceUsingGET_1",
          "description": "This operation enables to retrieve a list of authorizations associated to an account for a given period.\nIn response, for each authorization, the main properties of the authorization are provided such as the type of operation, the amount, the result code, the acceptance context.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Example: 2012-12-31T22:00:00.000\nEnd of time period (excluded) for which transactions have to be provided.",
              "required": true,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Example: 2012-12-31T22:00:00.000\nStart of time period (included) for which transactions have to be provided.",
              "required": true,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi",
              "allowEmptyValue": false
            },
            {
              "name": "page",
              "in": "query",
              "description": "Page",
              "required": false,
              "type": "integer",
              "default": 0,
              "format": "int32",
              "allowEmptyValue": false
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Offset,  maximum: 100",
              "required": false,
              "type": "integer",
              "default": 100,
              "format": "int32",
              "allowEmptyValue": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetAuthorizations"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/authorizations/{authorizationId}": {
        "get": {
          "tags": [
            "Account - Authorization"
          ],
          "summary": "Get authorization by external account reference",
          "description": "This operation enables to retrieve the details of an authorization identified by its transaction Id.",
          "operationId": "getAuthorizationByExternalAccountReferenceUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "authorizationId",
              "in": "path",
              "description": "authorizationId",
              "required": true,
              "type": "string"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Example: 2012-12-31T22:00:00.000\nEnd of time period (excluded) for which transactions have to be provided.",
              "required": true,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Not used, will be removed",
              "required": true,
              "type": "string"
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Example: 2012-12-31T22:00:00.000\nStart of time period (included) for which transactions have to be provided.",
              "required": true,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi",
              "allowEmptyValue": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetAuthorization"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/balance": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve financial information by external reference",
          "operationId": "retrieveAccountBalanceByIssuerExtRef",
          "description": "The API allows financial information of an account to be retrieved (not relevant for a debit card).\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe account for which information is requested.\nIn response, different information is returned, such as account balance, sum of all operations (scheme operations, fees, ect) posted to the account (accepted amount), current open to buy amount (credit and prepaid accounts only).",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAccountBalance"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/contract": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve contract for an account by external reference",
          "operationId": "retrieveContractForAccountByIssuerExtRef",
          "description": "The API enables the contract data for a given account to be retrieved.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "advertisementFlags",
                  "deliveryChannel",
                  "legitimacyDocuments",
                  "contractFees",
                  "accountIdentifiers",
                  "accounts",
                  "cardContractIdentifiers",
                  "cardContracts",
                  "cardContracts.cards",
                  "dataAnalysisFlags",
                  "contractCustomerIdentifiers",
                  "contractCustomers",
                  "addonSubscriptions"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/corporate-contract": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve corporate contract for an account by external reference (beta)",
          "operationId": "retrieveCorporateContractForAccountByIssuerExtRef",
          "description": "The API allows the corporate contract detail of an account to be retrieved. \n\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe account for which the corporate contract information is requested: It can be provided by using the account reference or the issuer account external reference. \n\nIt is also possible to request some additional data, such as list of corporate contract entities (limited to 100), list of all customers (limited to 100), list of all companies (limited to 100), list of corporate employee accounts (limited to 100), root account linked to this corporate contract, by using the embedded fields.\n\nIn return, the interface provides the corporate contract details.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "corporateContractEntities",
                  "contractCustomers",
                  "contractCompanies",
                  "corporateEmployeeAccounts",
                  "rootAccount"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCorporateContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/credit-limit": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve account credit limit by external reference",
          "operationId": "retrieveAccountCreditLimitByIssuerExtRef",
          "description": "The API allows the permanent credit limit for a given account to be retrieved.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreditLimit"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Account"
          ],
          "summary": "Update account credit limit by external reference",
          "operationId": "modifyCreditLimitByIssuerExtRef",
          "description": "The API allows the permanent credit limit for a given account to be updated.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCreditLimitRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCreditLimitResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/credit-transfers": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "List outgoing credit transfers for an account by external reference",
          "operationId": "listCreditTransfersByIssuerAccExtRef",
          "description": "The API allows the list of credit transfers posted for an account to be retrieved.\nThis API applies to the credit cards domain.\nA credit transfer can be posted to an account to pay the due amount (for eg, self-payer).",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCreditTransfer"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/direct-debits": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "List direct debits for an account by external reference",
          "operationId": "listDirectDebitsByIssuerAccExtRef",
          "description": "The API allows the list of sepa and non sepa direct debit notes generated from an account to repay its due amount to be retrieved.\nThis API applies to the credit cards domain.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListDirectDebit"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/insurance-contracts": {
        "get": {
          "tags": [
            "Account - Insurance Contract"
          ],
          "summary": "List insurance contracts for an account by external reference",
          "operationId": "listInsuranceContractsByIssuerAccExtRef",
          "description": "The API allows the list of insurance contracts for an account to be retrieved. \nThe main input fields requested by the API are:\n- The issuer ID\n- The account for which info is requested: It can be provided by using the account reference or the issuer external account reference.\n\nIn return, the list of insurance contracts is provided with the subscribed insurance package, the insurance events, the latest occurring events and the status for each contract.\nThe list of insurance events and their codes are pre-defined and configured in the insurance package.\nThe contracts with a closed status are not provided back.\nThe possible statuses of insurance contracts are:\n- ACTIVE,\n- INTERRUPTED,\n- DISABLED,\n- CLOSED\n\nThe statuses depends on the insurance events configuration.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListInsuranceContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Account - Insurance Contract"
          ],
          "summary": "Create insurance contract by external reference",
          "operationId": "createInsuranceContractByIssuerAccExtRef",
          "description": "The API allows an insurance contract for an account to be activated if the activation was not requested at the contract creation.\nThe main input fields requested by the API are:\n- The issuer ID\n- The account for which info is requested: It can be provided by using the account reference or the issuer external account reference\n- The insurance package reference\n- The insurance event code for activation if the activation by default is not defined in the product setup.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateInsuranceContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateInsuranceContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/insurance-contracts/{insurancePackageReference}": {
        "get": {
          "tags": [
            "Account - Insurance Contract"
          ],
          "summary": "Retrieve an insurance contract for an account by external reference",
          "operationId": "retrieveInsuranceContractByIssuerAccExtRef",
          "description": "The API allows an insurance contract for an account to be retrieved.\nThe main input fields requested by the API are:\n- The issuer ID\n- The account for which info is requested: It can be provided by using the account reference or the issuer external account reference\n- The insurance package reference.\n\nIn return, the insured events and the latest occurring events for the account and insurance package reference are returned.\nThe list of insurance events and their codes are a pre-defined and configured in the insurance package.\nThe contracts with a closed status are not provided back.\nThe possible statuses of insurance contracts are:\n- ACTIVE,\n- INTERRUPTED,\n- DISABLED,\n- CLOSED\n\nThe statuses depends on the insurance events configuration.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "insurancePackageReference",
              "in": "path",
              "description": "Insurance package reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "insuranceEvents"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityInsuranceContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Account - Insurance Contract"
          ],
          "summary": "Close insurance contract by external reference",
          "operationId": "closeInsuranceContractByIssuerAccExtRef",
          "description": "The API allows an insurance contract for an account to be closed.\nThe main input fields requested by the API are:\n- The issuer ID\n- The account for which info is requested: It can be provided by using the account reference or the issuer external account reference\n- The insurance package identifier",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "insurancePackageReference",
              "in": "path",
              "description": "Insurance package reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCloseInsuranceContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/insurance-contracts/{insurancePackageReference}/insurance-events": {
        "post": {
          "tags": [
            "Account - Insurance Contract"
          ],
          "summary": "Add an insurance event to insurance contract for an account by external reference",
          "operationId": "createInsuranceEventByIssuerAccExtRef",
          "description": "The API is used to pst some events to an insurance contract. \nThe complete list of event is defined in the product setup. The actions linked to the event can be:\n- activate insurance,\n- deactivate insurance\n- stop the fee calculation.\n\nThe main input fields requested by the API are:\n- The issuer ID\n- The account for which info is requested: It can be provided by using the account reference or the issuer external account reference\n- The insurance package identifier",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "insurancePackageReference",
              "in": "path",
              "description": "Insurance package reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateInsuranceEventRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateInsuranceEventResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/operations": {
        "get": {
          "tags": [
            "Account - Operation"
          ],
          "summary": "List operations for an account by external reference",
          "operationId": "listOperationsByAccountIssuerExtRef",
          "description": "The API retrieves the list of operations for a given time period and a given account.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe account for which information is requested:  it can be provided by using the account reference or the issuer external account reference,\n•\tA given time period (start date / end date)\nIt is also possible \n- to request the list of operations for all account hierarchy, for a certain PAN only by providing a PAN reference\n- to include internal operations (failed, rejected) in the statements\n\nOperations can be a scheme transaction or an operation generated internally.\nThe number of operations provided back can be indicated in the page and offset input field.\nThe API returns the most important operation attributes such as: the operation type, the amounts and the operation context. \nFor the full list of operation attributes, the \"Retrieve operation\" API should be used.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "allAccountHierarchy",
              "in": "query",
              "description": "Retrieve operations for all account hierarchy (default = only account operations are listed )",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "name": "printOnStatement",
              "in": "query",
              "description": " the boolean parameter to indicate whether to include some manual operations in the statements",
              "required": true,
              "type": "boolean",
              "default": true
            },
            {
              "name": "panReference",
              "in": "query",
              "description": "Reference of the PAN",
              "required": false,
              "type": "string"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "To return the list of operations sorted by posting date / operation id. Available values : asc (for ascending sort) or desc (for descending sort)",
              "required": false,
              "type": "string"
            },
            {
              "name": "startTime",
              "in": "query",
              "required": true,
              "type": "string",
              "description": "Format : yyyy-MM-ddTHH:mm:ssZ"
            },
            {
              "name": "endTime",
              "in": "query",
              "required": true,
              "type": "string",
              "description": "Format : yyyy-MM-ddTHH:mm:ssZ"
            },
            {
              "name": "page",
              "in": "query",
              "description": "0",
              "required": false,
              "type": "integer",
              "default": 0,
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "100",
              "required": false,
              "type": "integer",
              "default": 100,
              "format": "int32"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Available values for embed : authorization, addendum (to retrieve lodgingInformation, carRentalInformation, airItineraryInformation) ",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "authorization",
                  "addendum"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListOperation"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/operations/{operationId}": {
        "get": {
          "tags": [
            "Account - Operation"
          ],
          "summary": "Retrieve operation by external reference",
          "operationId": "retrieveOperationByAccountIssuerExtRef",
          "description": "The API retrieves the detail of an operation for an account.\nIt is also possible to request explicitly the operations linked to the current one by using the embedded field filled with parentOperation.\nA parent operation can be: the original operation when the requested operation is a reversal, relative fee operations linked to the current operation, refund/redebit operations for disputed transaction,..\nIn response, exhaustive information are provided that includes additional amounts if available (cash-back amount, DCC amount, gratuity amount, surcharge amount), exchange rate information,..",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "operationId",
              "in": "path",
              "description": "Operation ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Available values for embed : parentOperation, authorization, addendum (to retrieve lodgingInformation, carRentalInformation, airItineraryInformation) ",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "parentOperation",
                  "authorization",
                  "addendum"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityOperationDetails"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/post-balance-adjustment-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Post a balance adjustment operation for an account by external reference",
          "operationId": "postBalanceAdjustmentOperationByIssuerExtRef",
          "description": "The API is used to generate a balance adjustment operation on an account.\nThe input account can be provided by using:\n- the account reference\n- or the issuer external account reference.\n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once.The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateOperationBalanceAdjustmentRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateOperationBalanceAdjustmentResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/post-fee-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Post a fee operation for an account by external reference",
          "operationId": "postFeeOperationByIssuerExtRef",
          "description": "The API is used to post a fee operation to an account. \nThe fee type is mandatory, and the value must be consistent with the list defined during product definition. \nThis list is shared between WL and the issuer during the project phase.\nAs an input, the account identifier can be provided by using:\n- the account reference generated by WL\n- or the issuer external account reference \n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateOperationFeeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateOperationFeeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/reset-balance": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Reset the balance of an account by external reference",
          "operationId": "resetBalanceByIssuerExtRef",
          "description": "The API resets the balance of an account by generating : \n a credit operation (for a debit balance) \n a debit operation (for a credit balance) \n\n As an input, the account identifier can be provided by using: \n the account reference generated by WL \n or the issuer external account reference \n This is relevant only for credit cards. \n Idempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ResetBalanceRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityResetBalanceResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/post-payment-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Post a payment operation for an account by external reference",
          "operationId": "postPaymentOperationByIssuerExtRef",
          "description": "The API allows a payment operation to an account to be generated and posted.\nA payment operation is used to pay the due amount. \nIf the amount provided is greater than the due amount, the overpayment can be posted to another account if provided.\nAs an input, the account identifier can be provided by using:\n- the account reference generated by WL\n- or the issuer external account reference \n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateOperationPaymentRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateOperationPaymentResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/post-reimbursement-operation": {
        "post": {
          "x-wl-idempotent": true, 
          "tags": [
            "Account - Operation"
          ],
          "summary": "Post a reimbursement operation by external reference",
          "operationId": "postReimbursementOperationByIssuerExtRef",
          "description": "The API allows a reimbursement operation to an account to be generated and posted.\nA reimbursement operation can be used when the account is in a credit situation.\nAs an input, the account identifier can be provided by using:\n- the account reference generated by WL\n- or the issuer external account reference \n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateOperationReimbursementRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateOperationReimbursementResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/post-load-operation": {
        "post": {
          "x-wl-idempotent": true, 
          "tags": [
            "Account - Operation"
          ],
          "summary": "Load an account by external reference",
          "operationId": "postLoadOperationByIssuerExtRef",
          "description": "The API allows an account to be loaded.\nA load operation is used for prepaid cards to put money in an account.\nThe operation can have a control on the amount authorized and trigger a load operation fee, if it is configured.\nAs an input, the account identifier can be provided by using:\n- the account reference generated by WL\n- or the issuer external account reference \n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateOperationLoadRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateOperationLoadResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/post-unload-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Unload an account by external reference",
          "operationId": "postUnloadOperationByIssuerExtRef",
          "description": "The API allows an account to be unloaded. An unload operation is used for prepaid cards  to retrieve money from an account.\nThe operation can have a control on the amount authorized.\nAs an input, the account identifier can be provided by using:\n- the account reference generated by WL\n- or the issuer external account reference \n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateOperationUnloadRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateOperationUnloadResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/reverse-balance-adjustment-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Reverse a balance adjustment operation for an account by external reference",
          "operationId": "reverseBalanceAdjustmentOperationByIssuerExtRef",
          "description": "The API is used to reverse a balance adjustment operation on an account.\nAs an input, the account identifier can be provided by using:\n- the account reference generated by WL\n- or the issuer external account reference\n\nThe balance adjustment operation to be reversed must be provided. \nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReverseOperationBalanceAdjustmentRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReverseOperationBalanceAdjustmentResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/reverse-fee-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Reverse a fee operation for an account by external reference",
          "operationId": "reverseFeeOperationByIssuerExtRef",
          "description": "The API is used to reverse a fee operation on an account.\nAs an input, the account identifier can be provided by using:\n- the account reference generated by WL\n- or the issuer external account reference\n\nThe fee type is mandatory. It must be consistent with the product definition. \nThe list of values is shared between WL and the issuer. \nThe fee reference to be reversed must be provided. \nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReverseOperationFeeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReverseOperationFeeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/reverse-payment-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Reverse a payment operation for an account (full reversal) by external reference",
          "operationId": "reversePaymentOperationByIssuerExtRef",
          "description": "The API allows a payment reversal operation on an account.\nA payment reversal can be requested when a direct debit returns unpaid.\nAs an input, the account identifier can be provided by using:\n- the account reference generated by WL\n- or the issuer external account reference\n\nThe payment reference to be reversed must be provided. \nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReverseOperationPaymentRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReverseOperationPaymentResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/statements": {
        "get": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "List statements for an account by external reference",
          "operationId": "listStatementsByAccountIssuerExtRef",
          "description": "The API is used to get the list of statements generated for an account and optionally a requested period.\nIt is also possible to get reprint information of a statement.\nThe input parameters are:\n- the involved account: it can be provided by using the account reference or the issuer external account reference,\n- the search period (start date / end date),\n- the embed field \"reprint-history\" if needed.\n\nThe API returns:\n•\tin the consumer cards context, the list of statements of the paying account\n•\tin the commercial cards context, the list of statements of the employee account whether it is paid by another account or not. \n\nIn response, the list of statement is provided with the  financial information of each statement such as:\nprevious cycle balance (start balance), end cycle balance, due amount, total of payments, ...",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "periodStartDateTime",
              "in": "query",
              "description": "Period start date of cycle closure to include (format : yyyy-MM-ddTHH:mm:ssZ)",
              "required": false,
              "type": "string"
            },
            {
              "name": "periodEndDateTime",
              "in": "query",
              "description": "Period end date of cycle closure to include (format : yyyy-MM-ddTHH:mm:ssZ)",
              "required": false,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "reprintHistory"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListStatement"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/cancel-delinquency": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "Cancel account delinquency by external reference",
          "description": "An account is in delinquency situation (the required minimum payment is overdue)\nThe API allows the delinquency situation of an account to be cancelled.\nAs an input, the account identifier is provided by using:\n•\tthe account reference generated by WL\n•\tor the issuer external account reference\nOptionally, the required overdue minimum payment can be cancelled. \nAs a result :\n•\tthe account is no more in delinquency situation\n•\tthe amount due (required overdue minimum payment) is cancelled if this has been requested.",
          "operationId": "cancelAccountDelinquencyByExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CancelAccountDelinquencyRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCancelAccountDelinquencyResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/turnover-information": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve turnover information for an account by external reference (beta)",
          "operationId": "retrieveTurnoverInformationByExtRef",
          "description": "The API returns current and historical turnover information of an account (for a monthly or annual turnover).",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityTurnoverInformation"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": true
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/turnovers": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve list of turnover for an account by external reference",
          "operationId": "listTurnoverByExtRef",
          "description": "This API returns a list of turnovers with the possibility to return only one type of turnover by providing the turnoverType as query parameter .\nFor each type of turnover, current turnover and historical data are returned.\nThe possible turnovers are : \n•\tthe turnover related to membership fee management (turnoverType=MEMBERSHIP_FEE). \nThis turnover :\n- is optional (depends on product configuration)\n- can be used for membership fee reimbursement (if any)\n- is calculated for a period based on the membership fee anniversary date \n\n•\tthe default turnover (turnoverType=DEFAULT)\nThis turnover :\n- is optional (depends on product configuration)\n- can be communicated to cardholder in statement\n- is used for automatic account setup fee reimbursement, if any. \n- is calculated for a period based on Account anniversary date or the contract anniversary date (depends on product configuration)",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "turnoverType",
              "in": "query",
              "description": "turnoverType : DEFAULT, MEMBERSHIP_FEE. If the parameter is not provided, all turnovers are returned (if available)",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityTurnover"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/statements/last": {
        "get": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "Retrieve last statement by external reference",
          "operationId": "retrieveLastStatementByAccountIssuerExtRef",
          "description": "The API is used to get the financial information of  the last statement generated for an account such as:\nprevious cycle balance (start balance), end cycle balance, due amount, total of payments, ...\nIt is also possible to get reprint information of the statement.\nThe input parameters are:\n- the involved account: it can be provided by using the account reference or the issuer external account reference,\n- the embed field \"reprint-history\" if needed.\n\nThe API returns:\n•\tin the consumer cards context, the statement of the paying account\n•\tin the commercial cards context, the statement of the employee account whether it is paid by another account or not.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "reprintHistory"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityStatement"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/statements/last/operations": {
        "get": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "List operations for last account statement by external reference",
          "description": "The API is used to get the list of operations of the last statement generated for an account.\nThe input account can be provided by using:\n- the account reference\n- or the issuer external account reference.",
          "operationId": "listLastStatementOperationsByAccountIssuerExtRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListOperation"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/statements/last/reprint": {
        "post": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "Reprint last statement by external reference",
          "description": "The API is used to request the reprint of the last statement for an account.\nThe input account can be provided by using:\n- the account reference\n- or the issuer external account reference.\n\nAs a result, the statement data is extracted again and pushed to the output management module",
          "operationId": "reprintLastStatementByAccountIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReprintStatementResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/statements/next": {
        "get": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "Retrieve next statement by external reference",
          "description": "The API is used to get the financial information based on the last statement generated for an account such as:\ncurrent cycle balance, cycle closure date, payment due date, next cycle closure date (end cycle balance, due amount, total of payments are not yet known).\nThe input parameters are:\n- the issuerId\n- the involved account: it can be provided by using the account reference or the issuer external account reference,\n\nThe API returns:\n•\tin the consumer cards context, the statement of the paying account\n•\tin the commercial cards context, the statement of the employee account whether it is paid by another account or not.",
          "operationId": "retrieveNextStatementByAccountIssuerExtRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "reprintHistory"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityStatement"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/statements/next/operations": {
        "get": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "List operations for next account statement by external reference",
          "description": "The API is used to get the list of operations generated for an account since the last cycle closure date. \nThose operations will be part of the next statement.\nThe input account can be provided by using:\n- the account reference\n- or the issuer external account reference.",
          "operationId": "listNextStatementOperationsByAccountIssuerExtRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListOperation"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/statements/{cycleClosureDate}": {
        "get": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "Retrieve statement by external reference",
          "description": "The API is used to get the financial information  for an account statement such as: previous cycle balance (start balance), end cycle balance, due amount, total of payments, ...\nThe input account can be provided by using:\n•\tthe account reference\n•\tor the issuer external account reference.\nThe statement involved by the request has to be provided by giving the cycle closure date.\n\nThe API returns:\n•\tin the consumer cards context, the statement of the paying account\n•\tin the commercial cards context, the statement of the employee account whether it is paid by another account or not.",
          "operationId": "retrieveStatementByAccountIssuerExtRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "cycleClosureDate",
              "in": "path",
              "description": "Cycle Closure Date (format : yyyy-MM-ddTHH:mm:ssZ)\nHH:mm:ss should be filled with 23:59:59",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "reprintHistory"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityStatement"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/statements/{cycleClosureDate}/operations": {
        "get": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "List operations for an account statement by external reference",
          "description": "The API is used to get the list of operations posted to an account included in a statement.\nThe input account can be provided by using:\n- the account reference\n- or the issuer external account reference.\n\nThe statement involved by the request has to be provided by giving the cycle closure date.",
          "operationId": "listStatementOperationsByAccountIssuerExtRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "cycleClosureDate",
              "in": "path",
              "description": "Cycle Closure Date (format : yyyy-MM-ddTHH:mm:ssZ)\nHH:mm:ss should be filled with 23:59:59",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListOperation"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/statements/{cycleClosureDate}/reprint": {
        "post": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "Reprint a statement by external reference",
          "description": "The API is used to request the reprint of a statement for an account.\nThe input account can be provided by using:\n- the account reference\n- or the issuer external account reference.\n\nThe statement involved by the request has to be provided by giving the cycle closure date\n\nAs a result, the statement data is extracted again and pushed to the output management module.",
          "operationId": "reprintStatementByAccountIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "cycleClosureDate",
              "in": "path",
              "description": "Cycle Closure Date (format : yyyy-MM-ddTHH:mm:ssZ)\nHH:mm:ss should be filled with 23:59:59",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReprintStatementResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/temporary-credit-limits": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "List temporary credit limits for an account by external reference",
          "operationId": "listTemporaryCreditLimitForAccountByIssuerExtRef",
          "description": "The API allows the temporary credit limits for a given account to be retrieved.\nIt is possible to request either only the active temporary credit limit or the history of temporary limits for the account.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "all",
              "in": "query",
              "description": "By default return only active temporary Credit Limits",
              "required": false,
              "type": "boolean",
              "default": false
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListTemporaryCreditLimit"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Account - Temporary Credit Limit"
          ],
          "summary": "Create a temporary credit limit by external reference",
          "description": "Our solution  offers to Issuers a temporary credit limit management for credit card account\nThe temporary credit limit can be added to an existing credit card account\n- for a given period\n- the temporary credit limit value can be higher or lower than the permanent one but is limited by an exceptional amount, which is allowed by the Issuer per product\n\nThe API allows temporary credit limits for a given account to be created.\n\nIn response, a temporary credit limit reference is provided.\nOnce added, the temporary credit limit is immediately available for next authorizations.",
          "operationId": "createTemporaryCreditLimitByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateTemporaryCreditLimitRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateTemporaryCreditLimitResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/temporary-credit-limits/{temporaryCreditLimitReference}": {
        "delete": {
          "tags": [
            "Account - Temporary Credit Limit"
          ],
          "summary": "Delete a temporary credit limit by external reference",
          "description": "An existing temporary credit limit (active or scheduled) can be disabled at any moment\nThe API allows a temporary credit limit for a given account to be deleted by providing the temporary credit limit reference.",
          "operationId": "deleteTemporaryCreditLimitByIssuerExtRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "temporaryCreditLimitReference",
              "in": "path",
              "description": "Temporary credit limit reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteTemporaryCreditLimitResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/velocity-limits": {
        "get": {
          "tags": [
            "Account - Velocity Limit"
          ],
          "summary": "Get velocity limits by external account reference",
          "operationId": "getVelocityLimitsByExternalAccountReferenceUsingGET_1",
          "description": "Operation which provides the currently effective velocity limit counters and parameters of an account.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetVelocityLimits"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/velocity-limits/{velocityLimitReference}": {
        "get": {
          "tags": [
            "Account - Velocity Limit"
          ],
          "summary": "Get velocity limit by external account reference",
          "operationId": "getVelocityLimitByExternalAccountReferenceUsingGET_1",
          "description": "Operation which provides the currently effective velocity limit counters and parameters of an account for a given velocity limit reference.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Not used, will be removed.",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitReference",
              "in": "path",
              "description": "velocityLimitReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetVelocityLimit"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/velocity-limits/{velocityLimitReference}/velocity-limit-overrides": {
        "get": {
          "tags": [
            "Account - Velocity Limit"
          ],
          "summary": "Get velocity limit overrides by external account reference",
          "operationId": "getVelocityLimitOverridesByExternalAccountRefUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "all",
              "in": "query",
              "description": "all",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitReference",
              "in": "path",
              "description": "velocityLimitReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetVelocityOverrides"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Account - Velocity Limit"
          ],
          "summary": "Create velocity limit override by external account reference",
          "operationId": "createVelocityLimitOverrideByExternalAccountRefUsingPOST_1",
          "description": "Operation which inserts a new velocity limit override. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateVelocityLimitOverrideRequest"
              }
            },
            {
              "name": "velocityLimitReference",
              "in": "path",
              "description": "velocityLimitReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateVelocityLimitOverride"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/velocity-limits/{velocityLimitReference}/velocity-limit-overrides/{velocityLimitOverrideReference}": {
        "get": {
          "tags": [
            "Account - Velocity Limit"
          ],
          "summary": "Get velocity limit override by velocity limit and external account reference",
          "operationId": "getVelocityLimitOverrideByVelocityLimitAndExternalAccountRefUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitOverrideReference",
              "in": "path",
              "description": "velocityLimitOverrideReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitReference",
              "in": "path",
              "description": "velocityLimitReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetVelocityOverride"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Account - Velocity Limit"
          ],
          "summary": "Modify velocity limit override by external account reference",
          "operationId": "modifyVelocityLimitOverrideByExternalAccountRefUsingPUT_1",
          "description": "Operation which updates an existing velocity limit override.\nThe update is performed only on the passed attributes. Attributes which are not passed are not modified.\nOptional attributes can be set to null by means of the JSON null value.\nFor an insert at least all mandatory attributes must be passed",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ModifyVelocityLimitOverrideRequest"
              }
            },
            {
              "name": "velocityLimitOverrideReference",
              "in": "path",
              "description": "velocityLimitOverrideReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitReference",
              "in": "path",
              "description": "velocityLimitReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyVelocityLimitOverride"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Account - Velocity Limit"
          ],
          "summary": "Delete velocity limit override by external account reference",
          "operationId": "deleteVelocityLimitOverrideByExternalAccountRefUsingDELETE_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitOverrideReference",
              "in": "path",
              "description": "velocityLimitOverrideReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitReference",
              "in": "path",
              "description": "velocityLimitReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteVelocityLimitOverride"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/create-mandate": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "Create mandate by external reference",
          "description": "The API allows to create a SEPA mandate for the given account by using issuer account external reference or the account reference (generated by WL). \n- For SEPA mandate successful creation in mandate management system, the Iban, Iban owner name and mandate signature date are to be provided. As a result, mandate is created in \"Active\" status and is ready to be used.\n- It is also possible to attach an existing SEPA mandate (explicitly created in mandate management system in advance) to a given account. To succeed, unique mandate reference (UMR) is to be provided as an input. As a result, mandate is attached if exists in mandate management system and is in \"Active\" status.\n\nA mandate is an authorization that a debtor gives to a creditor in order to take payments from their customers bank accounts.",
          "operationId": "createMandateByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateMandateRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateMandateResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/cancel-mandate": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "Cancel mandate by external reference",
          "description": "The API allows to cancel SEPA mandate for the given account by using issuer account external reference or the account reference (generated by WL). \nThe SEPA mandate can be cancelled immediately or in the future at a date provided by the issuer.\n- For immediate cancellation, mandate is “Revoked” immediately in mandate management system.\n- For scheduled cancellation, mandate is not “Revoked” until the cancellation date is reached in mandate management system.",
          "operationId": "cancelMandateByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CancelMandateRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCancelMandateResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/post-interest-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Post an interest operation for an account by external reference",
          "description": "The API is used to post manually an interest operation to an account.\n\nAs an input it must be provided\n- the account, identified either by its account reference generated by WL or its issuer external account reference, on which the interest operation has to be posted \n- the interest operation itself, uniquely identified by its external reference, date and service poster, its amount in currency (monetary)\nNote: \n- the provided currency must be the same than the posting account\n- it is possible to post credit and debit interest operation \n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.\n\nAs a result, the interest operation is posted to the account and has an impact on the account balance, immediately or not depending on the provided value date.",
          "operationId": "postInterestOperationByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateOperationInterestRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateOperationInterestResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/reverse-interest-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Reverse an interest operation for an account (full reversal) by external reference",
          "description": "The API is used to fully reverse an interest operation previously posted on an account.\n\nAs an input, it must be provided\n- the account, identified either by its account reference generated by WL or its issuer external account reference, on which the interest operation was previously posted \n- the interest operation to be reversed\n- the information related to the reversal operation (reference, date, service poster) \n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "operationId": "reverseInterestOperationByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReverseOperationInterestRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReverseOperationInterestResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/post-bonus-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Post a Bonus operation for an account by external reference",
          "description": "The API is used to post manually a Bonus operation to an account.\nA Bonus operation is used to reward or adjust a given account (in credit or in debit, e.g. in case of too high, too low or missing reward).\nAs an input it must be provided\n- the account, identified either by its account reference generated by WL or its issuer external account reference, on which the bonus operation has to be posted \n- the related Bonus program, defined for the issuer and the account\n- the Bonus operation itself, uniquely identified by its external reference, date and service poster, its amount in currency (monetary) or loyalty point kind (non monetary)\nNote: \n- for monetary bonus the provided currency must be the same than the posting account, for non monetary bonus the provided loyalty point unit must be allowed by the Bonus program\n- it is possible to post credit and debit bonus operation\n\nIf the Bonus operation is related to an existing initial operation, this latter can be provided.\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.\n\nAs a result the Bonus operation is posted to the account. Monetary bonus has an immediate impact on the account balance.",
          "operationId": "postBonusOperationByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateOperationBonusRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateOperationBonusResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/reverse-bonus-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Reverse a Bonus operation for an account by external reference",
          "description": "The API is used to fully reverse a Bonus operation previously posted on an account.\n\nAs an input it must be provided\n- the account, identified either by its account reference generated by WL or its issuer external account reference, on which the bonus operation was previously posted \n- the Bonus operation to be reversed\n- the information related to the reversal operation (reference, date, service poster) \n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "operationId": "reverseBonusOperationByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReverseOperationBonusRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReverseOperationBonusResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/inquire-operation":{
        "post": {
          "tags": [
            "Account - Operation"
          ],
          "summary": "Retrieve an operation by external references triplet and account external reference",
          "description": "This API allows retrieving for an account a particular operation from its external references.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe account reference or the issuer external account reference\n•\tThe external references of the operation for which the detail is requested: The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifying the operation in our system must be provided.\nThe API response contains operation information.",
          "operationId": "inquireOperationByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Available values for embed : parentOperation, authorization, addendum (to retrieve lodgingInformation, carRentalInformation, airItineraryInformation) ",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "parentOperation",
                  "authorization",
                  "addendum"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/InquireOperationRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityInquireOperationResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve account",
          "operationId": "retrieveAccount",
          "description": "The \"retrieve account\" API allows the account details to be retrieved.\nThe main input fields are:\n- The issuer ID\n- The account for which the detail is requested: It can be provided by using the account reference or the issuer external account reference \n\nIt is also possible to request some additional data by using the embedded fields.\n\nIn return, the interface provides generic account information (mainly master data). For credit cards, payment mode, the due amount calculation is provided back.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "childrenAccountIdentifiers",
                  "insuranceContracts",
                  "loyaltyPoints",
                  "selectedModels",
                  "statusHistory",
                  "rootAccount",
                  "hierarchyOperationStatusHistory"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAccount"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Account"
          ],
          "summary": "Update account parameters",
          "description": "The \"update account parameters\" API allows the list of pre-defined parameters (attributes) of an account to be updated.\nThe main input fields requested by the API are:\n- The issuer ID\n- The account for which updates are required: It can be provided by using the account reference or the issuer external account reference\n- Parameters to be updated\n\nThe account information can be initially retrieved by using the retrieve Account API.\nThe updated parameters should be consistent with the initial product configuration defined in the system.\n(e.g a change of closure calendar is accepted only if the provided calendar reference is allowed in the product definition).\nThis API is used for example to change the IBAN, closure date.",
          "operationId": "modifyAccount",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ModifyAccountRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyAccountResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/bank-details": {
        "get": {
          "tags": [
            "Account - BankDetails"
          ],
          "summary": "Get Bank Details",
          "operationId": "getBankDetailsByAccountRefUsingGET",
          "produces": [
            "*/*"
          ],
          "parameters": [
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "endTime",
              "required": false,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "scope",
              "in": "query",
              "description": "scope",
              "required": false,
              "type": "string"
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "startTime",
              "required": false,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetBankDetails"
              }
            },
            "400": {
              "description": "Bad request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not found"
            },
            "500": {
              "description": "Internal server error"
            },
            "502": {
              "description": "Bad gateway"
            }
          },
          "security": [
            {
              "basic": []
            }
          ]
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{externalAccountReference}/bank-details": {
        "get": {
          "tags": [
            "Account - BankDetails"
          ],
          "summary": "Get Bank Details",
          "operationId": "getBankDetailsByExternalAccountRefUsingGET",
          "produces": [
            "*/*"
          ],
          "parameters": [
            {
              "name": "endTime",
              "in": "query",
              "description": "endTime",
              "required": false,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "externalAccountReference",
              "in": "path",
              "description": "externalAccountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "scope",
              "in": "query",
              "description": "scope",
              "required": false,
              "type": "string"
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "startTime",
              "required": false,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetBankDetails"
              }
            },
            "400": {
              "description": "Bad request"
            },
            "401": {
              "description": "Unauthorized"
            },
            "403": {
              "description": "Forbidden"
            },
            "404": {
              "description": "Not found"
            },
            "500": {
              "description": "Internal server error"
            },
            "502": {
              "description": "Bad gateway"
            }
          },
          "security": [
            {
              "basic": []
            }
          ]
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/account-future-updates": {
        "get": {
          "tags": [
            "Account - Future Update"
          ],
          "summary": "Retrieve list of future changes of the account",
          "description": "The API is used to get the account updates that have to be applied at a schedule date.\nThe main input fields requested by the API are:\n- The issuer ID\n- The account involved by the change: It can be provided by using the account reference or the issuer external account reference\nIn response, a list of updates with the schedule date is provided.\n\nIt is also possible to request the account updates planned in the past and already processed.",
          "operationId": "listAccountFutureUpdates",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "all",
              "in": "query",
              "description": "Retrieve also updates already processed",
              "required": false,
              "type": "boolean",
              "default": false
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListAccountFutureUpdate"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Account - Future Update"
          ],
          "summary": "Schedule new account parameters update in future",
          "description": "The API is used to enter the account updates that should be applied on a schedule date.\nThe main input fields requested by the API are:\n- The issuer ID\n- The account involved by the change: It can be provided by using the account reference or the issuer external account reference\n- The plan date\n- The updates",
          "operationId": "createAccountFutureUpdate",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateAccountFutureUpdateRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAccountFutureUpdateResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/account-future-updates/{futureChangeReference}": {
        "get": {
          "tags": [
            "Account - Future Update"
          ],
          "summary": "Retrieve future changes for the account",
          "description": "The API allows to get the account updates that have to be applied at a schedule date.\nThe main input fields requested by the API are:\n- The issuer ID\n- The account involved by the change: It can be provided by using the account reference or the issuer external account reference\n- The future change reference (unique per account)",
          "operationId": "retrieveAccountFutureUpdateByFutureRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "futureChangeReference",
              "in": "path",
              "description": "future change reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAccountFutureUpdate"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Account - Future Update"
          ],
          "summary": "Update future changes of the account",
          "description": "The API is used to modify the account updates that should be applied on a schedule date (not yet reached).\nThe main input fields requested by the API are:\n- The issuer ID\n- The account involved by the change: It can be provided by using the account reference or the issuer external account reference\n- The future change reference (unique per account)\n- The updates\n- The reason of the future update modification",
          "operationId": "modifyAccountFutureUpdate",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "futureChangeReference",
              "in": "path",
              "description": "Future Change Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ModifyAccountFutureUpdateRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyAccountFutureUpdateResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/account-future-updates/{futureChangeReference}/cancel": {
        "post": {
          "tags": [
            "Account - Future Update"
          ],
          "summary": "Cancel future changes of the account",
          "description": "The API is used to cancel the account updates that should be applied on a schedule date (not yet reached).\nThe main input fields requested by the API are:\n- The issuer ID\n- The account involved by the change: It can be provided by using the account reference or the issuer external account reference\n- The future change reference (unique per account)\n- The reason of the future update cancellation",
          "operationId": "cancelAccountFutureUpdate",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "futureChangeReference",
              "in": "path",
              "description": "Future Change Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CancelAccountFutureUpdateRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCancelAccountFutureUpdateResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/account-future-updates/{futureChangeReference}/cancel": {
        "post": {
          "tags": [
            "Account - Future Update"
          ],
          "summary": "Cancel future changes of the account by external reference",
          "description": "The API is used to cancel the account updates that should be applied on a schedule date (not yet reached).\nThe main input fields requested by the API are:\n- The issuer ID\n- The account involved by the change: It can be provided by using the account reference or the issuer external account reference\n- The future change reference (unique per account)\n- The reason of the future update cancellation ",
          "operationId": "cancelAccountFutureUpdateByExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "futureChangeReference",
              "in": "path",
              "description": "Future Change Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CancelAccountFutureUpdateRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCancelAccountFutureUpdateResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/account-guarantor": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve account guarantor for an account",
          "operationId": "retrieveAccountGuarantor",
          "description": "The API allows information on the account guarantor to be retrieved.\nThe main input fields are:\n- The issuer ID\n- The account for which information is requested.\n\nIt is also possible to request additional data like addresses by using the embedded fields.\n\nThe API response contains :\n- either customer information if the contract owner is a person\n- or company information if the contract owner is a company.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressIdentifiers",
                  "addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityContractMember"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/account-history": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve list of historic updates of an account",
          "description" :"The API allows the account update history of an account to be retrieved.\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe account for which information is requested : It can be provided by using the account reference or the issuer account external reference.\nA start date and an end date can be provided in order to limit the search of the history.\nIn response, the interface provides a list of changes with the effective date of the update.",
          "operationId": "listAccountHistory",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "periodStartDateTime",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Format : yyyy-MM-ddTHH:mm:ssZ"
            },
            {
              "name": "periodEndDateTime",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Format : yyyy-MM-ddTHH:mm:ssZ"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListAccountHistory"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/account-owner": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve account owner for an account",
          "operationId": "retrieveAccountOwner",
          "description": "The API allows information on the account owner to be retrieved.\nThe main input fields are:\n- The issuer ID\n- The account for which information is requested.\n\nIt is also possible to request additional data like addresses by using the embedded fields.\n\nThe API response contains :\n- either customer information if the contract owner is a person\n- or company information if the contract owner is a company.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressIdentifiers",
                  "addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityContractMember"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/authorization-business-cases": {
        "get": {
          "tags": [
            "Account - Authorization"
          ],
          "summary": "Get business cases",
          "operationId": "getBusinessCasesUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "example: 2012-12-31T22:00:00.000\nEnd of time period (excluded) for which transactions have to be provided.",
              "required": true,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "example: 2012-12-31T22:00:00.000\nStart of time period (included) for which transactions have to be provided.",
              "required": true,
              "type": "string",
              "format": "date-time"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetBusinessCases"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/authorization-business-cases/{businessCaseId}": {
        "get": {
          "tags": [
            "Account - Authorization"
          ],
          "summary": "Get business case",
          "description": "This operation enables to retrieve the details of an authorization identified by its business case Id.",
          "operationId": "getBusinessCaseUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "businessCaseId",
              "in": "path",
              "description": "businessCaseId",
              "required": true,
              "type": "string"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "endTime",
              "required": true,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "startTime",
              "required": true,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi",
              "allowEmptyValue": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetBusinessCase"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/authorization-restrictions": {
        "get": {
          "tags": [
            "Account - Authorization Restriction"
          ],
          "summary": "Get authorization restrictions",
          "description": "This operation enables to retrieve the details of an authorization identified by its transaction Id.",
          "operationId": "getAuthorizationRestrictionsUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetAuthorizationRestrictions"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/authorization-restrictions/{authorizationRestrictionReference}": {
        "get": {
          "tags": [
            "Account - Authorization Restriction"
          ],
          "summary": "Get authorization restriction",
          "operationId": "getAuthorizationRestrictionUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionReference",
              "in": "path",
              "description": "authorizationRestrictionReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetAuthorizationRestriction"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/authorization-restrictions/{authorizationRestrictionReference}/authorization-restriction-overrides": {
        "get": {
          "tags": [
            "Account - Authorization Restriction"
          ],
          "summary": "Get authorization restriction overrides",
          "operationId": "getAuthorizationRestrictionOverridesUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "all",
              "in": "query",
              "description": "all",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "name": "authorizationRestrictionReference",
              "in": "path",
              "description": "authorizationRestrictionReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetAuthorizationRestrictionOverrides"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Account - Authorization Restriction"
          ],
          "summary": "Create authorization restriction override",
          "operationId": "createAuthorizationRestrictionOverrideUsingPOST_1",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionReference",
              "in": "path",
              "description": "authorizationRestrictionReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateAuthorizationRestrictionOverrideRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAuthorizationRestrictionOverride"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/authorization-restrictions/{authorizationRestrictionReference}/authorization-restriction-overrides/{authorizationRestrictionOverrideReference}": {
        "get": {
          "tags": [
            "Account - Authorization Restriction"
          ],
          "summary": "Get authorization restriction override",
          "operationId": "getAuthorizationRestrictionOverrideUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionOverrideReference",
              "in": "path",
              "description": "authorizationRestrictionOverrideReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionReference",
              "in": "path",
              "description": "authorizationRestrictionReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetAuthorizationRestrictionOverride"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Account - Authorization Restriction"
          ],
          "summary": "Modify authorization restriction override",
          "operationId": "modifyAuthorizationRestrictionOverrideUsingPUT_1",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionOverrideReference",
              "in": "path",
              "description": "authorizationRestrictionOverrideReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionReference",
              "in": "path",
              "description": "authorizationRestrictionReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ModifyAuthorizationRestrictionOverrideRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyAuthorizationRestrictionOverride"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Account - Authorization Restriction"
          ],
          "summary": "Delete authorization reference",
          "operationId": "deleteAuthorizationReferenceUsingDELETE_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionOverrideReference",
              "in": "path",
              "description": "authorizationRestrictionOverrideReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionReference",
              "in": "path",
              "description": "authorizationRestrictionReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteAuthorizationRestrictionOverride"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/authorization-restrictions/search": {
        "post": {
          "tags": [
            "Account - Authorization Restriction"
          ],
          "summary": "Search authorization restrictions by account reference",
          "operationId": "searchAuthorizationReferencesByAccountReferenceUsingPOST",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SearchAuthorizationRestrictionRequest"
              }
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntitySearchAuthorizationRestrictionResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ]
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/authorization-restrictions/{authorizationRestrictionReference}/authorization-restriction-overrides/{authorizationRestrictionOverrideReference}/history": {
        "get": {
          "tags": [
            "Account - Authorization Restriction"
          ],
          "summary": "Get authorization restriction override history",
          "operationId": "getAuthorizationRestrictionOverrideHistoryUsingGET",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionOverrideReference",
              "in": "path",
              "description": "authorizationRestrictionOverrideReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionReference",
              "in": "path",
              "description": "authorizationRestrictionReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetAuthorizationRestrictionOverrideHistory"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ]
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{externalAccountReference}/authorization-restrictions/{authorizationRestrictionReference}/authorization-restriction-overrides/{authorizationRestrictionOverrideReference}/history": {
        "get": {
          "tags": [
            "Account - Authorization Restriction"
          ],
          "summary": "Get authorization restriction override history by external account reference",
          "operationId": "getAuthorizationRestrictionOverrideHistoryByExternalAccountRefUsingGET",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "authorizationRestrictionOverrideReference",
              "in": "path",
              "description": "authorizationRestrictionOverrideReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "authorizationRestrictionReference",
              "in": "path",
              "description": "authorizationRestrictionReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "externalAccountReference",
              "in": "path",
              "description": "externalAccountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetAuthorizationRestrictionOverrideHistory"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ]
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/authorizations": {
        "get": {
          "tags": [
            "Account - Authorization"
          ],
          "summary": "Get authorizations",
          "operationId": "getAuthorizationsUsingGET_1",
          "description": "This operation enables to retrieve a list of authorizations associated to an account for a given period.\nIn response, for each authorization, the main properties of the authorization are provided such as the type of operation, the amount, the result code, the acceptance context.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "Example: 2012-12-31T22:00:00.000\nEnd of time period (excluded) for which transactions have to be provided.",
              "required": true,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "Example: 2012-12-31T22:00:00.000\nStart of time period (included) for which transactions have to be provided.",
              "required": true,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi",
              "allowEmptyValue": false
            },
            {
              "name": "page",
              "in": "query",
              "description": "Page",
              "required": false,
              "type": "integer",
              "default": 0,
              "format": "int32",
              "allowEmptyValue": false
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Offset, maximum: 100",
              "required": false,
              "type": "integer",
              "default": 100,
              "format": "int32",
              "allowEmptyValue": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetAuthorizations"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/authorizations/{authorizationId}": {
        "get": {
          "tags": [
            "Account - Authorization"
          ],
          "summary": "Get authorization",
          "operationId": "getAuthorizationUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "authorizationId",
              "in": "path",
              "description": "authorizationId",
              "required": true,
              "type": "string",
              "x-example": "Length should be 18"
            },
            {
              "name": "endTime",
              "in": "query",
              "description": "endTime",
              "required": true,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "startTime",
              "in": "query",
              "description": "startTime",
              "required": true,
              "type": "string",
              "format": "date-time"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi",
              "allowEmptyValue": false
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetAuthorization"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/cancel-delinquency": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "Cancel account delinquency",
          "description": "An account is in delinquency situation (the required minimum payment is overdue)\nThe API allows the delinquency situation of an account to be cancelled.\nAs an input, the account identifier is provided by using:\n•\tthe account reference generated by WL\n•\tor the issuer external account reference\nOptionally, the required overdue minimum payment can be cancelled. \nAs a result :\n•\tthe account is no more in delinquency situation\n•\tthe amount due (required overdue minimum payment) is cancelled if this has been requested.",
          "operationId": "cancelAccountDelinquency",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CancelAccountDelinquencyRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCancelAccountDelinquencyResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/turnover-information": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve turnover information for an account (beta)",
          "operationId": "retrieveTurnoverInformation",
          "description": "The API returns current and historical turnover information of an account (for a monthly or annual turnover).",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityTurnoverInformation"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": true
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/turnovers": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve list of turnover for an account",
          "operationId": "listTurnover",
          "description": "This API returns a list of turnovers with the possibility to return only one type of turnover by providing the turnoverType as query parameter .\nFor each type of turnover, current turnover and historical data are returned.\nThe possible turnovers are : \n•\tthe turnover related to membership fee management (turnoverType=MEMBERSHIP_FEE). \nThis turnover :\n- is optional (depends on product configuration)\n- can be used for membership fee reimbursement (if any)\n- is calculated for a period based on the membership fee anniversary date \n\n•\tthe default turnover (turnoverType=DEFAULT)\nThis turnover :\n- is optional (depends on product configuration)\n- can be communicated to cardholder in statement\n- is used for automatic account setup fee reimbursement, if any. \n- is calculated for a period based on Account anniversary date or the contract anniversary date (depends on product configuration)",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "turnoverType",
              "in": "query",
              "description": "turnoverType : DEFAULT, MEMBERSHIP_FEE. If the parameter is not provided, all turnovers are returned (if available)",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityTurnover"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/balance": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve financial information",
          "operationId": "retrieveAccountBalance",
          "description": "The API allows financial information of an account to be retrieved (not relevant for a debit card).\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe account for which information is requested.\nIn response, different information is returned, such as account balance, sum of all operations (scheme operations, fees, ect) posted to the account (accepted amount), current open to buy amount (credit and prepaid accounts only).",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAccountBalance"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/contract": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve contract for an account",
          "operationId": "retrieveContractForAccount",
          "description": "The API enables the contract data for a given account to be retrieved.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "advertisementFlags",
                  "deliveryChannel",
                  "legitimacyDocuments",
                  "contractFees",
                  "accountIdentifiers",
                  "accounts",
                  "cardContractIdentifiers",
                  "cardContracts",
                  "cardContracts.cards",
                  "dataAnalysisFlags",
                  "contractCustomerIdentifiers",
                  "contractCustomers",
                  "addonSubscriptions"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/corporate-contract": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve corporate contract for an account (beta)",
          "operationId": "retrieveCorporateContractForAccount",
          "description": "The API allows the corporate contract detail of an account to be retrieved. \n\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe account for which the corporate contract information is requested: It can be provided by using the account reference or the issuer account external reference. \n\nIt is also possible to request some additional data, such as list of corporate contract entities (limited to 100), list of all customers (limited to 100), list of all companies (limited to 100), list of corporate employee accounts (limited to 100), root account linked to this corporate contract, by using the embedded fields.\n\nIn return, the interface provides the corporate contract details.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "corporateContractEntities",
                  "contractCustomers",
                  "contractCompanies",
                  "corporateEmployeeAccounts",
                  "rootAccount"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCorporateContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/credit-limit": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "Retrieve account credit limit",
          "operationId": "retrieveAccountCreditLimit",
          "description": "The API allows the permanent credit limit for a given account to be retrieved.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreditLimit"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Account"
          ],
          "summary": "Update account credit limit",
          "operationId": "modifyCreditLimit",
          "description": "The API allows the permanent credit limit for a given account to be updated.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCreditLimitRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCreditLimitResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/credit-transfers": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "List outgoing credit transfers for an account",
          "operationId": "listCreditTransfers",
          "description": "The API allows the list of credit transfers posted for an account to be retrieved.\nThis API applies to the credit cards domain.\nA credit transfer can be posted to an account to pay the due amount (for eg, self-payer).",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCreditTransfer"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/direct-debits": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "List direct debits for an account",
          "operationId": "listDirectDebits",
          "description": "The API allows the list of sepa and non sepa direct debit notes generated from an account to repay its due amount to be retrieved.\nThis API applies to the credit cards domain.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListDirectDebit"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/insurance-contracts": {
        "get": {
          "tags": [
            "Account - Insurance Contract"
          ],
          "summary": "List insurance contracts for an account",
          "operationId": "listInsuranceContracts",
          "description": "The API allows the list of insurance contracts for an account to be retrieved. \nThe main input fields requested by the API are:\n- The issuer ID\n- The account for which info is requested: It can be provided by using the account reference or the issuer external account reference.\n\nIn return, the list of insurance contracts is provided with the subscribed insurance package, the insurance events, the latest occurring events and the status for each contract.\nThe list of insurance events and their codes are pre-defined and configured in the insurance package.\nThe contracts with a closed status are not provided back.\nThe possible statuses of insurance contracts are:\n- ACTIVE,\n- INTERRUPTED,\n- DISABLED,\n- CLOSED\n\nThe statuses depends on the insurance events configuration.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListInsuranceContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Account - Insurance Contract"
          ],
          "summary": "Create insurance contract",
          "operationId": "createInsuranceContract",
          "description": "The API allows an insurance contract for an account to be activated if the activation was not requested at the contract creation.\nThe main input fields requested by the API are:\n- The issuer ID\n- The account for which info is requested: It can be provided by using the account reference or the issuer external account reference\n- The insurance package reference\n- The insurance event code for activation if the activation by default is not defined in the product setup.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateInsuranceContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateInsuranceContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/insurance-contracts/{insurancePackageReference}": {
        "get": {
          "tags": [
            "Account - Insurance Contract"
          ],
          "summary": "Retrieve an insurance contract for an account",
          "operationId": "retrieveInsuranceContract",
          "description": "The API allows an insurance contract for an account to be retrieved.\nThe main input fields requested by the API are:\n- The issuer ID\n- The account for which info is requested: It can be provided by using the account reference or the issuer external account reference\n- The insurance package reference.\n\nIn return, the insured events and the latest occurring events for the account and insurance package reference are returned.\nThe list of insurance events and their codes are a pre-defined and configured in the insurance package.\nThe contracts with a closed status are not provided back.\nThe possible statuses of insurance contracts are:\n- ACTIVE,\n- INTERRUPTED,\n- DISABLED,\n- CLOSED\n\nThe statuses depends on the insurance events configuration.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "insurancePackageReference",
              "in": "path",
              "description": "Insurance package reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "insuranceEvents"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityInsuranceContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Account - Insurance Contract"
          ],
          "summary": "Close insurance contract",
          "operationId": "closeInsuranceContract",
          "description": "The API allows an insurance contract for an account to be closed.\nThe main input fields requested by the API are:\n- The issuer ID\n- The account for which info is requested: It can be provided by using the account reference or the issuer external account reference\n- The insurance package identifier",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "insurancePackageReference",
              "in": "path",
              "description": "Insurance package reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCloseInsuranceContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/insurance-contracts/{insurancePackageReference}/insurance-events": {
        "post": {
          "tags": [
            "Account - Insurance Contract"
          ],
          "summary": "Add an insurance event to insurance contract for an account",
          "operationId": "createInsuranceEvent",
          "description": "The API is used to pst some events to an insurance contract. \nThe complete list of event is defined in the product setup. The actions linked to the event can be:\n- activate insurance,\n- deactivate insurance\n- stop the fee calculation.\n\nThe main input fields requested by the API are:\n- The issuer ID\n- The account for which info is requested: It can be provided by using the account reference or the issuer external account reference\n- The insurance package identifier",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "insurancePackageReference",
              "in": "path",
              "description": "Insurance package reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateInsuranceEventRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateInsuranceEventResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/operations": {
        "get": {
          "tags": [
            "Account - Operation"
          ],
          "summary": "List operations for an account",
          "operationId": "listOperations",
          "description": "The API retrieves the list of operations for a given time period and a given account.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe account for which information is requested:  it can be provided by using the account reference or the issuer external account reference,\n•\tA given time period (start date / end date)\nIt is also possible \n- to request the list of operations for all account hierarchy, for a certain PAN only by providing a PAN reference\n- to include internal operations (failed, rejected) in the statements\n\nOperations can be a scheme transaction or an operation generated internally.\nThe number of operations provided back can be indicated in the page and offset input field.\nThe API returns the most important operation attributes such as: the operation type, the amounts and the operation context. \nFor the full list of operation attributes, the \"Retrieve operation\" API should be used.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "allAccountHierarchy",
              "in": "query",
              "description": "Retrieve operations for all account hierarchy (default = only account operations are listed )",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "name": "printOnStatement",
              "in": "query",
              "description": "The boolean parameter to indicate whether to include some manual operations in the statements",
              "required": true,
              "type": "boolean",
              "default": true
            },
            {
              "name": "panReference",
              "in": "query",
              "description": "Reference of the PAN",
              "required": false,
              "type": "string"
            },
            {
              "name": "sort",
              "in": "query",
              "description": "To return the list of operations sorted by posting date / operation id. Available values : asc (for ascending sort) or desc (for descending sort)",
              "required": false,
              "type": "string"
            },
            {
              "name": "startTime",
              "in": "query",
              "required": true,
              "type": "string",
              "description": "Format : yyyy-MM-ddTHH:mm:ssZ"
            },
            {
              "name": "endTime",
              "in": "query",
              "required": true,
              "type": "string",
              "description": "Format : yyyy-MM-ddTHH:mm:ssZ"
            },
            {
              "name": "page",
              "in": "query",
              "description": "0",
              "required": false,
              "type": "integer",
              "default": 0,
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "100",
              "required": false,
              "type": "integer",
              "default": 100,
              "format": "int32"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Available values for embed : authorization, addendum (to retrieve lodgingInformation, carRentalInformation, airItineraryInformation) ",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "authorization",
                  "addendum"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListOperation"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/operations/{operationId}": {
        "get": {
          "tags": [
            "Account - Operation"
          ],
          "summary": "Retrieve operation",
          "operationId": "retrieveOperation",
          "description": "The API retrieves the detail of an operation for an account.\nIt is also possible to request explicitly the operations linked to the current one by using the embedded field filled with parentOperation.\nA parent operation can be: the original operation when the requested operation is a reversal, relative fee operations linked to the current operation, refund/redebit operations for disputed transaction,..\nIn response, exhaustive information are provided that includes additional amounts if available (cash-back amount, DCC amount, gratuity amount, surcharge amount), exchange rate information,..",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "operationId",
              "in": "path",
              "description": "Operation ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Available values for embed : parentOperation, authorization, addendum (to retrieve lodgingInformation, carRentalInformation, airItineraryInformation) ",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "parentOperation",
                  "authorization",
                  "addendum"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityOperationDetails"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/post-balance-adjustment-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Post a balance adjustment operation for an account",
          "operationId": "postBalanceAdjustmentOperation",
          "description": "The API is used to generate a balance adjustment operation on an account. \nThe input account can be provided by using:\n- the account reference\n- or the issuer external account reference.\n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once.The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateOperationBalanceAdjustmentRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateOperationBalanceAdjustmentResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/post-fee-operation": {
        "post": {
          "x-wl-idempotent": true,  
          "tags": [
            "Account - Operation"
          ],
          "summary": "Post a fee operation for an account",
          "operationId": "postFeeOperation",
          "description": "The API is used to post a fee operation to an account. \nThe fee type is mandatory, and the value must be consistent with the list defined during product definition. \nThis list is shared between WL and the issuer during the project phase.\nAs an input, the account identifier can be provided by using:\n- the account reference generated by WL\n- or the issuer external account reference \n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateOperationFeeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateOperationFeeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/reset-balance": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Reset the balance of an account",
          "operationId": "resetBalance",
          "description": "The API resets the balance of an account by generating : \n a credit operation (for a debit balance) \n a debit operation (for a credit balance) \n\n As an input, the account identifier can be provided by using: \nthe account reference generated by WL \n or the issuer external account reference \n This is relevant only for credit cards. \n Idempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ResetBalanceRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityResetBalanceResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/post-payment-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Post a payment operation for an account",
          "operationId": "postPaymentOperation",
          "description": "The API allows a payment operation to an account to be generated and posted.\nA payment operation is used to pay the due amount. \nIf the amount provided is greater than the due amount, the overpayment can be posted to another account if provided.\nAs an input, the account identifier can be provided by using:\n- the account reference generated by WL\n- or the issuer external account reference.\n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateOperationPaymentRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateOperationPaymentResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/post-reimbursement-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Post a reimbursement operation",
          "operationId": "postReimbursementOperation",
          "description": "The API allows a reimbursement operation to an account to be generated and posted.\nA reimbursement operation can be used when the account is in a credit situation.\nAs an input, the account identifier can be provided by using:\n- the account reference generated by WL\n- or the issuer external account reference \n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateOperationReimbursementRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateOperationReimbursementResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/post-load-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Load an account",
          "operationId": "postLoadOperation",
          "description": "The API allows an account to be loaded.\nA load operation is used for prepaid cards to put money in an account.\nThe operation can have a control on the amount authorized and trigger a load operation fee, if it is configured.\nAs an input, the account identifier can be provided by using:\n- the account reference generated by WL\n- or the issuer external account reference \n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateOperationLoadRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateOperationLoadResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/post-unload-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Unload an account",
          "operationId": "postUnloadOperation",
          "description": "The API allows an account to be unloaded. An unload operation is used for prepaid cards  to retrieve money from an account.\nThe operation can have a control on the amount authorized.\nAs an input, the account identifier can be provided by using:\n- the account reference generated by WL\n- or the issuer external account reference \n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateOperationUnloadRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateOperationUnloadResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/reserves": {
        "get": {
          "tags": [
            "Account - Authorization"
          ],
          "summary": "Get reservations",
          "operationId": "getReservesUsingGET",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetReserves"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ]
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/reserves": {
        "get": {
          "tags": [
            "Account - Authorization"
          ],
          "summary": "Get reservations by external account reference",
          "operationId": "getReservesByExternalAccountReferenceUsingGET",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetReserves"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ]
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/reverse-balance-adjustment-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Reverse a balance adjustment operation for an account",
          "operationId": "reverseBalanceAdjustmentOperation",
          "description": "The API is used to reverse a balance adjustment operation on an account.\nAs an input, the account identifier can be provided by using:\n- the account reference generated by WL\n- or the issuer external account reference\n\nThe balance adjustment operation to be reversed must be provided. \nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReverseOperationBalanceAdjustmentRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReverseOperationBalanceAdjustmentResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/reverse-fee-operation": {
        "post": {
          "x-wl-idempotent": true, 
          "tags": [
            "Account - Operation"
          ],
          "summary": "Reverse a fee operation for an account",
          "operationId": "reverseFeeOperation",
          "description": "The API is used to reverse a fee operation on an account.\nAs an input, the account identifier can be provided by using:\n- the account reference generated by WL\n- or the issuer external account reference\n\nThe fee type is mandatory. It must be consistent with the product definition. \nThe list of values is shared between WL and the issuer. \nThe fee reference to be reversed must be provided.\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReverseOperationFeeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReverseOperationFeeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/reverse-payment-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Reverse a payment operation for an account (full reversal)",
          "operationId": "reversePaymentOperation",
          "description": "The API allows a payment reversal operation on an account.\nA payment reversal can be requested when a direct debit returns unpaid.\nAs an input, the account identifier can be provided by using:\n- the account reference generated by WL\n- or the issuer external account reference\n\nThe payment reference to be reversed must be provided. \nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReverseOperationPaymentRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReverseOperationPaymentResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/statements": {
        "get": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "List statements for an account",
          "operationId": "listStatements",
          "description": "The API is used to get the list of statements generated for an account and optionally a requested period.\nIt is also possible to get reprint information of a statement.\nThe input parameters are:\n- the involved account: it can be provided by using the account reference or the issuer external account reference,\n- the search period (start date / end date),\n- the embed field \"reprint-history\" if needed.\n\nThe API returns:\n•\tin the consumer cards context, the list of statements of the paying account\n•\tin the commercial cards context, the list of statements of the employee account whether it is paid by another account or not. \n\nIn response, the list of statement is provided with the  financial information of each statement such as:\nprevious cycle balance (start balance), end cycle balance, due amount, total of payments, ...",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "periodStartDateTime",
              "in": "query",
              "description": "Period start date of cycle closure to include (format : yyyy-MM-ddTHH:mm:ssZ)",
              "required": false,
              "type": "string"
            },
            {
              "name": "periodEndDateTime",
              "in": "query",
              "description": "Period end date of cycle closure to include (format : yyyy-MM-ddTHH:mm:ssZ)",
              "required": false,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "reprintHistory"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListStatement"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/statements/last": {
        "get": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "Retrieve last statement",
          "operationId": "retrieveLastStatement",
          "description": "The API is used to get the financial information of  the last statement generated for an account such as:\nprevious cycle balance (start balance), end cycle balance, due amount, total of payments, ...\nIt is also possible to get reprint information of the statement.\nThe input parameters are:\n- the involved account: it can be provided by using the account reference or the issuer external account reference,\n- the embed field \"reprint-history\" if needed.\n\nThe API returns:\n•\tin the consumer cards context, the statement of the paying account\n•\tin the commercial cards context, the statement of the employee account whether it is paid by another account or not.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "reprintHistory"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityStatement"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/statements/last/operations": {
        "get": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "List operations for last account statement",
          "description": "The API is used to get the list of operations of the last statement generated for an account.\nThe input account can be provided by using:\n- the account reference\n- or the issuer external account reference.",
          "operationId": "listLastStatementOperations",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListOperation"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/statements/last/reprint": {
        "post": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "Reprint last statement",
          "description": "The API is used to request the reprint of the last statement for an account.\nThe input account can be provided by using:\n- the account reference\n- or the issuer external account reference.\n\nAs a result, the statement data is extracted again and pushed to the output management module",
          "operationId": "reprintLastStatement",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReprintStatementResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/statements/next": {
        "get": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "Retrieve next statement",
          "description": "The API is used to get the financial information based on the last statement generated for an account such as:\ncurrent cycle balance, cycle closure date, payment due date, next cycle closure date (end cycle balance, due amount, total of payments are not yet known).\nThe input parameters are:\n- the issuerId\n- the involved account: it can be provided by using the account reference or the issuer external account reference,\n\nThe API returns:\n•\tin the consumer cards context, the statement of the paying account\n•\tin the commercial cards context, the statement of the employee account whether it is paid by another account or not.",
          "operationId": "retrieveNextStatement",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "reprintHistory"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityStatement"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/statements/next/operations": {
        "get": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "List operations for next account statement",
          "description": "The API is used to get the list of operations generated for an account since the last cycle closure date. \nThose operations will be part of the next statement.\nThe input account can be provided by using:\n- the account reference\n- or the issuer external account reference.",
          "operationId": "listNextStatementOperations",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListOperation"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/statements/{cycleClosureDate}": {
        "get": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "Retrieve statement",
          "description": "The API is used to get the financial information  for an account statement such as: previous cycle balance (start balance), end cycle balance, due amount, total of payments, ...\nThe input account can be provided by using:\n•\tthe account reference\n•\tor the issuer external account reference.\nThe statement involved by the request has to be provided by giving the cycle closure date.\n\nThe API returns:\n•\tin the consumer cards context, the statement of the paying account\n•\tin the commercial cards context, the statement of the employee account whether it is paid by another account or not.",
          "operationId": "retrieveStatement",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "cycleClosureDate",
              "in": "path",
              "description": "Cycle Closure Date (format : yyyy-MM-ddTHH:mm:ssZ)\nHH:mm:ss should be filled with 23:59:59",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "reprintHistory"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityStatement"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/statements/{cycleClosureDate}/operations": {
        "get": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "List operations for an account statement",
          "description": "The API is used to get the financial information  for an account statement such as: previous cycle balance (start balance), end cycle balance, due amount, total of payments, ...\nThe input account can be provided by using:\n- the account reference\n- or the issuer external account reference.\n\nThe statement involved by the request has to be provided by giving the cycle closure date.",
          "operationId": "listStatementOperations",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "cycleClosureDate",
              "in": "path",
              "description": "Cycle Closure Date (format : yyyy-MM-ddTHH:mm:ssZ)\nHH:mm:ss should be filled with 23:59:59",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListOperation"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/statements/{cycleClosureDate}/reprint": {
        "post": {
          "tags": [
            "Account - Statement"
          ],
          "summary": "Reprint a statement",
          "description": "The API is used to request the reprint of a statement for an account.\nThe input account can be provided by using:\n- the account reference\n- or the issuer external account reference.\n\nThe statement involved by the request has to be provided by giving the cycle closure date\n\nAs a result, the statement data is extracted again and pushed to the output management module.",
          "operationId": "reprintStatement",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "cycleClosureDate",
              "in": "path",
              "description": "Cycle Closure Date (format : yyyy-MM-ddTHH:mm:ssZ)\nHH:mm:ss should be filled with 23:59:59",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReprintStatementResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/temporary-credit-limits": {
        "get": {
          "tags": [
            "Account"
          ],
          "summary": "List temporary credit limits for an account",
          "operationId": "listTemporaryCreditLimitForAccount",
          "description": "The API allows the temporary credit limits for a given account to be retrieved.\nIt is possible to request either only the active temporary credit limit or the history of temporary limits for the account.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "all",
              "in": "query",
              "description": "By default return only active temporary Credit Limits",
              "required": false,
              "type": "boolean",
              "default": false
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListTemporaryCreditLimit"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Account - Temporary Credit Limit"
          ],
          "summary": "Create a temporary credit limit",
          "description": "Our solution  offers to Issuers a temporary credit limit management for credit card account\nThe temporary credit limit can be added to an existing credit card account\n- for a given period\n- the temporary credit limit value can be higher or lower than the permanent one but is limited by an exceptional amount, which is allowed by the Issuer per product\n\nThe API allows temporary credit limits for a given account to be created.\n\nIn response, a temporary credit limit reference is provided.\nOnce added, the temporary credit limit is immediately available for next authorizations.",
          "operationId": "createTemporaryCreditLimit",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateTemporaryCreditLimitRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateTemporaryCreditLimitResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/temporary-credit-limits/{temporaryCreditLimitReference}": {
        "delete": {
          "tags": [
            "Account - Temporary Credit Limit"
          ],
          "summary": "Delete a temporary credit limit",
          "description": "An existing temporary credit limit (active or scheduled) can be disabled at any moment\nThe API allows a temporary credit limit for a given account to be deleted by providing the temporary credit limit reference.",
          "operationId": "deleteTemporaryCreditLimit",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "temporaryCreditLimitReference",
              "in": "path",
              "description": "Temporary credit limit reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteTemporaryCreditLimitResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/velocity-limits": {
        "get": {
          "tags": [
            "Account - Velocity Limit"
          ],
          "summary": "Get velocity limits",
          "description": "Operation which provides the currently effective velocity limit counters and parameters of an account.",
          "operationId": "getVelocityLimitsUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetVelocityLimits"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/velocity-limits/{velocityLimitReference}": {
        "get": {
          "tags": [
            "Account - Velocity Limit"
          ],
          "summary": "Get velocity limit",
          "description": "Operation which provides the currently effective velocity limit counters and parameters of an account for a given velocity limit reference.",
          "operationId": "getVelocityLimitUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitReference",
              "in": "path",
              "description": "velocityLimitReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetVelocityLimit"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/velocity-limits/{velocityLimitReference}/velocity-limit-overrides": {
        "get": {
          "tags": [
            "Account - Velocity Limit"
          ],
          "summary": "Get velocity limit overrides by velocity limit",
          "operationId": "getVelocityLimitOverridesByVelocityLimitUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "all",
              "in": "query",
              "description": "all",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitReference",
              "in": "path",
              "description": "velocityLimitReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetVelocityOverrides"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Account - Velocity Limit"
          ],
          "summary": "Create velocity limit override",
          "operationId": "createVelocityLimitOverrideUsingPOST_1",
          "description": "Operation which inserts a new velocity limit override. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateVelocityLimitOverrideRequest"
              }
            },
            {
              "name": "velocityLimitReference",
              "in": "path",
              "description": "velocityLimitReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateVelocityLimitOverride"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/velocity-limits/{velocityLimitReference}/velocity-limit-overrides/{velocityLimitOverrideReference}": {
        "get": {
          "tags": [
            "Account - Velocity Limit"
          ],
          "summary": "Get velocity limit override by velocity limit",
          "operationId": "getVelocityLimitOverrideByVelocityLimitUsingGET_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitOverrideReference",
              "in": "path",
              "description": "velocityLimitOverrideReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitReference",
              "in": "path",
              "description": "velocityLimitReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetVelocityOverride"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Account - Velocity Limit"
          ],
          "summary": "Modify velocity limit override",
          "operationId": "modifyVelocityLimitOverrideUsingPUT_1",
          "description": "Operation which updates an existing velocity limit override.\nThe update is performed only on the passed attributes. Attributes which are not passed are not modified.\nOptional attributes can be set to null by means of the JSON null value.\nFor an insert at least all mandatory attributes must be passed",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ModifyVelocityLimitOverrideRequest"
              }
            },
            {
              "name": "velocityLimitOverrideReference",
              "in": "path",
              "description": "velocityLimitOverrideReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitReference",
              "in": "path",
              "description": "velocityLimitReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyVelocityLimitOverride"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Account - Velocity Limit"
          ],
          "summary": "Delete velocity limit override",
          "operationId": "deleteVelocityLimitOverrideUsingDELETE_1",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitOverrideReference",
              "in": "path",
              "description": "velocityLimitOverrideReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitReference",
              "in": "path",
              "description": "velocityLimitReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteVelocityLimitOverride"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/velocity-limits/{velocityLimitReference}/velocity-limit-overrides/{velocityLimitOverrideReference}/history": {
        "get": {
          "tags": [
            "Account - Velocity Limit"
          ],
          "summary": "Get velocity limit override history by velocity limit override reference",
          "operationId": "getVelocityLimitOverrideHistoryByVelocityLimitOverrideReferenceUsingGET",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitOverrideReference",
              "in": "path",
              "description": "velocityLimitOverrideReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitReference",
              "in": "path",
              "description": "velocityLimitReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetVelocityLimitOverrideHistoryResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ]
        }
      },
      "/issuers/{issuerId}/accounts/external-accounts/{issuerAccountExternalReference}/velocity-limits/{velocityLimitReference}/velocity-limit-overrides/{velocityLimitOverrideReference}/history": {
        "get": {
          "tags": [
            "Account - Velocity Limit"
          ],
          "summary": "Get velocity limit override history by velocity limit override reference",
          "operationId": "getVelocityLimitOverrideHistoryByVelocityLimitOverrideReferenceAndExtAccountReferenceUsingGET",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuerAccountExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitOverrideReference",
              "in": "path",
              "description": "velocityLimitOverrideReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "velocityLimitReference",
              "in": "path",
              "description": "velocityLimitReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetVelocityLimitOverrideHistoryResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ]
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/create-mandate": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "Create mandate",
          "description": "The API allows to create a SEPA mandate for the given account by using issuer account external reference or the account reference (generated by WL). \n- For SEPA mandate successful creation in mandate management system, the Iban, Iban owner name and mandate signature date are to be provided. As a result, mandate is created in \"Active\" status and is ready to be used.\n- It is also possible to attach an existing SEPA mandate (explicitly created in mandate management system in advance) to a given account. To succeed, unique mandate reference (UMR) is to be provided as an input. As a result, mandate is attached if exists in mandate management system and is in \"Active\" status.\n\nA mandate is an authorization that a debtor gives to a creditor in order to take payments from their customers bank accounts.",
          "operationId": "createMandate",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateMandateRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateMandateResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/cancel-mandate": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "Cancel mandate",
          "description": "The API allows to cancel SEPA mandate for the given account by using issuer account external reference or the account reference (generated by WL). \nThe SEPA mandate can be cancelled immediately or in the future at a date provided by the issuer.\n- For immediate cancellation, mandate is “Revoked” immediately in mandate management system.\n- For scheduled cancellation, mandate is not “Revoked” until the cancellation date is reached in mandate management system.",
          "operationId": "cancelMandate",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CancelMandateRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCancelMandateResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/post-interest-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Post an interest operation for an account",
          "description": "The API is used to post manually an interest operation to an account.\n\nAs an input it must be provided\n- the account, identified either by its account reference generated by WL or its issuer external account reference, on which the interest operation has to be posted \n- the interest operation itself, uniquely identified by its external reference, date and service poster, its amount in currency (monetary)\nNote: \n- the provided currency must be the same than the posting account\n- it is possible to post credit and debit interest operation \n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.\n\nAs a result, the interest operation is posted to the account and has an impact on the account balance, immediately or not depending on the provided value date.",
          "operationId": "postInterestOperation",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateOperationInterestRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateOperationInterestResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/reverse-interest-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Reverse an interest operation for an account (full reversal)",
          "description": "The API is used to fully reverse an interest operation previously posted on an account.\n\nAs an input, it must be provided\n- the account, identified either by its account reference generated by WL or its issuer external account reference, on which the interest operation was previously posted \n- the interest operation to be reversed\n- the information related to the reversal operation (reference, date, service poster) \n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "operationId": "reverseInterestOperation",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReverseOperationInterestRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReverseOperationInterestResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/post-bonus-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Post a Bonus operation for an account",
          "description": "The API is used to post manually a Bonus operation to an account.\nA Bonus operation is used to reward or adjust a given account (in credit or in debit, e.g. in case of too high, too low or missing reward).\nAs an input it must be provided\n- the account, identified either by its account reference generated by WL or its issuer external account reference, on which the bonus operation has to be posted \n- the related Bonus program, defined for the issuer and the account\n- the Bonus operation itself, uniquely identified by its external reference, date and service poster, its amount in currency (monetary) or loyalty point kind (non monetary)\nNote: \n- for monetary bonus the provided currency must be the same than the posting account, for non monetary bonus the provided loyalty point unit must be allowed by the Bonus program\n- it is possible to post credit and debit bonus operation\n\nIf the Bonus operation is related to an existing initial operation, this latter can be provided. \nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.\n\nAs a result the Bonus operation is posted to the account. Monetary bonus has an immediate impact on the account balance.",
          "operationId": "postBonusOperation",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateOperationBonusRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateOperationBonusResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/reverse-bonus-operation": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Account - Operation"
          ],
          "summary": "Reverse a Bonus operation for an account",
          "description": "The API is used to fully reverse a Bonus operation previously posted on an account.\n\nAs an input it must be provided\n- the account, identified either by its account reference generated by WL or its issuer external account reference, on which the bonus operation was previously posted \n- the Bonus operation to be reversed\n- the information related to the reversal operation (reference, date, service poster) \n\nIdempotency is managed by the API; that is, if the request with the same WL-Correlation-ID is sent multiple times, it will be executed only once. The response will be retrieved directly from our system.",
          "operationId": "reverseBonusOperation",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReverseOperationBonusRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReverseOperationBonusResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/accounts/{accountReference}/inquire-operation":{
        "post": {
          "tags": [
            "Account - Operation"
          ],
          "summary": "Retrieve an operation by external references triplet",
          "description": "This API allows retrieving for an account a particular operation from its external references.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe account reference or the issuer external account reference\n•\tThe external references of the operation for which the detail is requested: The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifying the operation in our system must be provided.\nThe API response contains operation information.",
          "operationId": "inquireOperation",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Available values for embed : parentOperation, authorization, addendum (to retrieve lodgingInformation, carRentalInformation, airItineraryInformation) ",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "parentOperation",
                  "authorization",
                  "addendum"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/InquireOperationRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityInquireOperationResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/{customerReference}": {
        "get": {
          "tags": [
            "Company"
          ],
          "summary": "Retrieve company's information",
          "operationId": "retrieveCompanyByCustomerRef",
          "description": "The \"retrieve company's information\" API allows the user to get company information.\nInformation to be provided in input:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)\nIn addition to the company information, it is also possible to request the list of addresses and contacts of the company.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "customerReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressIdentifiers",
                  "addresses",
                  "contactIdentifiers",
                  "contacts"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCompany"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Company"
          ],
          "summary": "Update company",
          "operationId": "updateCompany",
          "description": "The \"update company\" API allows the user to update the attributes of a customer (as company).\nTo identify the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) for which updates are required\nThe customer reference can be retrieved by using the \"Retrieve list of company's information\" API.\nAll the attributes must be given in input even if they remain unchanged. For that, It can be needed to use the \"retrieve company's information\" API to get all the current attributes.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCompanyRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCompanyResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Company"
          ],
          "summary": "Update company partially",
          "operationId": "updateCompanyPartially",
          "description": "The \"update company partially\" API allows the user to update the attributes of a customer (as company).\nTo identify the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) for which updates are required\nThe customer reference can be retrieved by using the \"Retrieve list of company's information\" API.\nWith this API, only attributes that need to be updated must be given in input.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCompanyRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCompanyResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/{customerReference}/company-history": {
        "get": {
          "tags": [
            "Company"
          ],
          "summary": "Retrieve list of historic updates of a company (beta)",
          "operationId": "listCompanyHistory",
          "description": "The API allows the company update history of a company to be retrieved. \nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe customer for which information is requested : It can be provided by using the customer reference or the issuer customer external reference (as company). \nA start date and an end date can be provided in order to limit the search of the history. \nIn response, the interface provides a list of changes with the effective date of the update.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "customerReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "periodStartDateTime",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Format : yyyy-MM-ddTHH:mm:ssZ"
            },
            {
              "name": "periodEndDateTime",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Format : yyyy-MM-ddTHH:mm:ssZ"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCompanyHistory"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/external-customers/{issuerCustomerExternalReference}": {
        "get": {
          "tags": [
            "Company"
          ],
          "summary": "Retrieve company information by external reference",
          "operationId": "retrieveCompanyByIssuerExtRef",
          "description": "The \"retrieve company's information\" API allows the user to get company information.\nInformation to be provided in input:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)\nIn addition to the company information, it is also possible to request the list of addresses and contacts of the company.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "issuerCustomerExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressIdentifiers",
                  "addresses",
                  "contactIdentifiers",
                  "contacts"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCompany"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Company"
          ],
          "summary": "Update Company by external reference",
          "operationId": "updateCompanyByIssuerExtRef",
          "description": "The \"update company\" API allows the user to update the attributes of a customer (as company).\nTo identify the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) for which updates are required\nThe customer reference can be retrieved by using the \"Retrieve list of company's information\" API.\nAll the attributes must be given in input even if they remain unchanged. For that, It can be needed to use the \"retrieve company's information\" API to get all the current attributes.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCompanyRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCompanyResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Company"
          ],
          "summary": "Update Company partially by external reference",
          "operationId": "updateCompanyPartiallyByIssuerExtRef",
          "description": "The \"update company partially\" API allows the user to update the attributes of a customer (as company).\nTo identify the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) for which updates are required\nThe customer reference can be retrieved by using the \"Retrieve list of company's information\" API.\nWith this API, only attributes that need to be updated must be given in input.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCompanyRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCompanyResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/external-customers/{issuerCustomerExternalReference}/company-history": {
        "get": {
          "tags": [
            "Company"
          ],
          "summary": "Retrieve list of historic updates of a company by customer external reference (beta)",
          "operationId": "listCompanyHistoryByIssuerExtRef",
          "description": "The API allows the company update history of a company to be retrieved. \nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe customer for which information is requested : It can be provided by using the customer reference or the issuer customer external reference (as company). \nA start date and an end date can be provided in order to limit the search of the history. \nIn response, the interface provides a list of changes with the effective date of the update.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "issuerCustomerExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "periodStartDateTime",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Format : yyyy-MM-ddTHH:mm:ssZ"
            },
            {
              "name": "periodEndDateTime",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Format : yyyy-MM-ddTHH:mm:ssZ"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCompanyHistory"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies": {
        "get": {
          "tags": [
            "Company"
          ],
          "summary": "Retrieve list of company's information",
          "operationId": "listCompanies",
          "description": "The \"Retrieve list of company's information\" API enables to get a list of customers based on multiple criteria such as corporateName, nationalFiscalNumber, address town name, address postal code.\nAll companies whose corporate name includes the 'corporate name' parameter are returned (e.g. 'zon' => 'amazon' + 'zon craft', ...)",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "corporateName",
              "in": "query",
              "description": "Name of the company",
              "required": true,
              "type": "string"
            },
            {
              "name": "nationalFiscalIdentifier",
              "in": "query",
              "description": "national fiscal identifier of the company",
              "required": false,
              "type": "string"
            },
            {
              "name": "postalAddress.postCode",
              "in": "query",
              "description": "Post code of the company's address",
              "required": false,
              "type": "string"
            },
            {
              "name": "postalAddress.townName",
              "in": "query",
              "description": "Town name of the company's address",
              "required": false,
              "type": "string"
            },
            {
              "name": "buildingNumber",
              "in": "query",
              "description": "Building number of the company",
              "required": false,
              "type": "string"
            },
            {
              "name": "streetName",
              "in": "query",
              "description": "Street name of the company",
              "required": false,
              "type": "string"
            },
            {
              "name": "page",
              "in": "query",
              "description": "0",
              "required": false,
              "type": "integer",
              "default": 0,
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "100",
              "required": false,
              "type": "integer",
              "default": 100,
              "format": "int32"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCompany"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Company"
          ],
          "summary": "Create company",
          "operationId": "createCompany",
          "description": "The API creates a company if all the mandatory fields are provided (see company's resource).\nBy default, the company is considered 'ACTIVE' if the Status field is not provided.\nThe default address of the company must be also configured.\nThe API returns a customer reference (as company).",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "company",
                  "company.addressIdentifiers",
                  "company.addresses",
                  "company.contacts"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "requestBody",
              "description": "requestBody",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateCompanyRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateCompanyResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/{customerReference}/addresses": {
        "get": {
          "tags": [
            "Company"
          ],
          "summary": "Retrieve company's Address information list",
          "operationId": "retrieveCompanyAddressByCustomerRef",
          "description": "This API enables all the addresses associated with a given customer (as company), identified by customer reference or issuer customer reference to be retrieved. \nTo identify the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)\nThe address could be either a permanent address or a temporary address.\nSeveral address types are managed. Each address can be used for a specific usage (card delivery, statement delivery, contract letter,...).\nAddress usage is associated to a service (card service, account service, dispute service, ..) configured in our system.\nThe API can retrieve only the addresses linked to a specific usage: in this case, all the mandatory 'AddressUsage' attributes must be provided (e.g. serviceCode, AddressUsage).\nIf the showHistory indicator is set to Y then the full history of the addresses and the future addresses are returned. If this indicator is empty (default behavior) or equals to N, then only the last active addresses are returned.\nAddress identifiers, Address attributes and Address usages are displayed in the response.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "customerReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "serviceCode",
              "in": "query",
              "description": "The Service for which the address usage is defined : CARD_SERVICE, ACCOUNT_SERVICE. Conditional (must be used with addressUsageName)",
              "required": false,
              "type": "string"
            },
            {
              "name": "entityReference",
              "in": "query",
              "description": "This corresponds to the application domain of the address. It can be eg a card contract reference, card account reference. It is an optional field.\nIt enables to have the same usage address for the same customer applied to different addresses (one cardholder with 2 card contracts: card delivery address usage is assigned to main postal address for contract A and card delivery address usage is also assigned to office postal address for contract B.",
              "required": false,
              "type": "string"
            },
            {
              "name": "addressUsageName",
              "in": "query",
              "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY.",
              "required": false,
              "type": "string"
            },
            {
              "name": "showHistory",
              "in": "query",
              "description": "If the showHistory indicator is set to 'true' then the full history of the addresses are returned. If this indicator is empty (default behavior) or equals to 'false', then only the last active addresses are returned. ",
              "required": false,
              "default": false,
              "type": "boolean"
            },
             {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressUsages"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListAddress"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Create address for a company customer",
          "operationId": "createCompanyAddressByCustomerRef",
          "description": "The API allows to create either a permanent address or a temporary address for the company, identified with his reference. \nTo identify the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)\nAn address includes the following information:\n•\tthe issuer address external reference \n•\tthe label (e.g. HEAD_OFFICE)\n•\tthe type (mail address, phone number, email) and the corresponding data\n•\tthe address usages\n•\tthe start date (optional, by default the current date is used)\n•\tthe end date (conditional, is mandatory when creating a temporary address)\n\nWhen creating a temporary address, If a temporary address already exists with an overlap on the activity period then only the newly created address will be kept and the old one will be removed. \nThe temporary address is active between its start date and end date.\n\nOne or several address usages can be added to the address (in order to retrieve this address). An address usage is used for specific business process/service. When adding a usage to an address, the usage is immediately active and if it is already assigned to another address, it is removed from this latter. \n\nFor information, the head office address is mandatory.\nIn return, the API provides the address reference calculated by the system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateAddressRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/{customerReference}/addresses/{addressReference}": {
        "get": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Retrieve company's address information by address ref",
          "operationId": "retrieveCompanyAddressByCustomerRefAndAddressRef",
          "description": "The API returns the current version of a company's address.\nInformation to be provided in input:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)\n- The address reference or the issuer address reference \nThe address identifiers, address attributes, address usages and entity reference (application domain of the address) are displayed in the response.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "customerReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "addressReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressUsages"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCompany"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Update company address",
          "operationId": "modifyCompanyAddress",
          "description": "The API updates all the attributes of a company's address.\nTo identify the address of the company for which updates are required, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) \n- The address reference or the issuer address reference\nAll the attributes must be provided even those unchanged (except for the usages).\nThe API allows to validate an address ('invalid' status is set to false). But it's not possible to invalidate an address changing the value of the invalid 'flag' to true. If the user tries to do this action, an error message is returned.\n\nOne or several address usages can be added to the address (in order to retrieve this address). An address usage is used for specific business process/service. When adding a usage to an address, the usage is immediately active and if it is already assigned to another address, it is removed from this latter. \nAll the usages already linked to the address cannot be removed via this API.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyAddressRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/{customerReference}/addresses/external-addresses/{issuerAddressExternalReference}": {
        "get": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Retrieve company's address information by address external reference",
          "operationId": "retrieveCompanyAddressByCustomerRefAndExtAddressRef",
          "description": "The API returns the current version of a company's address.\nInformation to be provided in input:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)\n- The address reference or the issuer address reference \nThe address identifiers, address attributes, address usages and entity reference (application domain of the address) are displayed in the response.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "customerReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "issuerAddressExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressUsages"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCompany"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Update company address by external address reference",
          "operationId": "modifyCompanyAddressByCustomerRefAndExtAddressRef",
          "description": "The API updates all the attributes of a company's address.\nTo identify the address of the company for which updates are required, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) \n- The address reference or the issuer address reference\nAll the attributes must be provided even those unchanged (except for the usages).\nThe API allows to validate an address ('invalid' status is set to false). But it's not possible to invalidate an address changing the value of the invalid 'flag' to true. If the user tries to do this action, an error message is returned.\n\nOne or several address usages can be added to the address (in order to retrieve this address). An address usage is used for specific business process/service. When adding a usage to an address, the usage is immediately active and if it is already assigned to another address, it is removed from this latter. \nAll the usages already linked to the address cannot be removed via this API.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer Address External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyAddressRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/external-customers/{issuerCustomerExternalReference}/addresses": {
        "get": {
          "tags": [
            "Company"
          ],
          "summary": "Retrieve company's Address information list by external reference",
          "description": "This API enables all the addresses associated with a given customer (as company), identified by customer reference or issuer customer reference to be retrieved. \nTo identify the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)\nThe address could be either a permanent address or a temporary address.\nSeveral address types are managed. Each address can be used for a specific usage (card delivery, statement delivery, contract letter,...).\nAddress usage is associated to a service (card service, account service, dispute service, ..) configured in our system.\nThe API can retrieve only the addresses linked to a specific usage: in this case, all the mandatory 'AddressUsage' attributes must be provided (e.g. serviceCode, AddressUsage).\nIf the showHistory indicator is set to Y then the full history of the addresses and the future addresses are returned. If this indicator is empty (default behavior) or equals to N, then only the last active addresses are returned.\nAddress identifiers, Address attributes and Address usages are displayed in the response.",
          "operationId": "retrieveCompanyAddressByIssuerExtRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "issuerCustomerExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "serviceCode",
              "in": "query",
              "description": "The Service for which the address usage is defined : CARD_SERVICE, ACCOUNT_SERVICE. Conditional (must be used with addressUsageName)",
              "required": false,
              "type": "string"
            },
            {
              "name": "entityReference",
              "in": "query",
              "description": "This corresponds to the application domain of the address. It can be eg a card contract reference, card account reference. It is an optional field.\nIt enables to have the same usage address for the same customer applied to different addresses (one cardholder with 2 card contracts: card delivery address usage is assigned to main postal address for contract A and card delivery address usage is also assigned to office postal address for contract B.",
              "required": false,
              "type": "string"
            },
            {
              "name": "addressUsageName",
              "in": "query",
              "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY.",
              "required": false,
              "type": "string"
            },
            {
              "name": "showHistory",
              "in": "query",
              "description": "If the showHistory indicator is set to 'true' then the full history of the addresses are returned. If this indicator is empty (default behavior) or equals to 'false', then only the last active addresses are returned. ",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressUsages"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListAddress"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Create address for a company by external reference",
          "operationId": "createCompanyAddressByCustomerIssuerExtRef",
          "description": "The API allows to create either a permanent address or a temporary address for the company, identified with his reference. \nTo identify the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)\nAn address includes the following information:\n•\tthe issuer address external reference \n•\tthe label (e.g. HEAD_OFFICE)\n•\tthe type (mail address, phone number, email) and the corresponding data\n•\tthe address usages\n•\tthe start date (optional, by default the current date is used)\n•\tthe end date (conditional, is mandatory when creating a temporary address)\n\nWhen creating a temporary address, If a temporary address already exists with an overlap on the activity period then only the newly created address will be kept and the old one will be removed. \nThe temporary address is active between its start date and end date.\n\nOne or several address usages can be added to the address (in order to retrieve this address). An address usage is used for specific business process/service. When adding a usage to an address, the usage is immediately active and if it is already assigned to another address, it is removed from this latter. \n\nFor information, the head office address is mandatory.\nIn return, the API provides the address reference calculated by the system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateAddressRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/external-customers/{issuerCustomerExternalReference}/addresses/{addressReference}": {
        "get": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Retrieve address information by company external reference",
          "operationId": "retrieveCompanyByIssuerExtRefAndAddressRef",
          "description": "The API returns the current version of a company's address.\nInformation to be provided in input:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)\n- The address reference or the issuer address reference \nThe address identifiers, address attributes, address usages and entity reference (application domain of the address) are displayed in the response.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "issuerCustomerExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "addressReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressUsages"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCompany"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Update company address by company external reference",
          "operationId": "modifyCompanyAddressByCustomerExtRefAndAddressRef",
          "description": "The API updates all the attributes of a company's address.\nTo identify the address of the company for which updates are required, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) \n- The address reference or the issuer address reference\nAll the attributes must be provided even those unchanged (except for the usages).\nThe API allows to validate an address ('invalid' status is set to false). But it's not possible to invalidate an address changing the value of the invalid 'flag' to true. If the user tries to do this action, an error message is returned.\n\nOne or several address usages can be added to the address (in order to retrieve this address). An address usage is used for specific business process/service. When adding a usage to an address, the usage is immediately active and if it is already assigned to another address, it is removed from this latter. \nAll the usages already linked to the address cannot be removed via this API.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "address Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyAddressRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/external-customers/{issuerCustomerExternalReference}/addresses/external-addresses/{issuerAddressExternalReference}": {
        "get": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Retrieve address information by company external reference and address external reference",
          "operationId": "retrieveCompanyAddressByIssuerExtRefAndAddressExtRef",
          "description": "The API returns the current version of a company's address.\nInformation to be provided in input:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)\n- The address reference or the issuer address reference \nThe address identifiers, address attributes, address usages and entity reference (application domain of the address) are displayed in the response.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "issuerCustomerExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "issuerAddressExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressUsages"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCompany"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Update company address by company external reference and address external reference",
          "operationId": "modifyCompanyAddressByCustomerExtRefAndAddressExtRef",
          "description": "The API updates all the attributes of a company's address.\nTo identify the address of the company for which updates are required, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) \n- The address reference or the issuer address reference\nAll the attributes must be provided even those unchanged (except for the usages).\nThe API allows to validate an address ('invalid' status is set to false). But it's not possible to invalidate an address changing the value of the invalid 'flag' to true. If the user tries to do this action, an error message is returned.\n\nOne or several address usages can be added to the address (in order to retrieve this address). An address usage is used for specific business process/service. When adding a usage to an address, the usage is immediately active and if it is already assigned to another address, it is removed from this latter. \nAll the usages already linked to the address cannot be removed via this API.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "issuer Address External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyAddressRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/{customerReference}/addresses/{addressReference}/activate": {
        "post": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Activate address of a company",
          "operationId": "activateCompanyAddressByCustomerRefAndAddressRef",
          "description": "The API allows to activate on demand of an address.\nTo activate the address of the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) \n- The address reference or the issuer address reference\nIf a temporary address exists, it becomes also active.\nThe address identifiers, address attributes and address usages are displayed in the response.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "customerReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "addressReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityActivateAddressResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/external-customers/{issuerCustomerExternalReference}/addresses/{addressReference}/activate": {
        "post": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Activate address of a company by company external reference",
          "operationId": "activateCompanyAddressByCustomerExtRefAndAddressRef",
          "description": "The API allows to activate on demand of an address.\nTo activate the address of the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) \n- The address reference or the issuer address reference\nIf a temporary address exists, it becomes also active.\nThe address identifiers, address attributes and address usages are displayed in the response.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "issuerCustomerExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "addressReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityActivateAddressResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/{customerReference}/addresses/external-addresses/{issuerAddressExternalReference}/activate": {
        "post": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Activate address of a company by address external reference",
          "operationId": "activateCompanyAddressByCustomerRefAndAddressExtRef",
          "description": "The API allows to activate on demand of an address.\nTo activate the address of the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) \n- The address reference or the issuer address reference\nIf a temporary address exists, it becomes also active.\nThe address identifiers, address attributes and address usages are displayed in the response.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "customerReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "issuerAddressExternalReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityActivateAddressResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/external-customers/{issuerCustomerExternalReference}/addresses/external-addresses/{issuerAddressExternalReference}/activate": {
        "post": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Activate address of a company by company external reference and address external reference",
          "operationId": "activateCompanyAddressByCustomerExtRefAndAddressExtRef",
          "description": "The API allows to activate on demand of an address.\nTo activate the address of the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) \n- The address reference or the issuer address reference\nIf a temporary address exists, it becomes also active.\nThe address identifiers, address attributes and address usages are displayed in the response.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "issuerCustomerExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "issuerAddressExternalReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityActivateAddressResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/{customerReference}/addresses/{addressReference}/deactivate": {
        "post": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Deactivate address of a company",
          "operationId": "deactivateCompanyAddressByCustomerRefAndAddressRef",
          "description": "The API is used to deactivate the address.\nTo deactivate the address of the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) \n- The address reference or the issuer address reference\nThe status becomes \"INACTIVE\".\nThis action is forbidden in case of:\n- the address label is the HEAD_OFFICE\n- an usage is linked to the address.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "customerReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "addressReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeactivateAddressResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/external-customers/{issuerCustomerExternalReference}/addresses/{addressReference}/deactivate": {
        "post": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Deactivate address of a company by company external reference",
          "operationId": "deactivateCompanyAddressByCustomerExtRefAndAddressRef",
          "description": "The API is used to deactivate the address.\nTo deactivate the address of the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) \n- The address reference or the issuer address reference\nThe status becomes \"INACTIVE\".\nThis action is forbidden in case of:\n- the address label is the HEAD_OFFICE\n- an usage is linked to the address.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "issuerCustomerExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "addressReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeactivateAddressResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/{customerReference}/addresses/external-addresses/{issuerAddressExternalReference}/deactivate": {
        "post": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Deactivate address of a company by address external reference",
          "operationId": "deactivateCompanyAddressByCustomerRefAndAddressExtRef",
          "description": "The API is used to deactivate the address.\nTo deactivate the address of the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) \n- The address reference or the issuer address reference\nThe status becomes \"INACTIVE\".\nThis action is forbidden in case of:\n- the address label is the HEAD_OFFICE\n- an usage is linked to the address.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "customerReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "issuerAddressExternalReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeactivateAddressResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/external-customers/{issuerCustomerExternalReference}/addresses/external-addresses/{issuerAddressExternalReference}/deactivate": {
        "post": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Deactivate address of a company by company external reference and address external reference",
          "operationId": "deactivateCompanyAddressByCustomerExtRefAndAddressExtRef",
          "description": "The API is used to deactivate the address.\nTo deactivate the address of the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) \n- The address reference or the issuer address reference\nThe status becomes \"INACTIVE\".\nThis action is forbidden in case of:\n- the address label is the HEAD_OFFICE\n- an usage is linked to the address.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "issuerCustomerExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "issuerAddressExternalReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeactivateAddressResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/{customerReference}/addresses/{addressReference}/address-usages": {
        "post": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Create an address usage for a company",
          "operationId": "createAddressUsageForCompany",
          "description": "The address usage describes in which business case the address will be used (eg statement sending, card delivery, ...). The complete authorized values list is shared during the product configuration between the issuer and WL.\nThis API allows a usage determined by its name (e.g. STATEMENT_SENDING) to be linked to the entity reference of the address (e.g. card contract reference) and the service code (e.g. ACCOUNT_SERVICE).\nTo create an address usage, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)\n- The address reference or the issuer address reference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateAddressUsageRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddressUsageResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Remove an address usage of a company",
          "operationId": "deleteAddressUsageForCompany",
          "description": "The API deletes the address usages linked to one address.\nTo identify the address of the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) \n- The address reference or the issuer address reference. \nThe address usages are filtered by the request params :\n- addressUsageName (for definition see the resource addressUsage), mandatory \n- entityReference (for definition see the resource addressUsage), optional\n- serviceCode (for definition see the resource addressUsage), mandatory\nIf the entityReference is empty and the API finds several addressUsages (for the addressUsageName and serviceCode in request param), then the list of addressUsages will be deleted.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "serviceCode",
              "in": "query",
              "description": "The Service for which the address usage is defined : CARD_SERVICE, ACCOUNT_SERVICE. Mandatory ",
              "required": true,
              "type": "string"
            },
            {
              "name": "entityReference",
              "in": "query",
              "description": "This corresponds to the application domain of the address. It can be eg a card contract reference, card account reference. It is an optional field.\nIt enables to have the same usage address for the same customer applied to different addresses (one cardholder with 2 card contracts: card delivery address usage is assigned to main postal address for contract A and card delivery address usage is also assigned to office postal address for contract B.",
              "required": false,
              "type": "string"
            },
            {
              "name": "addressUsageName",
              "in": "query",
              "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteAddressUsageResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/external-customers/{issuerCustomerExternalReference}/addresses/{addressReference}/address-usages": {
        "post": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Create an address usage for a company by company external reference",
          "operationId": "createAddressUsageForCompanyByCustomerIssuerExtRef",
          "description": "The address usage describes in which business case the address will be used (eg statement sending, card delivery, ...). The complete authorized values list is shared during the product configuration between the issuer and WL.\nThis API allows a usage determined by its name (e.g. STATEMENT_SENDING) to be linked to the entity reference of the address (e.g. card contract reference) and the service code (e.g. ACCOUNT_SERVICE).\nTo create an address usage, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)\n- The address reference or the issuer address reference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateAddressUsageRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddressUsageResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Remove an address usage of a company by company external reference",
          "operationId": "deleteAddressUsageForCompanyByCustomerIssuerExtRef",
          "description": "The API deletes the address usages linked to one address.\nTo identify the address of the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) \n- The address reference or the issuer address reference. \nThe address usages are filtered by the request params :\n- addressUsageName (for definition see the resource addressUsage), mandatory \n- entityReference (for definition see the resource addressUsage), optional\n- serviceCode (for definition see the resource addressUsage), mandatory\nIf the entityReference is empty and the API finds several addressUsages (for the addressUsageName and serviceCode in request param), then the list of addressUsages will be deleted.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "serviceCode",
              "in": "query",
              "description": "The Service for which the address usage is defined : CARD_SERVICE, ACCOUNT_SERVICE. Mandatory ",
              "required": true,
              "type": "string"
            },
            {
              "name": "entityReference",
              "in": "query",
              "description": "This corresponds to the application domain of the address. It can be eg a card contract reference, card account reference. It is an optional field.\nIt enables to have the same usage address for the same customer applied to different addresses (one cardholder with 2 card contracts: card delivery address usage is assigned to main postal address for contract A and card delivery address usage is also assigned to office postal address for contract B.",
              "required": false,
              "type": "string"
            },
            {
              "name": "addressUsageName",
              "in": "query",
              "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteAddressUsageResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/{customerReference}/addresses/external-addresses/{issuerAddressExternalReference}/address-usages": {
        "post": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Create an address usage for a company by address external reference",
          "operationId": "createAddressUsageForCompanyByIssuerExtRef",
          "description": "The address usage describes in which business case the address will be used (eg statement sending, card delivery, ...). The complete authorized values list is shared during the product configuration between the issuer and WL.\nThis API allows a usage determined by its name (e.g. STATEMENT_SENDING) to be linked to the entity reference of the address (e.g. card contract reference) and the service code (e.g. ACCOUNT_SERVICE).\nTo create an address usage, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)\n- The address reference or the issuer address reference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateAddressUsageRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddressUsageResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Remove an address usage of a company by address external reference",
          "operationId": "deleteAddressUsageForCompanyByIssuerExtRef",
          "description": "The API deletes the address usages linked to one address.\nTo identify the address of the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) \n- The address reference or the issuer address reference. \nThe address usages are filtered by the request params :\n- addressUsageName (for definition see the resource addressUsage), mandatory \n- entityReference (for definition see the resource addressUsage), optional\n- serviceCode (for definition see the resource addressUsage), mandatory\nIf the entityReference is empty and the API finds several addressUsages (for the addressUsageName and serviceCode in request param), then the list of addressUsages will be deleted.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "serviceCode",
              "in": "query",
              "description": "The Service for which the address usage is defined : CARD_SERVICE, ACCOUNT_SERVICE. Mandatory ",
              "required": true,
              "type": "string"
            },
            {
              "name": "entityReference",
              "in": "query",
              "description": "This corresponds to the application domain of the address. It can be eg a card contract reference, card account reference. It is an optional field.\nIt enables to have the same usage address for the same customer applied to different addresses (one cardholder with 2 card contracts: card delivery address usage is assigned to main postal address for contract A and card delivery address usage is also assigned to office postal address for contract B.",
              "required": false,
              "type": "string"
            },
            {
              "name": "addressUsageName",
              "in": "query",
              "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteAddressUsageResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/external-customers/{issuerCustomerExternalReference}/addresses/external-addresses/{issuerAddressExternalReference}/address-usages": {
        "post": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Create an address usage for a company by company external reference and address external reference",
          "operationId": "createAddressUsageForCompanyByIssuerExtRefAndCustomerIssuerExtRef",
          "description": "The address usage describes in which business case the address will be used (eg statement sending, card delivery, ...). The complete authorized values list is shared during the product configuration between the issuer and WL.\nThis API allows a usage determined by its name (e.g. STATEMENT_SENDING) to be linked to the entity reference of the address (e.g. card contract reference) and the service code (e.g. ACCOUNT_SERVICE).\nTo create an address usage, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)\n- The address reference or the issuer address reference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateAddressUsageRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddressUsageResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Company - Address"
          ],
          "summary": "Remove an address usage of a company by company external reference and address external reference",
          "operationId": "deleteAddressUsageForCompanyByIssuerExtRefAndCustomerIssuerExtRef",
          "description": "The API deletes the address usages linked to one address.\nTo identify the address of the company, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company) \n- The address reference or the issuer address reference. \nThe address usages are filtered by the request params :\n- addressUsageName (for definition see the ressource addressUsage), mandatory \n- entityReference (for definition see the resource addressUsage), optional\n- serviceCode (for definition see the resource addressUsage), mandatory\nIf the entityReference is empty and the API finds several addressUsages (for the addressUsageName and serviceCode in request param), then the list of addressUsages will be deleted.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "serviceCode",
              "in": "query",
              "description": "The Service for which the address usage is defined : CARD_SERVICE, ACCOUNT_SERVICE. Mandatory ",
              "required": true,
              "type": "string"
            },
            {
              "name": "entityReference",
              "in": "query",
              "description": "This corresponds to the application domain of the address. It can be eg a card contract reference, card account reference. It is an optional field.\nIt enables to have the same usage address for the same customer applied to different addresses (one cardholder with 2 card contracts: card delivery address usage is assigned to main postal address for contract A and card delivery address usage is also assigned to office postal address for contract B.",
              "required": false,
              "type": "string"
            },
            {
              "name": "addressUsageName",
              "in": "query",
              "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteAddressUsageResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/businessRefType/{businessRefType}/businessRefValue/{businessRefValue}/event-stores": {
        "get": {
          "tags": [
            "Event Store"
          ],
          "summary": "Retrieve Event Stores",
          "operationId": "getByIssuerIdBusinessRefTypeBusinessRefValAndEventDateBetweenDays",
          "description": "Event stores contain comments or business events that can be generated by applications (CMS, authorization server, customer service GUI,..) part of our solution.\nThis API enables to retrieve the list of events associated to a business reference type and a business reference value for given period of time.\nA business reference type corresponds to a business domain like a CONTRACT, CARD, ACCOUNT whereas a business reference value can be typically a card, account, card contract reference.\nThe same event can be retrieved for different business reference types and business reference values. \nEvent can be uniquely identified by its correlationId.  \nThis API is mainly used currently to get the comments linked to a business reference value (e.g a given card identifier)",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL Correlation ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "businessRefType",
              "in": "path",
              "description": "Business reference type to be pushed.\nExample: CONTRACT, CARD_CONTRACT, CARD, ACCOUNT, CUSTOMER, etc",
              "required": true,
              "type": "string"
            },
            {
              "name": "businessRefValue",
              "in": "path",
              "description": "Business reference value for a business reference type.\nExamples of values : card reference, customer reference, account number.",
              "required": true,
              "type": "string"
            },
            {
              "name": "eventType",
              "in": "query",
              "description": "Event type\nTypically for CARD business Reference Type, event types relative to card status modification event can be CARD_ISSUE, FIRST_ACTIVATION, CARD_BLOCKING,..\nIn order to retrieve the comments , use COMMENT event-type.\nThe list of event types are shared during the design phase.",
              "required": false,
              "type": "string",
              "allowEmptyValue": false
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi",
              "allowEmptyValue": false
            },
            {
              "name": "fromDate",
              "in": "query",
              "description": "The date from ('yyyy-MM-dd'T'HH:mm:ss X', e.g. 2020-02-25T13:50:56+04:00 or 2020-02-25T10:50:56)",
              "required": true,
              "type": "string",
              "allowEmptyValue": false
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID of the business event",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Offset",
              "required": false,
              "type": "integer",
              "default": 100,
              "format": "int32",
              "allowEmptyValue": false
            },
            {
              "name": "origin",
              "in": "query",
              "description": "The system that has published the event or comment. Example : 'IBO' for CMS,  'PGUI' for Customer Service GUI, 'WLP FO' for authorization server.",
              "required": false,
              "type": "string",
              "allowEmptyValue": false
            },
            {
              "name": "page",
              "in": "query",
              "description": "Page",
              "required": false,
              "type": "integer",
              "default": 0,
              "format": "int32",
              "allowEmptyValue": false
            },
            {
              "name": "toDate",
              "in": "query",
              "description": "The date to ('yyyy-MM-dd'T'HH:mm:ss X', e.g. 2020-02-25T14:50:56+04:00 or 2020-02-25T11:50:56)",
              "required": true,
              "type": "string",
              "allowEmptyValue": false
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityEventStoreList"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
              "Event Store"
          ],
          "summary": "Post an Event",
          "operationId": "addEventByIssuerIdBusinessRefTypeAndBusinessRefValue",
          "parameters": [
              {
                  "name": "issuerId",
                  "in": "path",
                  "description": "The issuer id",
                  "required": true,
                  "type": "integer",
                  "format": "int64"
              },
              {
                  "name": "businessRefType",
                  "in": "path",
                  "description": "The business Reference Type",
                  "required": true,
                  "type": "string"
              },
              {
                  "name": "businessRefValue",
                  "in": "path",
                  "description": "The business Reference Value",
                  "required": true,
                  "type": "string"
              },
              {
                  "in": "body",
                  "name": "body",
                  "required": true,
                  "schema": {
                    "$ref": "#/definitions/CreateEventStoreEventRequest"
                  }
              }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/CreateEventStoreEventResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/event-stores/search": {
        "post": {
          "tags": [
            "Event Store"
          ],
          "summary": "Search Event Stores",
          "operationId": "getByIssuerIdBusinessRefTypeValMapAndEventDateBetweenDays",
          "description": "Event stores contain comments or business events that can be generated by applications (CMS, authorization server, customer service GUI,..) part of our solution.\nThis API enables to retrieve the list of events associated to provided set of business reference types and a business reference values for given period of time.\nA business reference types correspond to a business domain like a CONTRACT, CARD, ACCOUNT whereas a business reference values list for each provided type can be typically a card, account, card contract reference.\nThe same event can be retrieved for different business reference types and business reference values. \nEvent can be uniquely identified by its correlationId.  \nThis API is mainly used currently to get the comments linked to a business reference value (e.g a given card identifier)",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL Correlation ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "businessRefTypeValuesList",
              "in": "body",
              "description": "List of businessRefTypes and corresponding businessRefValues",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/BusinessRefTypeValues"
                }
              }
            },
            {
              "name": "eventType",
              "in": "query",
              "description": "Event type\nTypically for CARD business Reference Type, event types relative to card status modification event can be CARD_ISSUE, FIRST_ACTIVATION, CARD_BLOCKING,..\nIn order to retrieve the comments , use COMMENT event-type.\nThe list of event types are shared during the design phase.",
              "required": false,
              "type": "string",
              "allowEmptyValue": false
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi",
              "allowEmptyValue": false
            },
            {
              "name": "fromDate",
              "in": "query",
              "description": "The date from ('yyyy-MM-dd'T'HH:mm:ss X', e.g. 2020-02-25T13:50:56+04:00 or 2020-02-25T10:50:56)",
              "required": true,
              "type": "string",
              "allowEmptyValue": false
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID of the business event",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Offset",
              "required": false,
              "type": "integer",
              "default": 100,
              "format": "int32",
              "allowEmptyValue": false
            },
            {
              "name": "origin",
              "in": "query",
              "description": "The system that has published the event or comment. Example : 'IBO' for CMS,  'PGUI' for Customer Service GUI, 'WLP FO' for authorization server.",
              "required": false,
              "type": "string",
              "allowEmptyValue": false
            },
            {
              "name": "page",
              "in": "query",
              "description": "Page",
              "required": false,
              "type": "integer",
              "default": 0,
              "format": "int32",
              "allowEmptyValue": false
            },
            {
              "name": "toDate",
              "in": "query",
              "description": "The date to ('yyyy-MM-dd'T'HH:mm:ss X', e.g. 2020-02-25T14:50:56+04:00 or 2020-02-25T11:50:56)",
              "required": true,
              "type": "string",
              "allowEmptyValue": false
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityEventStoreList"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/tokens/{tokenReference}/token-history": {
        "get": {
          "tags": [
            "FO Token Event"
          ],
          "summary": "Get FO Token Event history by Token Reference",
          "operationId": "getByIssuerIdFOTokenReferenceValMap",
          "description": "The source is the current FO data and could face a desynchronization with scheme referential",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL Correlation ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "tokenReference",
              "in": "path",
              "description": "The FO token reference id",
              "required": true,
              "type": "string",
              "allowEmptyValue": false
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi",
              "allowEmptyValue": false
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID of the business event",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Offset",
              "required": false,
              "type": "integer",
              "default": 10,
              "format": "int32",
              "allowEmptyValue": false
            },
            {
              "name": "page",
              "in": "query",
              "description": "Page",
              "required": false,
              "type": "integer",
              "default": 0,
              "format": "int32",
              "allowEmptyValue": false
            }
          ],
          "responses": {
            "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/BadRequestErrorApiResponse"
            }
            },
            "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedErrorApiResponse"
            }
            },
            "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenErrorApiResponse"
            }
            },
            "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/NotFoundErrorApiResponse"
            }
            },
            "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
            }
            },
            "502": {
            "description": "Bad gateway",
            "schema": {
              "$ref": "#/definitions/BadGatewayErrorApiResponse"
            }
            },
            "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApiResponseEntityFOTokenEventList"
            }
            }
          },
          "security": [
            {
            "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/tokens/{tokenReference}": {
        "get": {
          "tags": [
            "FO Token Event"
          ],
          "summary": "Get latest FO Token Event by Token Reference",
          "operationId": "getByIssuerIdFOTokenReferenceValMapAndMaxEventDate",
          "description": "The source is the current FO data and could face a desynchronization with scheme referential",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL Correlation ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi",
              "allowEmptyValue": false
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID of the token event",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "tokenReference",
              "in": "path",
              "description": "",
              "required": true,
              "type": "string",
              "allowEmptyValue": false
            },
            {
              "name": "offset",
              "in": "query",
              "description": "Offset",
              "required": false,
              "type": "integer",
              "default": 10,
              "format": "int32",
              "allowEmptyValue": false
            },
            {
              "name": "page",
              "in": "query",
              "description": "Page",
              "required": false,
              "type": "integer",
              "default": 0,
              "format": "int32",
              "allowEmptyValue": false
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityFOTokenEventList"
              }
            }
          },
          "security": [
            {
            "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/tokens": {
        "get": {
            "tags": [
              "FO Token Event"
            ],
            "summary": "Get latest FO Token Events by Card Id",
            "operationId": "getByIssuerIdAndCardId",
            "description": "The source is the current FO data and could face a desynchronization with scheme referential",
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "WL-Correlation-ID",
                "in": "header",
                "description": "WL Correlation ID",
                "required": false,
                "type": "string"
              },
              {
                "name": "filter",
                "in": "query",
                "description": "Filtered Fields",
                "required": false,
                "type": "array",
                "items": {
                  "type": "string"
                },
                "collectionFormat": "multi",
                "allowEmptyValue": false
                },
              {
                "name": "issuerId",
                "in": "path",
                "description": "Issuer ID of the token event",
                "required": true,
                "type": "integer",
                "format": "int64"
              },
              {
                "name": "cardReference",
                "in": "path",
                "description": "The card id",
                "required": true,
                "type": "integer",
                "format": "int64"
              },
              {
                "name": "offset",
                "in": "query",
                "description": "Offset",
                "required": false,
                "type": "integer",
                "default": 10,
                "format": "int32",
                "allowEmptyValue": false
              },
              {
                "name": "page",
                "in": "query",
                "description": "Page",
                "required": false,
                "type": "integer",
                "default": 0,
                "format": "int32",
                "allowEmptyValue": false
                }
            ],
            "responses": {
              "400": {
                "description": "Bad request",
                "schema": {
                  "$ref": "#/definitions/BadRequestErrorApiResponse"
                }
              },
              "401": {
                "description": "Unauthorized",
                "schema": {
                  "$ref": "#/definitions/UnauthorizedErrorApiResponse"
                }
              },
              "403": {
                "description": "Forbidden",
                "schema": {
                  "$ref": "#/definitions/ForbiddenErrorApiResponse"
                }
              },
              "404": {
                "description": "Not found",
                "schema": {
                  "$ref": "#/definitions/NotFoundErrorApiResponse"
                }
              },
              "500": {
                "description": "Internal server error",
                "schema": {
                  "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
                }
              },
              "502": {
                "description": "Bad gateway",
                "schema": {
                  "$ref": "#/definitions/BadGatewayErrorApiResponse"
                }
              },
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/ApiResponseEntityFOTokenEventList"
                }
              }
            },
            "security": [
              {
              "basic": []
              }
            ],
            "deprecated": false
        }
      },
      "/issuers/{issuerId}/card-contracts/": {
        "get": {
          "tags": [
            "Card Contract"
          ],
          "summary": "List card contracts",
          "operationId": "listCardContractsByGroupReference",
          "description": "The API allows the list of card contracts to be retrieved which have the same card contract group reference.\nThe main input fields are:\n- The issuer ID\n- The group reference of the card contract for which the detail is requested:\n\nIt is also possible to request some additional data by using the embedded fields.\n\nIn return, the interface provides the generic information (mainly master data) relevant to the card contract.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardContractGroupReference",
              "in": "query",
              "description": "group reference of the Card Contract",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "cards",
                  "selectedModels",
                  "cardIdentifiers",
                  "relatedAccounts",
                  "cards.orders",
                  "cards.statusHistory",
                  "cards.replacementFor",
                  "cards.renewedFor"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCardContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/card-contracts/external-card-contracts/{issuerCardContractExternalReference}": {
        "get": {
          "tags": [
            "Card Contract"
          ],
          "summary": "Retrieve card contract by external reference",
          "operationId": "retrieveCardContractByIssuerExtRef",
          "description": "The API allows the card contract details to be retrieved. \nThe main input fields are:\n- The issuer ID\n- The card contract for which the detail is requested: It can be provided by using the card contract reference or the issuer card contract external reference. \n\nIt is also possible to request some additional data by using the embedded fields.\n\nIn return, the interface provides the generic information (mainly master data) relevant to the card contract.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardContractExternalReference",
              "in": "path",
              "description": "Issuer Card Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "selectedModels",
                  "cardIdentifiers",
                  "relatedAccounts",
                  "cards",
                  "cards.orders"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCardContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Card Contract"
          ],
          "summary": "Update card contract by external reference",
          "operationId": "modifyCardContractByIssuerExtRef",
          "description": "The API allows a list of pre-defined parameters (attributes) of a card contract to be updated.\nThe main input fields are:\n- The issuer ID\n- The card contract for which updates are required: It can be provided by using the card contract reference or the issuer card contract external reference. \n- Parameters to be updated\n\nThe card contract parameters can be retrieved using the Retrieve card Contract detail API. \nThe updated parameters should be consistent with the initial product configuration defined in the system (e.g., a change of model is accepted only if the provided model reference is allowed in the product definition).\nA typical update for the card contract is the embossing name.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardContractExternalReference",
              "in": "path",
              "description": "Issuer Card Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCardContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCardContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/card-contracts/external-card-contracts/{issuerCardContractExternalReference}/cardholder": {
        "get": {
          "tags": [
            "Card Contract"
          ],
          "summary": "Retrieve cardholder for a card contract by external reference",
          "operationId": "retrieveCardHolderByIssuerExtRef",
          "description": "The API allows the cardholder data linked to the card contract to be retrieved.\nThe main input fields are:\n- The issuer ID\n- The card contract for which the detail is requested: It can be provided by using the card contract reference or the issuer card contract external reference. \n\nIt is also possible to request some additional data by using the embedded fields.\n\nIn return, the interface provides the generic information of the customer.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardContractExternalReference",
              "in": "path",
              "description": "Issuer Card Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressIdentifiers",
                  "addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCustomer"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/card-contracts/external-card-contracts/{issuerCardContractExternalReference}/cards": {
        "get": {
          "tags": [
            "Card Contract"
          ],
          "summary": "List cards for card contract by external reference",
          "operationId": "listCardsForCardContractByIssuerExtRef",
          "description": "The API allows all the cards of a card contract to be retrieved. \nThe main input fields are:\n- The issuer ID\n- The card contract for which the cards list is requested: It can be provided by using the card contract reference or the issuer card contract external reference. \n\nIn return, the interface provides the list of all the cards linked to the card contract. Each card is provided with additional information such as card status, expiry date, embossing line, blocking reason (if in blocked status).",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardContractExternalReference",
              "in": "path",
              "description": "Issuer Card Contract External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCard"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/card-contracts/external-card-contracts/{issuerCardContractExternalReference}/close": {
        "post": {
          "tags": [
            "Card Contract"
          ],
          "summary": "Close card contract by external reference",
          "description": "The API allows a card contract to be closed.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe card contract for which the closure is requested:  It can be provided by using the card contract reference or the issuer card contract external reference. \n•\tThe parameters of the closure: reason, delay, date.\n\nA card contract can be either closed immediately or in the future (either at the card expiry date or at another scheduled date).",
          "operationId": "closeCardContractByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardContractExternalReference",
              "in": "path",
              "description": "Issuer Card Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CloseCardContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCloseCardContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/card-contracts/{cardContractReference}/cancel-close": {
        "post": {
          "tags": [
            "Card Contract"
          ],
          "summary": "Cancel close card contract",
          "description": "This API enables to cancel a card contract closing with a scheduled date in the future.\n\nAs a result, no closing date is planned anymore for the card contract.",
          "operationId": "cancelCloseCardContract",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardContractReference",
              "in": "path",
              "description": "Card Contract Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCancelCloseCardContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/card-contracts/external-card-contracts/{issuerCardContractExternalReference}/cancel-close": {
        "post": {
          "tags": [
            "Card Contract"
          ],
          "summary": "cancel close card contract by external reference",
          "description": "This API enables to cancel a card contract closing with a scheduled date in the future.\n\nAs a result, no closing date is planned anymore for the card contract.",
          "operationId": "cancelCloseCardContractByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardContractExternalReference",
              "in": "path",
              "description": "Issuer Card Contract External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCancelCloseCardContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/card-contracts/external-card-contracts/{issuerCardContractExternalReference}/contract": {
        "get": {
          "tags": [
            "Card Contract"
          ],
          "summary": "Retrieve contract for a card contract by external reference",
          "operationId": "retrieveContractForCardContractByIssuerExtRef",
          "description": "The API allows the contract detail of a card contract to be retrieved. \nThe main input fields requested by the API are:\n- The issuer ID\n- The card contract for which the contract information is requested: It can be provided by using the card contract reference or the issuer card contract external reference. \n\nIt is also possible to request some additional data, such as contract customers, accounts, legitimacy documents, by using the embedded fields.\n\nIn return, the interface provides the contract details.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardContractExternalReference",
              "in": "path",
              "description": "Issuer Card Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "advertisementFlags",
                  "deliveryChannel",
                  "legitimacyDocuments",
                  "contractFees",
                  "accountIdentifiers",
                  "accounts",
                  "cardContractIdentifiers",
                  "cardContracts",
                  "dataAnalysisFlags",
                  "contractCustomerIdentifiers",
                  "contractCustomers",
                  "addonSubscriptions"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityContract"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/card-contracts/external-card-contracts/{issuerCardContractExternalReference}/corporate-contract": {
        "get": {
          "tags": [
            "Card Contract"
          ],
          "summary": "Retrieve corporate contract for a card contract by external reference",
          "operationId": "retrieveCorporateContractForCardContractByIssuerExtRef",
          "description": "The API allows the corporate contract detail of a card contract to be retrieved. \n\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe card contract for which the corporate contract information is requested: It can be provided by using the card contract reference or the issuer card contract external reference. \n\nIt is also possible to request some additional data, such as list of corporate contract entities (limited to 100), list of all customers (limited to 100), list of all companies (limited to 100), list of corporate employee accounts (limited to 100), root account linked to this corporate contract, by using the embedded fields.\n\nIn return, the interface provides the corporate contract details.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardContractExternalReference",
              "in": "path",
              "description": "Issuer Card Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "corporateContractEntities",
                  "contractCustomers",
                  "contractCompanies",
                  "corporateEmployeeAccounts",
                  "rootAccount"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCorporateContract"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/card-contracts/{cardContractReference}": {
        "get": {
          "tags": [
            "Card Contract"
          ],
          "summary": "Retrieve card contract",
          "operationId": "retrieveCardContract",
          "description": "The API allows the card contract details to be retrieved. \nThe main input fields are:\n- The issuer ID\n- The card contract for which the detail is requested: It can be provided by using the card contract reference or the issuer card contract external reference. \n\nIt is also possible to request some additional data by using the embedded fields.\n\nIn return, the interface provides the generic information (mainly master data) relevant to the card contract.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardContractReference",
              "in": "path",
              "description": "Card Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "selectedModels",
                  "cardIdentifiers",
                  "relatedAccounts",
                  "cards",
                  "cards.orders"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCardContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Card Contract"
          ],
          "summary": "Update card contract",
          "operationId": "modifyCardContract",
          "description": "The API allows a list of pre-defined parameters (attributes) of a card contract to be updated.\nThe main input fields are:\n- The issuer ID\n- The card contract for which updates are required: It can be provided by using the card contract reference or the issuer card contract external reference. \n- Parameters to be updated\n\nThe card contract parameters can be retrieved using the Retrieve card Contract detail API. \nThe updated parameters should be consistent with the initial product configuration defined in the system (e.g., a change of model is accepted only if the provided model reference is allowed in the product definition).\nA typical update for the card contract is the embossing name.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardContractReference",
              "in": "path",
              "description": "Card Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCardContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCardContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/card-contracts/{cardContractReference}/cardholder": {
        "get": {
          "tags": [
            "Card Contract"
          ],
          "summary": "Retrieve cardholder for a card contract",
          "operationId": "retrieveCardHolder",
          "description": "The API allows the cardholder data linked to the card contract to be retrieved.\nThe main input fields are:\n- The issuer ID\n- The card contract for which the detail is requested: It can be provided by using the card contract reference or the issuer card contract external reference. \n\nIt is also possible to request some additional data by using the embedded fields.\n\nIn return, the interface provides the generic information of the customer.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardContractReference",
              "in": "path",
              "description": "Card Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressIdentifiers",
                  "addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCustomer"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/card-contracts/{cardContractReference}/cards": {
        "get": {
          "tags": [
            "Card Contract"
          ],
          "summary": "List cards for card contract",
          "operationId": "listCardsForCardContract",
          "description": "The API allows all the cards of a card contract to be retrieved. \nThe main input fields are:\n- The issuer ID\n- The card contract for which the cards list is requested: It can be provided by using the card contract reference or the issuer card contract external reference. \n\nIn return, the interface provides the list of all the cards linked to the card contract. Each card is provided with additional information such as card status, expiry date, embossing line, blocking reason (if in blocked status).",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardContractReference",
              "in": "path",
              "description": "Card Contract Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCard"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/card-contracts/{cardContractReference}/close": {
        "post": {
          "tags": [
            "Card Contract"
          ],
          "summary": "Close card contract",
          "description": "The API allows a card contract to be closed.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe card contract for which the closure is requested:  It can be provided by using the card contract reference or the issuer card contract external reference. \n•\tThe parameters of the closure: reason, delay, date.\n\nA card contract can be either closed immediately or in the future (either at the card expiry date or at another scheduled date).",
          "operationId": "closeCardContract",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardContractReference",
              "in": "path",
              "description": "Card Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CloseCardContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCloseCardContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/card-contracts/{cardContractReference}/contract": {
        "get": {
          "tags": [
            "Card Contract"
          ],
          "summary": "Retrieve contract for a card contract",
          "operationId": "retrieveContractForCardContract",
          "description": "The API allows the contract detail of a card contract to be retrieved. \nThe main input fields requested by the API are:\n- The issuer ID\n- The card contract for which the contract information is requested: It can be provided by using the card contract reference or the issuer card contract external reference. \n\nIt is also possible to request some additional data, such as contract customers, accounts, legitimacy documents, by using the embedded fields.\n\nIn return, the interface provides the contract details.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardContractReference",
              "in": "path",
              "description": "Card Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "advertisementFlags",
                  "deliveryChannel",
                  "legitimacyDocuments",
                  "contractFees",
                  "accountIdentifiers",
                  "accounts",
                  "cardContractIdentifiers",
                  "cardContracts",
                  "dataAnalysisFlags",
                  "contractCustomerIdentifiers",
                  "contractCustomers",
                  "addonSubscriptions"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/card-contracts/{cardContractReference}/corporate-contract": {
        "get": {
          "tags": [
            "Card Contract"
          ],
          "summary": "Retrieve corporate contract for a card contract",
          "operationId": "retrieveCorporateContractForCardContract",
          "description": "The API allows the corporate contract detail of a card contract to be retrieved. \n\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe card contract for which the corporate contract information is requested: It can be provided by using the card contract reference or the issuer card contract external reference. \n\nIt is also possible to request some additional data, such as list of corporate contract entities (limited to 100), list of all customers (limited to 100), list of all companies (limited to 100), list of corporate employee accounts (limited to 100), root account linked to this corporate contract, by using the embedded fields.\n\nIn return, the interface provides the corporate contract details.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardContractReference",
              "in": "path",
              "description": "Card Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "corporateContractEntities",
                  "contractCustomers",
                  "contractCompanies",
                  "corporateEmployeeAccounts",
                  "rootAccount"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCorporateContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/pin-state": {
        "post": {
          "tags": [
            "Card - CardPinState"
          ],
          "summary": "Card Pin State With EnquireCardStates",
          "operationId": "cardPinStateUsingPOST",
          "description": "Operation which provides the currently effective details of the card entities matching the passed search criteria. \nSupported criteria are: Card reference or Card number or Alternative card number",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/RetrieveCardPinStateRequest"
              }
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCardPinState"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/pin-state/{accountReference}": {
        "get": {
          "tags": [
            "Card - CardPinState"
          ],
          "summary": "Card Pin State With EnquireCardStates",
          "operationId": "cardPinStateForAccountNumberUsingGET",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "accountReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "issuerId",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCardPinStateList"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/block-all": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Block all cards with same PAN or same PAN Reference",
          "operationId": "blockAllCards",
          "description": "The API is similar to Block a card API but is applied to all cards having the same PAN or same PAN reference.\n\nThe API allows the permanent blocking (immediately or in the future), or temporary blocking, depending on the configured blocking reason, of all cards having the same PAN or same PAN reference.\nCards must be in “CREATED” or “ACTIVE” status. \nThe blocking reason is chosen from the reasons configured beforehand for the issuer.\nIf a card is in \"DEACTIVATED\" status and the blocking reason is temporary, it will be ignored.\n\nIt is also possible to update the following blocking information by this API :\n- When the card is already blocked:\n  - Blocking reason among those available for the issuer\n  - Blocking detail\n  - Lost and stolen date if the blocking reason is LOST or STOLEN\n  - Fraud process\n  - The flag indicating whether the PIN is compromised\n  - Scheduled blocking information : delay or blocking reason if the delay is not yet reached\n\n- When the card is active :\n  - Scheduled blocking information : delay or blocking reason if the delay is not yet reached",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/BlockAllCardsRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityBlockAllCardsResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}": {
        "get": {
          "tags": [
            "Card"
          ],
          "summary": "Retrieve card by external reference",
          "operationId": "retrieveCardByIssuerExtRef",
          "description": "This API enables card information for a given card identifier to be retrieved.\n\nThe response can also be enriched (if specified as embedded fields in input) with additional data such as the status history of the card, the card Contract information, the card order identifiers linked to the card.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "publicKeyIdentifier",
              "in": "query",
              "description": "Public Key Identifier",
              "required": false,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "statusHistory",
                  "cardContract",
                  "renewedBy",
                  "renewedFor",
                  "replacementBy",
                  "replacementFor",
                  "orderIdentifiers",
                  "orders"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCard"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/activate": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Activate a card by external reference",
          "operationId": "activateCardByIssuerExtRef",
          "description": "The API allows to activate on demand a card in ''created'' status identified by the Issuer Card External Reference or the Card Reference.\nThe activation reason is chosen among the reasons configured beforehand for the issuer.\nAs a result, the card is active in our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ActivateCardRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityActivateCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/block": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Block a card by external reference",
          "operationId": "blockCardByIssuerExtRef",
          "description": "The API allows to block a card permanently (immediately or in the future) or to block a card temporarily depending on the configured blocking reason by using the Issuer Card External Reference or the Card Reference.\nThe card must be in “Created” or “Active” status.\nThe blocking reason is chosen among the reasons configured beforehand for the issuer.\n\nExample of use cases : \nUse case 1 : Card is blocked permanently, in case of lost, stolen, card not delivered, fraudulent activity for example.\nAs a result, the card is definitively blocked in our system (final status).\n\nUse case 2 : The card has been compromised in Common Point of Purchase (CPP) : a permanent card blocking is scheduled for the card and the cardholder is still allowed to use its card for PIN based transactions by the issuer\nAs a result, the card is still active in our system and a permanent card blocking is scheduled for the card.\n\nUse case 3 : Card is blocked temporary in case fraud suspicion by e.g Issuer, Fraud system. \nAs a result, the card is temporarily blocked in our system and can be unblocked later.\n\nIt is also possible to update the following blocking information by this API :\n- When the card is already blocked:\n  - Blocking reason among those available for the issuer\n  - Blocking detail\n  - Lost and stolen date if the blocking reason is LOST or STOLEN\n  - Fraud process\n  - The flag indicating whether the PIN is compromised\n  - Scheduled blocking information : delay or blocking reason if the delay is not yet reached\n\n- When the card is active :\n  - Scheduled blocking information : delay or blocking reason if the delay is not yet reached",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/BlockCardRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityBlockCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/block-and-replace": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Block and replace a card by external reference",
          "operationId": "blockAndReplaceCardByIssuerExtRef",
          "description": "The API allows a card identified by the Issuer Card External Reference or the Card Reference to be blocked and replaced.\nThis API regroups Block a card (for card blocking or blocking information update) and Replace a card APIs in a single request.\nAs result, the card is blocked and the new card is created.\nIf any error occurs while card blocking or card replacing, the card is neither blocked nor replaced.\n\nWith this API, it is also possible to block all cards having the same PAN than the card referenced by Issuer Card External Reference or the Card Reference. In this case Block all cards API is called instead Block a card API.\n\nIn case a product change on renewal is planned on the contract of the card to be replaced, the card will not be replaced but the product change will be forced instead. From the replace card request, only blocking reason and embossingName/embossingName2ndLine will be considered : \n- If blocking reason is provided (for temporary blocking only), the new card of the new contract is blocked with this reason\n- If embossingName and/or embossingName2ndLine are provided, they will be applied to the old card and will be transferred to the new card of the new contract.\nIn the request response, information related to the new contract and the product change will be returned.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/BlockAndReplaceCardRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityBlockAndReplaceCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/card-contract": {
        "get": {
          "tags": [
            "Card"
          ],
          "summary": "Retrieve card contract for a card by external reference",
          "operationId": "retrieveCardContractForCardByIssuerExtRef",
          "description": "The API enables the card contract information related to a given card to be retrieved.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe card for which the detail is requested: It can be provided by using the card reference or the issuer card external reference. \nIt is also possible to request some additional data by using the embedded fields (such as the list of models linked to the card contract, the account identifiers linked to the card contract, the identifiers and the information of the linked cards).\nIn return, the interface provides the generic information (mainly master data) relevant to the card contract.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "selectedModels",
                  "cardIdentifiers",
                  "relatedAccounts",
                  "cards"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCardContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/card-events": {
        "get": {
          "tags": [
            "Card"
          ],
          "summary": "Retrieve card event list (e.g. PIN change information) by external reference",
          "operationId": "listCardEventsByIssuerExternalRef",
          "description": "The API enables the events information related to a given card to be retrieved (e.g. status change such as card blocking/card activation, card issuing for replacement or renewal, PIN change.).",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "eventType",
              "in": "query",
              "description": "Type of event to return.\nPossible values are :\nPINChange, TanMailerOrderIssuing, CardOrderIssuing,  PinMailerOrderIssuing, TanMailerOrderExtraction, CardOrderExtraction,  PinMailerOrderExtraction, CancelCardOrderIssuing,  CancelTanMailerOrderIssuing, CancelPinMailerOrderIssuing, CardActivation,  CardIssuing, CardCancellation, CardDeactivation, CardBlocking, CardUnblocking.",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCardEvent"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/deactivate": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Deactivate a card by external reference",
          "operationId": "deactivateCardByIssuerExtRef",
          "description": "The API allows an active card, or a temporary blocked card, to be deactivated on demand, by using the Issuer Card External Reference or the Card Reference.\nThe deactivation reason is chosen from the reasons configured beforehand for the issuer.\nAs a result, the card is deactivated in our system.\nThis process is not reversible. New card authorizations are declined. If necessary, a request for a card replacement may be made by the issuer.\n\nThis API allows also to cancel a card in “Created” status, e.g., when the card production has failed.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/DeactivateCardRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeactivateCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}/corporate-employee-accounts/{accountReference}": {
        "get": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Retrieve corporate employee Accounts",
          "operationId": "retrieveCorporateEmployeeAccounts",
          "description": "This API allows a particular corporate employee account or Virtual Card Account to be retrieved from its reference or its issuer external reference.\n\nThe API response contains corporate employee account information such as:\n- account identifier with the account reference and the issuer external account reference\n- external reference of the employee account\n- parent identifier with the account reference and the issuer external account reference\n- allowed advertisement channels (flags) \n- allowed delivery channel for possible letters\n-  if both membership and account setup fees are waived during contract lifecycle \n-  if both membership fee and account setup fee are paid by the account or the root\n- type of a corporate product (if the account is related to the company or an employee) \n- embedded fields if requested such as account information, card account(s), card contract(s) linked to this corporate employee account",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "account",
                  "cardContracts",
                  "cardContracts.cards",
                  "cards.orders",
                  "customers",
                  "customers.addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCorporateEmployeeAccountResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Update Corporate employee account",
          "operationId": "updateCorporateEmployeeAccount",
          "description": "The API allows to update certain data of an existing corporate employee account or Virtual Card Account, such as:\n- the external reference of the employee account\n- the allowed advertisement channels (flags)\n- the allowed delivery channel for possible letters\n-  if both membership and account setup fees should be waived during contract lifecycle (can be changed at any moment)\n- if both membership fee and account setup fee are paid by the card account (usually the employee) or the root account (usually the company)\n\nAs a result the corporate employee account is immediately updated with provided data in our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCorporateEmployeeAccountRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCorporateEmployeeAccountResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}/corporate-employee-accounts/external-accounts/{issuerAccountExternalReference}": {
        "get": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Retrieve corporate employee accounts by account external reference",
          "operationId": "retrieveCorporateEmployeeAccountsWithExtAccountRef",
          "description": "This API allows a particular corporate employee account or Virtual Card Account to be retrieved from its reference or its issuer external reference.\n\nThe API response contains corporate employee account information such as:\n- account identifier with the account reference and the issuer external account reference\n- external reference of the employee account\n- parent identifier with the account reference and the issuer external account reference\n- allowed advertisement channels (flags) \n- allowed delivery channel for possible letters\n-  if both membership and account setup fees are waived during contract lifecycle \n-  if both membership fee and account setup fee are paid by the account or the root\n- type of a corporate product (if the account is related to the company or an employee) \n- embedded fields if requested such as account information, card account(s), card contract(s) linked to this corporate employee account",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "account",
                  "cardContracts",
                  "cardContracts.cards",
                  "cards.orders",
                  "customers",
                  "customers.addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCorporateEmployeeAccountResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Update Corporate employee account by account external reference",
          "operationId": "updateCorporateEmployeeAccountByExtAccount",
          "description": "The API allows to update certain data of an existing corporate employee account or Virtual Card Account, such as:\n- the external reference of the employee account\n- the allowed advertisement channels (flags)\n- the allowed delivery channel for possible letters\n-  if both membership and account setup fees should be waived during contract lifecycle (can be changed at any moment)\n- if both membership fee and account setup fee are paid by the card account (usually the employee) or the root account (usually the company)\n\nAs a result the corporate employee account is immediately updated with provided data in our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCorporateEmployeeAccountRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCorporateEmployeeAccountResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}/corporate-employee-accounts/external-accounts/{issuerAccountExternalReference}": {
        "get": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Retrieve corporate employee Accounts by contract external reference and account external reference",
          "operationId": "retrieveCorporateEmployeeAccountsWithExtContractRefAndExtAccountRef",
          "description": "This API allows a particular corporate employee account or Virtual Card Account to be retrieved from its reference or its issuer external reference.\n\nThe API response contains corporate employee account information such as:\n- account identifier with the account reference and the issuer external account reference\n- external reference of the employee account\n- parent identifier with the account reference and the issuer external account reference\n- allowed advertisement channels (flags) \n- allowed delivery channel for possible letters\n-  if both membership and account setup fees are waived during contract lifecycle \n-  if both membership fee and account setup fee are paid by the account or the root\n- type of a corporate product (if the account is related to the company or an employee) \n- embedded fields if requested such as account information, card account(s), card contract(s) linked to this corporate employee account",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "account",
                  "cardContracts",
                  "cardContracts.cards",
                  "cards.orders",
                  "customers",
                  "customers.addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCorporateEmployeeAccountResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Update Corporate employee account by contract external reference and account external reference",
          "operationId": "updateCorporateEmployeeAccountByExtContractAndExtAccount",
          "description": "The API allows to update certain data of an existing corporate employee account or Virtual Card Account, such as:\n- the external reference of the employee account\n- the allowed advertisement channels (flags)\n- the allowed delivery channel for possible letters\n-  if both membership and account setup fees should be waived during contract lifecycle (can be changed at any moment)\n- if both membership fee and account setup fee are paid by the card account (usually the employee) or the root account (usually the company)\n\nAs a result the corporate employee account is immediately updated with provided data in our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCorporateEmployeeAccountRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCorporateEmployeeAccountResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}/corporate-employee-accounts/{accountReference}": {
        "get": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Retrieve corporate employee Accounts by contract external reference",
          "operationId": "retrieveCorporateEmployeeAccountsWithExtContractRef",
          "description": "This API allows a particular corporate employee account or Virtual Card Account to be retrieved from its reference or its issuer external reference.\n\nThe API response contains corporate employee account information such as:\n- account identifier with the account reference and the issuer external account reference\n- external reference of the employee account\n- parent identifier with the account reference and the issuer external account reference\n- allowed advertisement channels (flags) \n- allowed delivery channel for possible letters\n-  if both membership and account setup fees are waived during contract lifecycle \n-  if both membership fee and account setup fee are paid by the account or the root\n- type of a corporate product (if the account is related to the company or an employee) \n- embedded fields if requested such as account information, card account(s), card contract(s) linked to this corporate employee account",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "account",
                  "cardContracts",
                  "cardContracts.cards",
                  "cards.orders",
                  "customers",
                  "customers.addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCorporateEmployeeAccountResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Update Corporate employee account by contract external reference",
          "operationId": "updateCorporateEmployeeAccountByExtContractAndAccount",
          "description": "The API allows to update certain data of an existing corporate employee account or Virtual Card Account, such as:\n- the external reference of the employee account\n- the allowed advertisement channels (flags)\n- the allowed delivery channel for possible letters\n-  if both membership and account setup fees should be waived during contract lifecycle (can be changed at any moment)\n- if both membership fee and account setup fee are paid by the card account (usually the employee) or the root account (usually the company)\n\nAs a result the corporate employee account is immediately updated with provided data in our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCorporateEmployeeAccountRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCorporateEmployeeAccountResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/{customerReference}/corporate-contracts": {
        "get": {
          "tags": [
            "Company - Related"
          ],
          "summary": "List corporate contracts for a company",
          "operationId": "listCorporateContract",
          "description": "This API enables all the contracts belonging to a given company to be retrieved.\nInformation to be provided in input:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)\nThe API response contains a list of contracts with related information.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "customerReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCorporateContracts"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/external-customers/{issuerCustomerExternalReference}/corporate-contracts": {
        "get": {
          "tags": [
            "Company - Related"
          ],
          "summary": "List corporate contracts for a company by external reference",
          "operationId": "listCorporateContractByExtRef",
          "description": "This API enables all the contracts belonging to a given company to be retrieved.\nInformation to be provided in input:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)\nThe API response contains a list of contracts with related information.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCorporateContracts"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}": {
        "get": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Retrieve corporate contract",
          "operationId": "retrieveCorporateContract",
          "description": "This API allows a particular corporate contract from its reference or its issuer external reference to be retrieved.\n\nThe API response contains corporate contract information such as:\n•\tcontract identifier with the contract reference and the issuer external contract reference if previously provided\n•\tlist of levels in the company organization\n•\tembedded fields if requested such as list of corporate contract entities (limited to 100), list of all customers (limited to 100), list of all companies (limited to 100), list of corporate employee accounts(limited to 100) linked to this corporate contract",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "corporateContractEntities",
                  "contractCustomers",
                  "contractCompanies",
                  "corporateEmployeeAccounts",
                  "rootAccount",
                  "corporateEmployeeAccounts.customerIdentifiers",
                  "contractCustomers.addresses",
                  "contractCompanies.addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCorporateContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Modify Corporate contract",
          "operationId": "modifyCorporateContract",
          "description": "The API allows to update certain data of an existing corporate contract such as\n- pass-through data (specificFields)\n- logo reference sent to the embosser (optional, and can be overridden at card level)\n- dispatch code sent to the embosser (optional)\n- if the company should receive a duplicate for statement or not\n- if the Open-to-buy should be reset to the credit limit amount at cycle closure date (credit account only)\n- if both membership fee and account setup fee are paid by the card account (usually the employee) or the root account (usually the company)\n- the description of each level of the company organization\n\nAs a result the corporate contract is immediately updated with provided data in Worldline system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCorporateContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCorporateContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}": {
        "get": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Retrieve corporate contract by external reference",
          "operationId": "retrieveCorporateContractByIssuerExtRef",
          "description": "This API allows a particular corporate contract from its reference or its issuer external reference to be retrieved.\n\nThe API response contains corporate contract information such as:\n•\tcontract identifier with the contract reference and the issuer external contract reference if previously provided\n•\tlist of levels in the company organization\n•\tembedded fields if requested such as list of corporate contract entities (limited to 100), list of all customers (limited to 100), list of all companies (limited to 100), list of corporate employee accounts(limited to 100) linked to this corporate contract",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "corporateContractEntities",
                  "contractCustomers",
                  "contractCompanies",
                  "corporateEmployeeAccounts",
                  "rootAccount",
                  "corporateEmployeeAccounts.customerIdentifiers",
                  "contractCustomers.addresses",
                  "contractCompanies.addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCorporateContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Modify Corporate contract by external reference",
          "operationId": "modifyCorporateContractByExtRef",
          "description": "The API allows to update certain data of an existing corporate contract such as\n- pass-through data (specificFields)\n- logo reference sent to the embosser (optional, and can be overridden at card level)\n- dispatch code sent to the embosser (optional)\n- if the company should receive a duplicate for statement or not\n- if the Open-to-buy should be reset to the credit limit amount at cycle closure date (credit account only)\n- if both membership fee and account setup fee are paid by the card account (usually the employee) or the root account (usually the company)\n- the description of each level of the company organization\n\nAs a result the corporate contract is immediately updated with provided data in Worldline system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCorporateContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCorporateContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}/close": {
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Close Corporate contract",
          "operationId": "closeCorporateContract",
          "description": "The API allows to close a corporate contract identified by the Issuer Contract external reference or the Contract reference.\nThe corporate contract can be closed immediately or in the future at a date provided by the issuer.\n\nAs a result,\n- For immediate corporate contract closing: the corporate contract is closed, the cards within the corporate contract are deactivated, the accounts closing process is started for all accounts.\n- For scheduled corporate contract closing (closing in the future): as soon as the closing date is reached then the immediate corporate contract closing process is applied.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CloseCorporateContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCloseCorporateContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}/add-corporate-contract-entity": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Add an entity to a Corporate contract",
          "operationId": "addCorporateContractEntity",
          "description": "This API allows an issuer to add a new entity to the company organization such a new country, division or department to an existing corporate contract.\n\nThe issuer shall provide required data to create the new entity such as \n- the product extension to be used among those available for the corporate product used to create the contract\n- entity and account data\n- customer (person) or company information (new ones) or customer references (existing ones in Worldline system)\n\nThe API response returns the extended corporate contract with information related to the newly added entity to the company organization and its associated account(s) only.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/AddCorporateContractEntityRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddCorporateContractEntityResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}/corporate-contract-entity/{companyEntityExternalReference}": {
        "patch": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Modify an entity of a Corporate contract - deprecated",
          "operationId": "modifyCorporateContractEntityDeprecated",
          "description": "The API allows certain data of an existing entity of a corporate contract to be updated such as\n- the allowed advertisement channels (flags)\n- the allowed delivery channel for possible letters\n\nAs a result the corporate contract entity is immediately updated with provided data in our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "companyEntityExternalReference",
              "in": "path",
              "description": "company Entity External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCorporateContractEntityRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddCorporateContractEntityResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": true
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}/corporate-contract-entities/{companyEntityExternalReference}": {
        "patch": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Modify an entity of a Corporate contract",
          "operationId": "modifyCorporateContractEntity",
          "description": "The API allows certain data of an existing entity of a corporate contract to be updated such as\n- the allowed advertisement channels (flags)\n- the allowed delivery channel for possible letters\n\nAs a result the corporate contract entity is immediately updated with provided data in our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "companyEntityExternalReference",
              "in": "path",
              "description": "company Entity External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCorporateContractEntityRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCorporateContractEntityResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}/corporate-contract-entity/{companyEntityExternalReference}": {
        "patch": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "modify an entity of a Corporate contract by external reference - deprecated",
          "operationId": "modifyCorporateContractEntityByIssuerExtRefDeprecated",
          "description": "The API allows certain data of an existing entity of a corporate contract to be updated such as\n- the allowed advertisement channels (flags)\n- the allowed delivery channel for possible letters\n\nAs a result the corporate contract entity is immediately updated with provided data in our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "companyEntityExternalReference",
              "in": "path",
              "description": "Company Entity External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCorporateContractEntityRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddCorporateContractEntityResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": true
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}/corporate-contract-entities/{companyEntityExternalReference}": {
        "patch": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "modify an entity of a Corporate contract by external reference",
          "operationId": "modifyCorporateContractEntityByIssuerExtRef",
          "description": "The API allows certain data of an existing entity of a corporate contract to be updated such as\n- the allowed advertisement channels (flags)\n- the allowed delivery channel for possible letters\n\nAs a result the corporate contract entity is immediately updated with provided data in our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "companyEntityExternalReference",
              "in": "path",
              "description": "Company Entity External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCorporateContractEntityRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCorporateContractEntityResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}/add-corporate-contract-entity": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Add an entity to a Corporate contract by external reference",
          "operationId": "addCorporateContractEntityByIssuerExtRef",
          "description": "This API allows an issuer to add a new entity to the company organization such a new country, division or department to an existing corporate contract.\n\nThe issuer shall provide required data to create the new entity such as \n- the product extension to be used among those available for the corporate product used to create the contract\n- entity and account data\n- customer (person) or company information (new ones) or customer references (existing ones in Worldline system)\n\nThe API response returns the extended corporate contract with information related to the newly added entity to the company organization and its associated account(s) only.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/AddCorporateContractEntityRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddCorporateContractEntityResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}/add-corporate-employee-cards-accounts": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Add an employee and its card(s) and account(s) to a Corporate contract",
          "operationId": "addCorporateEmployeeCardsAndAccounts",
          "description": "This API allows an issuer to add to an existing corporate contract an employee with a new card and a new card account. Different types of card products (e.g. MCI/VISA debit, credit, prepaid) are supported.\n\nThe issuer shall provide the required data\n- employee information (new or existing one)\n- the product extension, with appropriated card and account products among those available for the corporate product used to create the contract\n- required data for card and account\n- the entity of the company organization to which the employee should be attached (e.g. employee to be attached to department A)\n\nThe issuer can replace default membership fee and/or account setup fee (contract fees) by specific ones\n\nThe API response returns the extended corporate contract with information related to newly created employee account(s), card contract(s) and card(s) only.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/AddCorporateEmployeeCardsAndAccountsRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddCorporateEmployeeCardsAndAccountsResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}/add-corporate-employee-cards-accounts": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Add an employee and its card(s) and account(s) to a Corporate contract by external reference",
          "operationId": "addCorporateEmployeeCardsAndAccountsByIssuerExtRef",
          "description": "This API allows an issuer to add to an existing corporate contract an employee with a new card and a new card account. Different types of card products (e.g. MCI/VISA debit, credit, prepaid) are supported.\n\nThe issuer shall provide the required data\n- employee information (new or existing one)\n- the product extension, with appropriated card and account products among those available for the corporate product used to create the contract\n- required data for card and account\n- the entity of the company organization to which the employee should be attached (e.g. employee to be attached to department A)\n\nThe issuer can replace default membership fee and/or account setup fee (contract fees) by specific ones\n\nThe API response returns the extended corporate contract with information related to newly created employee account(s), card contract(s) and card(s) only.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/AddCorporateEmployeeCardsAndAccountsRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddCorporateEmployeeCardsAndAccountsResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}/add-virtual-cards-accounts-service": {
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Add Corporate VCA Service cards and accounts to a corporate contract",
          "operationId": "addVirtualCardsAccounts",
          "description": "This endpoint can be used to create Virtual Card Account (VCA). This is a specific service offered by MCI, VISA and Wordline service (VCE). The VCA is not used to pay transactions, instead a token is requested from MCI, VISA, Worldline service (depends on the Issuer), to fund the transactions.\n\nIt is possible to request creation of several VCA Service Cards and Accounts at the same time.\n\nPre Conditions\n- Card Profile related to Virtual Card account should exist\n\nThe Issuer can request adding VCA Servive cards and accounts to the corporate contract, by providing:\n- employee information (new or existing one)\n- the product extension, with appropriated card and account products among those available for the corporate product used to create the contract\n- required data for card and account\n- the entity of the company organization to which the employee should be attached (e.g. employee to be attached to department A)\n\nAs a result\n- Dedicated account to the Virtual Card Account is created\n- Card Contract and card is created related to VCA Service\n\nThe API response returns the extended corporate contract with information related to newly created VCA Service account(s), card contract(s) and card(s).",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/AddCorporateVcaServiceCardsAndAccountsRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddCorporateVcaServiceCardsAndAccountsResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}/add-virtual-cards-accounts-service": {
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Add Corporate VCA Service cards and accounts to a corporate contract by issuer contract external reference",
          "operationId": "addVirtualCardsAccountsByIssuerExtRef",
          "description": "This endpoint can be used to create Virtual Card Account (VCA). This is a specific service offered by MCI, VISA and Wordline service (VCE). The VCA is not used to pay transactions, instead a token is requested from MCI, VISA, Worldline service (depends on the Issuer), to fund the transactions.\n\nIt is possible to request creation of several VCA Service Cards and Accounts at the same time.\n\nPre Conditions\n- Card Profile related to Virtual Card account should exist\n\nThe Issuer can request adding VCA Servive cards and accounts to the corporate contract, by providing:\n- employee information (new or existing one)\n- the product extension, with appropriated card and account products among those available for the corporate product used to create the contract\n- required data for card and account\n- the entity of the company organization to which the employee should be attached (e.g. employee to be attached to department A)\n\nAs a result\n- Dedicated account to the Virtual Card Account is created\n- Card Contract and card is created related to VCA Service\n\nThe API response returns the extended corporate contract with information related to newly created VCA Service account(s), card contract(s) and card(s).",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/AddCorporateVcaServiceCardsAndAccountsRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddCorporateVcaServiceCardsAndAccountsResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/create-corporate-contract": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Create a Corporate contract",
          "operationId": "createCorporateContract",
          "description": "The Create Corporate Contract API allows the creation of a new corporate contract with the company organization (complete or partial structure).\n\nPre-conditions:\nThe correlation ID, if provided by the issuer, must be unique. In case of re-use of a correlation ID from an existing corporate contract, the system will return the data from the existing  corporate contract (e.g., if the API call returns a \"time-out\" response, the same correlation ID can be provided to retrieve corporate contract data from Worldline system for further checks).\n\nDuring the corporate contract creation\n1) The issuer can provide a list of new customers/companies, otherwise the references to existing customers/companies in Worldline system can be used\n2) The issuer has the possibility to create \n- the company organization, by adding 1 or several corporate entities such as countries, divisions, departments (this is also possible afterwards with dedicated API)\n- the employees with their cards and accounts (this is also possible afterwards with dedicated API)\n\nAs a result, the contract is created:\n- with its own reference calculated by our system\n- with the status set to \"Signed\"\n- with entity levels of the company organization (at least the company itself) \n- with the root entity account\n\nThe API response returns \n- the different identifiers related to the  corporate contract, such as the contract itself, contract owner, account owner of an entity\n- if requested identifiers of employee accounts, card contracts, cards and cardholders if any\n(each identifier is composed of the Worldline internal reference and, optionally, the external reference if provided by the issuer in the request)\n\nThe references are used to: retrieve/update/close corporate contracts, retrieve the list of entities for a corporate contract, retrieve the corporate employee account, etc.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateCorporateContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateCorporateContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}/close": {
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Close Corporate contract by external reference",
          "operationId": "closeCorporateContractByIssuerExtRef",
          "description": "The API allows to close a corporate contract identified by the Issuer Contract external reference or the Contract reference.\nThe corporate contract can be closed immediately or in the future at a date provided by the issuer.\n\nAs a result,\n- For immediate corporate contract closing: the corporate contract is closed, the cards within the corporate contract are deactivated, the accounts closing process is started for all accounts.\n- For scheduled corporate contract closing (closing in the future): as soon as the closing date is reached then the immediate corporate contract closing process is applied.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CloseCorporateContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCloseCorporateContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/new-tan": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Card"
          ],
          "summary": "Create new TAN by external reference",
          "operationId": "createTanByIssuerExtRef",
          "description": "For PIN self-selection without a direct bank connection to the card issuing institute - i.e., without online banking access - Worldline offers the variant PIN change with TAN (Trusted Authentication Number). \nThis applies in particular to card programs where the bank is the card issuer for another partner, e.g., TUI or eBay.\nThe API allows to generate a TAN, which is used as a one-time password, printed and sent to cardholder in order to change card pin by e.g. IVR.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateTanRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateTanResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/orders": {
        "get": {
          "tags": [
            "Card"
          ],
          "summary": "List orders for a card by external reference",
          "operationId": "listOrdersForCardByIssuerExtRef",
          "description": "The API enables the orders information related to a given card to be retrieved.\n\nThe response can also be enriched (if specified as embedded fields in input) with additional data such as the orders status history of the card, the card information.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "orderType",
              "in": "query",
              "description": "Order type to retrieve (CardOrder, PinMailerOrder or TanMailerOrder)",
              "required": false,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "card",
                  "statusHistory"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListOrder"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/orders/{orderReference}": {
        "get": {
          "tags": [
            "Card - Order"
          ],
          "summary": "Retrieve card order by external reference",
          "description": "The API enables the order information (card, PIN mailer or TAN mailer order) related to a given card to be retrieved. The order is identified with order reference.\n\nThe response can also be enriched (if specified as embedded fields in input) with additional data such as the orders status history of the card, the card information.",
          "operationId": "retrieveOrderByCardIssuerExtRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "orderReference",
              "in": "path",
              "description": "Order Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "card",
                  "statusHistory"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityOrder"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/orders/{orderReference}/release": {
        "post": {
          "tags": [
            "Card - Order"
          ],
          "summary": "Release a card order waiting for validation by external reference",
          "operationId": "releaseCardOrderByCardIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "orderReference",
              "in": "path",
              "description": "Order Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReleaseOrderResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": true
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/remind-pin": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Card"
          ],
          "summary": "Remind pin for a card by external reference",
          "description": "The API allows a PIN reminder to be requested for a card, identified by the Issuer Card External Reference or the Card Reference when a cardholder forgot its PIN.\nThe card must be in “ACTIVE” status.\nAs a result, a PIN mailer order is generated.",
          "operationId": "remindPINByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/RemindPINRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRemindPINResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/reorder-pin": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Card"
          ],
          "summary": "Reorder new PIN for the card by external reference",
          "description": "The API allows to order a new PIN for the card when a cardholder wants to change its PIN.\nThe card must be in \"CREATED\" or \"ACTIVE\" status.\n\nAs a result, a PIN mailer order with PIN REORDER reason is generated.",
          "operationId": "reorderPINByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ReorderPINRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReorderPINResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/replace": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Card"
          ],
          "summary": "Replace a card by external reference",
          "operationId": "replaceCardByIssuerExtRef",
          "description": "The API allows a card, that has not yet been replaced or renewed, to be replaced when the card is lost/stolen or damaged, or when the customer’s information has changed, by using the Issuer Card External Reference or the Card Reference. \nThe card contract must be ACTIVE with no replacement blocking and the card must not be in CREATED status. \nThe replacement reason is chosen from the reasons configured beforehand for the issuer.\nData that may need to be changed during replacement can be provided, such as: card data (e.g., embossing name), order data (e.g., card producer if several are allowed), customer data (e.g., name), PIN.\nAs a result, the new card is created, a card order and a PIN mailer order are created when applicable (physical card requested).\n\nIn case a product change on renewal is planned on the contract of the card to be replaced, the card will not be replaced but the product change will be forced instead. From the request, only blocking reason and embossingName/embossingName2ndLine will be considered : \n- If blocking reason is provided (for temporary blocking only), the new card of the new contract is blocked with this reason\n- If embossingName and/or embossingName2ndLine are provided, they will be applied to the old card and will be transferred to the new card of the new contract.\nIn the request response, information related to the new contract and the product change will be returned.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ReplaceCardRequest"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReplaceCardResponse"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/unblock": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Unblock a card by external reference",
          "operationId": "unblockCardByIssuerExtRef",
          "description": "The API allows to unblock a card identified by the Issuer Card External Reference or the Card Reference.\nThe card must be temporary blocked.\nThe unblocking reason is chosen among the reasons configured beforehand for the issuer.\nAs a result, the card is active again in our system.\nAn issuer cannot request the unblocking of a permanently blocked card.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/UnblockCardRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityUnblockCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/search": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Retrieve card by cardNumber and sequenceNumber and expiryDate",
          "operationId": "searchCard",
          "description": "This API enables card information to be retrieved based on PAN or PAN reference, and optionally on PAN sequence number and/or expiry date information as search criteria.\nThe response can be enriched (if specified as embedded fields in input) with additional data such as the status history of the card, the card contract information, the card order identifiers linked to the card, card identifiers of the new card in case of replacement or renewal.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "statusHistory",
                  "cardContract",
                  "renewedBy",
                  "renewedFor",
                  "replacementBy",
                  "replacementFor",
                  "orderIdentifiers",
                  "orders"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/SearchCardRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCard"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/unblock-all": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Unblock all cards with same PAN or same PAN Reference",
          "operationId": "unblockAllCards",
          "description": "The API is similar to Unblock a card API but is applied to all cards having the same PAN or same PAN reference.\n\nThe API allows the unblocking of all cards having the same PAN or same PAN reference.\nCards must be in temporary “Blocked” status.\nThe unblocking reason is chosen from the reasons configured beforehand for the issuer.\nThe Issuer cannot request this API for permanently blocked cards. \nAs a result, cards having the same PAN or same PAN reference are active again in our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UnblockAllCardsRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityUnblockAllCardsResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}": {
        "get": {
          "tags": [
            "Card"
          ],
          "summary": "Retrieve card",
          "operationId": "retrieveCard",
          "description": "This API enables card information for a given card identifier to be retrieved.\n\nThe response can also be enriched (if specified as embedded fields in input) with additional data such as the status history of the card, the card Contract information, the card order identifiers linked to the card.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "publicKeyIdentifier",
              "in": "query",
              "description": "Public Key Identifier",
              "required": false,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "statusHistory",
                  "cardContract",
                  "renewedBy",
                  "renewedFor",
                  "replacementBy",
                  "replacementFor",
                  "orderIdentifiers",
                  "orders"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCard"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/activate": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Activate a card",
          "operationId": "activateCard",
          "description": "The API allows to activate on demand a card in ''created'' status identified by the Issuer Card External Reference or the Card Reference.\nThe activation reason is chosen among the reasons configured beforehand for the issuer.\nAs a result, the card is active in our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ActivateCardRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityActivateCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/block": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Block a card",
          "operationId": "blockCard",
          "description": "The API allows to block a card permanently (immediately or in the future) or to block a card temporarily depending on the configured blocking reason by using the Issuer Card External Reference or the Card Reference.\nThe card must be in “Created” or “Active” status.\nThe blocking reason is chosen among the reasons configured beforehand for the issuer.\n\nExample of use cases : \nUse case 1 : Card is blocked permanently, in case of lost, stolen, card not delivered, fraudulent activity for example.\nAs a result, the card is definitively blocked in our system (final status).\n\nUse case 2 : The card has been compromised in Common Point of Purchase (CPP) : a permanent card blocking is scheduled for the card and the cardholder is still allowed to use its card for PIN based transactions by the issuer\nAs a result, the card is still active in our system and a permanent card blocking is scheduled for the card.\n\nUse case 3 : Card is blocked temporary in case fraud suspicion by e.g Issuer, Fraud system. \nAs a result, the card is temporarily blocked in our system and can be unblocked later.\n\nIt is also possible to update the following blocking information by this API :\n- When the card is already blocked:\n  - Blocking reason among those available for the issuer\n  - Blocking detail\n  - Lost and stolen date if the blocking reason is LOST or STOLEN\n  - Fraud process\n  - The flag indicating whether the PIN is compromised\n  - Scheduled blocking information : delay or blocking reason if the delay is not yet reached\n\n- When the card is active :\n  - Scheduled blocking information : delay or blocking reason if the delay is not yet reached",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/BlockCardRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityBlockCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/block-and-replace": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Block and replace a card",
          "operationId": "blockAndReplaceCard",
          "description": "The API allows a card identified by the Issuer Card External Reference or the Card Reference to be blocked and replaced.\nThis API regroups Block a card (for card blocking or blocking information update) and Replace a card APIs in a single request.\nAs result, the card is blocked and the new card is created.\nIf any error occurs while card blocking or card replacing, the card is neither blocked nor replaced.\n\nWith this API, it is also possible to block all cards having the same PAN than the card referenced by Issuer Card External Reference or the Card Reference. In this case Block all cards API is called instead Block a card API.\n\nIn case a product change on renewal is planned on the contract of the card to be replaced, the card will not be replaced but the product change will be forced instead. From the replace card request, only blocking reason and embossingName/embossingName2ndLine will be considered : \n- If blocking reason is provided (for temporary blocking only), the new card of the new contract is blocked with this reason\n- If embossingName and/or embossingName2ndLine are provided, they will be applied to the old card and will be transferred to the new card of the new contract.\nIn the request response, information related to the new contract and the product change will be returned.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/BlockAndReplaceCardRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityBlockAndReplaceCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/card-contract": {
        "get": {
          "tags": [
            "Card"
          ],
          "summary": "Retrieve card contract for a card",
          "operationId": "retrieveCardContractForCard",
          "description": "The API enables the card contract information related to a given card to be retrieved.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe card for which the detail is requested: It can be provided by using the card reference or the issuer card external reference. \nIt is also possible to request some additional data by using the embedded fields (such as the list of models linked to the card contract, the account identifiers linked to the card contract, the identifiers and the information of the linked cards).\nIn return, the interface provides the generic information (mainly master data) relevant to the card contract.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "selectedModels",
                  "cardIdentifiers",
                  "relatedAccounts",
                  "cards"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCardContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/card-events": {
        "get": {
          "tags": [
            "Card"
          ],
          "summary": "Retrieve card event list (e.g. PIN change information)",
          "operationId": "listCardEvents",
          "description": "The API enables the events information related to a given card to be retrieved (e.g. status change such as card blocking/card activation, card issuing for replacement or renewal, PIN change.).",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "eventType",
              "in": "query",
              "description": "Type of event to return.\nPossible values are :\nPINChange, TanMailerOrderIssuing, CardOrderIssuing,  PinMailerOrderIssuing, TanMailerOrderExtraction, CardOrderExtraction,  PinMailerOrderExtraction, CancelCardOrderIssuing,  CancelTanMailerOrderIssuing, CancelPinMailerOrderIssuing, CardActivation,  CardIssuing, CardCancellation, CardDeactivation, CardBlocking, CardUnblocking.",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCardEvent"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/deactivate": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Deactivate a card",
          "operationId": "deactivateCard",
          "description": "The API allows an active card, or a temporary blocked card, to be deactivated on demand, by using the Issuer Card External Reference or the Card Reference.\nThe deactivation reason is chosen from the reasons configured beforehand for the issuer.\nAs a result, the card is deactivated in our system.\nThis process is not reversible. New card authorizations are declined. If necessary, a request for a card replacement may be made by the issuer.\n\nThis API allows also to cancel a card in “Created” status, e.g., when the card production has failed.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/DeactivateCardRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeactivateCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/declare-counterfeit-card": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Declare counterfeit card",
          "operationId": "declareCounterfeitCard",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/DeclareCounterfeitCardRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/DeclareCounterfeitCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/orders": {
        "get": {
          "tags": [
            "Card"
          ],
          "summary": "List orders for a card",
          "operationId": "listOrdersForCard",
          "description": "The API enables the orders information related to a given card to be retrieved.\n\nThe response can also be enriched (if specified as embedded fields in input) with additional data such as the orders status history of the card, the card information.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "orderType",
              "in": "query",
              "description": "Order type to retrieve (CardOrder, PinMailerOrder or TanMailerOrder)",
              "required": false,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "card",
                  "statusHistory"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListOrder"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/orders/{orderReference}": {
        "get": {
          "tags": [
            "Card - Order"
          ],
          "summary": "Retrieve card order",
          "description": "The API enables the order information (card, PIN mailer or TAN mailer order) related to a given card to be retrieved. The order is identified with order reference.\n\nThe response can also be enriched (if specified as embedded fields in input) with additional data such as the orders status history of the card, the card information.",
          "operationId": "retrieveOrder",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "orderReference",
              "in": "path",
              "description": "Order Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "card",
                  "statusHistory"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityOrder"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/release-orders": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Release card orders for a card (beta)",
          "description": "The API allows orders (card order, PIN mailer order, TAN mailer order) related to a card to be released in case a bank validation is required (before starting the embossing process).\nThe bank validation must be configured in the card creation model corresponding to the order reason (in renewal model for renewal treatment…).\n\nThe main input fields requested by the API are:\no\tThe issuer ID\no\tThe card for which the orders release is requested: It can be provided by using the card reference or the issuer external card reference\n\nAs a result, the orders related to the requested card are orderable.",
          "operationId": "releaseOrderForCardByCardReference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReleaseOrdersResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/release-orders": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Release card orders for a card by external reference (beta)",
          "operationId": "releaseOrderForCardByIssuerCardExtRef",
          "description": "The API allows orders (card order, PIN mailer order, TAN mailer order) related to a card to be released in case a bank validation is required (before starting the embossing process).\nThe bank validation must be configured in the card creation model corresponding to the order reason (in renewal model for renewal treatment…).\n\nThe main input fields requested by the API are:\no\tThe issuer ID\no\tThe card for which the orders release is requested: It can be provided by using the card reference or the issuer external card reference\n\nAs a result, the orders related to the requested card are orderable.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": " issuer Card External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReleaseOrdersResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/orders/{orderReference}/release": {
        "post": {
          "tags": [
            "Card - Order"
          ],
          "summary": "Release a card order waiting for validation",
          "operationId": "releaseCardOrder",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "orderReference",
              "in": "path",
              "description": "Order Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReleaseOrderResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": true
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/remind-pin": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Card"
          ],
          "summary": "Remind pin for a card",
          "description": "The API allows a PIN reminder to be requested for a card, identified by the Issuer Card External Reference or the Card Reference when a cardholder forgot its PIN.\nThe card must be in “ACTIVE” status.\nAs a result, a PIN mailer order is generated.",
          "operationId": "remindPIN",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/RemindPINRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRemindPINResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/reorder-pin": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Card"
          ],
          "summary": "Reorder new PIN for the card",
          "description": "The API allows to order a new PIN for the card when a cardholder wants to change its PIN.\nThe card must be in \"CREATED\" or \"ACTIVE\" status.\n\nAs a result, a PIN mailer order with PIN REORDER reason is generated.",
          "operationId": "reorderPIN",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ReorderPINRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReorderPINResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/replace": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Card"
          ],
          "summary": "Replace a card",
          "operationId": "replaceCard",
          "description": "The API allows a card, that has not yet been replaced or renewed, to be replaced when the card is lost/stolen or damaged, or when the customer’s information has changed, by using the Issuer Card External Reference or the Card Reference. \nThe card contract must be ACTIVE with no replacement blocking and the card must not be in CREATED status. \nThe replacement reason is chosen from the reasons configured beforehand for the issuer.\nData that may need to be changed during replacement can be provided, such as: card data (e.g., embossing name), order data (e.g., card producer if several are allowed), customer data (e.g., name), PIN.\nAs a result, the new card is created, a card order and a PIN mailer order are created when applicable (physical card requested).\n\nIn case a product change on renewal is planned on the contract of the card to be replaced, the card will not be replaced but the product change will be forced instead. From the request, only blocking reason and embossingName/embossingName2ndLine will be considered : \n- If blocking reason is provided (for temporary blocking only), the new card of the new contract is blocked with this reason\n- If embossingName and/or embossingName2ndLine are provided, they will be applied to the old card and will be transferred to the new card of the new contract.\nIn the request response, information related to the new contract and the product change will be returned.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ReplaceCardRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReplaceCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/unblock": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Unblock a card",
          "operationId": "unblockCard",
          "description": "The API allows to unblock a card identified by the Issuer Card External Reference or the Card Reference.\nThe card must be temporary blocked.\nThe unblocking reason is chosen among the reasons configured beforehand for the issuer.\nAs a result, the card is active again in our system.\nAn issuer cannot request the unblocking of a permanently blocked card.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/UnblockCardRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityUnblockCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/blocking-information": {
        "get": {
          "tags": [
            "Card"
          ],
          "summary": "Retrieve blocking information for a card",
          "operationId": "retrieveCardBlockingInformation",
          "description": "The API enables the blocking information related to a given card to be retrieved.\n\nAs a response, a set of information is returned such as :\n- Blocking reason and blocking date time\n- The date when our system receives the blocking instruction\n- If the PIN has been compromised\n- Additional information in case blocking reason is LOST : Lost date, Loss circumstances, the place or the country where the card has been lost\n- if a permanent card blocking is scheduled in the future\n- if the card has been compromised in Common Point of Purchase (card is in CPP list)",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCardBlockingInformation"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Card"
          ],
          "summary": "Update blocking information for a card",
          "operationId": "updateCardBlockingInformationByReference",
          "description": "This API is no more maintained. The block card API must be used instead.\nThe API enables blocking information related to a given card to be updated such as:\n•\tBlocking reason among those available for the issuer\n•\tBlocking detail\n•\tLost and stolen date if the blocking reason is LOST or STOLEN\n•\tThe fraud process\n•\tThe flag indicating whether the card is in a CPP list\n•\tThe flag indicating whether the PIN is compromised\n•\tScheduled blocking information : delay or blocking reason if the delay is not yet reached",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCardBlockingInformationRequest"
              }
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCardBlockingInformationResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/blocking-information": {
        "get": {
          "tags": [
            "Card"
          ],
          "summary": "Retrieve blocking information for a card by external reference",
          "operationId": "retrieveCardBlockInformationByIssuerExtRef",
          "description": "The API enables the blocking information related to a given card to be retrieved.\n\nAs a response, a set of information is returned such as :\n- Blocking reason and blocking date time\n- The date when our system receives the blocking instruction\n- If the PIN has been compromised\n- Additional information in case blocking reason is LOST : Lost date, Loss circumstances, the place or the country where the card has been lost\n- if a permanent card blocking is scheduled in the future\n- if the card has been compromised in Common Point of Purchase (card is in CPP list)",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCardBlockingInformation"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Card"
          ],
          "summary": "Update blocking information for a card by external reference",
          "operationId": "updateCardBlockInformationByIssuerExtRef",
          "description": "This API is no more maintained. The block card API must be used instead.\nThe API enables blocking information related to a given card to be updated such as:\n•\tBlocking reason among those available for the issuer\n•\tBlocking detail\n•\tLost and stolen date if the blocking reason is LOST or STOLEN\n•\tThe fraud process\n•\tThe flag indicating whether the card is in a CPP list\n•\tThe flag indicating whether the PIN is compromised\n•\tScheduled blocking information : delay or blocking reason if the delay is not yet reached",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCardBlockingInformationRequest"
              }
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCardBlockingInformationResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/update-all-blocking-information": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Update blocking information for all cards with same PAN or same PAN Reference",
          "operationId": "updateAllBlockInformationByIssuer",
          "description": "This API is no more maintained. The block all cards API must be used instead.\nThe API is similar to “Update blocking information for a card” API but is applied to all cards having the same PAN or same PAN reference.\nBlocking information can be updated such as:\n•\tBlocking reason among those available for the issuer\n•\tBlocking detail\n•\tLost and stolen date if the blocking reason is LOST or STOLEN\n•\tThe fraud process\n•\tThe flag indicating whether the PIN is compromised\n•\tScheduled blocking information : delay or blocking reason if the delay is not yet reached\nIn response, card information for each matched card is provided.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ModifyAllCardsBlockingInformationRequest"
              }
            },
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ModifyAllCardsBlockingInformationResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/advise-product-extension": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Advice a product extension for a card (beta)",
          "operationId": "adviceProductExtensionForCard",
          "description": "This API is used to get the product extension for a card replacement depending on the configured algorithm.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe card for which the advice is requested: It can be provided by using the card reference or the issuer card external reference. \nThe API returns the product extension advised for the card replacement and also the current product extension of the card.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAdviceProductExtensionCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/advise-product-extension": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": "Advice a product extension for a card by external reference (beta)",
          "operationId": "adviceProductExtensionForCardByExternalReference",
          "description": "This API is used to get the product extension for a card replacement depending on the configured algorithm.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe card for which the advice is requested: It can be provided by using the card reference or the issuer card external reference. \nThe API returns the product extension advised for the card replacement and also the current product extension of the card.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAdviceProductExtensionCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/brand-advice": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Get a brand selection advice (beta)",
          "operationId": "getBrandAdvice",
          "description": "This API allows getting an advice on which brand to select for a card creation (either first card along new contract, additional card or replacement card). This is applicable for products on which brand selection is configured. \nThe API returns the product extension for the advised card brand",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/BrandAdviceRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityBrandAdvice"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": true
        }
      },
      "/issuers/{issuerId}/contracts/advise-product-extension": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Advice a product extension (beta)",
          "operationId": "adviceProductExtension",
          "description": "This API is used to get the product extension for a card creation depending on the configured algorithm. It can be used for the first card or additional card. \nThe main input fields are:\n- The issuer ID\n- The issuer product external reference for which the advice is requested.\nThe API returns the product extension advised for the card creation.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/AdviceProductExtensionRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAdviceProductExtensionResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
   "/search-contracts": {
        "post": {
          "tags": [
            "Contract - Global Search"
          ],
          "summary": "Global Search for Contracts",
          "operationId": "globalSearchContract",
          "description": "The API provides possibility to retrieve a list of consumer contracts, based on certain criteria. \n\nOne of the following criteria for searching must be provided:\n- either account's criteria\n- or customer's criteria\n- or card's criteria\n\nFor searching with account's criteria, only one of the following data must be provided :\n•\tIBAN \n•\tor account identifier : either account reference or issuer account external reference\n•\tor account membership number 1\n•\tor account membership number 2 \n\nFor searching with customer's criteria, only one of the following data must be provided :\n•\tPersonal Data with last name and first name (and optionally with birth date, postal address : postal code, street name and/or building number, phonetic criteria)\n•\tor customer identifier : either customer reference or issuer customer external reference\n•\tor partner external reference\n\nFor searching with card's criteria, only one of the following data must be provided :\n•\tPAN\n•\tor card contract identifier : either card contract reference or issuer card contract external reference\n•\tor card identifier : either card reference or issuer card external reference\n\nIf requested, the API input parameters allows also to:\n* search from an issuer and optionally with sub-issuers OR search from a list of issuers (by default, the search is performed on all issuers allowed for the user depending on its rights)\n* limit the list of returned cards per card contract to either the latest card only or all previous cards\n* return the direct parent account in the hierarchy of the account and/or the list of child accounts of the account matching the criteria if the research is based on account's criteria\n* request to enrich the response with additional data relative to the accounts, the card contracts, the cards and the customers by using embedded fields\n\nThe API response contains all matched contracts and for each returned contract some information is provided such as\n- contract identifier with the contract reference, the issuer external contract reference if originally provided\n- product change information if any, such as its current status, new product, new contract if it exists\n- embedded fields if requested such as list of all customers or identifiers linked to this contract (e.g. contract owner, root account owner, cardholder(s)), accounts and account identifiers, card contracts, cards",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
             {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GlobalSearchContractRequest"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "page",
              "in": "query",
              "description": "0",
              "required": false,
              "type": "integer",
              "default": 0,
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "10",
              "required": false,
              "type": "integer",
              "default": 10,
              "format": "int32"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "advertisementFlags",
                  "deliveryChannel",
                  "legitimacyDocuments",
                  "contractFees",
                  "accountIdentifiers",
                  "accounts",
                  "accounts.selectedModels",
                  "cardContractIdentifiers",
                  "cardContracts",
                  "cardContracts.cards",
                  "dataAnalysisFlags",
                  "contractCustomerIdentifiers",
                  "contractCustomers",
                  "addonSubscriptions",
                  "contractCustomers.addresses",
                  "cardContracts.relatedAccounts",
                  "cardContracts.selectedModels",
                  "cardContracts.cardIdentifiers",
                  "cards.statusHistory",
                  "cards.renewedBy",
                  "cards.renewedFor",
                  "cards.replacementBy",
                  "cards.replacementFor",
                  "cards.orderIdentifiers",
                  "cards.orders"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGlobalSearchContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/search-operations": {
        "post": {
          "tags": [
            "Operation - Global Search"
          ],
          "summary": "Global Search for Operations",
          "operationId": "globalSearchOperation",
          "description": "The API provides possibility to retrieve a list of operations for one or several accounts and for one or several contracts, based on certain criteria. The criteria used are the following:\n- 1st Group:\n         - Issuer Company External Reference\n         - Posting Account Identifier\n         - Virtual Service Card External Reference\n         - Virtual Service Card Number\n- 2nd Group:\n         - Transaction date range\n         - Posting date range\n- 3rd Group:\n         - Reference amount range\n         - Approval Code\n         - Card Acceptor Name. this criteria accepts wildcards ('%' allows to achieve a search with only a partial input, 'Plat%', '%hill', 'Al%gang')\n         - Operation Kinds\n\nThe rules of using this API and criteria for searching, are the following:\n - It will be mandatory to provide at least one of criteria from 1st Group. It is possible to provide two or three criteria at the same time. Virtual Service Card Number and Virtual Service Card External Reference can not be provided at the same time\n - It will be mandatory to provide one criterion from 2nd Group. The two criteria can not be provided at the same time\n - All Criteria in 3rd Group are optional\n - Regarding Criteria that will include ranges, both minimum and maximum values should be provided",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
             {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GlobalSearchOperationRequest"
              }
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "page",
              "in": "query",
              "description": "0",
              "required": false,
              "type": "integer",
              "default": 0,
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "10",
              "required": false,
              "type": "integer",
              "default": 10,
              "format": "int32"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addendum",
                  "virtualCardService"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGlobalSearchOperation"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/brand-advice-config/{issuerProductExternalReference}": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "Retrieve brand advice algorithm configuration by issuer product external reference (beta)",
          "operationId": "retrieveBrandAdviceConfigByIssuerProductExtRef",
          "description": "The API allows the brand advice configuration to be retrieved.\nThe main input fields are:\n- The issuer ID\n- The issuer product external reference for which the configuration details are requested.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerProductExternalReference",
              "in": "path",
              "description": "Issuer Product External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityBrandAdviceConfig"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": true
        },
        "patch": {
          "tags": [
            "Contract"
          ],
          "summary": "Update brand advice algorithm configuration by issuer product external reference (beta)",
          "operationId": "modifyBrandAdviceConfigByIssuerProductExtRef",
          "description": "The API allows a list of pre-defined parameters (attributes) of a brand advice configuration to be updated.\nThe main input fields are:\n- The issuer ID\n- The issuer product external reference for which configuration updates are required.\n- Parameters to be updated\n\nThe brand advice configuration parameters can be retrieved using the Retrieve brand advice detail API.\nThe updated parameters should be consistent with the initial product configuration defined in the system (e.g., the profiles to be updated must exist in the system to be found).",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerProductExternalReference",
              "in": "path",
              "description": "Issuer Product External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyBrandAdviceConfigRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyBrandAdviceConfigResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": true
        }
      },
      "/issuers/{issuerId}/contracts/create-consumer-contract": {
        "post": {
          "x-wl-idempotent": true,
          "x-wl-lra-operation": true,
          "x-wl-lra-interface": true,
          "tags": [
            "Contract"
          ],
          "summary": "Create consumer contract",
          "description": "The Create Consumer Contract API allows the creation of a new consumer contract already signed by the customer or not, and its first card(s), either with physical support (plastic) or not (virtual card).\n\nPre-conditions: \n- The correlation ID, if provided by the issuer, must be unique. \nIn case of re-use of a correlation ID from an existing contract, the system will return the data from the existing contract (e.g., if the API call returns a \"time-out“ response, the same correlation ID can be provided to retrieve contract data from WL system for further checks). \n- An active consumer product exists with a physical or pure virtual card.\n\nThe issuer can request the creation of a new consumer contract from the provided active consumer product with additional information such as\n- the contract is already signed (status as \"SIGNED\") by the customer or not (status as \"AWAITING_SIGNATURE\")\n- The issuer can provide a list of new customers or the references to existing customers in Worldline system\n\nAs a result, the contract is created\n- with the provided status by the issuer: either the contract is already signed (its account hierarchy is immediately in \"ACTIVE\" status) or not  (its account hierarchy is in \"AWAITING_SIGNATURE\" status)\n- with each card and its status set to created or active, depending on the card product configuration \n- with related card order to produce the physical card, if plastic required and the pin mailer order if required. \n\nThe API response returns newly created contract information such as\n- the new contract itself\n- the different identifiers such as the contract reference, contract owner, account owner, add-on, card contract, card and cardholder. Each identifier is composed of the Worldline internal reference and the external reference (is not present if not provided by the issuer and not generated by any algorithm) \n\nThe references are used to: retrieve/update/close contracts, list accounts for a contract, retrieve the contract owner for a contract, retrieve/update legitimacy documents, etc.. ",
          "operationId": "createConsumerContract",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateConsumerContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateConsumerContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/sign": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Contract"
          ],
          "summary": "Sign Contract",
          "description": "The API allows to \n- sign a contract, identified by the Issuer Contract external reference or the Contract reference (the contract must be in \"awaiting signature\" status)\n- request to activate all cards within this contract simultaneously\n\nAs a result :\n- the contract is signed\n- the accounts within the contract are activated\n- the cards within the contract are activated if requested\n- the contract can be updated",
          "operationId": "signContract",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/SignContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntitySignContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/sign": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Contract"
          ],
          "summary": "Sign Contract by external reference",
          "description": "The API allows to \n- sign a contract, identified by the Issuer Contract external reference or the Contract reference (the contract must be in \"awaiting signature\" status)\n- request to activate all cards within this contract simultaneously\n\nAs a result :\n- the contract is signed\n- the accounts within the contract are activated\n- the cards within the contract are activated if requested\n- the contract can be updated",
          "operationId": "signExternalContract",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/SignContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntitySignContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "Retrieve contract by external reference",
          "operationId": "retrieveContractByIssuerExtRef",
          "description": "This API allows retrieving a particular contract from its reference or its issuer external reference.\nThe API response contains contract information such as:\n- contract identifier with the contract reference and the issuer external contract reference if previously provided\n- product change information if any, such as its current status (scheduled, done, cancelled), new product, new contract if it exists\n- embedded fields if requested such as list of all customers or identifiers  linked to this contract (e.g. contract owner, root account owner, cardholder(s)), card contracts",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "advertisementFlags",
                  "deliveryChannel",
                  "legitimacyDocuments",
                  "contractFees",
                  "accountIdentifiers",
                  "accounts",
                  "cardContractIdentifiers",
                  "cardContracts",
                  "dataAnalysisFlags",
                  "contractCustomerIdentifiers",
                  "contractCustomers",
                  "addonSubscriptions"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Contract"
          ],
          "summary": "Update contract by external reference",
          "operationId": "modifyContractByIssuerExtRef",
          "description": "The API allows to update certain data of an existing consumer contract, identified by the Issuer Contract external reference or the Contract reference :\n- allowed advertisement channels (flags)\n- allowed data analysis\n- the issuer branch code (e.g. bank agency in charge of this contract)\n- allowed delivery channel for possible letters\n- if the membership fee should be reimbursed when a card contract is closed\n- how many cards should free of membership fee and/or account setup fee\n- if the primary card should be considered as the first to be free for membership/account setup fees or if only additional cards should be considered\n- if both membership and account setup fees should be waived during contract lifecycle (can be changed at any moment)\n- the membership fee anniversary date can be changed\n- pass-through data can be updated (specificFields)\n\nAs a result the contract is immediately updated with provided data in our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/accounts": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "List accounts for contract by external reference",
          "operationId": "listAccountsForContractByIssuerExtRef",
          "description": "The API allows the list of accounts for a contract, identified by the Issuer Contract external reference or the Contract reference, to be retrieved. ",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
             {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "hierarchyOperationStatusHistory"
                ]
              },
               "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListAccount"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/addon-subscriptions": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "Retrieve the list of add-on services by external reference",
          "operationId": "listAddonsSubscriptionsForContractByIssuerExtRef",
          "description": "The API allows the list of additional service subscriptions (e.g. new letter, travel insurance) for the contract to be retrieved.\n\nThe main input fields requested by the API are:\n• The issuer ID\n• The contract for which the add-on subscriptions are requested: It can be provided by using the contract reference or the issuer external contract reference\n\nThe API response contains add-on subscription information such as:\n•\tThe reference of the additional service subscription\n•\tThe service type reference\n•\tThe card contract or the account on which the subscription has been done\n•\tThe date of subscription to the add-on service\n•\tThe list of add-on service parameters if any",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListAddonSubscription"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Subscribe to add-on by external reference",
          "operationId": "createAddOnSubscriptionByIssuerExtRef",
          "description": "The API allows a cardholder to subscribe to an additional service (e.g. new letter, travel insurance) for the contract during all contract life cycle.\nThe list of allowed additional services are defined on the product (e.g. PORTAL_ACCESS, ALERT, NOTIFICATION).\n\nThe main input fields requested by the API are:\n• The issuer ID\n• The contract for which the add-on subscription is requested: It can be provided by using the contract reference or the issuer external contract reference\n• The identifier of the entity for which the add-on subscription is requested: Either the card contract by providing the card contract reference or the issuer external card contract reference, \n  OR the account by providing the account reference or the issuer external account reference\n• The corresponding reference of the additional service\n• The service type reference defined at product level\nDepending on the service type, the issuer can add additional parameters to the add-on service.\n\nAs a result:\n- The new add-on subscription for the contract is available and can be unsubscribed during all contract life cycle\n- A fee can be generated and posted to the cardholder account if required for the product.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateAddOnSubscriptionRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddOnSubscriptionResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/addon-subscriptions/unsubscribe": {
        "post": {
          "x-wl-lra-operation": true,
          "tags": [
            "Contract"
          ],
          "summary": "Unsubscribe add-on by external reference",
          "operationId": "removeAddOnSubscriptionByIssuerExtRef",
          "description": "The API allows a cardholder to unsubscribe from an additional service (e.g. new letter, travel insurance) for the contract during all contract life cycle.\n\nThe main input fields requested by the API are:\n• The issuer ID\n• The contract for which the add-on unsubscription is requested: It can be provided by using the contract reference or the issuer external contract reference\n• The identifier of the entity for which the add-on subscription is requested: Either the card contract by providing the card contract reference or the issuer external card contract reference, \n  OR the account by providing the account reference or the issuer external account reference\n• The reference of the additional service\n• The service type reference \n\nAs a result, the existing add-on subscription for the contract is no longer available.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/RemoveAddOnSubscriptionRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRemoveAddOnSubscriptionResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/add-cards-accounts": {
        "post": {
          "x-wl-idempotent": true,
          "x-wl-lra-operation": true,
          "tags": [
            "Contract"
          ],
          "summary": "Add cards and accounts to a contract by external reference",
          "description": "This API allows an issuer to add a new card (debit, credit, prepaid, either physical or virtual), a new account to an existing contract, together or independantly, from a product extension among those allowed by the product used to instantiate the contract. \n\nThis product extension is usually composed of both card and account products, but can be composed of a card or several cards only, or of one or several accounts only or combination of both cards and accounts. It leads to create a new card and a new card account within the the contract (multiple contents of product extensions can be configured depending on issuer's needs)\n\nThe new card account is in most of the cases attached to the root account of the hierarchy (default behaviour) but the issuer can provide its parent account if it is not the root (complex account hierarchy with more than 2 account levels).\nThe issuer shall provide required data for each account and card contract/card if required (depends on product extension configuration).\n\nThe issuer can provide \n- a list of new customers or the references to existing customers in Worldline system\n- the legitimacy document(s) per customer\n- different membership fee and account setup fee (contract fees) if needed per account\n\nThe issuer can choose to receive in response for the extended/updated contract new resources created only or all resources (e.g. already existing accounts, card contracts, cards).\n\nIn case it is configured that adding additional card and account should trigger a product change, and there is an already scheduled product change, then the product change will be initiated and the new card and account will be created in the new contract.\n\nThe API response returns the extended contract with information related to account(s), card contract(s) and card(s) (limited to newly created account(s) and card contract(s)/card(s) if requested).",
          "operationId": "addCardsAccountsByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "newResourcesOnly",
              "in": "query",
              "description": "If newResourcesOnly is true, the API returns only information related to new resources.\nIf newResourcesOnly is false, the API returns all contract information.\nBy default, newResourcesOnly is false.",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/AddCardsAccountsRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddCardsAccountsResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/card-contracts": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "List card contracts for contract by external reference",
          "operationId": "listCardContractsForContractByIssuerExtRef",
          "description": "The API allows the list of card contract linked to a contract, identified by the Issuer Contract external reference or the Contract reference, to be retrieved. ",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCardContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/close": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Close contract by external reference",
          "operationId": "closeContractByIssuerExtRef",
          "description": "The API allows to close a contract identified by the Issuer Contract external reference or the Contract reference. \nThe contract can be closed immediately or in the future at a date provided by the issuer or at the card expiry date. \nThe contract must not be closed or awaiting signature.\n\nAs a result,\nFor immediate closure :\nThe contract is closed, the cards within the contract are deactivated, the closing is triggered for the accounts.\n\nFor scheduled closure :\nThe contract is not changed until the closing date is reached.\nOnce the closing date is reached, the contract is closed, the cards within the contract are deactivated, the closing is triggered for the accounts.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CloseContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCloseContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/update-all-customers-addresses": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Update addresses of all customers linked to the contract by external reference",
          "operationId": "updateAllCustomersAddressesByIssuerExtRef",
          "description": "This API is used to update all members of a given contract with same provided addresses (including address usages).\nE.g. for Contract A, contract owner, cardholders 1 and 2 are updated simultaneously with the same Main postal address data.\n\nThis API is used also: \n- to invalidate a particular address of all members of a contract by setting the flag \"invalid\" to True and providing only the address label and the address type (limited to address type as postalAddress). All the other data are ignored.\n- or to provide a valid address for all contract members by setting the flag \"invalid\" to False (default value) and providing the address label, the address type and the valid address (limited to address type as postalAddress)’\n\nEach provided address must have \n- an addressLabel among the ones configured such as MAIN_POSTAL_ADDRESS \n- an address type to indicate whether it a postal, an e-mail or a phone number \n- the address itself depending on its type: MailAddress, EmailAddress or PhoneNumber \nEach provided address can have :\n- none, 1,... N address usages. Such address usages can be used to retrieve the address related to a business process (e.g. CARD_DELIVERY used to identify the address to be used to send the card to the cardholder).\n- startDate: this is the date when the provided address becomes valid. If not provided this is by default the current date.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyContractCustomersAddressesRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyContractCustomersAddressesResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/suspend": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Suspend contract by external reference",
          "operationId": "suspendContractByIssuerExtRef",
          "description": "The API allows a contract, identified by the Issuer Contract external reference or the Contract reference, to be suspended.\nIt is possible to indicate whether membership/account setup fees must be partially reimbursed with the contract suspension.\n\nThe contract suspension has the following effects:\n- the contract closure is scheduled according a delay configurable at issuer level\n- Immediate temporary card blocking\n- Renewal and replacement of all cards blocking\n- Account Setup Fee (AS-Fee) and Membership Fee (MF) are suppressed.\n- An Outgoing Credit Transfer (OCT) is automatically generated if the account has a credit balance.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/SuspendContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntitySuspendContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/cancel-close": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Cancel contract Closing by external reference",
          "operationId": "cancelContractClosingByIssuerExtRef",
          "description": "This API enables to cancel a contract closing with a scheduled date in the future. \nThe main input fields are:\n- The issuer ID\n- The issuer contract external reference or the contract reference\nAs a result, no closing date is planned anymore for the contract.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCancelContractClosingResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/cancel-suspend": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Cancel contract Suspension by external reference",
          "operationId": "cancelContractSuspensionByIssuerExtRef",
          "description": "As long as the closure date is not reached, contract suspension can be removed.\nThe contract suspension cancellation has the following effects: \n- The scheduled contract closure date is removed\n- Renewal is unblocked\n- Replacement is unblocked\n- Cards linked to the contract are unblocked\n\nThe API allows a contract suspension process to be cancelled. \nThe contract is identified by the Issuer Contract external reference or the Contract reference,",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCancelContractSuspensionResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/contract-fees": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "List contract fees for a contract (Membership fee and Account setup fee models) by external reference",
          "operationId": "listContractFeesByIssuerExtRef",
          "description": "The API allows the list of contract fees linked to a contract, identified by the Issuer Contract external reference or the Contract reference, to be retrieved. \n\nIn response, the model references are provided for each account part of the contract.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListContractFee"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/contract-fees/{accountReference}": {
        "patch": {
          "tags": [
            "Contract"
          ],
          "summary": "Update contract fees for an account (Membership fee and Account setup fee models) by contract external reference",
          "operationId": "modifyContractFeeByContractIssExtRef",
          "description": "This API enables the contract fees (Membership fee and account set-up fee) to be updated for a given contract and given card account in the contract.\nThis is done by providing in input the new model reference and the type to be used.\nThis model has to be configured previously for the product.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyContractFeeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ModifyContractFeeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/contract-fees/external-accounts/{issuerAccountExternalReference}": {
        "patch": {
          "tags": [
            "Contract"
          ],
          "summary": "Update contract fees for an account (Membership fee and Account setup fee models) by contract external reference and account external reference",
          "operationId": "modifyContractFeeByContractAndAccountIssExtRef",
          "description": "This API enables the contract fees (Membership fee and account set-up fee) to be updated for a given contract and given card account in the contract.\nThis is done by providing in input the new model reference and the type to be used.\nThis model has to be configured previously for the product.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyContractFeeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ModifyContractFeeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/contract-owner": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "Retrieve contract owner for a contract by external reference",
          "operationId": "retrieveContractOwnerByIssuerExtRef",
          "description": "This API allows the contract owner for a contract identified by the Issuer Contract external reference or the Contract reference, to be retrieved.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressIdentifiers",
                  "addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCustomer"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/legitimacy-documents": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "List legitimacy documents for a contract by external reference",
          "operationId": "listLegitimacyDocumentsByIssuerExtRef",
          "description": "Legitimacy documents correspond to documents that prove the identity of a customer (pass ID, national card ID)\nThe document type, The document ID, the expiry date of the document, its issuing date can be stored in our system.\nThis API is used to get the customers legitimacy documents of a contract.\n\nThe input parameters are: \n- the contract reference for which information is requested: It can be provided by using the contract reference or the issuer external contract reference.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListLegitimacyDocuments"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/legitimacy-documents/external-customers/{issuerCustomerExternalReference}": {
        "put": {
          "tags": [
            "Contract"
          ],
          "summary": "Update legitimacy document of a contract customer by contract external reference and customer external reference",
          "operationId": "modifyLegitimacyDocumentByIssuerExtRef",
          "description": "This API is used to update the customers legitimacy documents of a contract.\nThe input parameters are: \n- the contract reference and the customer reference for which information must be updated.\n\nThey can be provided by using the internal references or the issuer external references:\n- contract reference and customer reference\nor\n- issuer contract external reference and issuer customer external reference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ModifyLegitimacyDocumentRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyLegitimacyDocumentResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/search": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Retrieve contracts by criteria",
          "operationId": "searchContract",
          "description": "This API is no more maintained. The  Global search for contracts API must be used instead to retrieve consumer contracts by criteria (multi issuers).\n\nThe API provides possibilty to retreive a list of consumer contracts for an issuer, based on certain criteria. \n\nOne of the following criteria for searching must be provided:\n- either account's criteria\n- or customer's criterria\n- or card's criteria\n\nFor searching with account's criteria, only one of the following data must be provided :\n•\tIBAN \n•\tor account identifier : either account reference or issuer account external reference\n•\tor account membership number1\n•\tor account membership numbe 2 \n\nFor searching with customer's criteria, only one of the following data must be provided :\n•\tCustomer Attributes with last name and first name (and optionally with birth date, postal address : postal code, street name and/or building number, phonetic criteria : phonetic search and/or phonetic algorithm)\n•\tor customer identifier : either customer reference or issuer customer external reference\n•\tor partner external reference\n\nFor searching with card's criteria, only one of the following data must be provided :\n•\tPAN\n•\tor card contract identifier : either card contract reference or issuer card contract external reference\n•\tor card identifier : either card reference or issuer card external reference\n\nIf requested, the API input parameters allows also to:\n* limit the list of returned cards per card contract to either the latest card only or all previous cards\n* return the direct parent account in the hierarchy of the account and/or the list of child accounts of the account matching the criteria if the research is based on account's criteria\n* request to enrich the response with additional data relative to the accounts, the card contracts, the cards and the customers by using embedded fields\n\nThe API response contains all matched contracts and for each returned contract some information is provided such as\n- contract identifier with the contract reference, the issuer external contract reference if originally provided\n- product change information if any, such as its current status, new product, new contract if it exists\n- embedded fields if requested such as list of all customers or identifiers linked to this contract (e.g. contract owner, root account owner, cardholder(s)), accounts and account identifiers, card contracts, cards",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields. \n Intermediate embed properties doesn't need to be provided if sub property already requested (For example :  When requesting 'cards.statusHistory' there is no need to also request 'cardContracts' and 'cardContracts.cards', it will be done automatically.",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "advertisementFlags",
                  "deliveryChannel",
                  "legitimacyDocuments",
                  "contractFees",
                  "accountIdentifiers",
                  "accounts",
                  "accounts.selectedModels",
                  "cardContractIdentifiers",
                  "cardContracts",
                  "cardContracts.cards",
                  "dataAnalysisFlags",
                  "contractCustomerIdentifiers",
                  "contractCustomers",
                  "addonSubscriptions",
                  "contractCustomers.addresses",
                  "cardContracts.relatedAccounts",
                  "cardContracts.selectedModels",
                  "cardContracts.cardIdentifiers",
                  "cards.statusHistory",
                  "cards.renewedBy",
                  "cards.renewedFor",
                  "cards.replacementBy",
                  "cards.replacementFor",
                  "cards.orderIdentifiers",
                  "cards.orders"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "name": "page",
              "in": "query",
              "description": "0",
              "required": false,
              "type": "integer",
              "default": 0,
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "10",
              "required": false,
              "type": "integer",
              "default": 10,
              "format": "int32"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/SearchContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "Retrieve contract",
          "operationId": "retrieveContract",
          "description": "This API allows retrieving a particular contract from its reference or its issuer external reference.\nThe API response contains contract information such as:\n- contract identifier with the contract reference and the issuer external contract reference if previously provided\n- product change information if any, such as its current status (scheduled, done, cancelled), new product, new contract if it exists\n- embedded fields if requested such as list of all customers or identifiers  linked to this contract (e.g. contract owner, root account owner, cardholder(s)), card contracts",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "advertisementFlags",
                  "deliveryChannel",
                  "legitimacyDocuments",
                  "contractFees",
                  "accountIdentifiers",
                  "accounts",
                  "cardContractIdentifiers",
                  "cardContracts",
                  "dataAnalysisFlags",
                  "contractCustomerIdentifiers",
                  "contractCustomers",
                  "addonSubscriptions"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Contract"
          ],
          "summary": "Update contract",
          "operationId": "modifyContract",
          "description": "The API allows to update certain data of an existing consumer contract, identified by the Issuer Contract external reference or the Contract reference :\n- allowed advertisement channels (flags)\n- allowed data analysis\n- the issuer branch code (e.g. bank agency in charge of this contract)\n- allowed delivery channel for possible letters\n- if the membership fee should be reimbursed when a card contract is closed\n- how many cards should free of membership fee and/or account setup fee\n- if the primary card should be considered as the first to be free for membership/account setup fees or if only additional cards should be considered\n- if both membership and account setup fees should be waived during contract lifecycle (can be changed at any moment)\n- the membership fee anniversary date can be changed\n- pass-through data can be updated (specificFields)\n\nAs a result the contract is immediately updated with provided data in our system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/accounts": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "List accounts for contract",
          "operationId": "listAccountsForContract",
          "description": "The API allows the list of accounts for a contract, identified by the Issuer Contract external reference or the Contract reference, to be retrieved. ",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "hierarchyOperationStatusHistory"
                ]
              },
               "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListAccount"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/add-cards-accounts": {
        "post": {
          "x-wl-idempotent": true,
          "x-wl-lra-operation": true,
          "tags": [
            "Contract"
          ],
          "summary": "Add cards and accounts to a contract",
          "description": "This API allows an issuer to add a new card (debit, credit, prepaid, either physical or virtual), a new account to an existing contract, together or independently, from a product extension among those allowed by the product used to instantiate the contract. \n\nThis product extension is usually composed of both card and account products, but can be composed of a card or several cards only, or of one or several accounts only or combination of both cards and accounts. It leads to create a new card and a new card account within the the contract (multiple contents of product extensions can be configured depending on issuer's needs)\n\nThe new card account is in most of the cases attached to the root account of the hierarchy (default behaviour) but the issuer can provide its parent account if it is not the root (complex account hierarchy with more than 2 account levels).\nThe issuer shall provide required data for each account and card contract/card if required (depends on product extension configuration).\n\nThe issuer can provide \n- a list of new customers or the references to existing customers in Worldline system\n- the legitimacy document(s) per customer\n- different membership fee and account setup fee (contract fees) if needed per account\n\nThe issuer can choose to receive in response for the extended/updated contract new resources created only or all resources (e.g. already existing accounts, card contracts, cards).\n\nIn case it is configured that adding additional card and account should trigger a product change, and there is an already scheduled product change, then the product change will be initiated and the new card and account will be created in the new contract.\n\nThe API response returns the extended contract with information related to account(s), card contract(s) and card(s) (limited to newly created account(s) and card contract(s)/card(s) if requested).",
          "operationId": "addCardsAccounts",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "newResourcesOnly",
              "in": "query",
              "description": "If newResourcesOnly is true, the API returns only information related to new resources.\nIf newResourcesOnly is false, the API returns all contract information.\nBy default, newResourcesOnly is false.",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/AddCardsAccountsRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddCardsAccountsResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/addon-subscriptions": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "Retrieve the list of add-on services",
          "operationId": "listAddonsSubscriptionsForContract",
          "description": "The API allows the list of additional service subscriptions (e.g. new letter, travel insurance) for the contract to be retrieved.\n\nThe main input fields requested by the API are:\n• The issuer ID\n• The contract for which the add-on subscriptions are requested: It can be provided by using the contract reference or the issuer external contract reference\n\nThe API response contains add-on subscription information such as:\n•\tThe reference of the additional service subscription\n•\tThe service type reference\n•\tThe card contract or the account on which the subscription has been done\n•\tThe date of subscription to the add-on service\n•\tThe list of add-on service parameters if any",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListAddonSubscription"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Subscribe to add-on",
          "operationId": "createAddOnSubscription",
          "description": "The API allows a cardholder to subscribe to an additional service (e.g. new letter, travel insurance) for the contract during all contract life cycle.\nThe list of allowed additional services are defined on the product (e.g. PORTAL_ACCESS, ALERT, NOTIFICATION).\n\nThe main input fields requested by the API are:\n• The issuer ID\n• The contract for which the add-on subscription is requested: It can be provided by using the contract reference or the issuer external contract reference\n• The identifier of the entity for which the add-on subscription is requested: Either the card contract by providing the card contract reference or the issuer external card contract reference, \n  OR the account by providing the account reference or the issuer external account reference\n• The corresponding reference of the additional service\n• The service type reference defined at product level\nDepending on the service type, the issuer can add additional parameters to the add-on service.\n\nAs a result:\n- The new add-on subscription for the contract is available and can be unsubscribed during all contract life cycle\n- A fee can be generated and posted to the cardholder account if required for the product.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateAddOnSubscriptionRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddOnSubscriptionResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/addon-subscriptions/unsubscribe": {
        "post": {
          "x-wl-lra-operation": true,
          "tags": [
            "Contract"
          ],
          "summary": "Unsubscribe add-on",
          "operationId": "removeAddOnSubscription",
          "description": "The API allows a cardholder to unsubscribe from an additional service (e.g. new letter, travel insurance) for the contract during all contract life cycle.\n\nThe main input fields requested by the API are:\n• The issuer ID\n• The contract for which the add-on unsubscription is requested: It can be provided by using the contract reference or the issuer external contract reference\n• The identifier of the entity for which the add-on subscription is requested: Either the card contract by providing the card contract reference or the issuer external card contract reference, \n  OR the account by providing the account reference or the issuer external account reference\n• The reference of the additional service\n• The service type reference \n\nAs a result, the existing add-on subscription for the contract is no longer available.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/RemoveAddOnSubscriptionRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRemoveAddOnSubscriptionResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/card-contracts": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "List card contracts for contract",
          "operationId": "listCardContractsForContract",
          "description": "The API allows the list of card contract linked to a contract, identified by the Issuer Contract external reference or the Contract reference, to be retrieved. ",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCardContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/close": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Close contract",
          "description": "The API allows to close a contract identified by the Issuer Contract external reference or the Contract reference. \nThe contract can be closed immediately or in the future at a date provided by the issuer or at the card expiry date. \nThe contract must not be closed or awaiting signature.\n\nAs a result,\nFor immediate closure :\nThe contract is closed, the cards within the contract are deactivated, the closing is triggered for the accounts.\n\nFor scheduled closure :\nThe contract is not changed until the closing date is reached.\nOnce the closing date is reached, the contract is closed, the cards within the contract are deactivated, the closing is triggered for the accounts.",
          "operationId": "closeContract",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CloseContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCloseContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/update-all-customers-addresses": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Update addresses of all customers linked to the contract",
          "operationId": "updateAllCustomersAddresses",
          "description": "This API is used to update all members of a given contract with same provided addresses (including address usages).\nE.g. for Contract A, contract owner, cardholders 1 and 2 are updated simultaneously with the same Main postal address data.\n\nThis API is used also: \n- to invalidate a particular address of all members of a contract by setting the flag \"invalid\" to True and providing only the address label and the address type (limited to address type as postalAddress). All the other data are ignored.\n- or to provide a valid address for all contract members by setting the flag \"invalid\" to False (default value) and providing the address label, the address type and the valid address (limited to address type as postalAddress)’\n\nEach provided address must have \n- an addressLabel among the ones configured such as MAIN_POSTAL_ADDRESS \n- an address type to indicate whether it a postal, an e-mail or a phone number \n- the address itself depending on its type: MailAddress, EmailAddress or PhoneNumber \nEach provided address can have :\n- none, 1,... N address usages. Such address usages can be used to retrieve the address related to a business process (e.g. CARD_DELIVERY used to identify the address to be used to send the card to the cardholder).\n- startDate: this is the date when the provided address becomes valid. If not provided this is by default the current date.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyContractCustomersAddressesRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyContractCustomersAddressesResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/suspend": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Suspend contract",
          "operationId": "suspendContract",
          "description": "The API allows a contract, identified by the Issuer Contract external reference or the Contract reference, to be suspended.\nIt is possible to indicate whether membership/account setup fees must be partially reimbursed with the contract suspension.\n\nThe contract suspension has the following effects:\n- the contract closure is scheduled according a delay configurable at issuer level\n- Immediate temporary card blocking\n- Renewal and replacement of all cards blocking\n- Account Setup Fee (AS-Fee) and Membership Fee (MF) are suppressed.\n- An Outgoing Credit Transfer (OCT) is automatically generated if the account has a credit balance.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/SuspendContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntitySuspendContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/cancel-close": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Cancel contract closing",
          "operationId": "cancelContractClosing",
          "description": "This API enables to cancel a contract closing with a scheduled date in the future. \nThe main input fields are:\n- The issuer ID\n- The issuer contract external reference or the contract reference\nAs a result, no closing date is planned anymore for the contract.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCancelContractClosingResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/cancel-suspend": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Cancel contract suspension",
          "operationId": "cancelContractSuspension",
          "description": "As long as the closure date is not reached, contract suspension can be removed.\nThe contract suspension cancellation has the following effects: \n- The scheduled contract closure date is removed\n- Renewal is unblocked\n- Replacement is unblocked\n- Cards linked to the contract are unblocked\n\nThe API allows a contract suspension process to be cancelled. \nThe contract is identified by the Issuer Contract external reference or the Contract reference,",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCancelContractSuspensionResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/contract-fees": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "List contract fees for a contract (Membership fee and Account setup fee models)",
          "operationId": "listContractFees",
          "description": "The API allows the list of contract fees linked to a contract, identified by the Issuer Contract external reference or the Contract reference, to be retrieved. \n\nIn response, the model references are provided for each account part of the contract.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListContractFee"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/contract-fees/{accountReference}": {
        "patch": {
          "tags": [
            "Contract"
          ],
          "summary": "Update contract fees for an account (Membership fee and Account setup fee models)",
          "operationId": "modifyContractFee",
          "description": "This API enables the contract fees (Membership fee and account set-up fee) to be updated for a given contract and given card account in the contract.\nThis is done by providing in input the new model reference and the type to be used.\nThis model has to be configured previously for the product.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "path",
              "description": "Account Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyContractFeeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ModifyContractFeeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/contract-fees/external-accounts/{issuerAccountExternalReference}": {
        "patch": {
          "tags": [
            "Contract"
          ],
          "summary": "Update contract fees for an account (Membership fee and Account setup fee models) by account external reference",
          "operationId": "modifyContractFeeByAccountIssExtRef",
          "description": "This API enables the contract fees (Membership fee and account set-up fee) to be updated for a given contract and given card account in the contract.\nThis is done by providing in input the new model reference and the type to be used.\nThis model has to be configured previously for the product.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "path",
              "description": "Issuer Account External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyContractFeeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ModifyContractFeeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/contract-owner": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "Retrieve contract owner for a contract",
          "operationId": "retrieveContractOwner",
          "description": "This API allows the contract owner for a contract identified by the Issuer Contract external reference or the Contract reference, to be retrieved.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressIdentifiers",
                  "addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCustomer"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/legitimacy-documents": {
        "get": {
          "tags": [
            "Contract"
          ],
          "summary": "List legitimacy documents for a contract",
          "operationId": "listLegitimacyDocuments",
          "description": "Legitimacy documents correspond to documents that prove the identity of a customer (pass ID, national card ID)\nThe document type, The document ID, the expiry date of the document, its issuing date can be stored in our system.\nThis API is used to get the customers legitimacy documents of a contract.\n\nThe input parameters are: \n- the contract reference for which information is requested: It can be provided by using the contract reference or the issuer external contract reference.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListLegitimacyDocuments"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/legitimacy-documents/{customerReference}": {
        "put": {
          "tags": [
            "Contract"
          ],
          "summary": "Update legitimacy document of a contract customer",
          "operationId": "modifyLegitimacyDocument",
          "description": "This API is used to update the customers legitimacy documents of a contract.\nThe input parameters are: \n- the contract reference and the customer reference for which information must be updated.\n\nThey can be provided by using the internal references or the issuer external references:\n- contract reference and customer reference\nor\n- issuer contract external reference and issuer customer external reference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ModifyLegitimacyDocumentRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyLegitimacyDocumentResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/switch-principal-card": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Switch between principal and supplementary cards",
          "operationId": "switchPrincipalCard",
          "description": "The API is used to change the contract owner of the main card by a cardholder of an additional card belonging to the same contract.\nThe API requires in input:\n- the Issuer ID\n- the contract reference\n- the cardholder reference (future contract owner and future cardholder of the main card)\n- the card contract reference (optional - in case the cardholder has several card contracts in different contracts) \n\nIn return, the list of all changes is provided at contract level and card contracts level (old main card and new main card).",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SwitchPrincipalCardRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntitySwitchPrincipalCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/switch-principal-card": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Switch between principal and supplementary cards by external reference",
          "operationId": "switchPrincipalCardByIssuerExtRef",
          "description": "The API is used to change the contract owner of the main card by a cardholder of an additional card belonging to the same contract.\nThe API requires in input:\n- the Issuer ID\n- the contract reference\n- the cardholder reference (future contract owner and future cardholder of the main card)\n- the card contract reference (optional - in case the cardholder has several card contracts in different contracts) \n\nIn return, the list of all changes is provided at contract level and card contracts level (old main card and new main card).",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SwitchPrincipalCardRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntitySwitchPrincipalCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/change-product": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Change the existing product for another one",
          "description": "The API can be used to replace a consumer contract (so called 'product change'), created from a certain product, by another consumer contract, created from a different product (e.g. in case of card product upgrade, downgrade).\nThis replacement or change\n- must be allowed by the configuration (e.g. transition from product A to product B is configured and allowed)\n- is performed either immediately or in the future (next anticipated card renewal date) depending on the configuration \n\nAs a result\n- Card renewal and replacement are disabled for all cards within the old contract\n- In case of product change in the future, the change is scheduled at the first anticipated card renewal date within the contract, and the product change status is PENDING\n\nWhen this contract replacement or product change is performed (immediately or at the scheduled date)\n- Product change status is set to PROCESSED \n- the new contract is created from the new product (target product)\n- All cards of the old contract are transferred to the new one depending on business rules (e.g. deactivated/cancelled cards are not transferred)\n- Data such as IBAN are transferred to the new contract (data to be transferred depend on issuer requirements)\n- the closing date of the old contract is set according to the delay configured for the issuer\n- account set-up fee and membership are reimbursed on old contract if requested",
          "operationId": "changeProduct",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ChangeProductRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityChangeProductResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/change-product": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Change the existing product for another one by external reference",
          "description": "The API can be used to replace a consumer contract (so called 'product change'), created from a certain product, by another consumer contract, created from a different product (e.g. in case of card product upgrade, downgrade).\nThis replacement or change\n- must be allowed by the configuration (e.g. transition from product A to product B is configured and allowed)\n- is performed either immediately or in the future (next anticipated card renewal date) depending on the configuration \n\nAs a result\n- Card renewal and replacement are disabled for all cards within the old contract\n- In case of product change in the future, the change is scheduled at the first anticipated card renewal date within the contract, and the product change status is PENDING\n\nWhen this contract replacement or product change is performed (immediately or at the scheduled date)\n- Product change status is set to PROCESSED \n- the new contract is created from the new product (target product)\n- All cards of the old contract are transferred to the new one depending on business rules (e.g. deactivated/cancelled cards are not transferred)\n- Data such as IBAN are transferred to the new contract (data to be transferred depend on issuer requirements)\n- the closing date of the old contract is set according to the delay configured for the issuer\n- account set-up fee and membership are reimbursed on old contract if requested",
          "operationId": "changeProductByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ChangeProductRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityChangeProductResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/cancel-product-change": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Cancel a pending ProductChange",
          "operationId": "cancelProductChange",
          "description": "The API can be used to cancel a product change for a given consumer contract, identified by either its issuer Contract external reference or its Contract reference:\n- PENDING or already PROCESSED product change\n- The cancellation is possible as long as the original contract is not yet closed (product change already processed).\n- It is possible to request the reimbursement of the fees (membership fee / account setup) already posted on the new contract.\n- It is possible to request cancellation only for the latest product change that was performed for the contracts that are linked each other through a product change (old contracts, new contract)\n\nAs a result,\n-  In case of cancellation of a pending product change, the product change is not performed.\n-  In case of cancellation of a product change already processed, the product change is reversed:\n- the original contract,and its cards will not be closed\n- the new contract and new cards are closed immediately",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CancelProductChangeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCancelProductChangeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/cancel-product-change": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Cancel a pending ProductChange by external reference",
          "operationId": "cancelProductChangeByIssuerExtRef",
          "description": "The API can be used to cancel a product change for a given consumer contract, identified by either its issuer Contract external reference or its Contract reference:\n- PENDING or already PROCESSED product change\n- The cancellation is possible as long as the original contract is not yet closed (product change already processed).\n- It is possible to request the reimbursement of the fees (membership fee / account setup) already posted on the new contract.\n- It is possible to request cancellation only for the latest product change that was performed for the contracts that are linked each other through a product change (old contracts, new contract)\n\nAs a result,\n-  In case of cancellation of a pending product change, the product change is not performed.\n-  In case of cancellation of a product change already processed, the product change is reversed:\n- the original contract,and its cards will not be closed\n- the new contract and new cards are closed immediately",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CancelProductChangeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCancelProductChangeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/force-product-change": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Force a pending ProductChange",
          "operationId": "forceProductChange",
          "description": "When a product change is scheduled for a consumer contract A, card replacement is blocked for each card of this contract A.\nIn this case, instead of requesting a card replacement this API allows to anticipate / force the scheduled product change on a consumer contract, identified by its Issuer Contract external reference or its Contract reference.\n\nAlso, the card to be replaced, previously permanently blocked (e.g. for lost or stolen reason) after the product change request, can be transferred to the new contract, not in cancelled status but in the status foreseen by the new product.\n\nAs a result : \n- Product change status is set to PROCESSED \n- the new contract is created from the new product\n- All cards of the old contract (e.g. contract A) are transferred to the new one depending on business rules (e.g. deactivated/cancelled, permanently blocked cards before the product change request are not transferred)\n- Data such as IBAN are transferred to the new contract\n- the closing date of the old contract is set according to the delay configured for the issuer\n- account set-up fee and membership are reimbursed on old contract if requested",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ForceProductChangeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityForceProductChangeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/force-product-change": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Force a pending ProductChange by external reference",
          "operationId": "forceProductChangeByIssuerExtRef",
          "description": "When a product change is scheduled for a consumer contract A, card replacement is blocked for each card of this contract A.\nIn this case, instead of requesting a card replacement this API allows to anticipate / force the scheduled product change on a consumer contract, identified by its Issuer Contract external reference or its Contract reference.\n\nAlso, the card to be replaced, previously permanently blocked (e.g. for lost or stolen reason) after the product change request, can be transferred to the new contract, not in cancelled status but in the status foreseen by the new product.\n\nAs a result : \n- Product change status is set to PROCESSED \n- the new contract is created from the new product\n- All cards of the old contract (e.g. contract A) are transferred to the new one depending on business rules (e.g. deactivated/cancelled, permanently blocked cards before the product change request are not transferred)\n- Data such as IBAN are transferred to the new contract\n- the closing date of the old contract is set according to the delay configured for the issuer\n- account set-up fee and membership are reimbursed on old contract if requested",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ForceProductChangeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityForceProductChangeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/refund-fee-on-demand": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Refund fee by contract reference",
          "operationId": "refundFeeByContractReference",
          "description": "The API is used to trigger an on demand pro rata refund of  Account Setup (AS) fee or Membership fee (MS) for the unutilised period. \n\nPre Conditions:\n- In case refund for Account Setup fee is requested then card contract closure date should be less than  card contract creation date + 1 year\n- In case refund for Membership fee is requested, then the Membership fee should already be posted \n- Account setup fee refund on demand can be received only once during contract lifecycle\n- Membership fee refund on demand can be received only once between Membership fee anniversary dates\n\nThe issuer can request the refund by AS or MS fee by providing:\n- The fee type: Either Account Setup fee or Membership Fee\n- Card Contract Reference\n\nAs a Result:\n- For Account Setup fee: \nIf account is in closed status (BEING_CLOSED), the pro rata refund will be calculated and posted with the following logic: Posted AS fee amount * (Number of days from contract cancellation till (card contract creation + 1 year) / number of days in the year), \nIn other cases, it will be calculated in the following logic:,Posted AS fee amount * (Number of days from the date when demand for refund is received till (card contract creation + 1 year) / number of days in the year)\n\n- For Membership Fee: \nIf account is in closed status (BEING_CLOSED), the pro rata refund will be calculated and posted with the following logic: MS fee posted on last MS fee anniversary date * (Number of days from contract cancellation till next MS Fee Anniversary date / number of days in the year)\nIn other cases, it will be calculated in the following logic: MS fee posted on last MS fee anniversary date * (Number of days from the date when demand for refund is received till next MS Fee Anniversary date / number of days in the year).",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/RefundFeeOnDemandRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRefundFeeOnDemandResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/refund-fee-on-demand": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Refund fee by issuer contract external reference",
          "operationId": "refundFeeByIssuerContractExternalReference",
          "description": "The API is used to trigger an on demand pro rata refund of  Account Setup (AS) fee or Membership fee (MS) for the unutilised period. \n\nPre Conditions:\n- In case refund for Account Setup fee is requested then card contract closure date should be less than  card contract creation date + 1 year\n- In case refund for Membership fee is requested, then the Membership fee should already be posted \n- Account setup fee refund on demand can be received only once during contract lifecycle\n- Membership fee refund on demand can be received only once between Membership fee anniversary dates\n\nThe issuer can request the refund by AS or MS fee by providing:\n- The fee type: Either Account Setup fee or Membership Fee\n- Card Contract Reference\n\nAs a Result:\n- For Account Setup fee: \nIf account is in closed status (BEING_CLOSED), the pro rata refund will be calculated and posted with the following logic: Posted AS fee amount * (Number of days from contract cancellation till (card contract creation + 1 year) / number of days in the year), \nIn other cases, it will be calculated in the following logic:,Posted AS fee amount * (Number of days from the date when demand for refund is received till (card contract creation + 1 year) / number of days in the year)\n\n- For Membership Fee: \nIf account is in closed status (BEING_CLOSED), the pro rata refund will be calculated and posted with the following logic: MS fee posted on last MS fee anniversary date * (Number of days from contract cancellation till next MS Fee Anniversary date / number of days in the year)\nIn other cases, it will be calculated in the following logic: MS fee posted on last MS fee anniversary date * (Number of days from the date when demand for refund is received till next MS Fee Anniversary date / number of days in the year).",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/RefundFeeOnDemandRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRefundFeeOnDemandResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}/refund-fee-on-demand": {
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Refund fee by contract reference for corporate contract",
          "operationId": "refundFeeByContractReferenceForCorporateContract",
          "description": "The API is used to trigger an on demand pro rata refund of  Account Setup (AS) fee or Membership fee (MS) for the unutilised period. \n\nPre Conditions:\n- In case refund for Account Setup fee is requested then card contract closure date should be less than  card contract creation date + 1 year\n- In case refund for Membership fee is requested, then the Membership fee should already be posted \n- Account setup fee refund on demand can be received only once during contract lifecycle\n- Membership fee refund on demand can be received only once between Membership fee anniversary dates\n\nThe issuer can request the refund by AS or MS fee by providing:\n- The fee type: Either Account Setup fee or Membership Fee\n- Card Contract Reference\n\nAs a Result:\n- For Account Setup fee: \nIf account is in closed status (BEING_CLOSED), the pro rata refund will be calculated and posted with the following logic: Posted AS fee amount * (Number of days from contract cancellation till (card contract creation + 1 year) / number of days in the year), \nIn other cases, it will be calculated in the following logic:,Posted AS fee amount * (Number of days from the date when demand for refund is received till (card contract creation + 1 year) / number of days in the year)\n\n- For Membership Fee: \nIf account is in closed status (BEING_CLOSED), the pro rata refund will be calculated and posted with the following logic: MS fee posted on last MS fee anniversary date * (Number of days from contract cancellation till next MS Fee Anniversary date / number of days in the year)\nIn other cases, it will be calculated in the following logic: MS fee posted on last MS fee anniversary date * (Number of days from the date when demand for refund is received till next MS Fee Anniversary date / number of days in the year).",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/RefundFeeOnDemandRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRefundFeeOnDemandResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}/addon-subscriptions": {
        "get": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "List add-on services subscriptions for a corporate contract by external reference",
          "operationId": "listAddOnSubscriptionsForCorporateContractIssuerExtRef",
          "description": "The API allows the list of additional service subscriptions (e.g. new letter, travel insurance) for the corporate contract to be retrieved.\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe corporate contract for which the add-on subscriptions are requested: It can be provided by using the contract reference or the issuer external contract reference\n\nThe API response contains add-on subscription information such as:\n•\tThe reference of the additional service subscription\n•\tThe service type reference\n•\tThe card contract or the account on which the subscription has been done\n•\tThe date of subscription to the add-on service\n•\tThe list of add-on service parameters if any",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "query",
              "description": "Account Reference",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "query",
              "description": "Issuer Account External Reference",
              "required": false,
              "type": "string"
            },
            {
              "name": "cardContractReference",
              "in": "query",
              "description": "Card Contract Reference",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerCardContractExternalReference",
              "in": "query",
              "description": "Issuer Card Contract External Reference",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListAddonSubscription"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Subscribe to add-on for a corporate contract by external reference",
          "operationId": "subscribeAddonByIssuerContractExternalReference",
          "description": "The API allows a cardholder to subscribe to an additional service (e.g. new letter, travel insurance) for the corporate contract during all contract life cycle.\nThe list of allowed additional services are defined on the product (e.g. PORTAL_ACCESS, ALERT, NOTIFICATION).\n\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe corporate contract for which the add-on subscription is requested: It can be provided by using the contract reference or the issuer external contract reference\n•\tThe identifier of the entity for which the add-on subscription is requested: Either the card contract by providing the card contract reference or the issuer external card contract reference, \nOR the account by providing the account reference or the issuer external account reference\n•\tThe corresponding reference of the additional service\n•\tThe service type reference defined at product level\nDepending on the service type, the issuer can add additional parameters to the add-on service.\n\nAs a result:\n•\tThe new add-on subscription for the corporate contract is available and can be unsubscribed during all contract life cycle\n•\tA fee can be generated and posted to the cardholder account if required for the product.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateAddOnSubscriptionRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddOnSubscriptionResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}/addon-subscriptions": {
        "get": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "List add-on services subscriptions for a corporate contract",
          "operationId": "listAddOnSubscriptionsForCorporateContract",
          "description": "The API allows the list of additional service subscriptions (e.g. new letter, travel insurance) for the corporate contract to be retrieved.\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe corporate contract for which the add-on subscriptions are requested: It can be provided by using the contract reference or the issuer external contract reference\n\nThe API response contains add-on subscription information such as:\n•\tThe reference of the additional service subscription\n•\tThe service type reference\n•\tThe card contract or the account on which the subscription has been done\n•\tThe date of subscription to the add-on service\n•\tThe list of add-on service parameters if any",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "accountReference",
              "in": "query",
              "description": "Account Reference",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerAccountExternalReference",
              "in": "query",
              "description": "Issuer Account External Reference",
              "required": false,
              "type": "string"
            },
            {
              "name": "cardContractReference",
              "in": "query",
              "description": "Card Contract Reference",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerCardContractExternalReference",
              "in": "query",
              "description": "Issuer Card Contract External Reference",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListAddonSubscription"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Subscribe to add-on for a corporate contract",
          "operationId": "subscribeAddonByContractReference",
          "description": "The API allows a cardholder to subscribe to an additional service (e.g. new letter, travel insurance) for the corporate contract during all contract life cycle.\nThe list of allowed additional services are defined on the product (e.g. PORTAL_ACCESS, ALERT, NOTIFICATION).\n\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe corporate contract for which the add-on subscription is requested: It can be provided by using the contract reference or the issuer external contract reference\n•\tThe identifier of the entity for which the add-on subscription is requested: Either the card contract by providing the card contract reference or the issuer external card contract reference, \nOR the account by providing the account reference or the issuer external account reference\n•\tThe corresponding reference of the additional service\n•\tThe service type reference defined at product level\nDepending on the service type, the issuer can add additional parameters to the add-on service.\n\nAs a result:\n•\tThe new add-on subscription for the corporate contract is available and can be unsubscribed during all contract life cycle\n•\tA fee can be generated and posted to the cardholder account if required for the product.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateAddOnSubscriptionRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddOnSubscriptionResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}/addon-subscriptions/unsubscribe": {
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Unsubscribe add-on for a corporate contract by external reference",
          "operationId": "unsubscribeAddonByIssuerContractExternalReference",
          "description": "The API allows a cardholder to unsubscribe from an additional service (e.g. new letter, travel insurance) for the corporate contract during all contract life cycle.\n\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe corporate contract for which the add-on unsubscription is requested: It can be provided by using the contract reference or the issuer external contract reference\n•\tThe identifier of the entity for which the add-on subscription is requested: Either the card contract by providing the card contract reference or the issuer external card contract reference, \nOR the account by providing the account reference or the issuer external account reference\n•\tThe reference of the additional service\n•\tThe service type reference \n\nAs a result, the existing add-on subscription for the corporate contract is no longer available.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/RemoveAddOnSubscriptionRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRemoveAddOnSubscriptionResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}/addon-subscriptions/unsubscribe": {
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Unsubscribe add-on for a corporate contract",
          "operationId": "unsubscribeAddonByContractReference",
          "description": "The API allows a cardholder to unsubscribe from an additional service (e.g. new letter, travel insurance) for the corporate contract during all contract life cycle.\n\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe corporate contract for which the add-on unsubscription is requested: It can be provided by using the contract reference or the issuer external contract reference\n•\tThe identifier of the entity for which the add-on subscription is requested: Either the card contract by providing the card contract reference or the issuer external card contract reference, \nOR the account by providing the account reference or the issuer external account reference\n•\tThe reference of the additional service\n•\tThe service type reference \n\nAs a result, the existing add-on subscription for the corporate contract is no longer available.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/RemoveAddOnSubscriptionRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRemoveAddOnSubscriptionResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}/refund-fee-on-demand": {
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Refund Fee By Issuer Contract External Reference For Corporate Contract",
          "operationId": "refundFeeByIssuerContractExternalReferenceForCorporateContract",
          "description": "The API is used to trigger an on demand pro rata refund of  Account Setup (AS) fee or Membership fee (MS) for the unutilised period. \n\nPre Conditions:\n- In case refund for Account Setup fee is requested then card contract closure date should be less than  card contract creation date + 1 year\n- In case refund for Membership fee is requested, then the Membership fee should already be posted \n- Account setup fee refund on demand can be received only once during contract lifecycle\n- Membership fee refund on demand can be received only once between Membership fee anniversary dates\n\nThe issuer can request the refund by AS or MS fee by providing:\n- The fee type: Either Account Setup fee or Membership Fee\n- Card Contract Reference\n\nAs a Result:\n- For Account Setup fee: \nIf account is in closed status (BEING_CLOSED), the pro rata refund will be calculated and posted with the following logic: Posted AS fee amount * (Number of days from contract cancellation till (card contract creation + 1 year) / number of days in the year), \nIn other cases, it will be calculated in the following logic:,Posted AS fee amount * (Number of days from the date when demand for refund is received till (card contract creation + 1 year) / number of days in the year)\n\n- For Membership Fee: \nIf account is in closed status (BEING_CLOSED), the pro rata refund will be calculated and posted with the following logic: MS fee posted on last MS fee anniversary date * (Number of days from contract cancellation till next MS Fee Anniversary date / number of days in the year)\nIn other cases, it will be calculated in the following logic: MS fee posted on last MS fee anniversary date * (Number of days from the date when demand for refund is received till next MS Fee Anniversary date / number of days in the year).",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/RefundFeeOnDemandRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRefundFeeOnDemandResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}/change-paying-account": {
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Change paying account structure for a corporate contract",
          "description": "For a certain corporate contract it is possible to change the paying account type for all accounts from paid by the account itself (usually paid by the employees) to paid by the root account (usually paid by the company) or the inverse.\nE.g. all card accounts are paid by employees themselves (each account is paid by itself) within a contract, then it is possible to request to switch to all accounts are paid by the company itself (e.g. root account represents the company and becomes the paying account).",
          "operationId": "changePayingAccount",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ChangePayingAccountRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityChangePayingAccountResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}/cancel-change-paying-account": {
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Cancel scheduled change of paying account type",
          "description": "The API enables to cancel the scheduled change of paying account type, until the scheduled date has not reached yet.",
          "operationId": "cancelChangeOfPayingAccountType",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/CancelChangePayingAccountResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}/cancel-change-paying-account": {
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Cancel scheduled change of paying account type by external reference",
          "description": "The API enables to cancel the scheduled change of paying account type, until the scheduled date has not reached yet.",
          "operationId": "cancelChangeOfPayingAccountTypeByExtRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/CancelChangePayingAccountResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}/change-paying-account": {
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Change paying account structure for a corporate contract by external reference",
          "description": "For a certain corporate contract it is possible to change the paying account type for all accounts from paid by the account itself (usually paid by the employees) to paid by the root account (usually paid by the company) or the inverse.\nE.g. all card accounts are paid by employees themselves (each account is paid by itself) within a contract, then it is possible to request to switch to all accounts are paid by the company itself (e.g. root account represents the company and becomes the paying account).",
          "operationId": "changePayingAccountByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ChangePayingAccountRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityChangePayingAccountResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}/contract-owner": {
        "get": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Retrieve contract owner for a corporate contract (beta)",
          "operationId": "retrieveCorporateContractOwner",
          "description": "This API allows the contract owner for a corporate contract identified by the Issuer Contract external reference or the Contract reference, to be retrieved.\n\nThe API response contains :\n- either customer information if the contract owner is a person\n- or company information if the contract owner is a company.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressIdentifiers",
                  "addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityContractMember"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}/contract-owner": {
        "get": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Retrieve contract owner for a corporate contract by external reference (beta)",
          "operationId": "retrieveCorporateContractOwnerByIssuerExtRef",
          "description": "This API allows the contract owner for a corporate contract identified by the Issuer Contract external reference or the Contract reference, to be retrieved.\n\nThe API response contains :\n- either customer information if the contract owner is a person\n- or company information if the contract owner is a company",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressIdentifiers",
                  "addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityContractMember"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/credit-transfers": {
        "post": {
          "tags": [
            "Credit Transfer"
          ],
          "summary": "Create a credit transfer instruction",
          "description": "This API enables an outgoing credit transfer instruction to be created by transferring funds towards a beneficiary bank account (in house/external) from a card account credit balance or open-to-buy. \nThe beneficiary bank account IBAN must be provided in input (the Direct Debit IBAN for the card account can be used otherwise if any).\n\nAs a result, the card account is immediately debited of the requested amount.\nThe API returns the unique Credit Transfer EndToEnd Identifier generated by our system and the Credit Transfer status.",
          "operationId": "createCreditTransfer",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateCreditTransferRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateCreditTransferResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/credit-transfers/{endToEndId}": {
        "get": {
          "tags": [
            "Credit Transfer"
          ],
          "summary": "Retrieve a credit transfer",
          "description": "This API enables an already created credit transfer instruction to be retrieved by providing in input the credit transfer E2E Identifier.",
          "operationId": "retrieveCreditTransfer",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "endToEndId",
              "in": "path",
              "description": "Outgoing credit transfer (OCT) identifier",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "statusHistory"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreditTransfer"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/credit-transfers/{endToEndId}/cancel": {
        "post": {
          "tags": [
            "Credit Transfer"
          ],
          "summary": "Cancel credit transfer",
          "description": "This API enables a credit transfer instruction to be cancelled by providing in input the credit transfer E2E Identifier.",
          "operationId": "cancelCreditTransfer",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "endToEndId",
              "in": "path",
              "description": "OCT identifier",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CancelCreditTransferRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCancelCreditTransferResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers": {
        "get": {
          "tags": [
            "Customer"
          ],
          "summary": "Retrieve list of customer's information",
          "operationId": "listCustomers",
          "description": "The \"list customers\" API enables to get a list of customers based on multiple criteria such as First name, Last name, Birth date,.. \n\nFor the search, the API enables exact matches values (partialSearch field set to false) or not (partialSearch set to yes). In the latter case, the search criteria should be a subset of the corresponding value stored in our system ; as an example : if we set \"JOH\" as  criteria search for name, then results JOHNNY or \"LISE-JOHN\" for name would match.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "lastName",
              "in": "query",
              "description": "Last name",
              "required": false,
              "type": "string"
            },
            {
              "name": "firstName",
              "in": "query",
              "description": "First name",
              "required": false,
              "type": "string"
            },
            {
              "name": "phoneticSearch",
              "in": "query",
              "description": "Indicate if a specific phonetic algorithm must be applied on first name and last name",
              "default": false,
              "type": "boolean"
            },
            {
              "name" : "phoneticAlgorithm",
              "in" : "query",
              "description":"The list of possible phonetic algorithms are determined for each issuer (configuration). If the indicator is set to true but no phonetic algorithm is provided then all configured phonetic algorithms are applied for the research.",
              "type":"array",
              "items":{
                 "type" : "string"
              }
            },
            {
              "name": "birthDate",
              "in": "query",
              "description": "Birthdate",
              "required": false,
              "type": "string"
            },
            {
              "name": "postalAddress.postCode",
              "in": "query",
              "description": "Post code of the customer's address",
              "required": false,
              "type": "string"
            },
            {
              "name": "postalAddress.townName",
              "in": "query",
              "description": "Town name of the customer's address",
              "required": false,
              "type": "string"
            },
            {
              "name": "postalAddress.streetName",
              "in": "query",
              "description": "Street name of the customer's address",
              "required": false,
              "type": "string"
            },
            {
              "name": "postalAddress.buildingNumber",
              "in": "query",
              "description": "Building number of the customer's address",
              "required": false,
              "type": "string"
            },
            {
              "name": "emailAddress.email",
              "in": "query",
              "description": "Email the customer",
              "required": false,
              "type": "string"
            },
            {
              "name": "phone.localPhoneNumber",
              "in": "query",
              "description": "Local phone number of the customer",
              "required": false,
              "type": "string"
            },
            {
              "name": "partialSearch",
              "in": "query",
              "description": "Allow to search on partial values for the following criteria : lastName, firstName, postalAddress.streetName, postalAddress.buildingNumber, postalAddress.postCode, postalAddress.townName, emailAddress.email, phone.localPhoneNumber",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "name": "page",
              "in": "query",
              "description": "0",
              "required": false,
              "type": "integer",
              "default": 0,
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "100",
              "required": false,
              "type": "integer",
              "default": 100,
              "format": "int32"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCustomer"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "x-wl-idempotent": true,
          "x-wl-lra-operation": true,
          "x-wl-lra-interface": true,
          "tags": [
            "Customer"
          ],
          "summary": "Create a Customer (beta)",
          "operationId": "createCustomer",
          "description": "The API allows a new customer (as person) to be created if all the mandatory fields are provided.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe first name of the customer\n•\tThe last name of the customer\n•\tThe default address of the customer : The Main postal address has to be provided because used as default address by all business processes if no address usage is defined.\nThe API returns the customer reference (as person) generated by our system.\nThe response can also be enriched (if specified as embedded fields in input) with additional data such as customer (as person) information, address identifiers linked to the customer, addresses of the customer, contacts of the customer.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "customer",
                  "customer.addressIdentifiers",
                  "customer.addresses",
                  "customer.contacts"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/CreateCustomerRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateCustomerResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}": {
        "get": {
          "tags": [
            "Customer"
          ],
          "summary": "Retrieve customer by external reference",
          "operationId": "retrieveCustomerByIssuerExtRef",
          "description": "The \"retrieve customer\" API allows the user to get customer information from the input parameters:\n- Issuer ID\n- Customer reference or the issuer customer reference\n\nIn addition to the person information, it is also possible to request the list of addresses of the customer.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressIdentifiers",
                  "addresses",
                  "contactIdentifiers",
                  "contacts"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCustomer"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Customer"
          ],
          "summary": "Update customer by external reference",
          "operationId": "updateCustomerByIssuerExtRef",
          "description": "The \"update customer\" API allows the user to update the attributes of a customer.\nTo identify the customer, it is needed to provide:\n- The issuer ID\n- The customer reference (internal or external) for which updates are required\n\nThe customer reference can be retrieved by using the \"list customers\" API.\nAll the attributes must be given in input even if they remain unchanged. For that, It can be needed to use the \"retrieve customer\" API to get all the current attributes.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCustomerRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCustomerResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Customer"
          ],
          "summary": "Update customer partially by external reference",
          "operationId": "updateCustomerPartiallyByIssuerExtRef",
          "description": "The \"update customer partially\" API allows the user to update the attributes of a customer.\n\nTo identify the customer, it is needed to provide:\n•\tThe issuer ID\n•\tThe customer reference (internal or external) for which updates are required\nThe customer reference can be retrieved by using the \"list customers\" API. \nWith this API, only attributes that need to be updated must be given in input.\n\nIn case the property Contact (list) is provided in input then it will replace the existing list.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCustomerRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCustomerResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/customer-history": {
        "get": {
          "tags": [
            "Customer"
          ],
          "summary": "Retrieve list of historic updates of a customer by customer external reference (beta)",
          "operationId": "listCustomerHistoryByIssuerExtRef",
          "description": "The API allows the customer update history of a customer to be retrieved. \nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe customer for which information is requested : It can be provided by using the customer reference or the issuer customer external reference. \nA start date and an end date can be provided in order to limit the search of the history. \nIn response, the interface provides a list of changes with the effective date of the update.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "periodStartDateTime",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Format : yyyy-MM-ddTHH:mm:ssZ"
            },
            {
              "name": "periodEndDateTime",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Format : yyyy-MM-ddTHH:mm:ssZ"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCustomerHistory"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/accounts": {
        "get": {
          "tags": [
            "Customer - Related"
          ],
          "summary": "List accounts for account owner by external reference",
          "operationId": "listAccountsForAccountOwnerByIssuerExtRef",
          "description": "This API enables all the accounts associated to the customer (cardholder)to be retrieved.\n\nThe customer must exist for the provided issuer.\nThe API returns all accounts linked to the given account owner for the provided issuer and sub-issuers if any, limited to the list of issuers allowed for the user.\n\n The interface provides the generic information (mainly master data) for managing the account. \nFor credit cards, payment mode and the due amount calculation is provided back.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListAccount"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/addresses": {
        "get": {
          "tags": [
            "Customer"
          ],
          "summary": "List addresses for a customer by external reference",
          "operationId": "listAddressesForCustomerByIssuerExtRef",
          "description": "This API enables all the addresses associated with a given customer, identified by his customer reference, to be retrieved. This address could be either a permanent address or a temporary address.\nSeveral address types are managed. Each address can be used for a specific usage (card delivery, statement delivery, contract letter,...). \nAddress usage is associated to a service (card service, account service, dispute service, ..) configured in our system.\nThe API can retrieve only the addresses linked to a specific usage: in this case, all the mandatory 'AddressUsage' attributes must be provided (e.g. serviceCode, AddressUsage).\nIf the showHistory indicator is set to Y then the full history of the addresses and the future addresses are returned. If this indicator is empty (default behavior) or equals to N, then only the last active addresses are returned.\nAddress identifiers, Address attributes and Address usages are displayed in the response.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
              {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressUsages"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "serviceCode",
              "in": "query",
              "description": "The Service for which the address usage is defined : CARD_SERVICE, ACCOUNT_SERVICE. Conditional (must be used with addressUsageName)",
              "required": false,
              "type": "string"
            },
            {
              "name": "entityReference",
              "in": "query",
              "description": "This corresponds to the application domain of the address. It can be eg a card contract reference, card account reference. It is an optional field.\nIt enables to have the same usage address for the same customer applied to different addresses (one cardholder with 2 card contracts: card delivery address usage is assigned to main postal address for contract A and card delivery address usage is also assigned to office postal address for contract B.",
              "required": false,
              "type": "string"
            },
            {
              "name": "addressUsageName",
              "in": "query",
              "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY.",
              "required": false,
              "type": "string"
            },
            {
              "name": "showHistory",
              "in": "query",
              "description": "If the showHistory indicator is set to 'true' then the full history of the addresses are returned. If this indicator is empty (default behavior) or equals to 'false', then only the last active addresses are returned. ",
              "required": false,
              "default": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListAddress"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Create address for a customer by external reference",
          "operationId": "createAddressByCustomerIssuerExtRef",
          "description": "The API allows to create either a permanent address or a temporary address for the customer, identified with his reference. \nAn address includes the following information:\n•\tthe issuer address external reference \n•\tthe label (eg MAIN_POSTAL_ADDRESS),\n•\tthe type (mail address, phone number, email)  and the corresponding data\n•\tthe address usages\n•\tthe start date (optional, by default the current date is used)\n•\tthe end date (conditional, is mandatory when creating a temporary address)\n\nIf the label of the address is already used for the customer, a new version will be created and active once the start date is reached.\n\nWhen creating a temporary address, If a temporary address already exists with an overlap on the activity period then only the newly created address will be kept and the old one will be removed. \nThe temporary address is active between its start date and end date.\n\nOne or several address usages can be added to the address (in order to retrieve this address). An address usage is used for specific business process/service. When adding a usage to an address, the usage is immediately active and if it is already assigned to another address, it is removed from this latter. \n\nFor information, the main postal address is mandatory.\nIn return, the API provides the address Reference calculated by the system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateAddressRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/addresses/external-addresses/{issuerAddressExternalReference}": {
        "get": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Retrieve customer address by customer external reference and address external reference",
          "operationId": "retrieveAddressByIssuerExtRefAndCustomerIssuerExtRef",
          "description": "The API returns the current version of the customer's address identified with:\n•\tthe reference of the customer,\n•\tthe reference of the address.\nThis address is either a permanent address or a temporary address (if this one is active at the time of request).\nThe address identifiers, address attributes, address usages and entity reference (application domain of the address) are displayed in the response.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressUsages"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddress"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Update address by customer external reference and address external reference",
          "operationId": "modifyAddressByIssuerExtRefAndCustomerIssuerExtRef",
          "description": "The API allows to update the permanent address of a customer, identified with the reference of the customer and the reference of the address.\nAll the attributes must be provided even those unchanged, except the line 1 to 5 of the postal address if a specific issuer algorithm is configured.\nIf the address was invalid, the address becomes valid.\n\nOne or several address usages can be added to the address. An address usage is used for specific business process/service. When adding a usage to an address, the usage is immediately active and if it is already assigned to another address, it is removed from this latter. \nAll the usages already linked to the address cannot be removed via this API.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyAddressRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/addresses/external-addresses/{issuerAddressExternalReference}/invalidate": {
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Invalidate address by customer external reference and address external reference",
          "operationId": "invalidateAddressByExtCustomerRefAndExtAddress",
          "description": "The API is used to invalidate the address identified with the customer reference (external or internal) and the address reference (external or internal).\nThe invalidation is applied only on the permanent address. \nThe address must be a postal address. If the user tries to invalidate another kind of address (PHONE/E_MAIL), an error is returned.\nThe attribute 'invalid'  becomes 'true'.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityInvalidateAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/addresses/{addressReference}/invalidate": {
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Invalidate address by customer external reference",
          "operationId": "invalidateAddressByExtCustomerAndAddress",
          "description": "The API is used to invalidate the address identified with the customer reference (external or internal) and the address reference (external or internal).\nThe invalidation is applied only on the permanent address. \nThe address must be a postal address. If the user tries to invalidate another kind of address (PHONE/E_MAIL), an error is returned.\nThe attribute 'invalid'  becomes 'true'.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityInvalidateAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/addresses/external-addresses/{issuerAddressExternalReference}/invalidate": {
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Invalidate address by address external reference",
          "operationId": "invalidateAddressByCustomerAndExtAddress",
          "description": "The API is used to invalidate the address identified with the customer reference (external or internal) and the address reference (external or internal).\nThe invalidation is applied only on the permanent address. \nThe address must be a postal address. If the user tries to invalidate another kind of address (PHONE/E_MAIL), an error is returned.\nThe attribute 'invalid'  becomes 'true'.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityInvalidateAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/addresses/{addressReference}/invalidate": {
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Invalidate address",
          "operationId": "invalidateAddress",
          "description": "The API is used to invalidate the address identified with the customer reference (external or internal) and the address reference (external or internal).\nThe invalidation is applied only on the permanent address. \nThe address must be a postal address. If the user tries to invalidate another kind of address (PHONE/E_MAIL), an error is returned.\nThe attribute 'invalid'  becomes 'true'.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityInvalidateAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/addresses/external-addresses/{issuerAddressExternalReference}/activate": {
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Activate address by customer external reference and address external reference",
          "operationId": "activateAddressByIssuerExtRefAndCustomerIssuerExtRef",
          "description": "The API allows to activate on demand of an address by providing\n•\tthe reference of the customer,\n•\tthe reference of the address\n•\tthe issuer Id.\nIf a temporary address exists, it becomes also active.\nThe address identifiers, address attributes and address usages are displayed in the response.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityActivateAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/addresses/external-addresses/{issuerAddressExternalReference}/address-usages": {
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Add an address usage by customer external reference and address external reference",
          "operationId": "createAddressUsageByIssuerExtRefAndCustomerIssuerExtRef",
          "description": "The address usage describes in which business case the address will be used (eg statement sending, cad delivery, ...) \nThe complete authorized values list is shared during the product configuration between the issuer and WL.\nThis API allows a usage determined by its name (e.g. STATEMENT_SENDING) to be linked to the entity reference of the address (e.g. card contract reference) and the service code (e.g. ACCOUNT_SERVICE)\nTo create an address usage, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference \n- The address reference or the issuer address reference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateAddressUsageRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddressUsageResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Remove an address usage by customer external reference and address external reference",
          "operationId": "deleteAddressUsageByIssuerExtRefAndCustomerIssuerExtRef",
          "description": "The API deletes the address usages linked to one address. \nThese address usages are filtered by the request params:\n- addressUsageName (for definition see the resource addressUsage), mandatory\n- entityReference (for definition see the resource addressUsage), optional\n- serviceCode (for definition see the resource addressUsage), mandatory\n\nIf the entityReference is empty and the API finds several addressUsages (for the addressUsageName and serviceCode in request param), then the list of addressUsages will be deleted",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "serviceCode",
              "in": "query",
              "description": "The Service for which the address usage is defined : CARD_SERVICE, ACCOUNT_SERVICE. Mandatory ",
              "required": true,
              "type": "string"
            },
            {
              "name": "entityReference",
              "in": "query",
              "description": "This corresponds to the application domain of the address. It can be eg a card contract reference, card account reference. It is an optional field.\nIt enables to have the same usage address for the same customer applied to different addresses (one cardholder with 2 card contracts: card delivery address usage is assigned to main postal address for contract A and card delivery address usage is also assigned to office postal address for contract B.",
              "required": false,
              "type": "string"
            },
            {
              "name": "addressUsageName",
              "in": "query",
              "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteAddressUsageResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/addresses/external-addresses/{issuerAddressExternalReference}/deactivate": {
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Deactivate address by customer external reference and address external reference",
          "operationId": "deactivateAddressByIssuerExtRefAndCustomerIssuerExtRef",
          "description": "The API is used to deactivate the address, identified with the customer reference and the address reference. \nThe status becomes \"INACTIVE\". \nThis action is forbidden in case of:\n- the address is the MAIN_POSTAL_ADDRESS\n- an usage is linked to the address.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeactivateAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/addresses/{addressReference}": {
        "get": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Retrieve customer address by customer external reference",
          "operationId": "retrieveAddressByCustomerIssuerExtRef",
          "description": "The API returns the current version of the customer's address identified with:\n•\tthe reference of the customer,\n•\tthe reference of the address.\nThis address is either a permanent address or a temporary address (if this one is active at the time of request).\nThe address identifiers, address attributes, address usages and entity reference (application domain of the address) are displayed in the response.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressUsages"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddress"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Update address by customer external reference",
          "operationId": "modifyAddressByCustomerIssuerExtRef",
          "description": "The API allows to update the permanent address of a customer, identified with the reference of the customer and the reference of the address.\nAll the attributes must be provided even those unchanged, except the line 1 to 5 of the postal address if a specific issuer algorithm is configured.\nIf the address was invalid, the address becomes valid.\n\nOne or several address usages can be added to the address. An address usage is used for specific business process/service. When adding a usage to an address, the usage is immediately active and if it is already assigned to another address, it is removed from this latter. \nAll the usages already linked to the address cannot be removed via this API.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyAddressRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/addresses/{addressReference}/activate": {
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Activate address by customer external reference",
          "operationId": "activateAddressByCustomerIssuerExtRef",
          "description": "The API allows to activate on demand of an address by providing\n•\tthe reference of the customer,\n•\tthe reference of the address\n•\tthe issuer Id.\nIf a temporary address exists, it becomes also active.\nThe address identifiers, address attributes and address usages are displayed in the response.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityActivateAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/addresses/{addressReference}/address-usages": {
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Add an address usage by customer external reference",
          "operationId": "createAddressUsageByCustomerIssuerExtRef",
          "description": "The address usage describes in which business case the address will be used (eg statement sending, cad delivery, ...) \nThe complete authorized values list is shared during the product configuration between the issuer and WL.\nThis API allows a usage determined by its name (e.g. STATEMENT_SENDING) to be linked to the entity reference of the address (e.g. card contract reference) and the service code (e.g. ACCOUNT_SERVICE)\nTo create an address usage, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference \n- The address reference or the issuer address reference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateAddressUsageRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddressUsageResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Remove an address usage by customer external reference",
          "operationId": "deleteAddressUsageByCustomerIssuerExtRef",
          "description": "The API deletes the address usages linked to one address. \nThese address usages are filtered by the request params:\n- addressUsageName (for definition see the resource addressUsage), mandatory\n- entityReference (for definition see the resource addressUsage), optional\n- serviceCode (for definition see the resource addressUsage), mandatory\n\nIf the entityReference is empty and the API finds several addressUsages (for the addressUsageName and serviceCode in request param), then the list of addressUsages will be deleted",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "serviceCode",
              "in": "query",
              "description": "The Service for which the address usage is defined : CARD_SERVICE, ACCOUNT_SERVICE. Mandatory ",
              "required": true,
              "type": "string"
            },
            {
              "name": "entityReference",
              "in": "query",
              "description": "This corresponds to the application domain of the address. It can be eg a card contract reference, card account reference. It is an optional field.\nIt enables to have the same usage address for the same customer applied to different addresses (one cardholder with 2 card contracts: card delivery address usage is assigned to main postal address for contract A and card delivery address usage is also assigned to office postal address for contract B.",
              "required": false,
              "type": "string"
            },
            {
              "name": "addressUsageName",
              "in": "query",
              "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteAddressUsageResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/addresses/{addressReference}/deactivate": {
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Deactivate address by customer external reference",
          "operationId": "deactivateAddressByCustomerIssuerExtRef",
          "description": "Deactivate the address identified with the customer external reference and the address internal reference. The status becomes 'INACTIVE'. This action is forbidden in case of :\n-the address is the MAIN_POSTAL_ADDRESS\n-an usage is linked to the address. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeactivateAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/card-contracts": {
        "get": {
          "tags": [
            "Customer - Related"
          ],
          "summary": "List card contracts for cardholder by external reference",
          "operationId": "listCardContractsForCardHolderByIssuerExtRef",
          "description": "This API enables ll the card contracts associated to the cardholder to be retrieved.\nInformation to be provided in input:\n- Issuer ID\n- Customer reference\n\nTThe customer must exist for the provided issuer.\nThe API returns all card contracts linked to the given cardholder for the provided issuer and sub-issuers if any, limited to the list of issuers allowed for the user.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "cards",
                  "cardIdentifiers",
                  "selectedModels"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCardContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/contracts": {
        "get": {
          "tags": [
            "Customer - Related"
          ],
          "summary": "List contracts for a customer by external reference",
          "operationId": "listContractsForContractOwnerByIssuerExtRef",
          "description": "This API allows to retrieve all contracts associated with a specific customer, regardless of their role in the contract (e.g., contract owner, card holder, account owner).\nInformation to be provided in input:\n•\tIssuer ID\n•\tThe customer for which information is requested : It can be provided by using the customer reference or the issuer customer external reference.\nThe customer must exist for the provided issuer.\nThe API returns all contracts linked to the given customer for the provided issuer and sub-issuers if any, limited to the list of issuers allowed for the user.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}": {
        "get": {
          "tags": [
            "Customer"
          ],
          "summary": "Retrieve customer",
          "operationId": "retrieveCustomer",
          "description": "The \"retrieve customer\" API allows the user to get customer information from the input parameters:\n- Issuer ID\n- Customer reference or the issuer customer reference\n\nIn addition to the person information, it is also possible to request the list of addresses of the customer.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressIdentifiers",
                  "addresses"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCustomer"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Customer"
          ],
          "summary": "Update customer",
          "operationId": "updateCustomer",
          "description": "The \"update customer\" API allows the user to update the attributes of a customer.\nTo identify the customer, it is needed to provide:\n- The issuer ID\n- The customer reference (internal or external) for which updates are required\n\nThe customer reference can be retrieved by using the \"list customers\" API.\nAll the attributes must be given in input even if they remain unchanged. For that, It can be needed to use the \"retrieve customer\" API to get all the current attributes.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCustomerRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCustomerResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Customer"
          ],
          "summary": "Update customer partially",
          "operationId": "updateCustomerPartially",
          "description": "The \"update customer partially\" API allows the user to update the attributes of a customer.\n\nTo identify the customer, it is needed to provide:\n•\tThe issuer ID\n•\tThe customer reference (internal or external) for which updates are required\nThe customer reference can be retrieved by using the \"list customers\" API. \nWith this API, only attributes that need to be updated must be given in input.\n\nIn case the property Contact (list) is provided in input then it will replace the existing list.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyCustomerRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyCustomerResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/customer-history": {
        "get": {
          "tags": [
            "Customer"
          ],
          "summary": "Retrieve list of historic updates of a customer (beta)",
          "operationId": "listCustomerHistory",
          "description": "The API allows the customer update history of a customer to be retrieved. \nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe customer for which information is requested : It can be provided by using the customer reference or the issuer customer external reference. \nA start date and an end date can be provided in order to limit the search of the history. \nIn response, the interface provides a list of changes with the effective date of the update.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "periodStartDateTime",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Format : yyyy-MM-ddTHH:mm:ssZ"
            },
            {
              "name": "periodEndDateTime",
              "in": "query",
              "required": false,
              "type": "string",
              "description": "Format : yyyy-MM-ddTHH:mm:ssZ"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCustomerHistory"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/accounts": {
        "get": {
          "tags": [
            "Customer - Related"
          ],
          "summary": "List accounts for account owner",
          "operationId": "listAccountsForAccountOwner",
          "description": "This API enables all the accounts associated to the customer (cardholder)to be retrieved.\n\nThe customer must exist for the provided issuer.\nThe API returns all accounts linked to the given account owner for the provided issuer and sub-issuers if any, limited to the list of issuers allowed for the user.\n\n The interface provides the generic information (mainly master data) for managing the account. \nFor credit cards, payment mode and the due amount calculation is provided back.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListAccount"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/addresses-and-subscriptions": {
        "post": {
          "tags": [
            "Customer - Related"
          ],
          "summary": "Create address for a customer and subscribe to add-on",
          "operationId": "createAddressAndSubscription",
          "description": "The API allows to create either a permanent address or a temporary address for the customer, identified with his reference, and to subscribe to an additional service (e.g. new letter, travel insurance) for a contract during all contract life cycle.\nAn address includes the following information:\n- the issuer address external reference\n- the label (e.g. MAIN_POSTAL_ADDRESS),\n- the type (mail address, phone number, email) and the corresponding data\n- the address usages\n- the start date (optional, by default, the current date is used)\n- the end date (conditional, only used when defining a temporary address)\n\nWhen creating a temporary address, If a temporary address already exists with an overlap on the activity period then only the newly created address will be kept and the old one will be removed.\n\nFor information, the main postal address is mandatory.\n\nA subscription to an additional service includes the following information:\n•\tThe identifier of the entity for which the add-on subscription is requested: Either the card contract by providing the card contract reference or the issuer external card contract reference, \nOR the account by providing the account reference or the issuer external account reference\n•\tThe corresponding reference of the additional service\n•\tThe service type reference defined at product level\n\nThe list of allowed additional services are defined on the product (e.g. PORTAL_ACCESS, ALERT, NOTIFICATION).\nDepending on the service type, the issuer can add additional parameters to the add-on service.\n\nAs a result:\n•\tThe new add-on subscription for the contract is available and can be unsubscribed during all contract life cycle\n•\tA fee can be generated and posted to the cardholder account if required for the product.\n\nIn return, the API provides the address reference calculated by the system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateAddressAndSubscriptionRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddressAndSubscriptionResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/addresses-and-subscriptions": {
        "post": {
          "tags": [
            "Customer - Related"
          ],
          "summary": "Create address for a customer and subscribe to add-on by external reference",
          "operationId": "createAddressAndSubscriptionByCustomerIssuerExtRef",
          "description": "The API allows to create either a permanent address or a temporary address for the customer, identified with his reference, and to subscribe to an additional service (e.g. new letter, travel insurance) for a contract during all contract life cycle.\nAn address includes the following information:\n- the issuer address external reference\n- the label (e.g. MAIN_POSTAL_ADDRESS),\n- the type (mail address, phone number, email) and the corresponding data\n- the address usages\n- the start date (optional, by default, the current date is used)\n- the end date (conditional, only used when defining a temporary address)\n\nWhen creating a temporary address, If a temporary address already exists with an overlap on the activity period then only the newly created address will be kept and the old one will be removed.\n\nFor information, the main postal address is mandatory.\n\nA subscription to an additional service includes the following information:\n•\tThe identifier of the entity for which the add-on subscription is requested: Either the card contract by providing the card contract reference or the issuer external card contract reference, \nOR the account by providing the account reference or the issuer external account reference\n•\tThe corresponding reference of the additional service\n•\tThe service type reference defined at product level\n\nThe list of allowed additional services are defined on the product (e.g. PORTAL_ACCESS, ALERT, NOTIFICATION).\nDepending on the service type, the issuer can add additional parameters to the add-on service.\n\nAs a result:\n•\tThe new add-on subscription for the contract is available and can be unsubscribed during all contract life cycle\n•\tA fee can be generated and posted to the cardholder account if required for the product.\n\nIn return, the API provides the address reference calculated by the system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateAddressAndSubscriptionRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddressAndSubscriptionResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/addresses": {
        "get": {
          "tags": [
            "Customer"
          ],
          "summary": "List addresses for a customer",
          "operationId": "listAddressesForCustomer",
          "description": "This API enables all the addresses associated with a given customer, identified by his customer reference, to be retrieved. This address could be either a permanent address or a temporary address.\nSeveral address types are managed. Each address can be used for a specific usage (card delivery, statement delivery, contract letter,...). \nAddress usage is associated to a service (card service, account service, dispute service, ..) configured in our system.\nThe API can retrieve only the addresses linked to a specific usage: in this case, all the mandatory 'AddressUsage' attributes must be provided (e.g. serviceCode, AddressUsage).\nIf the showHistory indicator is set to Y then the full history of the addresses and the future addresses are returned. If this indicator is empty (default behavior) or equals to N, then only the last active addresses are returned.\nAddress identifiers, Address attributes and Address usages are displayed in the response.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
              {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressUsages"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "serviceCode",
              "in": "query",
              "description": "The Service for which the address usage is defined : CARD_SERVICE, ACCOUNT_SERVICE. Conditional (must be used with addressUsageName)",
              "required": false,
              "type": "string"
            },
            {
              "name": "entityReference",
              "in": "query",
              "description": "This corresponds to the application domain of the address. It can be eg a card contract reference, card account reference. It is an optional field.\nIt enables to have the same usage address for the same customer applied to different addresses (one cardholder with 2 card contracts: card delivery address usage is assigned to main postal address for contract A and card delivery address usage is also assigned to office postal address for contract B.",
              "required": false,
              "type": "string"
            },
            {
              "name": "addressUsageName",
              "in": "query",
              "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY.The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY. Conditional (must be used serviceCode)  ",
              "required": false,
              "type": "string"
            },
            {
              "name": "showHistory",
              "in": "query",
              "description": "If the showHistory indicator is set to 'true' then the full history of the addresses are returned. If this indicator is empty (default behavior) or equals to 'false', then only the last active addresses are returned. ",
              "required": false,
              "default": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListAddress"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Create address for a customer",
          "operationId": "createAddress",
          "description": "The API allows to create either a permanent address or a temporary address for the customer, identified with his reference. \nAn address includes the following information:\n•\tthe issuer address external reference \n•\tthe label (eg MAIN_POSTAL_ADDRESS),\n•\tthe type (mail address, phone number, email)  and the corresponding data\n•\tthe address usages\n•\tthe start date (optional, by default the current date is used)\n•\tthe end date (conditional, is mandatory when creating a temporary address)\n\nIf the label of the address is already used for the customer, a new version will be created and active once the start date is reached.\n\nWhen creating a temporary address, If a temporary address already exists with an overlap on the activity period then only the newly created address will be kept and the old one will be removed. \nThe temporary address is active between its start date and end date.\n\nOne or several address usages can be added to the address (in order to retrieve this address). An address usage is used for specific business process/service. When adding a usage to an address, the usage is immediately active and if it is already assigned to another address, it is removed from this latter. \n\nFor information, the main postal address is mandatory.\nIn return, the API provides the address Reference calculated by the system.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateAddressRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/addresses/external-addresses/{issuerAddressExternalReference}": {
        "get": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Retrieve customer address by address external reference",
          "operationId": "retrieveAddressByIssuerExtRef",
          "description": "The API returns the current version of the customer's address identified with:\n•\tthe reference of the customer,\n•\tthe reference of the address.\nThis address is either a permanent address or a temporary address (if this one is active at the time of request).\nThe address identifiers, address attributes, address usages and entity reference (application domain of the address) are displayed in the response.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressUsages"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddress"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Update address by address external reference",
          "operationId": "modifyAddressByIssuerExtRef",
          "description": "The API allows to update the permanent address of a customer, identified with the reference of the customer and the reference of the address.\nAll the attributes must be provided even those unchanged, except the line 1 to 5 of the postal address if a specific issuer algorithm is configured.\nIf the address was invalid, the address becomes valid.\n\nOne or several address usages can be added to the address. An address usage is used for specific business process/service. When adding a usage to an address, the usage is immediately active and if it is already assigned to another address, it is removed from this latter. \nAll the usages already linked to the address cannot be removed via this API.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyAddressRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/addresses/external-addresses/{issuerAddressExternalReference}/address-usages": {
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Add an address usage by address external reference",
          "operationId": "createAddressUsageByIssuerExtRef",
          "description": "The address usage describes in which business case the address will be used (eg statement sending, cad delivery, ...) \nThe complete authorized values list is shared during the product configuration between the issuer and WL.\nThis API allows a usage determined by its name (e.g. STATEMENT_SENDING) to be linked to the entity reference of the address (e.g. card contract reference) and the service code (e.g. ACCOUNT_SERVICE)\nTo create an address usage, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference \n- The address reference or the issuer address reference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateAddressUsageRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddressUsageResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Remove an address usage by address external reference",
          "operationId": "deleteAddressUsageByIssuerExtRef",
          "description": "The API deletes the address usages linked to one address. \nThese address usages are filtered by the request params:\n- addressUsageName (for definition see the resource addressUsage), mandatory\n- entityReference (for definition see the resource addressUsage), optional\n- serviceCode (for definition see the resource addressUsage), mandatory\n\nIf the entityReference is empty and the API finds several address usages (for the addressUsageName and serviceCode in request param), then the list of addressUsages will be deleted.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "serviceCode",
              "in": "query",
              "description": "The Service for which the address usage is defined : CARD_SERVICE, ACCOUNT_SERVICE. Mandatory ",
              "required": true,
              "type": "string"
            },
            {
              "name": "entityReference",
              "in": "query",
              "description": "This corresponds to the application domain of the address. It can be eg a card contract reference, card account reference. It is an optional field.\nIt enables to have the same usage address for the same customer applied to different addresses (one cardholder with 2 card contracts: card delivery address usage is assigned to main postal address for contract A and card delivery address usage is also assigned to office postal address for contract B.",
              "required": false,
              "type": "string"
            },
            {
              "name": "addressUsageName",
              "in": "query",
              "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteAddressUsageResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/addresses/external-addresses/{issuerAddressExternalReference}/activate": {
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Activate address by address external reference",
          "operationId": "activateAddressByIssuerExtRef",
          "description": "The API allows to activate on demand of an address by providing\n•\tthe reference of the customer,\n•\tthe reference of the address\n•\tthe issuer Id.\nIf a temporary address exists, it becomes also active.\nThe address identifiers, address attributes and address usages are displayed in the response.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityActivateAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/addresses/external-addresses/{issuerAddressExternalReference}/deactivate": {
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Deactivate address by address external reference",
          "operationId": "deactivateAddressByIssuerExtRef",
          "description": "Deactivate the address identified with the customer internal reference and the address external reference. The status becomes 'INACTIVE'. This action is forbidden in case of :\n-the address is the MAIN_POSTAL_ADDRESS\n-an usage is linked to the address. ",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeactivateAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/addresses/{addressReference}": {
        "get": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Retrieve customer address",
          "operationId": "retrieveAddress",
          "description": "The API returns the current version of the customer's address identified with:\n•\tthe reference of the customer,\n•\tthe reference of the address.\nThis address is either a permanent address or a temporary address (if this one is active at the time of request).\nThe address identifiers, address attributes, address usages and entity reference (application domain of the address) are displayed in the response.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addressUsages"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddress"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "put": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Update address",
          "operationId": "modifyAddress",
          "description": "The API allows to update the permanent address of a customer, identified with the reference of the customer and the reference of the address.\nAll the attributes must be provided even those unchanged, except the line 1 to 5 of the postal address if a specific issuer algorithm is configured.\nIf the address was invalid, the address becomes valid.\n\nOne or several address usages can be added to the address. An address usage is used for specific business process/service. When adding a usage to an address, the usage is immediately active and if it is already assigned to another address, it is removed from this latter. \nAll the usages already linked to the address cannot be removed via this API.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/ModifyAddressRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/addresses/{addressReference}/activate": {
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Activate address",
          "operationId": "activateAddress",
          "description": "The API allows to activate on demand of an address by providing\n•\tthe reference of the customer,\n•\tthe reference of the address\n•\tthe issuer Id.\nIf a temporary address exists, it becomes also active.\nThe address identifiers, address attributes and address usages are displayed in the response.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityActivateAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/addresses/{addressReference}/address-usages": {
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Add an address usage",
          "operationId": "createAddressUsage",
          "description": "The address usage describes in which business case the address will be used (eg statement sending, cad delivery, ...) \nThe complete authorized values list is shared during the product configuration between the issuer and WL.\nThis API allows a usage determined by its name (e.g. STATEMENT_SENDING) to be linked to the entity reference of the address (e.g. card contract reference) and the service code (e.g. ACCOUNT_SERVICE)\nTo create an address usage, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference \n- The address reference or the issuer address reference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateAddressUsageRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateAddressUsageResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Remove an address usage",
          "operationId": "deleteAddressUsage",
          "description": "The API deletes the address usages linked to one address. \nThese address usages are filtered by the request params:\n- addressUsageName (for definition see the resource addressUsage), mandatory\n- entityReference (for definition see the resource addressUsage), optional\n- serviceCode (for definition see the resource addressUsage), mandatory\n\nIf the entityReference is empty and the API finds several address usages (for the addressUsageName and serviceCode in request param), then the list of addressUsages will be deleted.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "serviceCode",
              "in": "query",
              "description": "The Service for which the address usage is defined : CARD_SERVICE, ACCOUNT_SERVICE. Mandatory ",
              "required": true,
              "type": "string"
            },
            {
              "name": "entityReference",
              "in": "query",
              "description": "This corresponds to the application domain of the address. It can be eg a card contract reference, card account reference. It is an optional field.\nIt enables to have the same usage address for the same customer applied to different addresses (one cardholder with 2 card contracts: card delivery address usage is assigned to main postal address for contract A and card delivery address usage is also assigned to office postal address for contract B.",
              "required": false,
              "type": "string"
            },
            {
              "name": "addressUsageName",
              "in": "query",
              "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY.",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteAddressUsageResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/addresses/{addressReference}/deactivate": {
        "post": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Deactivate address",
          "operationId": "deactivateAddress",
          "description": "The API is used to deactivate the address, identified with the customer reference and the address reference. \nThe status becomes \"INACTIVE\". \nThis action is forbidden in case of:\n- the address is the MAIN_POSTAL_ADDRESS\n- an usage is linked to the address.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeactivateAddressResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/card-contracts": {
        "get": {
          "tags": [
            "Customer - Related"
          ],
          "summary": "List card contracts for cardholder",
          "operationId": "listCardContractsForCardHolder",
          "description": "This API enables ll the card contracts associated to the cardholder to be retrieved.\nInformation to be provided in input:\n- Issuer ID\n- Customer reference\n\nThe customer must exist for the provided issuer.\nThe API returns all card contracts linked to the given cardholder for the provided issuer and sub-issuers if any, limited to the list of issuers allowed for the user.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "cards",
                  "cardIdentifiers",
                  "selectedModels"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCardContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/contracts": {
        "get": {
          "tags": [
            "Customer - Related"
          ],
          "summary": "List contracts for a customer",
          "operationId": "listContractsForContractOwner",
          "description": "This API allows to retrieve all contracts associated with a specific customer, regardless of their role in the contract (e.g., contract owner, card holder, account owner).\nInformation to be provided in input:\n•\tIssuer ID\n•\tThe customer for which information is requested : It can be provided by using the customer reference or the issuer customer external reference.\nThe customer must exist for the provided issuer.\nThe API returns all contracts linked to the given customer for the provided issuer and sub-issuers if any, limited to the list of issuers allowed for the user.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListContract"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/direct-debits": {
        "post": {
          "tags": [
            "Direct Debit"
          ],
          "summary": "Create a direct debit instruction",
          "description": "This API enables a direct debit note to be requested by debiting a customer bank account (inhouse or external) to increase the open to buy of the card account (for a particular purchase).\n\nAs a result, the direct debit is generated and after n business days (issuer configuration), the card account is paid with the requested amount (the total amount due for this card account is paid first).\nThe API returns the unique Direct Debit EndToEnd Identifier generated by our system and the direct debit status.",
          "operationId": "createDirectDebit",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateDirectDebitRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateDirectDebitResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/direct-debits/{endToEndId}": {
        "get": {
          "tags": [
            "Direct Debit"
          ],
          "summary": "Retrieve a direct debit",
          "description": "This API enables an already created direct debit instruction to be retrieved by providing in input the Direct debit E2E Identifier and the reject reason.",
          "operationId": "retrieveDirectDebit",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "endToEndId",
              "in": "path",
              "description": "DD identifier",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "statusHistory"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDirectDebit"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/direct-debits/{endToEndId}/cancel": {
        "post": {
          "tags": [
            "Direct Debit"
          ],
          "summary": "Cancel direct debit",
          "description": "This API enables a direct debit instruction to be cancelled by providing in input the Direct debit E2E Identifier.\nThe cancellation is possible for Direct debit not collected yet (sent to the bank).",
          "operationId": "cancelDirectDebit",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "endToEndId",
              "in": "path",
              "description": "DD identifier",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CancelDirectDebitRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCancelDirectDebitResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/operations/{externalOperationReference}/disputes": {
        "post": {
          "tags": [
            "Dispute"
          ],
          "summary": "Create Dispute",
          "operationId": "createDispute",
          "description": "This API is deprecated and is replaced by the API Create a dispute from a transaction.\nThe API allows an issuer to create a dispute folder in the system for a given operation. This API enables the issuer to initiate the dispute from its application.\nSeveral actions can be performed :\n- Dispute only \n- Dispute + refund/redebit (full or partial)\n- Dispute + write-off (full or partial)\n- Dispute + fraud declaration\n- Dispute + event creation\n- Dispute + attach documents \n- Dispute + combination of above options\n\nMain data in input are :\n- the external operation reference which can be retrieved using a search operation in the system, for example using the API retrieves list of operations for an account.\n- in option, several fields in the case additional actions have to be done besides the dispute folder creation (e.g operation(s) posting, event(s) creation, add document(s)).\n\nIn response, the created dispute folder identifier is provided back systematically; then depending on the additional requests, the response includes also the posting, event creation and documents add response.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "externalOperationReference",
              "in": "path",
              "description": "External Operation Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateDisputeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateDisputeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": true
        }
      },
      "/issuers/{issuerId}/disputes/{disputeFolderReference}": {
        "get": {
          "tags": [
            "Dispute"
          ],
          "summary": "Get the dispute information of the folder",
          "operationId": "getDisputeFolderInformation",
          "description": "The API returns the dispute folder information that matches the dispute folder identifier provided in input.\n\nThis enables to see the content of the dispute information :\n- General dispute folder information including the dispute reason, the status\n- Cardholder information including the card status and billing amount\n- The issuer balance\n- The transaction details including the reconciliation amount, the transaction type and merchant information\n\nThe response can also be enriched (if specified as embed fields in input) with additional data relative to the events added, the postings performed, the documents attached, and the messages sent or received from the scheme. That corresponds to dispute cycle history. ",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "disputeFolderReference",
              "in": "path",
              "description": "Dispute Folder Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "events",
                  "postings",
                  "documents",
                  "messages"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDispute"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/operations/{externalOperationReference}/dispute": {
        "get": {
          "tags": [
            "Dispute"
          ],
          "summary": "Get the dispute information of the operation identified by external operation reference",
          "operationId": "getDisputeFolderInfoByExternalOperationReference",
          "description": "The API returns the dispute folder information if the transaction identified by an operation Identifier is disputed.\nIf it is the case, this enables to see the content of the dispute information:\n-General dispute folder information including the dispute reason, the status\n-Cardholder information including the card status and billing amount\n-The issuer accounting balance\n-The transaction details including the reconciliation amount, the transaction type and merchant information\nThe response can also be enriched (if specified as embed fields in input) with additional data relative to the events added, the postings performed, the documents attached, and the messages sent or received from the scheme. That corresponds to dispute cycle history.\nIf the transaction is not disputed, the response code 404 is provided back with a status message indicating that the no Dispute Folder has been found.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "externalOperationReference",
              "in": "path",
              "description": "External Operation Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "events",
                  "postings",
                  "documents",
                  "messages"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDispute"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/disputes/external-disputes/{issuerDisputeExternalReference}": {
        "get": {
          "tags": [
            "Dispute"
          ],
          "summary": "Get the dispute information of the folder identified by external reference",
          "operationId": "getDisputeFolderInfoByIssDisputeExtRef",
          "description": "The API returns the dispute folder information that matches the dispute folder identifier provided in input.\n\nThis enables to see the content of the dispute information :\n- General dispute folder information including the dispute reason, the status\n- Cardholder information including the card status and billing amount\n- The issuer balance\n- The transaction details including the reconciliation amount, the transaction type and merchant information\n\nThe response can also be enriched (if specified as embed fields in input) with additional data relative to the events added, the postings performed, the documents attached, and the messages sent or received from the scheme. That corresponds to dispute cycle history.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerDisputeExternalReference",
              "in": "path",
              "description": "Issuer Dispute External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "events",
                  "postings",
                  "documents",
                  "messages"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDispute"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/disputes": {
        "get": {
          "tags": [
            "Card"
          ],
          "summary": "List DisputeFolders for a card",
          "operationId": "listDisputeFoldersByCardReference",
          "description": "The API returns the list of dispute folders for a given card, identified by his card identifier.\n\nFor each dispute folder provided, the content of the dispute is retrieved:\n•\tGeneral dispute folder information including the dispute reason, the status\n•\tCardholder information including the card status and billing amount\n•\tThe issuer accounting balance\n•\tThe transaction details including the reconciliation amount, the transaction type and merchant information\n\nFor each dispute folder, the response can also be enriched (if specified as embedded fields in input) with additional data relative to the events added, the postings performed, the documents attached, and the messages sent or received from the scheme. This corresponds to the dispute cycle history.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "events",
                  "postings",
                  "documents",
                  "messages"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListDispute"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/new-tan": {
        "post": {
          "x-wl-idempotent": true,
          "tags": [
            "Card"
          ],
          "summary": "Create new TAN",
          "operationId": "createTan",
          "description": "For PIN self-selection without a direct bank connection to the card issuing institute - i.e., without online banking access - Worldline offers the variant PIN change with TAN (Trusted Authentication Number). \nThis applies in particular to card programs where the bank is the card issuer for another partner, e.g., TUI or eBay.\nThe API allows to generate a TAN, which is used as a one-time password, printed and sent to cardholder in order to change card pin by e.g. IVR.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "Card Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateTanRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateTanResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/disputes": {
        "get": {
          "tags": [
            "Card"
          ],
          "summary": "List DisputeFolders for a card by external reference",
          "operationId": "listDisputeFoldersByIssCardExtRef",
          "description": "The API returns the list of dispute folders for a given card, identified by his card identifier.\n\nFor each dispute folder provided, the content of the dispute is retrieved:\n•\tGeneral dispute folder information including the dispute reason, the status\n•\tCardholder information including the card status and billing amount\n•\tThe issuer accounting balance\n•\tThe transaction details including the reconciliation amount, the transaction type and merchant information\n\nFor each dispute folder, the response can also be enriched (if specified as embedded fields in input) with additional data relative to the events added, the postings performed, the documents attached, and the messages sent or received from the scheme. This corresponds to the dispute cycle history. ",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "Issuer Card External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "events",
                  "postings",
                  "documents",
                  "messages"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListDispute"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/reset-pin-try-counter": {
        "post": {
          "tags": [
            "Card - Pin Try Counter"
          ],
          "summary": "Reset Pin Try Counter",
          "operationId": "resetPinTryCounter",
          "description": "This API enables the issuer to reset the PIN try Counter value.\nA control related to this counter value ((MAX Pin try) can be performed during the authorization processing if configured.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "cardReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityEmptyEntity"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/reset-pin-try-counter": {
        "post": {
          "tags": [
            "Card - Pin Try Counter"
          ],
          "summary": "Reset Pin Try Counter by external reference",
          "operationId": "resetPinTryCounterByIssuerExtRef",
          "description": "This API enables the issuer to reset the PIN try Counter value.\nA control related to this counter value ((MAX Pin try) can be performed during the authorization processing if configured.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Username",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Peer-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "issuerCardExternalReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityEmptyEntity"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/display-pin": {
        "post": {
          "tags": [
            "Card - Pin"
          ],
          "summary": "Display PIN for a card",
          "operationId": "displayPin",
          "description": "This service offers the option to the issuer to display the PIN inside the mobile app for a given card. \nThe card is identified either by the internal or external card reference.\nNote: Worldline will only send the PIN block towards the issuer. \nThe issuer is responsible for displaying the PIN inside the mobile app or Homebanking device.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "cardReference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/GetPinRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetPinResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/create-emergency-card": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": " Create Emergency Card",
          "operationId": "createEmergencyCard",
          "description": "Emergency Card is a type of card that can be provided to a customer in emergency cases (for example, a  customer has lost his card, while travelling outside his country and urgently needs a new card). The customer will call 24-hour service and request an Emergency Card. \nIn general, those cards will have short validity period and will not be renewed and replaced. Emergency Card is not produced by the issuer but by the scheme. \n\nThe emergency card creation is possible in our system only if an Emergency Card product is defined for the issuer and if the contract of the customer is allowed to issue an Emergency Card.\n\nThe API allows to create an emergency card for a given card.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "cardReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateEmergencyCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/pin": {
        "post": {
          "tags": [
            "Card - Pin"
          ],
          "summary": "Set a PIN for a card",
          "operationId": "setPin",
          "description": "This Service allows the issuer to set the PIN after card creation, via issuer home banking or mobile app. \nThe card is identified either by the internal or external card reference.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "cardReference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SetPinRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntitySetPinResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/display-pin": {
        "post": {
          "tags": [
            "Card - Pin"
          ],
          "summary": "Display PIN for a card by external reference",
          "operationId": "displayPinByIssuerExtRef",
          "description": "This service offers the option to the issuer to display the PIN inside the mobile app for a given card. \nThe card is identified either by the internal or external card reference.\nNote: Worldline will only send the PIN block towards the issuer. \nThe issuer is responsible for displaying the PIN inside the mobile app or Homebanking device.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "issuerCardExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/GetPinRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetPinResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/display-pin": {
          "post": {
              "tags": [
                  "Card - Pin"
              ],
              "summary": "Display PIN for a card by PAN + PSN and/or expiry date",
              "operationId": "displayPinByPan",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "WL-Correlation-ID",
                      "in": "header",
                      "required": false,
                      "type": "string"
                  },
                  {
                      "name": "issuerId",
                      "in": "path",
                      "description": "Issuer ID",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "body",
                      "required": false,
                      "schema": {
                          "$ref": "#/definitions/GetPinByPanRequest"
                      }
                  }
              ],
              "responses": {
                  "400": {
                      "description": "Bad request",
                      "schema": {
                          "$ref": "#/definitions/BadRequestErrorApiResponse"
                      }
                  },
                  "404": {
                      "description": "Not found",
                      "schema": {
                          "$ref": "#/definitions/NotFoundErrorApiResponse"
                      }
                  },
                  "500": {
                      "description": "Internal server error",
                      "schema": {
                          "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
                      }
                  },
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ApiResponseEntityGetPinResponse"
                      }
                  }
              },
              "deprecated": false
          }
      },
      "/issuers/{issuerId}/cards/pin": {
          "post": {
              "tags": [
                  "Card - Pin"
              ],
              "summary": "Set a PIN for a card by PAN + PSN and/or expiry date",
              "operationId": "setPinByPan",
              "consumes": [
                  "application/json"
              ],
              "produces": [
                  "application/json"
              ],
              "parameters": [
                  {
                      "name": "WL-Correlation-ID",
                      "in": "header",
                      "required": false,
                      "type": "string"
                  },
                  {
                      "name": "issuerId",
                      "in": "path",
                      "description": "Issuer ID",
                      "required": true,
                      "type": "string"
                  },
                  {
                      "in": "body",
                      "name": "body",
                      "required": true,
                      "schema": {
                          "$ref": "#/definitions/SetPinByPanRequest"
                      }
                  }
              ],
              "responses": {
                  "400": {
                      "description": "Bad request",
                      "schema": {
                          "$ref": "#/definitions/BadRequestErrorApiResponse"
                      }
                  },
                  "404": {
                      "description": "Not found",
                      "schema": {
                          "$ref": "#/definitions/NotFoundErrorApiResponse"
                      }
                  },
                  "500": {
                      "description": "Internal server error",
                      "schema": {
                          "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
                      }
                  },
                  "200": {
                      "description": "OK",
                      "schema": {
                          "$ref": "#/definitions/ApiResponseEntitySetPinResponse"
                      }
                  }
              },
              "deprecated": false
          }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/create-emergency-card": {
        "post": {
          "tags": [
            "Card"
          ],
          "summary": " Create Emergency Card by external reference",
          "operationId": "createEmergencyCardByIssuerExtRef",
          "description": "Emergency Card is a type of card that can be provided to a customer in emergency cases (for example, a  customer has lost his card, while travelling outside his country and urgently needs a new card). The customer will call 24-hour service and request an Emergency Card. \nIn general, those cards will have short validity period and will not be renewed and replaced. Emergency Card is not produced by the issuer but by the scheme. \n\nThe emergency card creation is possible in our system only if an Emergency Card product is defined for the issuer and if the contract of the customer is allowed to issue an Emergency Card.\n\nThe API allows to create an emergency card for a given card.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "issuerCardExternalReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateEmergencyCardResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/pin": {
        "post": {
          "tags": [
            "Card - Pin"
          ],
          "summary": "Set a PIN for a card by external reference",
          "operationId": "setPinByIssuerExtRef",
          "description": "This Service allows the issuer to set the PIN after card creation, via issuer home banking or mobile app. \nThe card is identified either by the internal or external card reference.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "issuerCardExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SetPinRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntitySetPinResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/disputes/{disputeFolderReference}/postings": {
        "post": {
          "tags": [
            "Dispute"
          ],
          "summary": "Perform a posting (Refund or WriteOff) related to the Dispute Folder",
          "operationId": "createPosting",
          "description": "Issuer can provide a posting operation to perform on the created dispute folder.\n\nPosting operation can be for example :\n•\tperform a refund towards the cardholder account\n•\tperform a write-off towards an issuer account (Profit and Loss, Fraud,..)\n\n\"Create a posting\" API allows an issuer to add postings for a given dispute folder.\n\nMain data in input is the dispute folder identifier and the parameters of the posting operation.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "disputeFolderReference",
              "in": "path",
              "description": "disputeFolderReference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreatePostingRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreatePostingResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/disputes/external-disputes/{issuerDisputeExternalReference}/postings": {
        "post": {
          "tags": [
            "Dispute"
          ],
          "summary": "Perform a posting related to the Dispute Folder by external reference",
          "operationId": "createPostingByIssDisputeExtRef",
          "description": "Issuer can provide a posting operation to perform on the created dispute folder.\n\nPosting operation can be for example :\n•\tperform a refund towards the cardholder account\n•\tperform a write-off towards an issuer account (Profit and Loss, Fraud,..)\n\n\"Create a posting\" API allows an issuer to add postings for a given dispute folder.\n\nMain data in input is the dispute folder identifier and the parameters of the posting operation.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerDisputeExternalReference",
              "in": "path",
              "description": "Issuer Dispute External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreatePostingRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreatePostingResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/disputes/{disputeFolderReference}/events": {
        "post": {
          "tags": [
            "Dispute"
          ],
          "summary": "Create an Event in the Dispute Folder",
          "operationId": "createEvent",
          "description": "Issuer can provide an event to be added to the created dispute folder.\nThis manual event will be added to events generated internally by our system.\nFor example, the issuer can add an event to indicate that there is a communication from/to cardholder.\nThe API allows an issuer to add an event for a given dispute folder.\nMain data in input is the dispute folder identifier and the parameters of the event add operation.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "disputeFolderReference",
              "in": "path",
              "description": "disputeFolderReference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateEventRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateEventResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/disputes/external-disputes/{issuerDisputeExternalReference}/events": {
        "post": {
          "tags": [
            "Dispute"
          ],
          "summary": "Create an Event in the Dispute Folder by external reference",
          "operationId": "createEventByIssDisputeExtRef",
          "description": "Issuer can provide an event to be added to the created dispute folder.\nThis manual event will be added to events generated internally by our system.\nFor example, the issuer can add an event to indicate that there is a communication from/to cardholder.\nThe API allows an issuer to add an event for a given dispute folder.\nMain data in input is the dispute folder identifier and the parameters of the event add operation.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerDisputeExternalReference",
              "in": "path",
              "description": "Issuer Dispute External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateEventRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateEventResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/display-cvv": {
        "post": {
          "tags": [
            "Card - CVV"
          ],
          "summary": "Get the CVV",
          "operationId": "displayCvv",
          "description": "This service offers the option to the issuer to display the CVV2 inside the mobile app.\nAs the CVV2 is not stored it must be re-created using the received card data from the request.\nNote: Worldline will send the encrypted CVV2 towards the issuer. \nThe issuer is responsible for displaying the CVV2 inside the mobile app or Homebanking service",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "cardReference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GetCvvRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetCvvResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/{cardReference}/validate-cvv": {
        "post": {
          "tags": [
            "Card - CVV"
          ],
          "summary": "Validate the CVV",
          "operationId": "validateCvv",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardReference",
              "in": "path",
              "description": "cardReference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ValidateCvvRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityValidateCvvResponse"
              }
            }
          },
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/display-cvv": {
        "post": {
          "tags": [
            "Card - CVV"
          ],
          "summary": "Get the CVV by external reference",
          "description": "This service offers the option to the issuer to display the CVV2 inside the mobile app.\nAs the CVV2 is not stored it must be re-created using the received card data from the request.\nNote: Worldline will send the encrypted CVV2 towards the issuer. \nThe issuer is responsible for displaying the CVV2 inside the mobile app or Homebanking service",
          "operationId": "displayCvvByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "issuerCardExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GetCvvRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGetCvvResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/cards/external-cards/{issuerCardExternalReference}/validate-cvv": {
        "post": {
          "tags": [
            "Card - CVV"
          ],
          "summary": "Validate the CVV by external reference",
          "operationId": "validateCvvByIssuerExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardExternalReference",
              "in": "path",
              "description": "issuerCardExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ValidateCvvRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityValidateCvvResponse"
              }
            }
          },
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/disputes/{disputeFolderReference}/documents": {
        "post": {
          "tags": [
            "Dispute"
          ],
          "summary": "Add an External Document to the Dispute Folder",
          "operationId": "createDocument",
          "description": "This API allows the issuer to attach a document to a dispute folder identified by his dispute folder identifier.\nSupported documents types are in JPEG, TIFF and PDF format\nThe issuer must provide the data of the document in Base64 encoding format.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "disputeFolderReference",
              "in": "path",
              "description": "disputeFolderReference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateDocumentRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateDocumentResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/disputes/external-disputes/{issuerDisputeExternalReference}/documents": {
        "post": {
          "tags": [
            "Dispute"
          ],
          "summary": "Add an External Document to the Dispute Folder by external reference",
          "operationId": "createDocumentByIssDisputeExtRef",
          "description": "This API allows the issuer to attach a document to a dispute folder identified by his dispute folder identifier.\nSupported documents types are in JPEG, TIFF and PDF format\nThe issuer must provide the data of the document in Base64 encoding format.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerDisputeExternalReference",
              "in": "path",
              "description": "Issuer Dispute External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateDocumentRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateDocumentResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/disputes/{disputeFolderReference}/generate-chargeback": {
        "post": {
          "tags": [
            "Dispute"
          ],
          "summary": "Generate a ChargeBack to the scheme by dispute reference",
          "description": " \"generate chargeback\"  API allows an issuer to trigger a chargeback message to the scheme (VISA/MCI), the chargeback is done in synchronous mode.\n\nMain information needed in input is :\n- The dispute folder identifier\n- The type of chargeback (partial or total for most of the cases)\n- The chargeback scenario name used for VISA that support automated process (E-commerce fraud, duplicate Processing, Non-Receipt of Cash)  or the chargeback reason code for MasterCard that can be found in MCI MPE file.\n\nIn response, the scheme case identifier is provided back.",
          "operationId": "generateChargeback",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "disputeFolderReference",
              "in": "path",
              "description": "disputeFolderReference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/GenerateChargebackRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGenerateChargebackResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/disputes/external-disputes/{issuerDisputeExternalReference}/generate-chargeback": {
        "post": {
          "tags": [
            "Dispute"
          ],
          "summary": "Generate a ChargeBack to the scheme by external reference",
          "description": " \"generate chargeback\"  API allows an issuer to trigger a chargeback message to the scheme (VISA/MCI), the chargeback is done in synchronous mode.\n\nMain information needed in input is :\n- The dispute folder identifier\n- The type of chargeback (partial or total for most of the cases)\n- The chargeback scenario name used for VISA that support automated process (E-commerce fraud, duplicate Processing, Non-Receipt of Cash)  or the chargeback reason code for MasterCard that can be found in MCI MPE file.\n\nIn response, the scheme case identifier is provided back.",
          "operationId": "generateChargebackByIssDisputeExtRef",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerDisputeExternalReference",
              "in": "path",
              "description": "Issuer Dispute External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/GenerateChargebackRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityGenerateChargebackResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/{customerReference}/contacts": {
        "post": {
          "tags": [
            "Company"
          ],
          "summary": "Create Contact",
          "operationId": "createContactByCustomerReference",
          "description": "The API creates a contact person belonging to the company by providing information such as first name, name, department to which he is attached.\nTo create a contact, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/CreateContactRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateContactResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/external-customers/{issuerCustomerExternalReference}/contacts": {
        "post": {
          "tags": [
            "Company"
          ],
          "summary": "Create Contact by external reference",
          "operationId": "createContactByIssuerCustomerExternalReference",
          "description": "The API creates a contact person belonging to the company by providing information such as first name, name, department to which he is attached.\nTo create a contact, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/CreateContactRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateContactResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/contacts": {
        "post": {
          "tags": [
            "Customer"
          ],
          "summary": "Create Contact for a customer (beta)",
          "operationId": "createCustomerContactByCustomerReference",
          "description": "The API creates a contact person belonging to the customer (person) by providing information such as first name, name, department to which he is attached..\nTo create a contact, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/CreateContactRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateContactResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/contacts": {
        "post": {
          "tags": [
            "Customer"
          ],
          "summary": "Create Contact for a customer by external reference (beta)",
          "operationId": "createCustomerContactByIssuerCustomerExternalReference",
          "description": "The API creates a contact person belonging to the customer (person) by providing information such as first name, name, department to which he is attached..\nTo create a contact, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/CreateContactRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateContactResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/contacts/{contactReference}": {
        "put": {
          "tags": [
            "Customer"
          ],
          "summary": "Modify Contact for a customer (beta)",
          "operationId": "modifyCustomerContactByCustomerReferenceAndContactReference",
          "description": "The API allows information of a contact of the customer (person) to be modified.\nTo update a contact, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference\n- The contact reference\n\nAll attributes must be provided (even if some of them have not been modified) else the value of missing attributes will be empty.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "contactReference",
              "in": "path",
              "description": "Contact Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/ModifyContactRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyContactResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Customer"
          ],
          "summary": "Remove Contact for a customer (beta)",
          "description": "The API allows a contact of the customer (person) to be deleted.\nTo remove a contact, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference\n- The contact reference",
          "operationId": "removeCustomerContactByCustomerReferenceAndContactReference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "contactReference",
              "in": "path",
              "description": "Contact Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRemoveContactResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/contacts/{contactReference}": {
        "put": {
          "tags": [
            "Customer"
          ],
          "summary": "Modify Contact for a customer by external reference (beta)",
          "description": "The API allows information of a contact of the customer (person) to be modified.\nTo update a contact, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference\n- The contact reference\n\nAll attributes must be provided (even if some of them have not been modified) else the value of missing attributes will be empty.",
          "operationId": "modifyCustomerContactByIssuerCustomerExternalReferenceAndContactReference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "contactReference",
              "in": "path",
              "description": "Contact Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/ModifyContactRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyContactResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Customer"
          ],
          "summary": "Remove Contact for a customer by external reference (beta)",
          "description": "The API allows a contact of the customer (person) to be deleted.\nTo remove a contact, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference\n- The contact reference",
          "operationId": "removeCustomerContactByIssuerCustomerExternalReferenceAndContactReference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "contactReference",
              "in": "path",
              "description": "Contact Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRemoveContactResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/{customerReference}/contacts/{contactReference}": {
        "put": {
          "tags": [
            "Company"
          ],
          "summary": "Modify Contact",
          "operationId": "modifyContactByCustomerReferenceAndContactReference",
          "description": "The API allows information of a contact of the company to be modified. \nTo update a contact, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)  \n- The contact reference\nAll attributes must be provided (even if some of them have not been modified) else the value of missing attributes will be empty.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "contactReference",
              "in": "path",
              "description": "Contact Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/ModifyContactRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyContactResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Company"
          ],
          "summary": "Remove Contact by customer reference and contact reference",
          "description": "The API allows a contact of the company to be deleted.\nTo remove a contact, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)  \n- The contact reference",
          "operationId": "removeContactByCustomerReferenceAndContactReference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "contactReference",
              "in": "path",
              "description": "Contact Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRemoveContactResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/companies/external-customers/{issuerCustomerExternalReference}/contacts/{contactReference}": {
        "put": {
          "tags": [
            "Company"
          ],
          "summary": "Modify Contact by external reference",
          "description": "The API allows information of a contact of the company to be modified. \nTo update a contact, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)  \n- The contact reference\nAll attributes must be provided (even if some of them have not been modified) else the value of missing attributes will be empty.",
          "operationId": "modifyContactByIssuerCustomerExternalReferenceAndContactReference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "contactReference",
              "in": "path",
              "description": "Contact Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "schema": {
                "$ref": "#/definitions/ModifyContactRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifyContactResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "delete": {
          "tags": [
            "Company"
          ],
          "summary": "Remove Contact by external reference",
          "description": "The API allows a contact of the company to be deleted.\nTo remove a contact, it is needed to provide:\n- The issuer ID\n- The customer reference or the issuer customer reference (as company)  \n- The contact reference",
          "operationId": "removeContactByIssuerCustomerExternalReferenceAndContactReference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "contactReference",
              "in": "path",
              "description": "Contact Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityRemoveContactResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/subscriptions": {
        "post": {
          "tags": [
            "Message - Subscription"
          ],
          "summary": "Create a new WL Message subscription",
          "operationId": "createSubscription",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Id of the issuing bank",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "subscription",
              "description": "subscription",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Subscription"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateSubscription"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/subscriptions/search": {
        "get": {
          "tags": [
            "Message - Subscription"
          ],
          "summary": "Search for subscriptions (with non-pci search terms)",
          "operationId": "searchSubscriptions",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "cardContractReference",
              "in": "query",
              "description": "Card Contract Reference",
              "required": false,
              "type": "string",
              "allowEmptyValue": false
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Id of the issuing bank",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntitySearchSubscription"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/subscriptions/{subscriptionReference}": {
        "get": {
          "tags": [
            "Message - Subscription"
          ],
          "summary": "Retrieve subscription by reference",
          "operationId": "getSubscriptionByReference",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Id of the issuing bank",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionReference",
              "in": "path",
              "description": "Reference of the subscription",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntitySubscription"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          }
        },
        "put": {
          "tags": [
            "Message - Subscription"
          ],
          "summary": "Modify subscription by reference",
          "operationId": "modifySubscriptionByReference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Id of the issuing bank",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "subscription",
              "description": "subscription",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Subscription"
              }
            },
            {
              "name": "subscriptionReference",
              "in": "path",
              "description": "Reference of the subscription",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifySubscription"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Message - Subscription"
          ],
          "summary": "Delete subscription by reference",
          "operationId": "deleteSubscriptionByReference",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Id of the issuing bank",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionReference",
              "in": "path",
              "description": "Reference of the subscription",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteSubscription"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/subscriptions/{subscriptionReference}/services": {
        "get": {
          "tags": [
            "Message - Subscription Service"
          ],
          "summary": "Retrieve services by subscription reference",
          "operationId": "getSubscriptionServicesBySubscriptionReference",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Id of the issuing bank",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionReference",
              "in": "path",
              "description": "Reference of the subscription",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntitySubscriptionServices"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Message - Subscription Service"
          ],
          "summary": "Create new service subscription",
          "operationId": "createSubscriptionService",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Id of the issuing bank",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionReference",
              "in": "path",
              "description": "Reference of the subscription",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "subscriptionService",
              "description": "subscriptionService",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SubscriptionService"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateSubscriptionService"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/subscriptions/{subscriptionReference}/services/{subscriptionServiceReference}": {
        "get": {
          "tags": [
            "Message - Subscription Service"
          ],
          "summary": "Retrieve services for a subscription",
          "operationId": "getSubscriptionServiceByReference",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Id of the issuing bank",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionReference",
              "in": "path",
              "description": "Reference of the subscription",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionServiceReference",
              "in": "path",
              "description": "Reference of the subscription service",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntitySubscriptionService"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          }
        },
        "put": {
          "tags": [
            "Message - Subscription Service"
          ],
          "summary": "Modify subscription service by reference",
          "operationId": "modifySubscriptionServiceByReference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Id of the issuing bank",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionReference",
              "in": "path",
              "description": "Reference of the subscription",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "subscriptionService",
              "description": "subscriptionService",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SubscriptionService"
              }
            },
            {
              "name": "subscriptionServiceReference",
              "in": "path",
              "description": "Reference of the subscription service",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifySubscriptionService"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Message - Subscription Service"
          ],
          "summary": "Delete subscription service by reference",
          "operationId": "deleteSubscriptionServiceByReference",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Id of the issuing bank",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionReference",
              "in": "path",
              "description": "Reference of the subscription",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionServiceReference",
              "in": "path",
              "description": "Reference of the subscription service",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteSubscriptionService"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/subscriptions/{subscriptionReference}/services/{subscriptionServiceReference}/events": {
        "get": {
          "tags": [
            "Message - Subscription Event"
          ],
          "summary": "Retrieve subscription events by subscription service reference",
          "operationId": "getSubscriptionEventsBySubscriptionServiceReference",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Id of the issuing bank",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionReference",
              "in": "path",
              "description": "Reference of the subscription",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionServiceReference",
              "in": "path",
              "description": "Reference of the subscription service",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntitySubscriptionEvents"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Message - Subscription Event"
          ],
          "summary": "Create new event subscription",
          "operationId": "createSubscriptionEvent",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Id of the issuing bank",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "subscriptionEvent",
              "description": "subscriptionEvent",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SubscriptionEvent"
              }
            },
            {
              "name": "subscriptionReference",
              "in": "path",
              "description": "Reference of the subscription",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionServiceReference",
              "in": "path",
              "description": "Reference of the subscription service",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateSubscriptionEvent"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/subscriptions/{subscriptionReference}/services/{subscriptionServiceReference}/events/{subscriptionEventReference}": {
        "get": {
          "tags": [
            "Message - Subscription Event"
          ],
          "summary": "Retrieve event for a subscription service",
          "operationId": "getSubscriptionEventByReference",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Id of the issuing bank",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionEventReference",
              "in": "path",
              "description": "Reference of the subscription event",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionReference",
              "in": "path",
              "description": "Reference of the subscription",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionServiceReference",
              "in": "path",
              "description": "Reference of the subscription service",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntitySubscriptionEvent"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          }
        },
        "put": {
          "tags": [
            "Message - Subscription Event"
          ],
          "summary": "Modify subscription event by reference",
          "operationId": "modifySubscriptionEventByReference",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Id of the issuing bank",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "subscriptionEvent",
              "description": "subscriptionEvent",
              "required": true,
              "schema": {
                "$ref": "#/definitions/SubscriptionEvent"
              }
            },
            {
              "name": "subscriptionEventReference",
              "in": "path",
              "description": "Reference of the subscription event",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionReference",
              "in": "path",
              "description": "Reference of the subscription",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionServiceReference",
              "in": "path",
              "description": "Reference of the subscription service",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityModifySubscriptionEvent"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Message - Subscription Event"
          ],
          "summary": "Delete subscription event by reference",
          "operationId": "deleteSubscriptionEventByReference",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "description": "WL-Correlation-ID",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Id of the issuing bank",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionEventReference",
              "in": "path",
              "description": "Reference of the subscription event",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionReference",
              "in": "path",
              "description": "Reference of the subscription",
              "required": true,
              "type": "string"
            },
            {
              "name": "subscriptionServiceReference",
              "in": "path",
              "description": "Reference of the subscription service",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteSubscriptionEvent"
              }
            },
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/search-corporate-contracts": {
        "post": {
          "tags": [
            "Corporate Contract - Global Search"
          ],
          "summary": "Search corporate contracts",
          "operationId": "searchCorporateContracts",
          "description": "The API provides possibility to retrieve a list of corporate contracts, based on certain criteria.\n\nAt least the corporate name for searching must be provided and optionally company postal address information (street name, building number, zip code) can be provided.\n\nIf requested, the API input parameters allows also to:\n* search from an issuer and optionally with sub-issuers OR search from a list of issuers (by default, the search is performed on all issuers allowed for the user depending on its rights)\n* retrieve contract owner information\n* request to enrich the response with additional data relative to the root account, the companies, the current addresses of the companies, the corporate contract entities and the corporate employee accounts by using embedded fields\n\nThe API response contains all matched corporate contracts and for each returned corporate contract some information is provided such as\n•\tcontract identifier with the contract reference, the issuer external contract reference if originally provided\n•\tembedded fields if requested such as root account, list of all companies (limited to 100) with their addresses linked to this corporate contract, corporate contract entities(limited to 100), corporate employee accounts(limited to 100).",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Embedded Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "rootAccount",
                  "contractCompanies",
                  "contractCompanies.addresses",
                  "corporateContractEntities",
                  "corporateEmployeeAccounts"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "name": "page",
              "in": "query",
              "description": "0",
              "required": false,
              "type": "integer",
              "default": 0,
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "10",
              "required": false,
              "type": "integer",
              "default": 10,
              "format": "int32"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GlobalSearchCorporateContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityListCorporateContracts"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/search-transactions": {
        "post": {
          "tags": [
            "Transaction - Global Search"
          ],
          "summary": "Search transactions",
          "operationId": "searchTransaction",
          "description": "The API provides possibility to retrieve a list of transactions (original first presentments received from the card schemes), based on certain criteria. \n\nAt least one of the following criteria for searching must be provided:\n•\tPAN\n•\tPAN token\n•\tTransaction identifier\n•\tAcquirer reference number\n•\tVirtual Service Card Number\n•\tCard Identifier\n•\tAccount Identifier\n\nIf requested, the API allows also to:\n•\tsearch from an issuer and optionally with sub-issuers OR search from a list of issuers (by default, the search is performed on all issuers allowed for the user depending on its rights)\n•\treturn only certain transactions (disputed transactions, fraudulent transactions) \n•\trequest to enrich the response with additional data relative to addendum (to retrieve lodging information, car rental information, air itinerary information) by using embedded fields\n\nThe API response contains all matched transactions sorted by descending transaction date.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "page",
              "in": "query",
              "description": "0",
              "required": false,
              "type": "integer",
              "default": 0,
              "format": "int32"
            },
            {
              "name": "offset",
              "in": "query",
              "description": "100",
              "required": false,
              "type": "integer",
              "default": 100,
              "format": "int32"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Available values for embed : addendum (to retrieve lodgingInformation, carRentalInformation, airItineraryInformation) ",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addendum"
                ]
              },
              "collectionFormat": "multi"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/GlobalSearchTransactionRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseSearchTransaction"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
          "/issuers/{issuerId}/transactions/{transactionId}": {
        "get": {
          "tags": [
            "Transaction"
          ],
          "summary": "Retrieve transaction details",
          "operationId": "retrieveTransactionDetailsByTransactionId",
          "description": "The API allows the transaction details to be retrieved. \nThe main input fields are:\n•\tThe issuer ID\n•\tThe transaction for which the detail is requested: It is provided by using the transaction Id. \n\nIt is also possible to request some additional data relative to addendum (to retrieve lodging information, car rental information, air itinerary information) by using the embedded fields.\n\nIn return, the interface provides the generic information (mainly master data) relevant to the transaction.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "transactionId",
              "in": "path",
              "description": "Unique id of specific transaction",
              "required": true,
              "type": "string"
            },
            {
              "name": "embed",
              "in": "query",
              "description": "Available values for embed : addendum (to retrieve lodgingInformation, carRentalInformation, airItineraryInformation) ",
              "required": false,
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "addendum"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityTransactionDetails"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/transactions/{transactionId}/dispute": {
        "post": {
          "tags": [
            "Transaction"
          ],
          "summary": "Create a dispute from a transaction",
          "operationId": "createDisputeFromTransaction",
          "description": "The API allows an issuer to create a dispute folder in the system for a given operation. This API enables the issuer to initiate the dispute from its application.\nSeveral actions can be performed :\n- Dispute only \n- Dispute + refund/redebit (full or partial)\n- Dispute + write-off (full or partial)\n- Dispute + fraud declaration\n- Dispute + event creation\n- Dispute + attach documents \n- Dispute + combination of above options\n\nMain data in input are :\n- the external operation reference which can be retrieved using a search operation in the system, for example using the API retrieves list of operations for an account.\n- in option, several fields in the case additional actions have to be done besides the dispute folder creation (e.g operation(s) posting, event(s) creation, add document(s)).\n\nIn response, the created dispute folder identifier is provided back systematically; then depending on the additional requests, the response includes also the posting, event creation and documents add response.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "transactionId",
              "in": "path",
              "description": "Transaction Id",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/CreateDisputeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCreateDisputeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}/card-contracts/{cardContractReference}/reallocate": {
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Reallocate employee",
          "operationId": "reallocateEmployeeByContractReferenceAndCardContractReference",
          "description": "The API can be used to reallocate an employee (i.e., an employee card contract) within the same or different corporate contract(s).\nThis reallocation\n- must be allowed by the configuration (e.g. original employee product shall be in the list of allowed employee products for the new corporate contract)\n- is performed immediately \n\nAs a result, when employee reallocation is performed\n- the employee new account is created under the given parent account (can be within the same or different corporate contract)\n- the employee card contract is reallocated \n- the employee new account becomes the posting account for reallocated employee/card contract\n- data such as IBAN are transferred to the employee new account\n- the employee old account is closed according to standard business rules\n- account set-up and membership pending fees are transferred from the employee old account to the employee new account and paid, i.e., periodic fees on the employee new account are normally continued.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardContractReference",
              "in": "path",
              "description": "Card Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReallocateEmployeeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReallocateEmployeeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}/card-contracts/{cardContractReference}/reallocate": {
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Reallocate employee by issuer contract external reference",
          "operationId": "reallocateEmployeeByIssuerContractExternalReferenceAndCardContractReference",
          "description": "The API can be used to reallocate an employee (i.e., an employee card contract) within the same or different corporate contract(s).\nThis reallocation\n- must be allowed by the configuration (e.g. original employee product shall be in the list of allowed employee products for the new corporate contract)\n- is performed immediately \n\nAs a result, when employee reallocation is performed\n- the employee new account is created under the given parent account (can be within the same or different corporate contract)\n- the employee card contract is reallocated \n- the employee new account becomes the posting account for reallocated employee/card contract\n- data such as IBAN are transferred to the employee new account\n- the employee old account is closed according to standard business rules\n- account set-up and membership pending fees are transferred from the employee old account to the employee new account and paid, i.e., periodic fees on the employee new account are normally continued.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardContractReference",
              "in": "path",
              "description": "Card Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReallocateEmployeeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReallocateEmployeeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/{contractReference}/card-contracts/external-card-contracts/{issuerCardContractExternalReference}/reallocate": {
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Reallocate employee by issuer card contract external reference",
          "operationId": "reallocateEmployeeByContractReferenceAndIssuerCardContractExternalReference",
          "description": "The API can be used to reallocate an employee (i.e., an employee card contract) within the same or different corporate contract(s).\nThis reallocation\n- must be allowed by the configuration (e.g. original employee product shall be in the list of allowed employee products for the new corporate contract)\n- is performed immediately \n\nAs a result, when employee reallocation is performed\n- the employee new account is created under the given parent account (can be within the same or different corporate contract)\n- the employee card contract is reallocated \n- the employee new account becomes the posting account for reallocated employee/card contract\n- data such as IBAN are transferred to the employee new account\n- the employee old account is closed according to standard business rules\n- account set-up and membership pending fees are transferred from the employee old account to the employee new account and paid, i.e., periodic fees on the employee new account are normally continued.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardContractExternalReference",
              "in": "path",
              "description": "Issuer Card Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReallocateEmployeeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReallocateEmployeeResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/corporate-contracts/external-contracts/{issuerContractExternalReference}/card-contracts/external-card-contracts/{issuerCardContractExternalReference}/reallocate": {
        "post": {
          "tags": [
            "Corporate Contract"
          ],
          "summary": "Reallocate employee by issuer contract external reference and issuer card contract external reference",
          "operationId": "reallocateEmployeeByIssuerContractExternalReferenceAndIssuerCardContractExternalReference",
          "description": "The API can be used to reallocate an employee (i.e., an employee card contract) within the same or different corporate contract(s).\nThis reallocation\n- must be allowed by the configuration (e.g. original employee product shall be in the list of allowed employee products for the new corporate contract)\n- is performed immediately \n\nAs a result, when employee reallocation is performed\n- the employee new account is created under the given parent account (can be within the same or different corporate contract)\n- the employee card contract is reallocated \n- the employee new account becomes the posting account for reallocated employee/card contract\n- data such as IBAN are transferred to the employee new account\n- the employee old account is closed according to standard business rules\n- account set-up and membership pending fees are transferred from the employee old account to the employee new account and paid, i.e., periodic fees on the employee new account are normally continued.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Issuer Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCardContractExternalReference",
              "in": "path",
              "description": "Issuer Card Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReallocateEmployeeRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityReallocateEmployeeResponse"
              }
            }
          }
        }
      },
      "/issuers/{issuerId}/contracts/{contractReference}/replace-customer": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Replace a customer within a consumer contract",
          "operationId": "replaceCustomerByContractReference",
          "description": "The API can be used to replace a customer belonging to a consumer contract, by an existing one in our system or by a new one.\nThe customer to be replaced can be the contract owner, the account owner, the cardholder, etc...of the contract.\nThe main input fields are:\n- The issuer ID\n- The issuer contract external reference or the contract reference\n- The issuer customer external reference or the customer reference for which the replacement is requested\n- The target customer (by providing either the issuer customer external reference or the customer reference) if the customer already exists in our system, or a new one\n\nIn return, the API provides the identifiers of all customers (contract owner account owner, the cardholder, etc...) associated to the consumer contract.",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "contractReference",
              "in": "path",
              "description": "Contract Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReplaceCustomerInContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ReplaceCustomerInConsumerContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ]
        }
      },
      "/issuers/{issuerId}/contracts/external-contracts/{issuerContractExternalReference}/replace-customer": {
        "post": {
          "tags": [
            "Contract"
          ],
          "summary": "Replace a customer within a consumer contract by external reference",
          "operationId": "replaceCustomerByIssuerContractExternalReference",
          "description": "The API can be used to replace a customer belonging to a consumer contract, by an existing one in our system or by a new one.\nThe customer to be replaced can be the contract owner, the account owner, the cardholder, etc...of the contract.\nThe main input fields are:\n- The issuer ID\n- The issuer contract external reference or the contract reference\n- The issuer customer external reference or the customer reference for which the replacement is requested\n- The target customer (by providing either the issuer customer external reference or the customer reference) if the customer already exists in our system, or a new one\n\nIn return, the API provides the identifiers of all customers (contract owner account owner, the cardholder, etc...) associated to the consumer contract.",
          "produces": [
            "application/json"
          ],
          "consumes": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerContractExternalReference",
              "in": "path",
              "description": "Contract External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/ReplaceCustomerInContractRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ReplaceCustomerInConsumerContractResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ]
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/addresses/{addressReference}/address-versions/{addressVersionReference}": {
        "delete": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Delete an address for a customer",
          "description": "The API allows a future permanent address or a temporary address (active or future) to be deleted.\n\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe customer for which the address deletion is requested : It can be provided by using the customer reference or the issuer customer external reference\n•\tThe address of the customer for which the deletion is requested : It can be provided by using the address reference or the issuer address external reference\n•\tThe version reference of the address to be deleted\n\nAs result, the version of the customer address is deleted. If the address was an active temporary address, its end date is updated (set to the current date)\nIn response, the interface provides: \n- the address identifier (address reference or the issuer address external reference)\n- the deleted version reference of the address",
          "operationId": "deleteAddress",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "customerReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "addressReference",
              "required": true,
              "type": "string"
            },
             {
              "name": "addressVersionReference",
              "in": "path",
              "description": "addressVersionReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteAddress"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/external-addresses/{issuerAddressExternalReference}/address-versions/{addressVersionReference}": {
        "delete": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Delete an address for a customer by address external reference",
          "description": "The API allows a future permanent address or a temporary address (active or future) to be deleted.\n\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe customer for which the address deletion is requested : It can be provided by using the customer reference or the issuer customer external reference\n•\tThe address of the customer for which the deletion is requested : It can be provided by using the address reference or the issuer address external reference\n•\tThe version reference of the address to be deleted\n\nAs result, the version of the customer address is deleted. If the address was an active temporary address, its end date is updated (set to the current date)\nIn response, the interface provides: \n- the address identifier (address reference or the issuer address external reference)\n- the deleted version reference of the address",
          "operationId": "deleteAddressByAdrExtRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "customerReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "issuerAddressExternalReference",
              "required": true,
              "type": "string"
            },
             {
              "name": "addressVersionReference",
              "in": "path",
              "description": "addressVersionReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteAddress"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/addresses/{addressReference}/address-versions/{addressVersionReference}": {
        "delete": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Delete an address for a customer by customer external reference",
          "description": "The API allows a future permanent address or a temporary address (active or future) to be deleted.\n\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe customer for which the address deletion is requested : It can be provided by using the customer reference or the issuer customer external reference\n•\tThe address of the customer for which the deletion is requested : It can be provided by using the address reference or the issuer address external reference\n•\tThe version reference of the address to be deleted\n\nAs result, the version of the customer address is deleted. If the address was an active temporary address, its end date is updated (set to the current date)\nIn response, the interface provides: \n- the address identifier (address reference or the issuer address external reference)\n- the deleted version reference of the address",
          "operationId": "deleteAddressByCusExtRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "issuerCustomerExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "addressReference",
              "required": true,
              "type": "string"
            },
             {
              "name": "addressVersionReference",
              "in": "path",
              "description": "addressVersionReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteAddress"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/external-addresses/{issuerAddressExternalReference}/address-versions/{addressVersionReference}": {
        "delete": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Delete an address for a customer by customer external reference and address external reference",
          "description": "The API allows a future permanent address or a temporary address (active or future) to be deleted.\n\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe customer for which the address deletion is requested : It can be provided by using the customer reference or the issuer customer external reference\n•\tThe address of the customer for which the deletion is requested : It can be provided by using the address reference or the issuer address external reference\n•\tThe version reference of the address to be deleted\n\nAs result, the version of the customer address is deleted. If the address was an active temporary address, its end date is updated (set to the current date)\nIn response, the interface provides: \n- the address identifier (address reference or the issuer address external reference)\n- the deleted version reference of the address",
          "operationId": "deleteAddressByCusExtRefAndAdrExtRef",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "issuerCustomerExternalReference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "issuerAddressExternalReference",
              "required": true,
              "type": "string"
            },
             {
              "name": "addressVersionReference",
              "in": "path",
              "description": "addressVersionReference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityDeleteAddress"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/addresses/{addressReference}/address-versions": {
        "get": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Retrieve customer address versions",
          "operationId": "retrieveAddressVersions",
          "description": "The API allows the versions of a customer address to be retrieved.\n\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe customer : It can be provided by using the customer reference or the issuer customer external reference\n•\tThe address of the customer for which versions list is requested : It can be provided by using the address reference or the issuer address external reference\n\nIn response, the interface returns address data with the address version reference.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddressVersions"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/{customerReference}/external-addresses/{issuerAddressExternalReference}/address-versions": {
        "get": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Retrieve customer address versions by address external reference",
          "operationId": "retrieveAddressVersionsByIssuerExtRef",
          "description": "The API allows the versions of a customer address to be retrieved.\n\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe customer : It can be provided by using the customer reference or the issuer customer external reference\n•\tThe address of the customer for which versions list is requested : It can be provided by using the address reference or the issuer address external reference\n\nIn response, the interface returns address data with the address version reference.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "customerReference",
              "in": "path",
              "description": "Customer Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddressVersions"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/addresses/{addressReference}/address-versions": {
        "get": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Retrieve customer address versions by customer external reference",
          "operationId": "retrieveAddressVersionsByCustomerIssuerExtRef",
          "description": "The API allows the versions of a customer address to be retrieved.\n\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe customer : It can be provided by using the customer reference or the issuer customer external reference\n•\tThe address of the customer for which versions list is requested : It can be provided by using the address reference or the issuer address external reference\n\nIn response, the interface returns address data with the address version reference.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "addressReference",
              "in": "path",
              "description": "Address Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddressVersions"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/customers/external-customers/{issuerCustomerExternalReference}/external-addresses/{issuerAddressExternalReference}/address-versions": {
        "get": {
          "tags": [
            "Customer - Address"
          ],
          "summary": "Retrieve customer address versions by customer external reference and address external reference",
          "operationId": "retrieveAddressVersionsByIssuerExtRefAndCustomerIssuerExtRef",
          "description": "The API allows the versions of a customer address to be retrieved.\n\nThe main input fields requested by the API are:\n•\tThe issuer ID\n•\tThe customer : It can be provided by using the customer reference or the issuer customer external reference\n•\tThe address of the customer for which versions list is requested : It can be provided by using the address reference or the issuer address external reference\n\nIn response, the interface returns address data with the address version reference.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerCustomerExternalReference",
              "in": "path",
              "description": "Issuer Customer External Reference",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerAddressExternalReference",
              "in": "path",
              "description": "Issuer address external reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityAddressVersions"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/products/external-products/{issuerProductExternalReference}/product-extension-balancing": {
        "get": {
          "tags": [
            "Product Override"
          ],
          "summary": "Retrieve the product extensions' load balancing by issuer product external reference (beta)",
          "operationId": "retrieveProductExtensionLoadBalancing",
          "description": "The API allows the parameters of the product extensions' load balancing to be retrieved. The parameters of the load balancing are used when a new card is requested.\nThe main input fields are:\n- The issuer ID\n- The issuer product external reference for which the detail of the product extensions' load balancing is requested.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerProductExternalReference",
              "in": "path",
              "description": "Issuer Product External Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityProductExtensionBalancing"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Product Override"
          ],
          "summary": "Override the product extensions' load balancing by issuer product external reference (beta)",
          "operationId": "modifyProductExtensionBalancing",
          "description": "The API allows a list of pre-defined parameters for a product extensions' load balancing to be overridden. The parameters of the load balancing are used when a new card is requested.\nThe main input fields are:\n- The issuer ID\n- The issuer product external reference for which the changes are required\n- The parameters (profiles or thresholds of a product) to be overridden\n\nThe parameters of the load balancing can be retrieved using the Retrieve the product extensions' load balancing API.\nThe overridden parameters should be consistent with the initial product configuration defined in the system (e.g., the profiles to be updated must exist in the system to be found).",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "issuerProductExternalReference",
              "in": "path",
              "description": "Issuer Product External Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/OverrideProductExtensionBalancingRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityOverrideProductExtensionBalancingResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/card-products/{cardTemplateReference}/card-producer-balancing": {
        "get": {
          "tags": [
            "Product Override"
          ],
          "summary": "Retrieve the card producers' load balancing (beta)",
          "operationId": "retrieveCardProducersLoadBalancing",
          "description": "The API allows the parameters of the load balancing between card producers to be retrieved.\nThe main input field is:\n- The issuer ID\n- The card template reference for which the detail of the card producers' load balancing is requested.",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardTemplateReference",
              "in": "path",
              "description": "Card Template Reference",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityCardProducerBalancing"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        },
        "patch": {
          "tags": [
            "Product Override"
          ],
          "summary": "Override the card producers' load balancing (beta)",
          "operationId": "modifyCardProducersLoadBalancing",
          "description": "The API allows for the replacement of the load balancing parameters between card producers.\nThe main input fields are:\n- The issuer ID\n- The card template reference for which the changes are requested\n- The parameters to be overridden\n\nThe overridden parameters of the card producers' load balancing can be retrieved using the Retrieve the card producers' load balancing API.",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "cardTemplateReference",
              "in": "path",
              "description": "Card Template Reference",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": false,
              "schema": {
                "$ref": "#/definitions/OverrideCardProducerBalancingRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseEntityOverrideCardProducerBalancingResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      },
      "/issuers/{issuerId}/super-folders": {
        "post": {
          "tags": [
            "Dispute"
          ],
          "summary": "create a super folder (beta)",
          "operationId": "createSuperFolder",
          "description": "This API allows the creation of a super folder from a list of dispute folders.\nThe main input fields are:\n•\tThe issuer ID\n•\tThe list of dispute folder identifiers to be attached to the super folder : The dispute folder references must exist in our system and be associated to the same PAN. \nThe issuer can provide the name of the super folder to be created.\n\nAs a result, the super folder is created with its own reference calculated by our system.\n\nThe API response returns:\n•\tThe super folder reference\n•\tThe name of the super folder if provided in the request",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "WL-Correlation-ID",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "WL-Origin",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "filter",
              "in": "query",
              "description": "Filtered Fields",
              "required": false,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            },
            {
              "name": "issuerId",
              "in": "path",
              "description": "Issuer ID",
              "required": true,
              "type": "string"
            },
            {
              "name": "body",
              "in": "body",
              "description": "Create a SuperFolder request",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateSuperFolderRequest"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Bad request",
              "schema": {
                "$ref": "#/definitions/BadRequestErrorApiResponse"
              }
            },
            "401": {
              "description": "Unauthorized",
              "schema": {
                "$ref": "#/definitions/UnauthorizedErrorApiResponse"
              }
            },
            "403": {
              "description": "Forbidden",
              "schema": {
                "$ref": "#/definitions/ForbiddenErrorApiResponse"
              }
            },
            "404": {
              "description": "Not found",
              "schema": {
                "$ref": "#/definitions/NotFoundErrorApiResponse"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/InternalServerErrorErrorApiResponse"
              }
            },
            "502": {
              "description": "Bad gateway",
              "schema": {
                "$ref": "#/definitions/BadGatewayErrorApiResponse"
              }
            },
            "200": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/ApiResponseCreateSuperFolderResponse"
              }
            }
          },
          "security": [
            {
              "basic": []
            }
          ],
          "deprecated": false
        }
      }
    },
    "securityDefinitions": {
      "basic": {
        "type": "oauth2",
        "flow": "application",
        "tokenUrl": "https://issuing-solutions.eae.apis.svc.as8677.net/oauth/accesstoken"
      }
    },
    "definitions": {
      "Account": {
        "type": "object",
        "required": [
          "accountHierarchyReference",
          "accountProfileReference",
          "iban",
          "root",
          "status",
          "statusDate",
          "workingCurrencyCode",
          "workingMode",
          "accountOwnerIdentifier",
          "contractIdentifier",
          "rootAccountIdentifier",
          "accountTemplateReference"
        ],
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "accountIdentifier": {
            "description": "Account references known in the system",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "root": {
            "type": "boolean",
            "description": "Indicates if the account is a root account (true) or not (false)."
          },
          "accountBalance": {
            "description": "Current account balance",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "accountClosingType": {
            "type": "string",
            "description": "Specified closing type for account. Possible values are SCHEDULED_CLOSING and FORCED_CLOSING."
          },
          "bic": {
            "type": "string",
            "description": "BIC or Bank Identification Code (optional)"
          },
          "status": {
            "type": "string",
            "description": "Current status of the account\nPossible values:\nAWAITING_SIGNATURE: The first status when an account is created (contract is also in AWAITING_SIGNATURE status). No operation can be processed on an account when in this state\nACTIVE: The account has been activated and is ACTIVE. Operation processing can be done in this state\nBEING-CLOSED:  The closing process is started, the account will be permanently closed depending on certain rules, such as after xx days, no ongoing disputes.\nCLOSED: The account is permanently closed (final status), no possible activity (e.g. operations posting)"
          },
          "statusDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the status of an account has been changed for the last time"
          },
          "statusHistory": {
            "type": "array",
            "description": "Refer to AccountStatusHistory data subresource",
            "items": {
              "$ref": "#/definitions/AccountStatusHistory"
            }
          },
          "closingDueDate": {
            "type": "string",
            "format": "date-time",
            "description": "DEPRECATED"
          },
          "exclusiveCurrency": {
            "type": "boolean",
            "description": "Defines if the working currency is exclusive or not (conditional). If the account currency is exclusive then only operation with the account currency can be posted on the account. Otherwise currency conversion is performed to post the amount (ex. account currency is USD and exclusive, the operation in EUR cannot be posted on the account, and in the opposite, the account currency is USD and not exclusive, the operation in EUR can be posted on the account after conversion). "
          },
          "activationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date on which Account is activated"
          },
          "finalClosingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date at which the status of the account is changed to CLOSED"
          },
          "iban": {
            "type": "string",
            "description": "International Bank Account Number of the customer (debtor). E.g Can be used for repayment via Direct Debit."
          },
          "secondIban": {
            "type": "string",
            "description": "Debtor second IBAN (can be used for specific business processes if needed)"
          },
          "ibanOwnerName": {
            "type": "string",
            "description": "Iban owner’s name, can be different from the account owner’s name"
          },
          "name": {
            "type": "string",
            "description": "The name of the account provided by the issuer at creation time or by default, the account template reference which was used to create the account"
          },
          "paymentMode": {
            "type": "string",
            "description": "The payment mode the customer uses (mandatory, pay later). \nThe values are:\n- CARDHOLDER_DETERMINED: customer repays its debt by itself (fund transfer to the issuer)\n- AUTOPAYMENT: customer repays its debt via Direct Debit (issued by issuer and paid automatically after X days)\n- DIRECTDEBIT_WITH_CONFIRMATION : customer repays its debt via Direct Debit but payment is confirmed by issuer"
          },
          "scheduledClosingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date at which account should be set to BEING_CLOSED status (conditional). Mandatory when scheduledClosingDateType Is MANUAL."
          },
          "scheduledClosingDateType": {
            "type": "string",
            "description": "Type of scheduled Closing Date (conditional) Mandatory for SCHEDULED_CLOSING:\nValue =\n- MANUAL\n- NEXT_CYCLIC_CLOSURE_DATE\n- ANNUAL_FEE_DUE_DATE\n- NOW_DATE"
          },
          "workingCurrencyCode": {
            "type": "string",
            "description": "The Currency Code fixed in the current account (EUR for Euro, USD for dollar...)"
          },
          "originalWorkingMode": {
            "type": "string",
            "description": "not used – deprecated"
          },
          "workingMode": {
            "type": "string",
            "description": "It is the working mode of the account (Pay before/Pay later/Pay now) "
          },
          "subscriptionSwitch": {
            "type": "boolean",
            "description": "Not used – deprecated"
          },
          "toBeSwitched": {
            "type": "boolean",
            "description": "Not used – deprecated"
          },
          "lastSubscriptionFeeDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date of the previous charge for subscription"
          },
          "nextSubscriptionFeeDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date of the next charge for subscription"
          },
          "accountHierarchyReference": {
            "type": "string",
            "description": "Identifier of Account Hierarchy"
          },
          "structureType": {
            "type": "string",
            "description": "The issuer can provide this field for e.g. the root account, for information only (no check, no related business process), to indicate if the contract contains a single card only or can have several cards.\nPossible values are:\nFAMILY : the contract can have 1 or several cards\nREGULAR : the contract can have a single card only"
          },
          "dunningCaseStatus": {
            "type": "string",
            "description": "Status of the Dunning Case (optional, pay later):\n- ACTIVE\n- CLOSED"
          },
          "collectionCaseStatus": {
            "type": "string",
            "description": "Status of the Collection Case (optional, pay later):\n- ACTIVE\n- CLOSED"
          },
          "sepaIndicator": {
            "type": "boolean",
            "description": "Indicates whether the payment processing channel is SEPA for direct debit and credit transfer"
          },
          "sepaCreditorId": {
            "type": "string",
            "description": "SEPA Creditor Identifier (conditional). Mandatory if sepaMandate=True (pay later)"
          },
          "sepaMandate": {
            "type": "boolean",
            "description": "Indicates whether SEPA mandate exists (mandatory, pay later). If true then sepaCreditorId, sepaMandateUir, sepaMandateUmr and sepaMandateStatus attributes are mandatory."
          },
          "sepaMandateUmr": {
            "type": "string",
            "description": "SEPA Unique Mandate Reference (conditional, pay later). Mandatory if sepaMandate=True"
          },
          "sepaMandateUir": {
            "type": "string",
            "description": "SEPA Unique Internal Reference (conditional, pay later). Mandatory if sepaMandate=True"
          },
          "sepaMandateStatus": {
            "type": "string",
            "description": "SEPA Mandate Status (conditional, pay later). Mandatory if sepaMandate=True"
          },
          "originalPaymentMode": {
            "type": "string",
            "description": "Previous paymentMode when paymentMode has been modified (optional, pay later)"
          },
          "accountMembershipNumber1": {
            "type": "string",
            "description": "1st membership number"
          },
          "accountMembershipNumber2": {
            "type": "string",
            "description": "2nd membership number"
          },
          "amountDueMinAmount": {
            "description": "Minimum amount due defined at paying account level that overrides the default value defined in the accountAmountDue model when the amount due algorithm of the model is \"Amount due percentage\"  (optional, pay later account)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "amountDueFixedAmount": {
            "description": "Fixed amount due applied at paying account level that overrides the default value defined in the accountAmountDue model when the amount due algorithm of the model is “Amount Due fixed amount” (optional, pay later account)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "greaterOrLesserAmountDue": {
            "type": "string",
            "description": "Possible values : \n- GREATER (the highest amount between the amount due calculated and the minimum amount due defined is considered)\n- LESSER (the lowest amount is considered between the amount due calculated and the minimum amount due defined)\nUseful for credit cards and partial payer"
          },
          "directDebitAlgorithmReference": {
            "type": "string",
            "description": "DEPRECATED\nReplaced by DirectDebitAmountDue model."
          },
          "directDebitFixedAmount": {
            "description": "Used to calculate the Direct Debit Amount (conditional, pay later). Mandatory if Direct Debit Algorithm requires Fixed Amount. If directDebitAlgorithm= DirectDebit Fixed Amount Standard, DirectDebit Fixed Amount Debit. Only, DirectDebit Fixed Amount in the Direct debit Amount Model",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "directDebitPercentage": {
            "type": "string",
            "description": "Used to calculate the Direct Debit Amount (conditional, pay later). In case if the Direct Debit Algorithm is selected, the percentage is used to calculate direct debit amount instead of the amount due conditions (eg. amount due = 30% of the statement balance, and for direct debit algorithm, the direct debit percentage is 70%)."
          },
          "creditInstalmentBalance": {
            "description": "The current balance of the credit instalment on the account (optional)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "gracePeriodType": {
            "type": "string",
            "description": "The type of grace period for debit interest calculation (optional, pay later)\nPossible values:\nNEXT_CYCLE_GRACE_DATE\nNO_GRACE_PERIOD_USED"
          },
          "noGraceOnTheFirstCycle": {
            "type": "boolean",
            "description": "Indicates if no grace period is set for the first cycle (optional, pay later)"
          },
          "accountAmountDueAlgorithmName": {
            "type": "string",
            "description": "DEPRECATED\nReplaced by Account amount due model."
          },
          "amountDuePercentage": {
            "type": "string",
            "description": "Percentage of the balance to be claimed defined at paying account level that overrides the default value defined in the accountAmountDue model when the amount due algorithm of the model is \"Amount due percentage\" (optional, pay later account)."
          },
          "amountDueCalculationLevel": {
            "type": "string",
            "description": "DEPRECATED\nShows the level on which the amount due is calculated (optional, pay later). Values: \nACCOUNT_LEVEL, \nCOMPONENT_LEVEL "
          },
          "creditBureauContractFlag": {
            "type": "boolean",
            "description": "This information specifies if the Credit Bureau part of the contract has been signed by the credit card owner (optional, pay later)"
          },
          "loyaltyPoints": {
            "type": "array",
            "description": "When the account has loyalty points, value of the balance in point at the end of the closure cycle (optional).",
            "items": {
              "$ref": "#/definitions/LoyaltyPoint"
            }
          },
          "insuranceContracts": {
            "type": "array",
            "description": "List of insurance contracts linked to an account (optional, pay later)",
            "items": {
              "$ref": "#/definitions/InsuranceContract"
            }
          },
          "specificFields": {
            "type": "object",
            "description": "A list of values (label:value|) related to a account that can be provided by e.g. the issuer for information or usage by other systems (optional). \nThose provided values have no impact on our system business processes.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "accountHierarchySpecificFields": {
            "type": "object",
            "description": "For each account in the hierarchy exist specific fields (optional). The value is a piped string like: <accountHierarchySpecificFields>{''costCenter'':''445475'',''brand'':''VIS'',''acc_struct'':''PRIV'',''statement_type'':''ST1'',''paymentCode'':''01'',''statementMailingCode'':''ORD''}</accountHierarchySpecificFields>",
            "additionalProperties": {
              "type": "string"
            }
          },
          "productIdentifier": {
            "description": "Identifier of the product used to create the contract to which the account is belonging. It corresponds also to the identifier of the product used to create the account if the account is created from the product directly.",
            "allOf": [
              {
                "$ref": "#/definitions/ProductIdentifier"
              }
            ]
          },
          "productExtensionIdentifier": {
            "description": "Identifier of the product extension used to create the account. \nRelevant if the account is created from a product extension.",
            "allOf": [
              {
                "$ref": "#/definitions/ProductExtensionIdentifier"
              }
            ]
          },
          "selectedModels": {
            "type": "array",
            "description": "The models depends on the account type.\n\nFor a PayNow account\nEvent Fee Model: Defines fees which are triggered by Account events (ex: balance enquiry fee, statement fee, fee for returned payment)\nTransaction Fee Model: Defines fees which apply to particular transactions at the moment they are processed\nMarkup Fee Model: Defines fees which apply to particular transactions at the moment they are processed (used more particurlarly for foreign transactions)\n\nPayLater account\nEvent Fee Model: Defines fees which are triggered by Account events (ex: balance enquiry fee, statement fee, fee for returned payment)\nTransaction Fee Model: Defines fees which apply to particular transactions at the moment they are processed\nMarkup Fee Model: Defines fees which apply to particular transactions at the moment they are processed (used more particurlarly for foreign transactions)\nRestriction Model: Used to manage the credit limit \nStatement Model: Used to define the kind of statement\nDebit Interest Model: Used to define the algorithm and conditions for the calcul of debit interests\nInterest Model: Used to define the algorithm and conditions for the calcul of credit interests\nAccount Amount Due Model: Used to define the algorithm at account level for the amount due calculation (part of issuer terms and conditions)\nDirect Debit Amount Model: Used to define the algorithm for the direct debit amount calculation (part of customer terms and conditions)\nReimbursement Model - Used to configure and apply OCT different features in case of credit balance (per account hierarchy)\nRetrocession Rule Model: Used to configure different rules based on which there will be a sender and received operations cretaed, for the transactions meeting the rule criteria",
            "items": {
              "$ref": "#/definitions/AccountModel"
            }
          },
          "accountProfileReference": {
            "type": "string",
            "description": "Reference to the Account profile which stores allowed configuration elements (e.g. list of available closure calendar)"
          },
          "accountTemplateReference": {
            "type": "string",
            "description": "Reference of the account template used to instantiate this account"
          },
          "closureCalendar": {
            "type": "string",
            "description": "External reference of the closure calendar linked to the account (contains all dates of Issuer's cycle, used to realize its processing) (mandatory)."
          },
          "overlimitContribution": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "spareChangeSaving": {
            "type": "boolean",
            "description": "Indicates if the function Spare Change Savings  (Keep the change) is applied on the account. (credit account only)"
          },
          "childrenAccountIdentifiers": {
            "type": "array",
            "description": "Identifier of children accounts (if exist). Reference to accountIdentifier",
            "items": {
              "$ref": "#/definitions/AccountIdentifier"
            }
          },
          "rootAccountIdentifier": {
            "description": "The AccountIdentifier data type consist of two parameters:\n1. accountReference - Account number is to identify the Account on which reimbursement is made.\n2. issuerAccountExternalReference - External issuer account reference is to identify the Account. \n\nThe root account is either the account number or the issuerAccountExternalReference, or, if both are provided then only the account number is used. The account should exist and it should be a pay Later Account.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "rootAccount": {
            "description": "Root account data only if the account is not the root account (i.e. flag root is false, otherwise root account data are not returned)",
            "allOf": [
              {
                "$ref": "#/definitions/Account"
              }
            ]
          },
          "parentAccountIdentifier": {
            "description": "Account reference and issuer account external reference (optional) of the parent account. Is empty if it is a root account. Mandatory if not root account",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "payingAccountIdentifier": {
            "description": "The account reference of paying account",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "accountOwnerIdentifier": {
            "description": "Account owner reference",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "accountGuarantorIdentifier": {
            "description": "Guarantor of an account",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "contractIdentifier": {
            "description": "OPC contract Identifier",
            "allOf": [
              {
                "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "delinquent": {
            "type": "boolean",
            "description": "Indicates if the account is delinquent (true) or not (false) (optional, only used for pay later)"
          },
          "originalAccountIdentifier": {
            "description": "In case the account was created from a product change, account number of original account\nIn case the account was created from a product change or employee reallocation, account number of original account.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "changedAccountIdentifier": {
            "description": "in case the account had a product change, account number of new account created\nIn case the account had a product change or employee reallocation took place, account number of new account created",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "payingAccountType": {
            "type": "string",
            "description": "Indicates for corporate contract only if the account is paid by the root account, a parent entity account or the account itself\nPossible values:\nROOT_PAYS\nENTITY_PAYS\nITSELF_PAYS\n\nE.g. A corporate contract can have cards paid by the company (ROOT_PAYS, usually the root account is the company account), and/or paid by the intermediate entities (ENTITY_PAYS), and/or paid by cardholders them-selves (ITSELF_PAYS).",
            "enum": [
              "ROOT_PAYS",
              "ITSELF_PAYS",
              "ENTITY_PAYS"
            ]
          },
          "companyEntityExternalReference": {
            "type": "string",
            "description": "This is the reference of an entity (e.g. cost center, department, division, country) in the company organization. This is required for reporting, etc so that the company can identify the entity in its own system."
          },
          "noOtbCheck": {
            "type": "boolean",
            "description": "Indicates if for this account (credit only) the Open-to-buy should be checked or not when an operation is posted during both authorizations and transactions processing.\nE.g. A contract with 2 prepaid cards having 1 card account per prepaid card and the root account: OTB check is disabled for both card accounts so when an operation is posted to card account 1 the OTB of its root account is checked only - this allows having shared loaded amount on root account for both cards."
          },
          "noParentNotification": {
            "type": "boolean",
            "description": "Indicates if operations (authorizations and transactions) should be posted to the parent account during the authorization and the transaction processing (e.g. incoming purchase authorization, first presentment, transaction fee, membership fee).\nE.g. this enables the issuer to stop the authorization/transaction processing to the entry account (card account), or at upper level (e.g. for corporate cards authorization/transaction amount can be checked against card account and Department account Open-to-buy only and not propagated to upper levels such as division, country, company accounts)."
          },
          "contractType": {
            "type": "string",
            "description": "Contract type. \nPossible values: CORPORATE, CONSUMER",
            "enum": [
              "CORPORATE",
              "CONSUMER"
            ]
          },
          "resetCreditLimit": {
            "type": "boolean",
            "description": "Indicates if the Open-to-buy should be reset to its maximum Credit limit at Authorization system side as soon as a cycle is closed. Of course the amount due (minimum payment amount) is considered as to be repaid by the customer by our solution.\nThe value of this flag overrides the value of the \"defaultResetCreditLimit\" flag."
          },
          "liabilityType": {
            "type": "string",
            "description": "Indicates the liability type of the account (free text provided by the issuer). This liability type can be different for each issuer and is stored in our solution for information purpose (e.g. can be used for reporting), not used by any business process."
          },
          "hierarchyDebitOrderDueDateDelay": {
            "type": "integer",
            "description": "The issuer can provide the debit order due date delay at hierarchy level (number of days). This delay is used to calculate the Direct Debit payment date for each cycle of repayment (Optional). This value overrides the one from the closure calendar."
          },
          "accountDebitOrderDueDateDelay": {
            "type": "integer",
            "description": "The issuer can provide the debit order due date delay for the account (number of days). This delay is used to calculate the Direct Debit payment date for each cycle of repayment. (Optional). This value overrides the one from the closure calendar and the hierarchy."
          },
          "hierarchyOutgoingCreditTransferFeature": {
            "description": "Description of OCT features at account hierarchy level if different from the configuration",
            "allOf": [
              {
                "$ref": "#/definitions/HierarchyOutgoingCreditTransferFeature"
              }
            ]
          },
          "accountOutgoingCreditTransferFeature": {
            "description": "Description of OCT features at account level if different from the configuration or definition at account hierarchy level",
            "allOf": [
              {
                "$ref": "#/definitions/AccountOutgoingCreditTransferFeature"
              }
            ]
          },
          "preDelinquent ": {
            "type": "boolean",
            "description": "Indicates if the account is pre-delinquent (true) or not (false) (optional, pay later)\nRelevant only if account is not delinquent, a returned debit note with specific reason is received and total due amount is greater than 0.\nAn account is either delinquent or pre-delinquent (can’t be both at the same time)."
          },
          "externalRestrictions": {
            "type": "array",
            "description": "Derprecated - Replaced by externalVelocityLimits.",
            "items": {
              "$ref": "#/definitions/ExternalRestriction"
            }
          },
          "externalVelocityLimits": {
            "type": "array",
            "description": "List of external velocity limits which can be provided by issuers at account creation time (mainly when creating a contract and the first card, when adding new card and card account) in order to update the corresponding velocity limits on the authorization system.",
            "items": {
              "$ref": "#/definitions/ExternalVelocityLimit"
            }
          },
          "defaultResetCreditLimit": {
            "type": "string",
            "description": "Corresponds to the reset credit limit flag defined at contract level and which is the default value for the account in case nothing is configured in its resetCreditLimit flag. \nWhen the value is true, by default, the remaining due amount is not considered in the Open-To-Buy except if the flag \"resetCreditLimit\" is false\nWhen the value is false, the remaining due amount is considered in the Open-To-Buy except if the flag \"resetCreditLimit\" is true."
          },
          "lastImpactDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date at which the account balance was last impacted by an operation"
          },
          "coBrander": {
            "type": "string",
            "description": "CoBrander inherited from the consumer contract."
          },
          "resetLimitBalance": {
            "description": "Will be fed only in case reset credit is active for the account, and that contain in this case the application of the reset limit which means it will contain account balance” – “remaining amount due of that individual account.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "hierarchyPayingAccountType": {
            "type": "string",
            "description": "Indicates for corporate contract only if each account in the hierarchy is paid by the root account or the account itself\nPossible values:\nROOT_PAYS\nITSELF_PAYS"
          },
          "hierarchyBonusProgramReferences": {
            "type": "array",
            "description": "Reference of the Bonus/loyalty programs linked to the account hierarchy",
            "items": {
              "type": "string"
            }
          },
          "openCycleInformation": {
            "$ref": "#/definitions/CycleInformation"
          },
          "isChangeOfPayerAtNextCycle": {
            "type": "boolean",
            "description": "The attribute is showing whether there is scheduled change of paying account type at the cycle closure date or not"
          },
          "hierarchySelectedModels": {
            "type": "array",
            "description": "The models depends on the account type.\n\nCurrently only Reimbursement Model: used to configure and apply OCT different features in case of credit balance (per account hierarchy)",
            "items": {
              "$ref": "#/definitions/AccountHierarchyModel"
            }
          },
          "originalAccountIdentifierType": {
            "type": "string",
            "description": "\"PRODUCT_CHANGE\" in case the account was created from a product change\n\"CARD_REALLOCATION\" in case the account was created from an employee reallocation."
          },
          "changedAccountIdentifierType": {
            "type": "string",
            "description": "\"PRODUCT_CHANGE\" in case the account was created from a product change\n\"CARD_REALLOCATION\" in case the account was created from an employee reallocation."
          },
          "hierarchyOperationStatus": {
            "description": "The issuer can update blocking information for the account hierarchy.",
            "allOf": [
              {
            "$ref": "#/definitions/HierarchyOperationStatus"
              }
            ]
          },
          "hierarchyOperationStatusHistory": {
            "type": "array",
            "description": "The operation status change history information can be checked in this object.",
            "items": {
              "$ref": "#/definitions/HierarchyOperationStatusHistory"
            }
          }
        },
        "title": "Account"
      },
      "AccountBalance": {
        "type": "object",
        "properties": {
          "acceptedAmount": {
            "description": "The sum of all operations (scheme operations, fees, ect) considered for the current Open-to-buy of the account (certain operations can be excluded as per credit limit configuration) . \nThe accepted amount can be in credit or debit position.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "accountBalance": {
            "description": "The sum of all operations (scheme operations, fees, ect) posted to the account. \nThe account balance can be in credit or debit position.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "activeCreditLimitAmount": {
            "description": "DEPRECATED",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "authorizedAmount": {
            "description": "Not used – deprecated",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "currentCycleStartDate": {
            "type": "string",
            "format": "date-time",
            "description": "The start date of the current cycle."
          },
          "externalReservedAmount": {
            "description": "The current amount reserved by the autorisation system (issuing Front Office) for the account (credit limit) . \nThe reserved amount can be in credit or debit position.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "openToBuy": {
            "description": "Available amount for spending at a given time. \nIt is calculated as following : Active credit limit amount – External reserved amount (authorized amount but not yet posted) – accepted amount + sum of payments\nThe open-to-buy can be in credit or debit position.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "pastAmountDue": {
            "description": "Sum of amount due from the previous cycles not paid. \nThe past amount due is always in debit position.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "prevailingOpenToBuy": {
            "description": "Lowest Open-To-Buy (OTB) among the OTB of the input account and the OTB of the root account (conditional, pay later)\nThe prevailing open-to-buy can be in credit or debit position.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "previousCycleBalance": {
            "description": "Balance of the previous cyclic closure (calculated from the second cycle, pay later).\n The previous cycle balance can be in credit or debit position.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "remainingAmountDue": {
            "description": "Minimum amount due calculated at cycle closure.Is dicreased during the following cycle with incoming payments and optionally with credit operations (ex. reversal, credit voucher).\n The value is always in debit position.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "liableBalance": {
            "description": "The liable balance is only returned for a paying account (not relevant for a non paying-account).\nIt is the sum of all account balances paid by this paying account, including itself.\nThe liable balance can be in credit or debit position.\nE.g. root account is the paying account, 2 card accounts having the root account as paying account\n- Transaction 70€ posted to card account A:\nroot account balance = 0 / liable balance = 70€\ncard account A balance = 70€, card account B balance = 0€\n- Transaction 100€ posted to root\nroot account balance = 100€ / liable balance = 170€\ncard account A balance = 70€, card account B balance = 0€\n- Transaction 50€ posted to card acct B = 50€\nroot account balance = 100€ / liable balance = 220€ (= 100 + 70 + 50)\ncard account A balance = 70€, card account B balance = 50€",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "activeCreditLimit": {
            "description": "Current credit limit that can be temporary or permanent.",
            "allOf": [
              {
                "$ref": "#/definitions/ActiveCreditLimit"
              }
            ]
          }
        },
        "title": "AccountBalance"
      },
      "AccountFutureUpdate": {
        "type": "object",
        "required": [
          "futureChangeDate",
          "creationDate",
          "processed"
        ],
        "properties": {
          "issuerId": {
            "description": "Issuer identifier (unique per platform)",
            "type": "string"
          },
          "accountIdentifier": {
            "description": "Refer to Account.accountIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "futureChangeDate": {
            "description": "Indicates the schedule date of the updates",
            "type": "string",
            "format": "date-time"
          },
          "creationDate": {
            "description": "Indicates the creation date of the future update",
            "type": "string",
            "format": "date-time"
          },
          "processed": {
            "description": "DEPRECATED\nReplaced by updateStatus",
            "type": "boolean"
          },
          "updateStatus": {
            "description": "Indicates the future update processing status:\nCREATED - future update is created by the issuer and is not yet processed\nPROCESSING - future update is being processed (applies for change paying account only)\nPROCESSED - future update is processed successfully\nREJECTED - future update processing is failed\nCANCELLED - future update is cancelled by the issuer",
            "type": "string"
          },
          "accountFutureUpdateIdentifier": {
            "description": "Refert to AccountFutureUpdateIdentifier data type",
            "allOf": [
              {
                "$ref": "#/definitions/AccountFutureUpdateIdentifier"
              }
            ]
          },
          "updateReason": {
            "description": "Indicates the reason of the future update",
            "type": "string"
          },
          "lastUpdateDate": {
            "description": "Indicates the last update date of the future update",
            "type": "string",
            "format": "date-time"
          },
          "sepaCreditorId": {
            "description": "Refer to Account.sepaCreditorId",
            "type": "string"
          },
          "sepaMandateStatus": {
            "description": "Refer to Account.sepaMandateStatus",
            "type": "string"
          },
          "sepaMandateUir": {
            "description": "Refer to Account.sepaMandateUir",
            "type": "string"
          },
          "sepaMandateUmr": {
            "description": "Refer to Account.sepaMandateUmr",
            "type": "string"
          },
          "debtorPhoneNumber": {
            "description": "SEPA debtor phone number",
            "type": "string"
          },
          "debtorEmail": {
            "description": "SEPA debtor e-mail",
            "type": "string"
          },
          "debtorPostalAddress": {
            "description": "Address lines 1 and 2, street name, building number, post code, town name, country and country subdivision can be provided in certain cases - refer to SEPA rules when debtor's address is required.",
            "allOf": [
              {
                "$ref": "#/definitions/SepaMandateMailAddress"
              }
            ]
          },
          "mandateContractId": {
            "description": "Mandate underlying contract identifier (external reference) used by the issuer. E.g., if the mandate is set up along with the contract creation, it may contain the application number, etc.",
            "type": "string"
          },
          "mandateNatureType": {
            "description": "SEPA mandate nature type. PAPER_MANDATE is taken as a default.\nList of mandate possible nature types (for future usage only, not to be used):\nCOMPUTING_MIGRATION_NO_SIGNATURE, COMPUTING_MIGRATION_WITH_SIGNATURE, FR_MIGRATION_DOMESTIC_FILES,\nMANDATE_FROMDIGITALIZATION, e_MANDATE, SIGNATURE_MANDATE, MYBANK_e_MANDATE, IDEAL_e_MANDATE",
            "type": "string"
          },
          "mandateSignDate": {
            "description": "SEPA mandate date of signature",
            "type": "string",
            "format": "date-time"
          },
          "mandateSignCity": {
            "description": "SEPA mandate city of signature",
            "type": "string"
          },
          "iban": {
            "description": "Refer to Account.iban",
            "type": "string"
          },
          "ibanOwnerName": {
            "description": "Refer to Account.ibanOwnerName",
            "type": "string"
          },
          "bic": {
            "description": "Refer to Account.bic",
            "type": "string"
          },
          "amountDueFixedAmount": {
            "description": "Refer to Account.amountDueFixedAmount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "amountDueMinAmount": {
            "description": "Refer to Account.amountDueMinAmount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "greaterOrLesserAmountDue": {
            "description": "Refer to Account.greaterOrLesserAmountDue",
            "type": "string"
          },
          "amountDuePercentage": {
            "description": "Refer to Account.amountDuePercentage",
            "type": "string"
          },
          "directDebitFixedAmount": {
            "description": "Refer to Account.directDebitFixedAmount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "directDebitPercentage": {
            "description": "Refer to Account.directDebitPercentage",
            "type": "string"
          },
          "selectedModels": {
            "type": "array",
            "description": "Refer to Account.selectedModels",
            "items": {
              "$ref": "#/definitions/AccountModel"
            }
          },
          "sepaIndicator": {
            "type": "boolean",
            "description": "AccountFutureUpdate.sepaIndicator"
          },
          "secondIban": {
            "type": "string",
            "description": "Refer to Account.secondIban"
          },
          "paymentMode": {
            "type": "string",
            "description": "Refer to Account.paymentMode"
          }
        },
        "title": "AccountFutureUpdate"
      },
      "AccountHistory": {
        "type": "object",
        "required": [
          "issuerId",
          "accountIdentifier",
          "effectiveDate"
        ],
        "properties": {
          "issuerId": {
            "description": "Issuer identifier (unique per platform)",
            "type": "string"
          },
          "accountIdentifier": {
            "description": "Refer to Account.accountIdentifier ",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "effectiveDate": {
            "description": "Indicates the date when the update is processed",
            "type": "string",
            "format": "date-time"
          },
          "accountHierarchySpecificFields": {
            "type": "object",
            "description": "Refer to Account.accountHierarchySpecificFields attribute",
            "additionalProperties": {
              "type": "string"
            }
          },
          "amountDueFixedAmount": {
            "description": "Refer to Account.amountDueFixedAmount attribute",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "amountDueMinAmount": {
            "description": "Refer to Account.amountDueMinAmount attribute",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "amountDuePercentage": {
            "description": "Refer to Account.amountDuePercentage attribute",
            "type": "string"
          },
          "bic": {
            "description": "Refer to Account.bic attribute",
            "type": "string"
          },
          "closureCalendarReference": {
            "description": "Refer to Account.closureCalendar attribute",
            "type": "string"
          },
          "directDebitFixedAmount": {
            "description": "Refer to Account.directDebitFixedAmount attribute",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "directDebitPercentage": {
            "description": "Refer to Account.directDebitPercentage attribute",
            "type": "string"
          },
          "greaterOrLesserAmountDue": {
            "description": "Refer to Account.greaterOrLesserAmountDue attribute",
            "type": "string"
          },
          "iban": {
            "description": "Refer to Account.iban attribute",
            "type": "string"
          },
          "ibanOwnerName": {
            "description": "Refer to Account.ibanOwnerName attribute",
            "type": "string"
          },
          "overlimitContribution": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "paymentMode": {
            "type": "string",
            "description": "Refer to Account.paymentMode attribute"
          },
          "secondIban": {
            "type": "string",
            "description": "Refer to Account.secondIban attribute"
          },
          "selectedModels": {
            "type": "array",
            "description": "Refer to Account.selectedModels",
            "items": {
              "$ref": "#/definitions/AccountModel"
            }
          },
          "spareChangeSaving": {
            "type": "boolean",
            "description": "Refer to Account.spareChangeSaving attribute"
          },
          "accountGuarantorIdentifier": {
            "description": "Refer to Account.accountGuarantorIdentifier attribute",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "sepaIndicator": {
            "type": "boolean",
            "description": "Refer to AccountHistory.sepaIndicator attribute"
          },
          "finalClosingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to AccountHistory.finalClosingDate attribute"
          },
          "noOtbCheck": {
            "type": "boolean",
            "description": "Refer to Account.noOtbCheck attribute"
          },
          "resetCreditLimit": {
            "type": "boolean",
            "description": "Refer to Account.resetCreditLimit attribute"
          },
          "sepaMandate": {
            "type": "boolean",
            "description": "Refer to Account.sepaMandate attribute"
          },
          "sepaMandateStatus": {
            "type": "string",
            "description": "Refer to Account.sepaMandateStatus attribute"
          },
          "sepaMandateUmr": {
            "type": "string",
            "description": "Refer to Account.sepaMandateUmr"
          },
          "sepaCreditorId": {
            "type": "string",
            "description": "Refer to Account.sepaCreditorId"
          }
        },
        "title": "AccountHistory"
      },
      "AccountIdentifier": {
        "type": "object",
        "properties": {
          "accountReference": {
            "type": "string",
            "description": "Account reference is to identify the Account calculated by the system (algorithm is configurable per issuer). Either the account number or the issuerAccountExternalReference is provided, or, if both are provided then only the account number is used."
          },
          "issuerAccountExternalReference": {
            "type": "string",
            "description": "Issuer account external reference is to identify the Account. Either the account number or the issuerAccountExternalReference is provided, or, if both are provided then only the account number is used. Algorithm configurable by issuer, can be generated by the system if there is an externalReferenceGeneratorAlgorithm."
          }
        },
        "title": "AccountIdentifier"
      },
      "AccountFutureUpdateIdentifier": {
        "type": "object",
        "properties": {
          "futureChangeReference": {
            "type": "string",
            "description": "A reference of an account future update (unique per account) that may be used to carry out research, find information, etc."
          }
        },
        "title": "AccountFutureUpdateIdentifier"
      },
      "AccountModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of an account model\nPossible values:\n•\teventFeeModel\n•\ttransactionFeeModel\n•\tmarkupFeeModel\n•\trestrictionModel\n•\tdebitInterestModel\n•\tinterestModel\n•\tdirectDebitAmountModel\n•\taccountAmountDueModel \n•\tstatementModel"
          },
          "reference": {
            "type": "string",
            "description": "Reference to the particular model that has been selected in selectedModels"
          },
          "originalModelReference": {
            "type": "string",
            "description": "DEPRECATED"
          }
        },
        "title": "AccountModel"
      },
      "AccountHierarchyModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Model type of the account hierarchy\nPossible value:\n• reimbursementModel."
          },
          "reference": {
            "type": "string",
            "description": "Reference to the particular model that has been selected in hierarchySelectedModels."
          }
        },
        "title": "AccountHierarchyModel"
      },
      "AccountRelation": {
        "type": "object",
        "required": [
          "relation",
          "accountIdentifier"
        ],
        "properties": {
          "relation": {
            "type": "string",
            "description": "Is a combination of criteria to describe the posting rule (one criteria or combination of several ones such as transaction currency = XXX) for each posting account - DEFAULT for the default posting account."
          },
          "accountIdentifier": {
            "description": "Identification of the account either by the Issuer account external reference or by the account reference.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          }
        },
        "title": "AccountRelation"
      },
      "AccountStatusHistory": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the account on the particular statusDate (optional)"
          },
          "statusDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the account status change (optional)"
          },
          "reason": {
            "type": "string",
            "description": "Reason the status has been set (optional)"
          }
        },
        "title": "AccountStatusHistory"
      },
      "ApiResponseEntityInvalidateAddressResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/InvalidAddressResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityInvalidateAddressResponse"
      },
      "InvalidAddressResponse": {
        "type": "object",
        "properties": {
          "addressIdentifier": {
            "description": "Identification of the customer address either by Issuer address external reference or by address reference",
            "allOf": [
              {
            "$ref": "#/definitions/AddressIdentifier"
              }
            ]
          },
          "invalid": {
            "type": "boolean",
            "description": "Indicates the address becomes invalid"
          }
        },
        "title": "InvalidAddressResponse"
      },
      "ActivateAddressResponse": {
        "type": "object",
        "properties": {
          "addressIdentifier": {
            "description": "Identification of the customer address either by Issuer address external reference or by address reference",
            "allOf": [
              {
            "$ref": "#/definitions/AddressIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Status of the address (ACTIVE)"
          }
        },
        "title": "ActivateAddressResponse"
      },
      "ActivateCardRequest": {
        "type": "object",
        "required": [
          "activationReasonCode"
        ],
        "properties": {
          "activationReasonCode": {
            "type": "string",
            "description": "Activation reason chosen among the reasons configured for the issuer"
          }
        },
        "title": "ActivateCardRequest"
      },
      "ActivateCardResponse": {
        "type": "object",
        "properties": {
          "cardIdentifier": {
            "description": "Card Identifier",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Card status after card activation request (ACTIVE)"
          },
          "reason": {
            "type": "string",
            "description": "Activation reason provided in the request"
          },
          "activationDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the card has been activated in the system"
          }
        },
        "title": "ActivateCardResponse"
      },
      "AddCardsAccountsRequest": {
        "type": "object",
        "required": [
          "issuerProductExtensionExternalReference"
        ],
        "properties": {
          "issuerProductExtensionExternalReference": {
            "type": "string",
            "description": "The issuer provides the reference of the product extension to be used (a product extension is usually composed of 1 card - 1 account, but other combinations are also possible)."
          },
          "parentAccountIdentifier": {
            "description": "The issuer provides the account reference or the issuer account external reference to attach the new card(s) and/or account(s) created from the product extension to the right account of the existing account hierarchy.\nIf no parent account identifier is provided, then by default the ROOT account is used.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "customers": {
            "description": "The issuer has to provide all new customers (as person) which don't already exist in our system in a dedicated list (customers).\nFor each new customer, the issuer :\n- can provide an unique external reference: whether this external reference is already assigned to an existing customer for this issuer in our system then the contract creation request is denied\n- must provide mandatory fields and a correlation id that can be used in the contract part to assign the customer, not yet created in our system, as contract owner, root or card account owner, cardholder, etc",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestCustomer"
            }
          },
          "legitimacyDocuments": {
            "description": "The issuer can provide the list of legitimacy documents for each cardholder of the contract.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestLegitimacyDocument"
            }
          },
          "accountHierarchy": {
            "description": "The issuer provides data related to each account to be created depending on the product extension.E.g. if the product extension contains 1 card account then data for 1 account has to be provided",
            "allOf": [
              {
            "$ref": "#/definitions/AddCardsAccountsRequestAccountHierarchy"
              }
            ]
          },
          "cardContracts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestCardContract"
            }
          },
          "contractFees": {
            "type": "array",
            "description": "The issuer can replace both default membership fee and account set up fee models for each account (usually card account). The accountIdentifier or accountRequestCorrelationId can be used to identify the account (defined in the data block CreateConsumerContractRequest.Account).",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestContractFee"
            }
          }
        },
        "title": "AddCardsAccountsRequest"
      },
      "AddCardsAccountsRequestAccountHierarchy": {
        "type": "object",
        "description": "The issuer provides data related to each account to be created.",
        "required": [
          "accounts"
        ],
        "properties": {
          "structureType": {
            "type": "string",
            "description": "The issuer can provide this field for e.g. the root account, for information only (no check, no related business process), to indicate if the contract contains a single card only or can have several cards.\nPossible values are:\nFAMILY : the contract can have 1 or several cards\nREGULAR : the contract can have a single card only"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestAccount"
            }
          }
        },
        "title": "AddCardsAccountsRequest.AccountHierarchy"
      },
      "AddCardsAccountsResponse": {
        "x-wl-sensitive-data": true,
        "type": "object",
        "required": [
          "contract",
          "customers"
        ],
        "properties": {
          "contract": {
            "description": "Information related to the contract",
            "allOf": [
              {
            "$ref": "#/definitions/CreateConsumerContractResponseContract"
              }
            ]
          },
          "customers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractResponseCustomer"
            }
          },
          "originalContract": {
            "description": "Represents the original contract data before product change has occured.Conditional field, exists if product change is triggered by adding additional card and account. ",
            "allOf": [
              {
            "$ref": "#/definitions/OriginalContract"
              }
            ]
          },
          "changedContract": {
            "description": "Represents the new contract data after product change has occured.Conditional field, exists if product change is triggered by adding additional card and account.",
            "allOf": [
              {
            "$ref": "#/definitions/ChangedContract"
              }
            ]
          },
          "productChangeInformation": {
            "description": "Represents product change information.Conditional field, exists if product change is triggered by adding aditional card and account.",
            "allOf": [
              {
            "$ref": "#/definitions/ProductChangeInformation"
          }
            ]
          }
        },
        "title": "AddCardsAccountsResponse"
      },
      "AddOnServiceParameter": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value of this add-on service parameter."
          },
          "type": {
            "type": "string",
            "description": "Type of this add-on service parameter."
          },
          "optional": {
            "type": "boolean",
            "description": "Defines if this add-on service parameter is optional or not."
          },
          "reference": {
            "type": "string",
            "description": "Service parameter reference of the add-on"
          }
        },
        "title": "AddOnServiceParameter"
      },
      "AddOnSubscription": {
        "type": "object",
        "properties": {
          "addonReference": {
            "type": "string",
            "description": "Reference of the add-on service."
          },
          "subscriptionDate": {
            "type": "string",
            "description": "Date of subscription to the add-on.",
            "format": "date-time"
          },
          "serviceTypeReference": {
            "type": "string",
            "description": "Reference of the type of add-on service."
          },
          "parameters": {
            "type": "array",
            "description": "List of add-on service parameters",
            "items": {
              "$ref": "#/definitions/AddOnServiceParameter"
            }
          },
          "accountIdentifier": {
            "description": "The identifier of the account on which the subscription has been done",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "cardContractIdentifier": {
            "description": "The identifier of the card contract on which the subscription has been done",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          }
        },
        "title": "AddOnSubscription"
      },
      "Address": {
        "type": "object",
        "required": [
          "addressLabel",
          "addressType"
        ],
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "addressIdentifier": {
            "description": "Unique identifier of the address. See the AddressIdentifier's datatype for a detail description",
            "allOf": [
              {
                "$ref": "#/definitions/AddressIdentifier"
              }
            ]
          },
          "addressVersionIdentifier": {
            "allOf": [
              {
                "$ref": "#/definitions/AddressVersionIdentifier"
              }
            ]
          },
          "addressLabel": {
            "type": "string",
            "example": "MAIN_POSTAL_ADDRESS",
            "description": "example: MAIN_POSTAL_ADDRESS Indicate the class of the address amongst a list of possible values such as MAIN_POSTAL_ADDRESS, SECOND_POSTAL_ADDRESS, HOME_PHONE_NUMBER, PRIVATE_MOBILE_PHONE, PERSONAL_EMAIL. This list of values is shared between WL and the issuer during issuer configuration. \n Every label corresponds to a unique type of address. A customer (person) has at least one MAIN_POSTAL_ADDRESS (mandatory) and a company has at least one HEAD_OFFICE."
          },
          "addressType": {
            "type": "string",
            "example": "POSTAL_MAIL",
            "description": "The type of an address is POSTAL_MAIL, PHONE or E_MAIL",
            "enum": [
              "PHONE",
              "POSTAL_MAIL",
              "E_MAIL"
            ]
          },
          "postalAddress": {
            "description": "Customer Postal Address. This field is mandatory only if AddressType is POSTAL_MAIL. \n Depending on countries, the address format (mainly for line1, line 2, line3, line4 and line5) can have specific conditions such as length restriction. The customer should contact WL to check the address format and have more information.",
            "allOf": [
              {
                "$ref": "#/definitions/MailAddress"
              }
            ]
          },
          "emailAddress": {
            "description": "Customer Email. This field is mandatory only if AddressType is E_MAIL. See the EmailAddress' datatype for the detail list of the attributes.",
            "allOf": [
              {
                "$ref": "#/definitions/EmailAddress"
              }
            ]
          },
          "phone": {
            "description": "Customer Phone details. This field is mandatory only if AddressType is PHONE. See the PhoneNumber's datatype for the detail list of the attributes.",
            "allOf": [
              {
                "$ref": "#/definitions/PhoneNumber"
              }
            ]
          },
          "addressUsages": {
            "type": "array",
            "description": "List of the usages linked to the address if any exists. See the AddressUsage's datatype for the detail list of the attributes (optional)",
            "items": {
              "$ref": "#/definitions/AddressUsage"
            }
          },
          "status": {
            "type": "string",
            "description": "Status of the address (ACTIVE or INACTIVE). If value is not provided, by default 'ACTIVE'"
          },
          "statusDate": {
            "type": "string",
            "description": "If the address is INACTIVE, the date corresponds to the inactivation date.\nIf the address is ACTIVE, the date corresponds to the last activation date.",
            "format": "date-time"
          },
          "startDate": {
            "type": "string",
            "description": "Date when the address starts to be active",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "This attribute represents :\n• in case of a permanent address : the last date the address has been active. This information is computed based on the next future address start date if any exists else this attribute is empty.\n• in case of a temporary address : the end date where this address is active. This end date is mandatory when a temporary address is created.",
            "format": "date-time"
          },
          "invalid": {
            "type": "boolean",
            "description": "Indicates if an address is invalid (by default false).\nThis feature is currently only accurate for the mail address and apply only on the current permanent address.\nIn case a postal address is invalid, this address cannot be used anymore for letters, cards, pin mailers, statement sending. \nThis feature is active only depending on an issuer configuration. ",
            "default": false
          },
          "temporary": {
            "type": "boolean",
            "description": "indicates if the address is a temporary one (by default 'false').\nIn case of a temporary address, the end date is mandatory.",
            "default": false
          }
        },
        "title": "Address"
      },
      "AddressIdentifier": {
        "type": "object",
        "properties": {
          "addressReference": {
            "type": "string",
            "description": "Unique internal identifier computed with a specific algorithm (mandatory)"
          },
          "issuerAddressExternalReference": {
            "type": "string",
            "description": "Unique external identifier provided by the issuer (optional)"
          }
        },
        "title": "AddressIdentifier"
      },
      "BusinessRefTypeValues": {
        "type": "object",
        "properties": {
          "businessRefType": {
            "type": "string",
            "description": "Business reference type to be pushed.\nExample: CONTRACT, CARD_CONTRACT, CARD, ACCOUNT, CUSTOMER, etc"
          },
          "businessRefValues": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Business reference values for a corresponding business reference type.\nExamples of values : card reference, customer reference, account number."
            }
          }
        },
        "required": [
          "businessRefType",
          "businessRefValues"
        ]
      },
      "ContactIdentifier": {
        "type": "object",
        "properties": {
          "contactReference": {
            "type": "string",
            "description": "Contact identifier (unique per company)"
          }
        },
        "title": "ContactIdentifier"
      },
      "AddressUsage": {
        "type": "object",
        "required" : [
          "addressUsageName",
          "serviceCode"
        ],
        "properties": {
          "addressUsageName": {
            "type": "string",
            "example": "STATEMENT_SENDING",
            "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY."
          },
          "entityReference": {
            "type": "string",
            "description": "This corresponds to the application domain of the address. It can be eg a card contract reference, card account reference. It is an optional field.\nIt enables to have the same usage address for the same customer applied to different addresses (one cardholder with 2 card contracts: card delivery address usage is assigned to main postal address for contract A and card delivery address usage is also assigned to office postal address for contract B."
          },
          "serviceCode": {
            "type": "string",
            "example": "ACCOUNT_SERVICE",
            "description": "The Service for which the address usage is defined : CARD_SERVICE, ACCOUNT_SERVICE, …"
          }
        },
        "title": "AddressUsage"
      },
      "AdvertisementFlags": {
        "type": "object",
        "properties": {
          "general": {
            "type": "boolean",
            "description": "General advertisement flag. By default, value is false.\nIf this flag is false, other flags are ignored (email, letter, phone, statement, sms flags)."
          },
          "email": {
            "type": "boolean",
            "description": "Indicates if the email advertisement is enabled (true) or not (false). By default, value is false."
          },
          "letter": {
            "type": "boolean",
            "description": "Indicates if the letter advertisement is enabled (true) or not (false). By default, value is false."
          },
          "phone": {
            "type": "boolean",
            "description": "Indicates if the phone advertisement is enabled (true) or not (false). By default, value is false."
          },
          "statement": {
            "type": "boolean",
            "description": "Indicates if the statement advertisement is enabled (true) or not (false). By default, value is false."
          },
          "sms": {
            "type": "boolean",
            "description": "Indicates if the sms advertisement is enabled (true) or not (false). By default, value is false."
          }
        },
        "description": "Specify possible channels used to provide advertisements",
        "title": "AdvertisementFlags"
      },
      "HierarchyOutgoingCreditTransferFeature": {
        "type": "object",
        "properties": {
          "periodicOct": {
            "type": "boolean",
            "description": "This field indicates if the issuer can override  the  periodic OCT option. \nTo override the option, the reimbursement model attached to the contract must be configured to accept the change of the default choice.\n"
          },
          "periodicOctType": {
            "type": "string",
            "description": "This field indicates the periodic OCT type \nPossibles values:\n- DAILY (OCT can be triggered on a daily basis if account is in credit position)\n- CYCLIC (OCT can be triggered at cycle closure date if account is in credit position).\nIt can be overridden if the reimbursement model accepts the change of the default choice.",
            "enum": [
              "DAILY",
              "CYCLIC"
            ]
          },
          "periodicMaxThreshold": {
            "description": "Threshold amount used for generating the periodic OCT. When the account balance is greater than the threshold, the OCT amount will be equal to the (account credit balance - threshold amount). Ex: threshold is 10.000€ and credit balance is : 15.000€: the OCT amount is 5.000€.\nThe threshold amount can be overridden if the reimbursement model accepts the change of the default threshold.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "octOnContractTerminationAllowed": {
            "type": "boolean",
            "description": "This field indicates the \"OCT on contract termination\" option\nThe option can be modified if it is allowed within the reimbursement model to change the default choice."
          },
          "octOnAccountTerminationAllowed": {
            "type": "boolean",
            "description": "This field indicates the option to generate an OCT when card account is closed\nThe option can be modified if it is allowed within the reimbursement model to change the default choice."
          },
          "octOnContractSuspensionAllowed": {
            "type": "boolean",
            "description": "This field indicates if an Outgoing Credit Transfer is required or not when the contract is suspended.\nThe value is initialized from the product and can be overridden if this is allowed by the product (in reimbursement model)."
          },
          "octOnDemandAllowed": {
            "type": "boolean",
            "description": "This field indicates the \"OCT on demand\" option. \nThe option can be modified if it is allowed within the reimbursement model to change the default choice."
          },
          "octOnDemandLimitType": {
            "type": "string",
            "description": "This field indicates the limit type of the \"OCT on demand\" option.\nPossible values:\n- BALANCE (= a customer can only request an OCT in case of account in credit position)\n- OTB (open-to-buy) (=a customer can request an OCT from its current Open-to-buy (so from its credit limit allowed by the issuer)\nThe limit type can be modified if it is allowed within the reimbursement model.",
            "enum": [
              "OTB",
              "BALANCE"
            ]
          }
        },
        "description": "Specify OctFeature (periodicOct, periodicOctType, periodicOctMaxThreshold, etc.)",
        "title": "HierarchyOutgoingCreditTransferFeature"
      },
      "ModifyHierarchyOutgoingCreditTransferFeature": {
        "type": "object",
        "x-wl-patch-request": true,
        "properties": {
          "periodicOct": {
            "type": "boolean",
            "description": "The issuer can override  the  periodic OCT option, if it is possible within the reimbursement model to change the default choice."
          },
          "periodicOctType": {
            "type": "string",
            "description": "The issuer can override the periodic OCT type if allowed within the reimbursement model.\nPossibles values:\n- DAILY (OCT can be triggered on a daily basis if account is in credit position)\n- CYCLIC (OCT can be triggered at cycle closure date if account is in credit position)",
            "enum": [
              "DAILY",
              "CYCLIC"
            ]
          },
          "periodicMaxThreshold": {
            "description": "The issuer can override the maximum threshold amount used for generating the periodic OCT if the change is allowed within the reimbursement model. When the account balance is greater than the threshold, the OCT amount will be equal to the (account credit balance - threshold amount). Ex: thresold is 10.000€ and credit balance is : 15.000€: the OCT amount is 5.000€.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "octOnContractTerminationAllowed": {
            "type": "boolean",
            "description": "The issuer can override the \"OCT on contract termination\" option if it is allowed within the reimbursement model to change the default choice."
          },
          "octOnAccountTerminationAllowed": {
            "type": "boolean",
            "description": "The issuer can override the option to generate an OCT when card contract closing if it is allowed within the reimbursement model."
          },
          "octOnContractSuspensionAllowed": {
            "type": "boolean",
            "description": "The issuer can enable or disable the Outgoing Credit Transfer generation on contract suspension, if the override of the option is allowed by the product (in reimbursement model)."
          },
          "octOnDemandAllowed": {
            "type": "boolean",
            "description": "The issuer can override the \"OCT on demand\" option if it is allowed within the reimbursement model to change the default choice."
          },
          "octOnDemandLimitType": {
            "type": "string",
            "description": "The issuer can override the limit type of the \"OCT on demand\" option if allowed within the reimbursement model.\nPossible values:\n- BALANCE (= a customer can only request an OCT in case of account in credit position)\n- OTB (open-to-buy) (=a customer can request an OCT from its current Open-to-buy (so from its credit limit allowed by the issuer)",
            "enum": [
              "OTB",
              "BALANCE"
            ]
          }
        },
        "description": "Specify OctFeature (periodicOct, periodicOctType, periodicOctMaxThreshold, etc.)",
        "title": "ModifyHierarchyOutgoingCreditTransferFeature"
      },
      "AccountOutgoingCreditTransferFeature": {
        "type": "object",
        "properties": {
          "periodicOctAllowed": {
            "type": "boolean",
            "description": "This field indicates if the issuer can override  the  periodic OCT option. \nTo override the option, the reimbursement model attached to the contract must be configured to accept the change of the default choice."
          },
          "periodicOctType": {
            "type": "string",
            "description": "This field indicates the periodic OCT type \nPossibles values:\n- DAILY (OCT can be triggered on a daily basis if account is in credit position)\n- CYCLIC (OCT can be triggered at cycle closure date if account is in credit position).\nIt can be overridden if the reimbursement model accepts the change of the default choice.",
            "enum": [
              "DAILY",
              "CYCLIC"
            ]
          },
          "periodicMaxThreshold": {
            "description": "Threshold amount used for generating the periodic OCT. When the account balance is greater than the threshold, the OCT amount will be equal to the (account credit balance - threshold amount). Ex: threshold is 10.000€ and credit balance is : 15.000€: the OCT amount is 5.000€.\nThe threshold amount can be overridden if the reimbursement model accepts the change of the default threshold.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "octOnContractTerminationAllowed": {
            "type": "boolean",
            "description": "This field indicates the \"OCT on contract termination\" option\nThe option can be modified if it is allowed within the reimbursement model to change the default choice."
          },
          "octOnAccountTerminationAllowed": {
            "type": "boolean",
            "description": "This field indicates the option to generate an OCT when card account is closed.\nThe option can be modified if it is allowed within the reimbursement model to change the default choice."
          },
          "octOnContractSuspensionAllowed": {
            "type": "boolean",
            "description": "This field indicates if an Outgoing Credit Transfer is required or not when the contract is suspended.\nThe value is initialized from the product and can be overridden if this is allowed by the product (in reimbursement model)."
          },
          "octOnDemandAllowed": {
            "type": "boolean",
            "description": "This field indicates the \"OCT on demand\" option. \nThe option can be modifed if it is allowed within the reimbursement model to change the default choice."
          },
          "octOnDemandLimitType": {
            "type": "string",
            "description": "This field indicates the limit type of the \"OCT on demand\" option.\nPossible values:\n- BALANCE (= a customer can only request an OCT in case of account in credit position)\n- OTB (open-to-buy) (=a customer can request an OCT from its current Open-to-buy (so from its credit limit allowed by the issuer)\nThe limit type can be modified if it is allowed within the reimbursement model.",
            "enum": [
              "OTB",
              "BALANCE"
            ]
          }
        },
        "description": "Specify OctFeature (periodicOct, periodicOctType, periodicOctMaxThreshold, etc.)",
        "title": "AccountOutgoingCreditTransferFeature"
      },
      "ModifyAccountOutgoingCreditTransferFeature": {
        "type": "object",
        "x-wl-patch-request": true,
        "properties": {
          "periodicOctAllowed": {
            "type": "boolean",
            "description": "The issuer can override the periodic OCT option , if it is possible within the reimbursement model to change the default choice."
          },
          "periodicOctType": {
            "type": "string",
            "description": "The issuer can override the periodic OCT type if allowed within the reimbursement model. \nPossibles values: \n- DAILY (OCT can be triggered on a daily basis if account is in credit position) \n- CYCLIC (OCT can be triggered at cycle closure date if account is in credit position)",
            "enum": [
              "DAILY",
              "CYCLIC"
            ]
          },
          "periodicMaxThreshold": {
            "description": "The issuer can override the maximum threshold amount used for generating the periodic OCT if the change is allowed within the reimbursement model. When the account balance is greater than the threshold, the OCT amount will be equal to the (account credit balance - threshold amount). Ex: thresold is 10.000€ and credit balance is : 15.000€: the OCT amount is 5.000€.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "octOnContractTerminationAllowed": {
            "type": "boolean",
            "description": "The issuer can override the \"OCT on contract termination\" option if it is allowed within the reimbursement model to change the default choice."
          },
          "octOnAccountTerminationAllowed": {
            "type": "boolean",
            "description": "The issuer can override the option to generate an OCT when card contract closing  if it is allowed within the reimbursement model."
          },
          "octOnContractSuspensionAllowed": {
            "type": "boolean",
            "description": "The issuer can enable or disable the Outgoing Credit Transfer generation on contract suspension, if the override of the option is allowed by the product (in reimbursement model)."
          },
          "octOnDemandAllowed": {
            "type": "boolean",
            "description": "The issuer can override the \"OCT on demand\" option if it is allowed within the reimbursement model to change the default choice."
          },
          "octOnDemandLimitType": {
            "type": "string",
            "description": "The issuer can override the limit type of the \"OCT on demand\" option if allowed within the reimbursement model.\nPossible values:\n- BALANCE (= a customer can only request an OCT in case of account in credit position)\n- OTB (open-to-buy) (=a customer can request an OCT from its current Open-to-buy (so from its credit limit allowed by the issuer)",
            "enum": [
              "OTB",
              "BALANCE"
            ]
          }
        },
        "description": "The issuer can override each different  Outgoing Credit Transfer (OCT) options if is allowed within the reimbursement model.",
        "title": "ModifyAccountRequest.AccountOutgoingCreditTransferFeature"
      },
       "ModifyAccountHierarchyOperationStatus": {
        "type": "object",
        "x-wl-patch-request": true,
        "properties": {
           "paymentsBlocking": {
            "type": "boolean",
            "description": "The issuer can block/unblock online payments for all accounts of the account hierarchy."
          },
          "reimbursementsBlocking": {
            "type": "boolean",
            "description": "The issuer can block/unblock online reimbursements for all accounts of the account hierarchy."
          },
          "authorizationsBlocking": {
            "type": "boolean",
            "description": "The issuer can block/unblock authorizations for all accounts of the account hierarchy."
          },
          "blockingReason": {
            "type": "string",
            "description": "If at least one blocking (flag is true) is requested, the blocking reason must be provided (configured at issuer level).Not to be provided if the 3 blocking flags are not requested (flags are false)."
          },
          "comment": {
            "type": "string",
            "description": "The issuer can provide a comment (free text)."
          }
        },
        "description": "The issuer can update blocking information for the account hierarchy.",
        "title": "ModifyAccountRequest.HierarchyOperationStatus"
      },
      "Amount": {
        "type": "object",
        "required": [
          "value",
          "exponent",
          "isoCode"
        ],
        "properties": {
          "value": {
            "type": "integer",
            "format": "int64",
            "description": "Integer amount value. Ex. if it is two hundred euros and 17 cents, then amount value is 20017 (exponent = 2 digits for currency=EUR)"
          },
          "exponent": {
            "type": "integer",
            "format": "int32",
            "description": "Exponent of Amount. Number of decimal digits."
          },
          "isoCode": {
            "type": "string",
            "description": "Currency code of amount\nThe currency in ISO4217 alphabetic format.\nExample: EUR for Euro"
          }
        },
        "title": "Amount"
      },
      "ApiResponseEntityAccount": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/Account"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityAccount"
      },
      "ApiResponseEntityAccountBalance": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/AccountBalance"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityAccountBalance"
      },
      "ApiResponseEntityAccountFutureUpdate": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/AccountFutureUpdate"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityAccountFutureUpdate"
      },
      "ApiResponseEntityActivateAddressResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ActivateAddressResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityActivateAddressResponse"
      },
      "ApiResponseEntityActivateCardResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ActivateCardResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityActivateCardResponse"
      },
      "ApiResponseEntityAddCardsAccountsResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/AddCardsAccountsResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityAddCardsAccountsResponse"
      },
      "ApiResponseEntityAddress": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/Address"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityAddress"
      },
      "ApiResponseEntityBlockAllCardsResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/BlockAllCardsResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityBlockAllCardsResponse"
      },
      "ApiResponseEntityBlockAndReplaceCardResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/BlockAndReplaceCardResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityBlockAndReplaceCardResponse"
      },
      "ApiResponseEntityBlockCardResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/BlockCardResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityBlockCardResponse"
      },
      "ApiResponseEntityCancelCreditTransferResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CancelCreditTransferResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCancelCreditTransferResponse"
      },
      "ApiResponseEntityCancelDirectDebitResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CancelDirectDebitResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCancelDirectDebitResponse"
      },
      "ApiResponseEntityCard": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/Card"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCard"
      },
      "ApiResponseEntityCardContract": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CardContract"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCardContract"
      },
      "ApiResponseEntityCancelCloseCardContractResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CancelCloseCardContractResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCancelCloseCardContractResponse"
      },
      "CancelCloseCardContractResponse": {
        "type": "object",
        "properties": {
          "cardContractIdentifier": {
            "$ref": "#/definitions/CardContractIdentifier"
          }
        },
        "title": "CancelCloseCardContractResponse"
      },
      "ApiResponseEntityCloseCardContractResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CloseCardContractResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCloseCardContractResponse"
      },
      "ApiResponseEntityCloseContractResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CloseContractResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCloseContractResponse"
      },
      "ApiResponseEntitySuspendContractResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/SuspendContractResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntitySuspendContractResponse"
      },
      "ApiResponseEntityCancelContractClosingResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CancelContractClosingResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCancelContractClosingResponse"
      },
      "ApiResponseEntityCancelContractSuspensionResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CancelContractSuspensionResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCancelContractSuspensionResponse"
      },
      "ApiResponseEntityCloseInsuranceContractResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CloseInsuranceContractResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCloseInsuranceContractResponse"
      },
      "ApiResponseEntityContract": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/Contract"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityContract"
      },
      "ApiResponseEntityCloseCorporateContractResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CloseCorporateContractResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCloseCorporateContractResponse"
      },
      "ApiResponseEntityAddCorporateContractEntityResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/AddCorporateContractEntityResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityAddCorporateContractEntityResponse"
      },
      "ApiResponseEntityModifyCorporateContractEntityResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyCorporateContractEntityResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityModifyCorporateContractEntityResponse"
      },
      "ModifyCorporateContractEntityResponse": {
        "type": "object",
        "required": [
          "contractIdentifier",
          "companyEntityExternalReference"
        ],
        "properties": {
          "contractIdentifier": {
            "description":"Identification of thecorporate contract either by Issuer contract external reference or by contract reference",
            "allOf": [
              {
            "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "companyEntityExternalReference": {
            "type": "string",
            "description": "Company entity external reference of the updated corporate contract"
          }
        },
        "title": "ModifyCorporateContractEntityResponse"
      },
      "ApiResponseEntityAddCorporateEmployeeCardsAndAccountsResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/AddCorporateEmployeeCardsAndAccountsResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityAddCorporateEmployeeCardsAndAccountsResponse"
      },
      "ApiResponseEntityAddCorporateVcaServiceCardsAndAccountsResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/AddCorporateVcaServiceCardsAndAccountsResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityAddCorporateVcaServiceCardsAndAccountsResponse"
      },
      "ApiResponseEntityCreateCorporateContractResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateCorporateContractResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateCorporateContractResponse"
      },
      "ApiResponseEntityModifyCorporateEmployeeAccountResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyCorporateEmployeeAccountResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityModifyCorporateEmployeeAccountResponse"
      },
      "ModifyCorporateEmployeeAccountResponse": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "description": "Identification of the updated employee account either by Issuer account external reference or by account reference.",
            "allOf": [
              {
            "$ref": "#/definitions/AccountIdentifier"
          }
            ]
          }
        },
        "title": "ModifyCorporateEmployeeAccountResponse"
      },
      "ModifyCorporateContractRequest": {
        "type": "object",
        "x-wl-patch-request": true,
        "properties": {
          "specificFields": {
            "type": "object",
            "description": "Refer to Contract.specificFields",
            "additionalProperties": {
              "type": "string"
            }
          },
          "corporateContractLevels": {
            "description": "The issuer can modify the description of one or several level(s) of a company organization belonging to the corporate contract.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CorporateContractLevel"
            }
          },
          "postingAccountForMembershipFee": {
            "description": "The issuer can change if the membership fees have to be posted to employee card accounts, intermediate account or to the root (usually paid by the company) as default value for the corporate contract.\nPossible values:\n- ROOT_ACCOUNT \n- CARD_ACCOUNT\n- ENTITY_ACCOUNT",
            "type": "string",
            "enum": [
              "ROOT_ACCOUNT",
              "CARD_ACCOUNT",
              "ENTITY_ACCOUNT"
            ]
          },
          "postingAccountForAccountSetupFee": {
            "description": "The issuer can change if the account setup fees have to be posted to employee card account, intermediate account or to the root (usually paid by the company) as default value for the corporate contract.\nPossible values:\n- ROOT_ACCOUNT \n- CARD_ACCOUNT\n- ENTITY_ACCOUNT",
            "type": "string",
            "enum": [
              "ROOT_ACCOUNT",
              "CARD_ACCOUNT",
              "ENTITY_ACCOUNT"
            ]
          },
          "dispatchCode": {
            "description": "The issuer can modify the default disptach code to be used by the embosser to send cards to the right addressee.",
            "type": "string"
          },
          "logoReference": {
            "description": "The issuer can change the default logo reference to be used for each card issued from this corporate contract.",
            "type": "string"
          },
          "statementDuplicatedForCompany": {
            "description": "The issuer can change if the company receives a duplicate for statement generated by other paying accounts in the corporate contract (true) or not (false).",
            "type": "boolean"
          },
          "hierarchyDefaultResetCreditLimit": {
            "description": "The issuer can indicate, for a Corporate contract only, the default value at contract level to be applied for each account if the Open-to-buy should be reset to its maximum Credit limit at Authorization system side as soon as an account cycle is closed. Of course the amount due (minimum payment amount) is considered as to be repaid by the customer by our solution.",
            "type": "boolean"
          },
          "postingEntityLevelForMembershipFee": {
            "description": "In case postingAccountForMembershipFee= \"ENTITY_ACCOUNT\", then the issuer must provide the corresponding entity level number on which the Membership Fee needs to be posted",
            "type": "integer"
          },
          "postingEntityLevelForAccountSetupFee": {
            "description": "In case postingAccountForAccountSetupFee= \"ENTITY_ACCOUNT\", then the issuer must provide the corresponding entity level number on which the Account Setup Fee needs to be posted",
            "type": "integer"
          }
        },
        "title": "ModifyCorporateContractRequest"
      },
      "ApiResponseEntityModifyCorporateContractResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyCorporateContractResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityModifyCorporateContractResponse"
      },
      "ModifyCorporateContractResponse": {
        "type": "object",
        "required": [
          "contractIdentifier"
        ],
        "properties": {
          "contractIdentifier": {
            "description": "Identification of the updated contract either by Issuer contract external reference or by contract reference",
            "allOf": [
              {
            "$ref": "#/definitions/ContractIdentifier"
          }
            ]
          }
        },
        "title": "ModifyCorporateContractResponse"
      },
      "ApiResponseEntityCorporateContract": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CorporateContract"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCorporateContract"
      },
      "ApiResponseEntityCreateAccountFutureUpdateResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAccountFutureUpdateResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateAccountFutureUpdateResponse"
      },
      "ApiResponseEntityCancelAccountFutureUpdateResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CancelAccountFutureUpdateResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCancelAccountFutureUpdateResponse"
      },
      "ApiResponseEntityCreateAddOnSubscriptionResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddOnSubscriptionResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateAddOnSubscriptionResponse"
      },
      "ApiResponseEntityCreateAddressResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateAddressResponse"
      },
      "ApiResponseEntityCreateAddressAndSubscriptionResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressAndSubscriptionResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateAddressAndSubscriptionResponse"
      },
      "ApiResponseEntityCreateAddressUsageResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressUsageResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateAddressUsageResponse"
      },
      "ApiResponseEntityCreateConsumerContractResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateConsumerContractResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateConsumerContractResponse"
      },
      "ApiResponseEntityCreateCreditTransferResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateCreditTransferResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateCreditTransferResponse"
      },
      "ApiResponseEntityCreateDirectDebitResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateDirectDebitResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateDirectDebitResponse"
      },
      "ApiResponseEntityCreateInsuranceContractResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateInsuranceContractResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateInsuranceContractResponse"
      },
      "ApiResponseEntityCreateInsuranceEventResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateInsuranceEventResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateInsuranceEventResponse"
      },
      "CancelAccountDelinquencyResponse": {
        "type": "object",
        "required": [
          "accountIdentifier",
          "delinquent"
        ],
        "properties": {
          "accountIdentifier": {
            "$ref": "#/definitions/AccountIdentifier"
          },
          "delinquent": {
            "type": "boolean",
            "description": "Indicates the delinquency situation of the account (the account must no more be delinquent (false))"
          }
        },
        "title": "CancelAccountDelinquencyResponse"
      },
      "CancelAccountDelinquencyRequest": {
        "type": "object",
        "properties": {
          "cancelAmountDue": {
            "type": "boolean",
            "description": "Indicates if the amount due (required overdue minimum payment) must be cancelled (true). By default, value is false.",
            "default": false
          }
        },
        "title": "CancelAccountDelinquencyRequest"
      },
      "ApiResponseEntityCancelAccountDelinquencyResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CancelAccountDelinquencyResponse"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityCancelAccountDelinquencyResponse",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityTurnoverInformation": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/TurnoverInformation"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityTurnoverInformation",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityTurnover": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/Turnover"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityTurnover"
      },
      "ApiResponseEntityCreateOperationBalanceAdjustmentResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateOperationBalanceAdjustmentResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateOperationBalanceAdjustmentResponse"
      },
      "ApiResponseEntityCreateOperationFeeResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateOperationFeeResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateOperationFeeResponse"
      },
      "ApiResponseEntityCreateOperationLoadResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateOperationLoadResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateOperationLoadResponse"
      },
      "ApiResponseEntityCreateOperationUnloadResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateOperationUnloadResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateOperationUnloadResponse"
      },
      "ApiResponseEntityCreateOperationPaymentResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateOperationPaymentResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateOperationPaymentResponse"
      },
      "ApiResponseEntityCreateOperationReimbursementResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateOperationReimbursementResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateOperationReimbursementResponse"
      },
      "ApiResponseEntityCreateTanResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateTanResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateTanResponse"
      },
      "ApiResponseEntityCreateTemporaryCreditLimitResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateTemporaryCreditLimitResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateTemporaryCreditLimitResponse"
      },
      "ApiResponseEntityCreditLimit": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreditLimit"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreditLimit"
      },
      "ApiResponseEntityCreditTransfer": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreditTransfer"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreditTransfer"
      },
      "ApiResponseEntityCustomer": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/Customer"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCustomer"
      },
      "ApiResponseEntityCompany": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/Company"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCompany"
      },
      "ApiResponseEntityCustomerHistory": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/CustomerHistory"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCustomerHistory"
      },
      "ApiResponseEntityCompanyHistory": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/CompanyHistory"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCompanyHistory"
      },
      "ApiResponseEntityContractMember": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ContractMember"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityContractMember"
      },
      "ApiResponseEntityCreateCompanyResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateCompanyResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateCompanyResponse"
      },
      "ApiResponseEntityCreateCustomerResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateCustomerResponse"
              }
            ]
          }
        },
        "description": "Create Customer response entity",
        "title": "ApiResponseEntityCreateCustomerResponse"
      },
      "ApiResponseEntityDeactivateAddressResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/DeactivateAddressResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityDeactivateAddressResponse"
      },
      "ApiResponseEntityDeactivateCardResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/DeactivateCardResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityDeactivateCardResponse"
      },
      "ApiResponseEntityDeleteAddressUsageResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/DeleteAddressUsageResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityDeleteAddressUsageResponse"
      },
      "ApiResponseEntityDeleteTemporaryCreditLimitResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/DeleteTemporaryCreditLimitResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityDeleteTemporaryCreditLimitResponse"
      },
      "ApiResponseEntityDeleteVelocityLimitOverride": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/VelocityLimitOverrideIdentifier"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityDeleteVelocityLimitOverride",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityDirectDebit": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/DirectDebit"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityDirectDebit"
      },
      "ApiResponseEntityEmptyEntity": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/EmptyEntity"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityEmptyEntity",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityEventStoreList": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EventStore"
            }
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityEventStoreList",
        "description": "Event store list response entity"
      },
      "ApiResponseEntityFOTokenEventList": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
            "$ref": "#/definitions/FOTokenEvent"
            }
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityFOTokenEventList",
        "description": "FO Token Event list response entity"
      },
      "ApiResponseEntityGetAuthorization": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/GetAuthorizationResponse"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityGetAuthorization",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityGetAuthorizationRestriction": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/GetAuthorizationRestrictionResponse"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityGetAuthorizationRestriction",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityGetAuthorizationRestrictionOverride": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/GetAuthorizationRestrictionOverrideResponse"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityGetAuthorizationRestrictionOverride",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityGetAuthorizationRestrictionOverrideHistory": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AuthorizationRestrictionOverrideHistoryEntry"
            }
          },
          "responseMetadata": {
            "description": "Response metadata",
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntityGetAuthorizationRestrictionOverrideHistory",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityGetAuthorizationRestrictionOverrides": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AuthorizationRestrictionOverride"
            }
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityGetAuthorizationRestrictionOverrides",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityGetAuthorizationRestrictions": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AuthorizationRestriction"
            }
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityGetAuthorizationRestrictions",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityGetAuthorizations": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Authorization"
            }
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityGetAuthorizations",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityGetBusinessCase": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/GetBusinessCaseResponse"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityGetBusinessCase",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityGetBusinessCases": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/BusinessCase"
            }
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityGetBusinessCases",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityGetPinResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/GetPinResponse"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityGetPinResponse",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityGetReserves": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Reserve"
              }
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityGetReserves",
        "description": "Issuer response entity"
      },
      "ApiResponseEntitySetPinResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/SetPinResponse"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntitySetPinResponse",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityGetCvvResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/GetCvvResponse"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityGetCvvResponse",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityValidateCvvResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/ValidateCvvResponse"
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntityValidateCvvResponse",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityCreateEmergencyCardResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateEmergencyCardResponse"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityCreateEmergencyCardResponse",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityGetVelocityLimit": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/GetVelocityLimitResponse"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityGetVelocityLimit",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityGetVelocityLimits": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VelocityLimit"
            }
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityGetVelocityLimits",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityGetVelocityOverride": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/GetVelocityOverrideResponse"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityGetVelocityOverride",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityGetVelocityOverrides": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VelocityLimitOverride"
            }
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityGetVelocityOverrides",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityGetVelocityLimitOverrideHistoryResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VelocityLimitHistory"
            }
          },
          "responseMetadata": {
            "description": "Response metadata",
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntityGetVelocityLimitOverrideHistoryResponse",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityInfo": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/Info"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityInfo"
      },
      "ApiResponseEntityInsuranceContract": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/InsuranceContract"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityInsuranceContract"
      },
      "ApiResponseEntityListAccount": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/Account"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListAccount"
      },
      "ApiResponseEntityListAddonSubscription": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/AddOnSubscription"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListAddonSubscription"
      },
      "ApiResponseEntityListAddress": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/Address"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListAddress"
      },
      "ApiResponseEntityListCard": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/Card"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListCard"
      },
      "ApiResponseEntityListCardContract": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/CardContract"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListCardContract"
      },
      "ApiResponseEntityListCardEvent": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/CardEvent"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListCardEvent"
      },
      "ApiResponseEntityListContract": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/Contract"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListContract"
      },
      "ApiResponseEntityListContractFee": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/ContractFee"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListContractFee"
      },
      "ApiResponseEntityListCreditTransfer": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/CreditTransfer"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListCreditTransfer"
      },
      "ApiResponseEntityListCustomer": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/Customer"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListCustomer"
      },
      "ApiResponseEntityListCompany": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/Company"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListCompany"
      },
      "ApiResponseSearchTransaction": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/Transaction"
            }
          }
        },
        "description": "Issuer transaction response entity",
        "title": "ApiResponseEntityListTransaction"
      },
      "ApiResponseEntityTransactionDetails": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/TransactionDetails"
              }
            ]
          }
        },
        "description": "Transaction Details entity",
        "title": "ApiResponseEntityTransactionDetails"
      },
      "ApiResponseEntityListCorporateContracts": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/CorporateContract"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListCompany"
      },
      "ApiResponseEntityListDirectDebit": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/DirectDebit"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListDirectDebit"
      },
      "ApiResponseEntityGetBankDetails": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "$ref": "#/definitions/GetBankDetailsResponse"
          },
          "responseMetadata": {
            "description": "Response metadata",
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntityGetBankDetails",
        "description": "Issuer response entity"
      },
      "GetBankDetailsResponse": {
        "type": "object",
        "properties": {
          "IBOBankDetails": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/IBOBankDetails"
            }
          },
          "MandateRevisions": {
            "$ref": "#/definitions/MandateRevisions"
          }
        },
        "title": "GetBankDetailsResponse"
      },
      "IBOBankDetails": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string"
          },
          "accountPaymentFeatures": {
            "$ref": "#/definitions/ExtAccountPaymentFeatures"
          },
          "activationDate": {
            "type": "string",
            "format": "date-time"
          },
          "bic": {
            "type": "string"
          },
          "closingDate": {
            "type": "string",
            "format": "date-time"
          },
          "debtorName": {
            "type": "string"
          },
          "iban": {
            "type": "string"
          },
          "issuerAccountExternalReference": {
            "type": "string"
          },
          "issuerId": {
            "type": "string"
          },
          "sepaIndicator": {
            "type": "boolean"
          },
          "sepaMandateData": {
            "$ref": "#/definitions/ExtSepaMandateData"
          }
        },
        "title": "IBOBankDetails"
      },
      "MandateRevisions": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "mandateRevisions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/MandateRevision"
            }
          }
        },
        "title": "MandateRevisions"
      },
      "MandateRevision": {
        "type": "object",
        "properties": {
          "cityOfSignature": {
            "type": "string"
          },
          "contract": {
            "type": "string"
          },
          "creationDate": {
            "type": "string",
            "format": "date"
          },
          "creditorBankAccountInformation": {
            "$ref": "#/definitions/CreditorBankAccountInformation"
          },
          "creditorPersonnalInformation": {
            "$ref": "#/definitions/CreditorPersonalInformation"
          },
          "dateOfSignature": {
            "type": "string",
            "format": "date"
          },
          "debtorAccountInformation": {
            "$ref": "#/definitions/DebtorBankAccountInformation"
          },
          "debtorPersonalInformation": {
            "$ref": "#/definitions/DebtorPersonalInformation"
          },
          "expiryDate": {
            "type": "string",
            "format": "date"
          },
          "lastUpdateDate": {
            "type": "string",
            "format": "date"
          },
          "mandateStatus": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "DELETED",
              "FINALIZED",
              "NEGATIVE_PAIN_009_RESPONSE_RECEIVED",
              "OBSOLETE",
              "PENDING",
              "REVOKED",
              "SENT_TO_DEBTOR",
              "SUSPENDED",
              "WAITING_FOR_DELETION",
              "WAITING_FOR_REVOCATION",
              "WAITING_FOR_SUSPEND",
              "WAITING_FOR_VALIDATION",
              "WAITING_PAIN_009_RESPONSE",
              "WAITING_PAIN_010_RESPONSE",
              "WAITING_PAIN_011_RESPONSE",
              "WAITING_REACHABILITY"
            ]
          },
          "sci": {
            "type": "string"
          },
          "uir": {
            "type": "string"
          },
          "umr": {
            "type": "string"
          }
        },
        "title": "MandateRevision"
      },
      "CreditorBankAccountInformation": {
        "type": "object",
        "properties": {
          "creditorBic": {
            "type": "string",
            "description": "BIC"
          },
          "creditorIban": {
            "type": "string",
            "description": "IBAN"
          }
        },
        "title": "CreditorBankAccountInformation",
        "description": "Creditor Bank Account Information"
      },
      "CreditorPersonalInformation": {
        "type": "object",
        "properties": {
          "addressType": {
            "type": "string",
            "enum": [
              "ADDR",
              "BIZZ",
              "DLVY",
              "HOME",
              "PBOX"
            ]
          },
          "name": {
            "type": "string",
            "description": "Creditor name"
          },
          "postalAddress": {
            "$ref": "#/definitions/PostalAddressParameters"
          }
        },
        "title": "CreditorPersonalInformation",
        "description": "Creditor Personal Information"
      },
      "PostalAddressParameters": {
        "type": "object",
        "properties": {
          "addressLines": {
            "type": "array",
            "description": "Address Lines",
            "items": {
              "type": "string"
            }
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "country": {
            "type": "string",
            "description": "Country code"
          },
          "countrySubDivision": {
            "type": "string",
            "description": "Country Sub Division"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal Code"
          },
          "streetName": {
            "type": "string",
            "description": "Street Name"
          },
          "streetNumber": {
            "type": "string",
            "description": "Street Number"
          }
        },
        "title": "PostalAddressParameters",
        "description": "Postal Address"
      },
      "DebtorPersonalInformation": {
        "type": "object",
        "properties": {
          "addressType": {
            "type": "string",
            "enum": [
              "ADDR",
              "BIZZ",
              "DLVY",
              "HOME",
              "PBOX"
            ]
          },
          "debtorBBAN": {
            "type": "string",
            "description": "BBAN"
          },
          "debtorCountry": {
            "type": "string"
          },
          "debtorFiscalCode": {
            "type": "string",
            "description": "Debtor fiscal code (Mandatory for SEDA Mandate)"
          },
          "email": {
            "type": "string",
            "description": "Email"
          },
          "language": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number of the legal representative"
          },
          "postalAddressParameters": {
            "$ref": "#/definitions/PostalAddressParameters"
          },
          "privateId": {
            "type": "string",
            "description": "Debtor identification"
          },
          "signatoryFiscalCode": {
            "type": "string",
            "description": "Signatory Fiscal Code (Mandatory if Signatory Name is filled out)"
          },
          "signatoryName": {
            "type": "string",
            "description": "Signatory Name (If different than debtor name)"
          }
        },
        "title": "DebtorPersonalInformation",
        "description": "Debtor Personal Information Parameters"
      },
      "DebtorBankAccountInformation": {
        "type": "object",
        "properties": {
          "debtorBic": {
            "type": "string",
            "description": "BIC"
          },
          "debtorIban": {
            "type": "string",
            "description": "IBAN"
          }
        },
        "title": "DebtorBankAccountInformation",
        "description": "Debtor Bank Account Parameters"
      },
      "ExtSepaMandateData": {
        "type": "object",
        "properties": {
          "debtorAddressType": {
            "type": "string"
          },
          "debtorEmail": {
            "type": "string"
          },
          "debtorId": {
            "type": "string"
          },
          "debtorName": {
            "type": "string"
          },
          "debtorPhoneNumber": {
            "type": "string"
          },
          "debtorPostalAddress": {
            "type": "string"
          },
          "mandateContractId": {
            "type": "string"
          },
          "mandateNatureType": {
            "type": "string"
          },
          "mandateSignCity": {
            "type": "string"
          },
          "mandateSignDate": {
            "type": "string",
            "format": "date-time"
          },
          "sepaCreditorId": {
            "type": "string"
          },
          "sepaMandateStatus": {
            "type": "string"
          },
          "sepaMandateUir": {
            "type": "string"
          },
          "sepaMandateUmr": {
            "type": "string"
          }
        },
        "title": "ExtSepaMandateData"
      },
      "ExtAccountPaymentFeatures": {
        "type": "object",
        "properties": {
          "amountDueFixedAmount": {
            "$ref": "#/definitions/ExtWlpAmount"
          },
          "amountDueMinAmount": {
            "$ref": "#/definitions/ExtWlpAmount"
          },
          "greaterOrLessAmountDue": {
            "type": "string"
          }
        },
        "title": "ExtAccountPaymentFeatures"
      },
      "ExtWlpAmount": {
        "type": "object",
        "required": [
          "exponent",
          "isoCode",
          "value"
        ],
        "properties": {
          "exponent": {
            "type": "integer",
            "format": "int32"
          },
          "isoCode": {
            "type": "string"
          },
          "value": {
            "type": "integer",
            "format": "int64"
          }
        },
        "title": "ExtWlpAmount"
      },
      "ApiResponseEntityListAccountFutureUpdate": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/AccountFutureUpdate"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListAccountFutureUpdate"
      },
      "ApiResponseEntityListAccountHistory": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/AccountHistory"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListAccountHistory"
      },
      "ApiResponseEntityListInsuranceContract": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/InsuranceContract"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListInsuranceContract"
      },
      "ApiResponseEntityListIssuer": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/Issuer"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListIssuer"
      },
      "ApiResponseEntityListLegitimacyDocuments": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/LegitimacyDocument"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListLegitimacyDocuments"
      },
      "ApiResponseEntityListOperation": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/Operation"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListOperation"
      },
      "ApiResponseEntityListOrder": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListOrder"
      },
      "ApiResponseEntityListStatement": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/Statement"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListStatement"
      },
      "ApiResponseEntityListTemporaryCreditLimit": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/TemporaryCreditLimit"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListTemporaryCreditLimit"
      },
      "ApiResponseEntityModifyAccountResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyAccountResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityModifyAccountResponse"
      },
      "ApiResponseEntityModifyAccountFutureUpdateResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyAccountFutureUpdateResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityModifyAccountFutureUpdateResponse"
      },
      "ApiResponseEntityModifyAddressResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyAddressResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityModifyAddressResponse"
      },
      "ApiResponseEntityModifyCardContractResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyCardContractResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityModifyCardContractResponse"
      },
      "ApiResponseEntityModifyContractResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Returns the identifier of the updated contract",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyContractResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityModifyContractResponse"
      },
      "ApiResponseEntityModifyContractCustomersAddressesResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyContractCustomersAddressesResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityModifyContractCustomersAddressesResponse"
      },
      "ApiResponseEntityModifyCreditLimitResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyCreditLimitResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityModifyCreditLimitResponse"
      },
      "ApiResponseEntityModifyCustomerResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyCustomerResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityModifyCustomerResponse"
      },
      "ApiResponseEntityModifyCompanyResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyCompanyResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityModifyCompanyResponse"
      },
      "ApiResponseEntityModifyLegitimacyDocumentResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyLegitimacyDocumentResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityModifyLegitimacyDocumentResponse"
      },
      "ApiResponseEntityOperationDetails": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/OperationDetails"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityOperationDetails"
      },
      "ApiResponseEntityOrder": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/Order"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityOrder"
      },
      "ApiResponseEntityReleaseOrderResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ReleaseOrderResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityReleaseOrderResponse"
      },
      "ApiResponseEntityReleaseOrdersResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ReleaseOrdersResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityReleaseOrdersResponse"
      },
      "ApiResponseEntityRemindPINResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/RemindPINResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityRemindPINResponse"
      },
      "ApiResponseEntityReorderPINResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ReorderPINResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityReorderPINResponse"
      },
      "ApiResponseEntityReplaceCardResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ReplaceCardResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityReplaceCardResponse"
      },
      "ApiResponseEntityReprintStatementResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ReprintStatementResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityReprintStatementResponse"
      },
      "ApiResponseEntityReverseOperationBalanceAdjustmentResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ReverseOperationBalanceAdjustmentResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityReverseOperationBalanceAdjustmentResponse"
      },
      "ApiResponseEntityReverseOperationFeeResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ReverseOperationFeeResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityReverseOperationFeeResponse"
      },
      "SearchAuthorizationRestrictionRequest": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "includeFutureRestrictions": {
            "type": "boolean"
          }
        },
        "title": "SearchAuthorizationRestrictionRequest"
      },
      "ApiResponseEntitySearchAuthorizationRestrictionResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
            "$ref": "#/definitions/SearchAuthorizationRestrictionResponse"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
            "$ref": "#/definitions/ResponseMetadata"
          }
            ]
          }
        },
        "title": "ApiResponseEntitySearchAuthorizationRestrictionResponse",
        "description": "Issuer response entity"
      },
      "SearchAuthorizationRestrictionResponse": {
        "type": "object",
        "properties": {
          "authorizationRestrictions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AuthorizationRestrictionWithOverrides"
            }
          }
        },
        "title": "SearchAuthorizationRestrictionResponse"
      },
      "AuthorizationRestrictionWithOverrides": {
        "type": "object",
        "properties": {
          "activeOverrides": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AuthorizationRestrictionOverride"
            }
          },
          "authorizationRestrictionIdentifier": {
            "$ref": "#/definitions/AuthorizationRestrictionIdentifier"
          },
          "conditionCheck": {
            "type": "boolean"
          },
          "conditionCheckOrigin": {
            "type": "string"
          },
          "conditionParameters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "conditionParametersOrigin": {
            "type": "string"
          },
          "futureOverrides": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AuthorizationRestrictionOverride"
            }
          },
          "name": {
            "type": "string"
          }
        },
        "title": "AuthorizationRestrictionWithOverrides"
      },
      "ApiResponseEntityReverseOperationPaymentResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ReverseOperationPaymentResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityReverseOperationPaymentResponse"
      },
      "ApiResponseEntityStatement": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/Statement"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityStatement"
      },
      "ApiResponseEntityUnblockAllCardsResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/UnblockAllCardsResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityUnblockAllCardsResponse"
      },
      "ApiResponseEntityUnblockCardResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/UnblockCardResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityUnblockCardResponse"
      },
      "ApiResponseEntityCreateDisputeResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateDisputeResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateDisputeResponse"
      },
      "ApiResponseEntityDispute": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/Dispute"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityDispute"
      },
      "ApiResponseEntityCardBlockingInformation": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata",
          "data"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "$ref": "#/definitions/CardBlockingInformation"
          }
        },
        "title": "ApiResponseEntityCardBlockingInformation"
      },
      "ApiResponseEntityModifyCardBlockingInformationResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "$ref": "#/definitions/ModifyCardBlockingInformationResponse"
          }
        },
        "title": "ApiResponseEntityModifyCardBlockingInformationResponse"
      },
      "ApiResponseEntityListDispute": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/Dispute"
            }
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityListDispute"
      },
      "Authorization": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "$ref": "#/definitions/AccountIdentifier"
          },
          "approvalCode": {
            "type": "string",
            "description": "maxLength: 10\nCode computed at time of authorization and returned to requestor in case of an approval."
          },
          "authorizationBusinessCaseIdentifier": {
            "$ref": "#/definitions/AuthorizationBusinessCaseIdentifier"
          },
          "authorizationIdentifier": {
            "$ref": "#/definitions/AuthorizationIdentifier"
          },
          "businessCaseType": {
            "type": "string",
            "description": "examples: List [ \"FinancialRequest\", \"FinancialVerification\", \"AccountVerification\", \"BalanceEnquiry\", \"StatementEnquiry\", \"PinChange\", \"PinUnblock\", \"PickUp\", \"CardReturn\", \"Reconciliation\", \"ReserveUpdate\", \"ReserveExpiry\", \"CardFileOperation\", \"TokenLifeCycleEvent\", \"Other\", \"Unknown\" ]\nThis value is the same for all transactions belonging to the same business case. "
          },
          "cardAcceptorCity": {
            "type": "string",
            "description": "maxLength: 60\nCity the acceptor is resident (e.g. Frankfurt)."
          },
          "cardAcceptorCountry": {
            "type": "string",
            "description": "minLength: 3\nmaxLength: 3\nISO 3166 numeric country code of the acceptor. \nExample: 076 = Brazil."
          },
          "cardAcceptorName": {
            "type": "string",
            "description": "maxLength: 50\nThis field is not strictly defined and therefore variations are possible.\nUsually it is the merchant name as known to the cardholder.\nFor ATMs it could be the location or the branch number. "
          },
          "cardReference": {
            "type": "string",
            "description": "minLength: 1\nmaxLength: 100\nCard Reference from IBO."
          },
          "cardScheme": {
            "type": "string",
            "description": "examples: List [ \"VISA\", \"MasterCard\", \"Diners\", \"Amex\", \"JCB\", \"UnionPay\", \"RuPay\", \"Eftpos\", \"Twint\", \"Alipay\", \"WeChatPay\", \"Payconiq\", \"PayPal\", \"Other\", \"Unknown\" ]\nIndicates the card scheme to which the card belongs to."
          },
          "cashbackAmount": {
            "description": "maximum: 1000000000000000000\nPortion of EnquiredAmount dedicated to cashback. The sign is the same as the one of EnquiredAmount.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "cashbackBillingAmount": {
            "description": "maximum: 1000000000000000000\nSimilar to CashbackAmount but in billing (cardholder) currency. ",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "comment": {
            "type": "string",
            "description": "maxLength: 255\ntextual remark given when transaction was triggered. "
          },
          "declineReason": {
            "type": "string",
            "description": "Examples: List [ \"CardBlocked\", \"FraudSuspected\", \"Cvv2Missing\", \"TechnicalError\", \"OverLimit\", \"OverUsageLimit\", \"OverCreditLimit\", \"Cvv2Wrong\", \"CvvWrong\", \"CavvWrong\", \"CardUnknown\", \"CardExpired\", \"PinWrong\", \"PinTriesOverLimit\", \"PinTriesAlmostOverLimit\", \"RestrictionViolated\", \"ArqcWrong\", \"TxnNotAllowed\", \"MerchantUnknown\", \"ReplyTimeout\", \"Other\", \"Unknown\" ]"
          },
          "declined": {
            "type": "boolean",
            "description": "Indicates whether the transaction was declined or approved."
          },
          "deltaAmount": {
            "description": "maximum: 1000000000000000000\nIncrease or decrease from the old to the new total amount of business case in transaction (acceptor) currency.\nThat is: New TotalAmount = Old TotalAmount + DeltaAmount. ",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "deltaBillingAmount": {
            "description": "maximum: 1000000000000000000\nSimilar to DeltaAmount but in billing (cardholder) currency. ",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "enquiredAmount": {
            "description": "maximum: 1000000000000000000\nRequested amount in transaction (acceptor) currency. A positive value is a debit for the cardholder and a credit for the acceptor.\nWhereas a negative value is a credit for the cardholder and a debit for the acceptor.\nA partial approval (including purchase only) can be detected by comparing EnquiredAmount with ApprovedAmount.\nIn case they are different it is a partial approval. ",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "enquiredBillingAmount": {
            "description": "maximum: 1000000000000000000\nSimilar to EnquiredAmount but in billing (cardholder) currency. ",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "entryMode": {
            "type": "string",
            "description": "Examples: List [ \"KeyEntry\", \"Magstripe\", \"Chip\", \"ContactlessMagstripe\", \"ContactlessChip\", \"BarCode\", \"Ocr\", \"File\", \"AutoEntry\", \"Other\", \"Unknown\" ]\nIndicates the way the card data was captured."
          },
          "environmentType": {
            "type": "string",
            "description": "Examples: List [ \"POI\", \"MailOrder\", \"PhoneOrder\", \"ECommerce\", \"Voice\", \"Other\", \"Unknown\" ]\nIndicates the environment in which the transaction took place."
          },
          "financialType": {
            "type": "string",
            "description": "Examples: List [ \"Cash\", \"CashRefund\", \"QuasiCash\", \"QuasiCashRefund\", \"Purchase\", \"Refund\", \"Load\", \"Unload\", \"FundsTransferCredit\", \"FundsTransferDebit\", \"OtherCredit\", \"OtherDebit\", \"Deposit\", \"DepositRefund\", \"Unknown\" ]\nProvides more details on the operation in case BusinessCaseType is FinancialRequest or FinancialVerification.This value is the same for all transactions belonging to the same financial business case. "
          },
          "issuerId": {
            "type": "string",
            "description": "Not used, will be removed"
          },
          "mappedSecurityTypeId": {
            "type": "string",
            "description": "Not used, will be removed"
          },
          "maskedPan": {
            "type": "string",
            "description": "maxLength: 28\nMasked card number (PAN). Only the first 6 and the last 4 digits are visible. All other digits are replaced by a hash character.\nAbsent if the card number is in scope of PCI and the interface is configured for suppressing the masked card number."
          },
          "merchantCategoryCode": {
            "type": "string",
            "description": "maxLength: 4\nMCategory code assigned to the acceptor (MCC)."
          },
          "onPremisesOfAcceptor": {
            "type": "boolean",
            "description": "Examples: List [ \"OnPremisesOfAcceptor\", \"OffPremisesOfAcceptor\", \"OnPremisesOfCardholder\", \"OffPremisesOfCardholder\", \"Other\", \"Unknown\" ]\nIndicates the location of the terminal"
          },
          "onlinePinCheckResult": {
            "type": "string",
            "description": "Examples: List [ \"Correct\", \"Wrong\", \"Unable\", \"Other\", \"Unknown\" ]"
          },
          "openToBuy": {
            "description": "maximum: 1000000000000000000\nAvailable line of the cardholder after transaction completion in billing currency. ",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "operationDate": {
            "type": "string",
            "format": "date-time",
            "description": "minLength: 14\nmaxLength: 14\nDate and time at which the transaction took place. \nThe format is YYYYMMDDhhmmss and the time zone is the one of the merchant. "
          },
          "pan": {
            "type": "string",
            "description": "maxLength: 28\nClear card number (PAN).\nAbsent if the card number is in scope of PCI and the interface is configured for suppressing the clear card number."
          },
          "panExpiryDate": {
            "type": "string",
            "description": "minLength: 6\nmaxLength: 6\nExpiry date of card/plastic in the format YYYYMM.It is only guaranteed that the string consists of decimal digits."
          },
          "panReference": {
            "type": "string",
            "description": "maxLength: 100\nAlternative card number, coming from IBO.\nThis card number is optionally used by WLP FO instead of the actual card number (PAN) when communicating with external systems."
          },
          "panSequenceNumber": {
            "type": "string",
            "description": "maximum: 9999\nSequence number of card. "
          },
          "reserveAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nReserved amount in transaction (acceptor) currency of initial authorization. \nA positive value is a debit for the cardholder and a credit for the acceptor whereas a negative value is a credit for the cardholder and a debit for the acceptor. ",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "resultCode": {
            "type": "string",
            "description": "maxLength: 20\nFinal and detailed result code of transaction. Any automated evaluation of this information has to consider that new result codes are introduced often and even existing ones can disappear or change.\nTherefore this data element should be used for information purpose only. "
          },
          "resultDescription": {
            "type": "string",
            "description": "maxLength: 300\nEnglish text explaining the meaning of ResultCode."
          },
          "resultType": {
            "type": "string",
            "description": "Approval (transaction approved),Decline (transaction refused),Referral (transaction refused),PickUp (transaction refused),Other (transaction refused). "
          },
          "securityTypeId": {
            "type": "integer",
            "format": "int32",
            "description": "maximum: 999999999\nInternal unique identifier of security type in WLP FO. "
          },
          "securityTypeName": {
            "type": "string",
            "description": "maxLength: 100\nEnglish text explaining SecurityTypeId."
          },
          "standIn": {
            "type": "boolean",
            "description": "Indicates whether WLP FO has stood in for the switch-out peer (request) or whether the transaction is managed in store-and-forward mode towards the switch-out peer (advice).\nThis field is only present if the field SwitchOutPeerId is present.  "
          },
          "surchargeAmount": {
            "description": "maximum: 1000000000000000000\nPortion of EnquiredAmount dedicated to surcharge imposed by the acceptor or the acquirer.\nThe sign is the same as the one of EnquiredAmount.  ",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "surchargeBillingAmount": {
            "description": "maximum: 1000000000000000000\nSimilar to SurchargeAmount but in billing (cardholder) currency.  ",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "terminalId": {
            "type": "string",
            "description": "maxLength: 20\nId of terminal."
          },
          "terminalType": {
            "type": "string",
            "description": "Examples: List [ \"Attended\", \"Atm\", \"PetrolPump\", \"Adm\", \"LimitedAmountAdm\", \"Mobile\", \"InFlight\", \"ChargingStation\", \"Other\", \"Unknown\" ]\nIndicates the type of the terminal."
          },
          "totalAmount": {
            "description": "maximum: 1000000000000000000\nOverall reservation/authorization (if capturing is not finalized) or capture amount (if capturing is finalized) of business case in transaction (acceptor) currency after transaction completion. \nA positive value is a debit for the cardholder and a credit for the acceptor.\nWhereas a negative value is a credit for the cardholder and a debit for the acceptor.  ",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "totalBillingAmount": {
            "description": "maximum: 1000000000000000000\nSimilar to TotalAmount but in billing (cardholder) currency.  ",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "transactionDate": {
            "type": "string",
            "description": "minLength: 23\nmaxLength: 23\nTime and date at which the transaction took place. \nThe format is 2012-12-31T22:00:00.000 and the time zone is the one of the merchant. \nIt is only guaranteed that the string consists of decimal digits. \nBut it is not ensured the value is valid. For example the month could be outside of the range from 01 to 12."
          },
          "transactionSubType": {
            "type": "string",
            "description": "Examples: List [ \"Request\", \"Advice\", \"Other\", \"Unknown\" ]\nIndicates the sub-type of the performed operation for some  Transaction types."
          },
          "transactionType": {
            "type": "string",
            "description": "Examples: List [ \"Authorization\", \"Reversal\", \"Confirmation\", \"Rollback\", \"ReserveUpdate\", \"ReserveExpiry\", \"Other\", \"Unknown\" ]\nIndicates the type of the performed operation for some of the listed BusinessCaseType values."
          },
          "transactionTypeId": {
            "type": "string",
            "description": "maximum: 999999999\nInternal unique identifier of transaction type in WLP FO."
          },
          "transactionTypeName": {
            "type": "string",
            "description": "maxLength: 100\nEnglish text explaining TransactionTypeId."
          },
          "velocityLimitChecks": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VelocityLimitCheck"
            }
          }
        },
        "title": "Authorization"
      },
      "AuthorizationBusinessCaseIdentifier": {
        "type": "object",
        "required": [
          "businessCaseId"
        ],
        "properties": {
          "businessCaseId": {
            "type": "string",
            "description": "Business case to which the transaction belongs.\nThe provided information reflects its status after transaction completion.\nA business case is a group of transactions which logically belong together (e.g. original transaction and reversal of original transaction)"
          }
        },
        "title": "AuthorizationBusinessCaseIdentifier"
      },
      "AuthorizationIdentifier": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "minLength: 18\nmaxLength: 18\nUnique identifier of notified transaction in WLP FO. "
          },
          "issuerExternalAuthorizationReference": {
            "type": "string",
            "description": "Issuer external authorization reference"
          }
        },
        "title": "AuthorizationIdentifier"
      },
      "AuthorizationRestriction": {
        "type": "object",
        "properties": {
          "authorizationRestrictionIdentifier": {
            "$ref": "#/definitions/AuthorizationRestrictionIdentifier"
          },
          "conditionCheck": {
            "type": "boolean",
            "description": "Overrides the default configured for the corresponding restriction attribute (see configuration entity explanations). In case JSON null is provided then the default becomes effective."
          },
          "conditionCheckOrigin": {
            "type": "string",
            "description": "Indicates from which level ConditionCheck has been taken. Possible values: Default, Exception, Override, Other."
          },
          "conditionParameters": {
            "type": "array",
            "description": "Overrides the default configured for the corresponding restriction attribute. An item must not have leading or trailing spaces. Moreover it must not contain any comma. In case JSON null is provided then the default becomes effective.",
            "items": {
              "type": "string"
            }
          },
          "conditionParametersOrigin": {
            "type": "string",
            "description": "Indicates from which level ConditionItems has been taken. Possible values: Default, Exception, Override, Other.\nOnly present in case ConditionParameters is present."
          },
          "issuerId": {
            "type": "string",
            "description": "Not used, will be removed."
          },
          "name": {
            "type": "string",
            "description": "minLength: 1\nDescriptive text for the restriction. The caller should be forward compatible regarding the length of this field. The caller should at least support 50 characters length."
          }
        },
        "title": "AuthorizationRestriction"
      },
      "AuthorizationRestrictionIdentifier": {
        "type": "object",
        "properties": {
          "authorizationRestrictionReference": {
            "type": "string",
            "description": "minLength: 1\nmaxLength: 60\nIdentifies the restriction."
          }
        },
        "title": "AuthorizationRestrictionIdentifier"
      },
      "AuthorizationRestrictionOverride": {
        "type": "object",
        "properties": {
          "activationEndTime": {
            "type": "string",
            "example": "2020-07-28T10:13:15.421Z",
            "description": "Last point in time at which the override will be considered. Has to be later than ActivationStartTime. Can be present without ActivationStartTime. If not provided the override will be taken into account forever."
          },
          "activationStartTime": {
            "type": "string",
            "example": "2020-07-28T10:13:15.421Z",
            "description": "First point in time at which the override will be considered. Has to be before ActivationEndTime. Can be present without ActivationEndTime. If not provided the override will be taken into account immediately."
          },
          "authorizationRestrictionOverrideIdentifier": {
            "$ref": "#/definitions/AuthorizationRestrictionOverrideIdentifier"
          },
          "conditionCheck": {
            "type": "boolean",
            "description": "Overrides the default configured for the corresponding restriction attribute (see configuration entity explanations). In case JSON null is provided then the default becomes effective."
          },
          "conditionParameters": {
            "type": "array",
            "description": "Overrides the default configured for the corresponding restriction attribute. An item must not have leading or trailing spaces. Moreover it must not contain any comma. In case JSON null is provided then the default becomes effective.",
            "items": {
              "type": "string"
            }
          },
          "defaultAuthorizationRestrictionReference": {
            "$ref": "#/definitions/AuthorizationRestrictionIdentifier"
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the override is still present or has been deleted."
          },
          "issuerId": {
            "type": "string",
            "description": "Not used, will be removed."
          },
          "priority": {
            "type": "string",
            "description": "minimum: 0\nmaximum: 9999\nIn case multiple overrides with overlapping activation times are existing this information is used to resolve this situation by applying the overrides one by one starting with the one with lowest priority. The priority needs to be unique across all overrides associated with a restriction and an account. Required field when inserting."
          }
        },
        "title": "AuthorizationRestrictionOverride"
      },
      "AuthorizationRestrictionOverrideHistoryEntry": {
        "type": "object",
        "required": [
          "changeTime"
        ],
        "properties": {
          "activationEndTime": {
            "type": "string",
            "description": "First point in time at which the override will be considered. If not provided the override will be taken into account immediately.\nDate Time format:  DD/MM/YYYY"
          },
          "activationStartTime": {
            "type": "string",
            "description": "First point in time at which the override will be considered. If not provided the override will be taken into account immediately.\nDate Time format:  DD/MM/YYYY \n"
          },
          "changeTime": {
            "type": "string",
            "description": "Time when the modification has been performed. UTC time zone.\nDate Time format: yyyy-MM-dd’T’HH:mm:ssZ \n"
          },
          "changeType": {
            "type": "string"
          },
          "conditionCheck": {
            "type": "boolean"
          },
          "conditionParameters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          }
        },
        "title": "AuthorizationRestrictionOverrideHistoryEntry"
      },
      "AuthorizationRestrictionOverrideIdentifier": {
        "type": "object",
        "properties": {
          "authorizationRestrictionOverrideReference": {
            "type": "string",
            "description": "minLength: 1\nmaxLength: 100\nIdentifies the restriction override which has to be replaced. Can be absent when inserting. In such a case, WLP FO will generate the reference."
          }
        },
        "title": "AuthorizationRestrictionOverrideIdentifier"
      },
      "BadGatewayErrorApiResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/BadGatewayResponseMetadata"
              }
            ]
          }
        },
        "title": "BadGatewayErrorApiResponse",
        "description": "Issuer response entity"
      },
      "BadGatewayResponseMetadata": {
        "type": "object",
        "required": [
          "correlationId",
          "responseDateTime",
          "statusCode",
          "statusMessage"
        ],
        "properties": {
          "correlationId": {
            "type": "string",
            "example": 12,
            "description": "Wall clock time required from service to generate the response"
          },
          "responseDateTime": {
            "type": "string",
            "example": "format:yyyy-MM-dd'T'HH:mm:ss.SSSZ",
            "description": "Timestamp when response date was generated"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "example": 502,
            "description": "HTTP status code"
          },
          "statusMessage": {
            "type": "string",
            "example": "Bad Gateway",
            "description": "Executed REST API status message"
          }
        },
        "title": "BadGatewayResponseMetadata"
      },
      "BadRequestErrorApiResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/BadRequestResponseMetadata"
              }
            ]
          }
        },
        "title": "BadRequestErrorApiResponse",
        "description": "Issuer response entity"
      },
      "BadRequestResponseMetadata": {
        "type": "object",
        "required": [
          "correlationId",
          "responseDateTime",
          "statusCode",
          "statusMessage"
        ],
        "properties": {
          "correlationId": {
            "type": "string",
            "example": 12,
            "description": "Wall clock time required from service to generate the response"
          },
          "responseDateTime": {
            "type": "string",
            "example": "format:yyyy-MM-dd'T'HH:mm:ss.SSSZ",
            "description": "Timestamp when response date was generated"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "example": 400,
            "description": "HTTP status code"
          },
          "statusMessage": {
            "type": "string",
            "example": "Bad request",
            "description": "Executed REST API status message"
          }
        },
        "title": "BadRequestResponseMetadata"
      },
      "BlockAllCardsRequest": {
        "type": "object",
        "properties": {
          "pan": {
            "type": "string",
            "description": "The issuer can provide the PAN to block all the cards having this PAN.\nIf both PAN and PAN reference are provided, the cards blocking will be done only on the PAN and the PAN reference will be ignored."
          },
          "panReference": {
            "type": "string",
            "description": "The issuer can provide the PAN reference to block all the cards having this PAN reference.\nIf both PAN and PAN reference are provided, the cards blocking will be done only on the PAN and the PAN reference will be ignored."
          },
          "blockingReason": {
            "type": "string",
            "description": "The blocking reason must be provided if the card is not already blocked or temporary blocked with a scheduled information present on the card and without a new scheduled blocking request, otherwise it is optional."
          },
          "blockingReasonDetail": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.blockingReasonDetail"
          },
          "lostStolenDate": {
            "type": "string",
            "format": "date-time",
            "description": "This date can be provided in addition to the blocking reason if the card is blocked in a context of loss/theft (usually mandatory as per issuer configuration). \nThe date will be ignored if the provided blocking reason is not requiring it."
          },
          "lossPlace": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.lossPlace"
          },
          "lastUsageDate": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to CardBlockingInformation.lastUsageDate\nThe Last Usage Date must not be later than current date."
          },
          "lastUsagePlace": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.lastUsagePlace"
          },
          "lossCircumstances": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.lossCircumstances"
          },
          "lossReportedBy": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.lossReportedBy"
          },
          "lossReportedVia": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.lossReportedVia"
          },
          "fraudCode": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.fraudCode"
          },
          "lossCountry": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.lossCountry"
          },
          "contactData": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.contactData"
          },
          "pinCompromised": {
            "type": "boolean",
            "description": "Refer to CardBlockingInformation.pinCompromised"
          },
          "customerRequestingBlockDate": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to CardBlockingInformation.customerRequestingBlockDate"
          },
          "transferEffectiveDate": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to CardBlockingInformation.transferEffectiveDate"
          },
          "noReplacementReason": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.noReplacementReason"
          },
          "comment": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.comment"
          },
          "waiveFee": {
            "type": "boolean",
            "description": "Indicates if the configured fee (if any) is waived (true) or not (false) while blocking card.\nBy default is false.",
            "default": false
          },
          "cppFlag": {
            "type": "boolean",
            "description": "DEPRECATED",
            "default": false
          },
          "fraudProcess": {
            "type": "string",
            "description": "Fraud process which leads to card blocking.\n\t\t\t\t\tPossible values : \n\t\t\t\t•CPP : the card is in CCP list\n\t\t\t\t•TFI : Fraud detected for a single card\n\t\t\t\t•MBA : Fraud detected for several cards (Mass action)"
          },
          "scheduledCardBlockingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the permanent card blocking is scheduled"
          },
          "scheduledCardBlockingDelay": {
            "type": "integer",
            "description": "Delay in calendar days used to block the card in the future.\nIt has to be provided if a default delay is not configured or if the default delay is overridden.\nIf the card remains active, the scheduled permanent blocking reason is provided in blockingReason."
          },
          "scheduledCardBlockingReason": {
            "type": "string",
            "description": "Reason for scheduled permanent blocking\nValues =\nFRAUD_CPP or FRAUD_TFI (permanent blocking)\nPermanent blocking reasons used context of loss/theft are not allowed.\nDue to system logic, for current API the value of this field can be for permanent blocking only and can be set if the blockingReason attribute value is set to temporary blocking reason.\nIf the card remains active with a scheduled permanent blocking, this field is empty and the scheduled permanent blocking reason is provided in blockingReason."
          },
          "transactionId": {
            "type": "string",
            "description": "Relevant in the context of Fraud detection.\nIndicates the transactionId of the suspicious transaction that has triggered the card blocking."
          },
          "cancelScheduledCardBlocking": {
            "type": "boolean",
            "description": "If the card is ACTIVE or TEMPORARY BLOCKED and a scheduled information is already present on the card (scheduled permanent blocking):\n- a scheduled card blocking cancellation can be requested by providing the flag cancelScheduledCardBlocking to true.\nIn this case, the fields scheduledCardBlockingDelay, scheduledCardBlockingDate and scheduledCardBlockingReason must not be provided, otherwise the request is rejected\n- if a scheduled card blocking cancellation is not requested (the flag cancelScheduledCardBlocking is not provided or set to false).\nIn this case : \n* If a new scheduled permanent blocking is requested, the field scheduledCardBlockingDelay or scheduledCardBlockingDate must be provided if the delay is not yet reached. The field scheduledCardBlockingReason can optionally be provided if the card is temporary blocked.\n* If a new temporary blocking is requested, the field scheduledCardBlockingDelay,  scheduledCardBlockingDate, scheduledCardBlockingReason must not be provided.",
            "default": false
          }
        },
        "title": "BlockAllCardsRequest"
      },
      "BlockAllCardsResponse": {
        "type": "object",
        "required": [
          "cards"
        ],
        "properties": {
          "cards": {
            "type": "array",
            "description": "List of cards and associated data",
            "items": {
              "$ref": "#/definitions/BlockAllCardsResponseCard"
            }
          }
        },
        "title": "BlockAllCardsResponse"
      },
      "BlockAllCardsResponseCard": {
        "type": "object",
        "required": [
          "cardIdentifier",
          "status",
          "blockingReason",
          "cardBlockingDateTime"
        ],
        "properties": {
          "cardIdentifier": {
            "description": "Refer to Card.cardIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Refer to Card.status"
          },
          "blockingReason": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.blockingReason"
          },
          "blockingReasonDetail": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.blockingReasonDetail"
          },
          "cardBlockingDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to CardBlockingInformation.cardBlockingDateTime"
          }
        },
        "title": "BlockAllCardsResponse.Card"
      },
      "BlockAndReplaceCardRequest": {
        "type": "object",
        "required": [
          "blockCardRequest",
          "replaceCardRequest"
        ],
        "properties": {
          "blockAllCardsWithSamePan": {
            "type": "boolean",
            "description": "This flag indicates if all cards having the same PAN as the card in input have to be blocked as well (true).\nThe default value is false (only the card in the input is blocked).",
            "default": false
          },
          "blockCardRequest": {
            "description": "Refer to BlockCardRequest",
            "allOf": [
              {
                "$ref": "#/definitions/BlockCardRequest"
              }
            ]
          },
          "replaceCardRequest": {
            "description": "Refer to ReplaceCardRequest",
            "allOf": [
              {
                "$ref": "#/definitions/ReplaceCardRequest"
              }
            ]
          }
        },
        "title": "BlockAndReplaceCardRequest"
      },
      "BlockAndReplaceCardResponse": {
        "type": "object",
        "required": [
          "blockCardResponse",
          "replaceCardResponse"
        ],
        "properties": {
          "blockCardResponse": {
            "description": "Refer to BlockCardResponse",
            "allOf": [
              {
                "$ref": "#/definitions/BlockCardResponse"
              }
            ]
          },
          "replaceCardResponse": {
            "description": "Refer to ReplaceCardResponse",
            "allOf": [
              {
                "$ref": "#/definitions/ReplaceCardResponse"
              }
            ]
          }
        },
        "title": "BlockAndReplaceCardResponse"
      },
      "BlockCardRequest": {
        "type": "object",
        "properties": {
          "blockingReason": {
            "type": "string",
            "description": "The blocking reason must be provided if the card is not already blocked or temporary blocked with a scheduled information present on the card and without a new scheduled blocking request, otherwise it is optional."
          },
          "blockingReasonDetail": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.blockingReasonDetail"
          },
          "lostStolenDate": {
            "type": "string",
            "format": "date-time",
            "description": "This date can be provided in addition to the blocking reason if the card is blocked in a context of loss/theft (usually mandatory as per issuer configuration). \nThe date will be ignored if the provided blocking reason is not requiring it."
          },
          "lossPlace": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.lossPlace"
          },
          "lastUsageDate": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to CardBlockingInformation.lastUsageDate\nThe Last Usage Date must not be later than current date."
          },
          "lastUsagePlace": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.lastUsagePlace"
          },
          "lossCircumstances": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.lossCircumstances"
          },
          "lossReportedBy": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.lossReportedBy"
          },
          "lossReportedVia": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.lossReportedVia"
          },
          "fraudCode": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.fraudCode"
          },
          "lossCountry": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.lossCountry"
          },
          "contactData": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.contactData"
          },
          "pinCompromised": {
            "type": "boolean",
            "description": "Refer to CardBlockingInformation.pinCompromised"
          },
          "customerRequestingBlockDate": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to CardBlockingInformation.customerRequestingBlockDate"
          },
          "transferEffectiveDate": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to CardBlockingInformation.transferEffectiveDate"
          },
          "noReplacementReason": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.noReplacementReason"
          },
          "comment": {
            "type": "string",
            "description": "Refer to CardBlockingInformation.comment"
          },
          "waiveFee": {
            "type": "boolean",
            "description": "Indicates if the configured fee (if any) is waived (true) or not (false) while blocking card.\nBy default is false.",
            "default": false
          },
          "cppFlag": {
            "type": "boolean",
            "description": "DEPRECATED",
            "default": false
          },
          "fraudProcess": {
            "type": "string",
            "description": "Fraud process which leads to card blocking.\n\t\t\t\t\tPossible values : \n\t\t\t\t•CPP : the card is in CCP list\n\t\t\t\t•TFI : Fraud detected for a single card\n\t\t\t\t•MBA : Fraud detected for several cards (Mass action)"
          },
          "scheduledCardBlockingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the permanent card blocking is scheduled\nIf scheduledCardBlockingDate is provided, scheduledCardBlockingDelay is not relevant"
          },
          "scheduledCardBlockingDelay": {
            "type": "integer",
            "description": "Delay applied for the scheduled permanent card blocking. \nDefault value = 35 calendar days (configurable), can be overrriden if needed. The delay can be updated as long as it has not been reached. \nIf scheduledCardBlockingDelay is provided, scheduledCardBlockingDate is not relevant"
          },
          "scheduledCardBlockingReason": {
            "type": "string",
            "description": "Reason for scheduled permanent blocking\nValues =\nFRAUD_CPP or FRAUD_TFI (permanent blocking). \nPermanent blocking reasons used context of loss/theft are not allowed.\nDue to system logic, for current API the value of this field can be for permanent blocking only and can be set if the blockingReason attribute value is set to temporary blocking reason.\nIf the card remains active with a scheduled permanent blocking, this field is empty and the scheduled permanent blocking reason is provided in blockingReason."
          },
          "transactionId": {
            "type": "string",
            "description": "Relevant in the context of Fraud detection.\nIndicates the transactionId of the suspicious transaction that has triggered the card blocking."
          },
          "cancelScheduledCardBlocking": {
            "type": "boolean",
            "description": "If the card is ACTIVE or TEMPORARY BLOCKED and a scheduled information is already present on the card (scheduled permanent blocking):\n- a scheduled card blocking cancellation can be requested by providing the flag cancelScheduledCardBlocking to true.\nIn this case, the fields scheduledCardBlockingDelay, scheduledCardBlockingDate and scheduledCardBlockingReason must not be provided, otherwise the request is rejected\n- if a scheduled card blocking cancellation is not requested (the flag cancelScheduledCardBlocking is not provided or set to false).\nIn this case : \n* If a new scheduled permanent blocking is requested, the field scheduledCardBlockingDelay or scheduledCardBlockingDate must be provided if the delay is not yet reached. The field scheduledCardBlockingReason can optionally be provided if the card is temporary blocked.\n* If a new temporary blocking is requested, the field scheduledCardBlockingDelay,  scheduledCardBlockingDate, scheduledCardBlockingReason must not be provided.",
            "default": false
          }
        },
        "title": "BlockCardRequest"
      },
      "BlockCardResponse": {
        "type": "object",
        "properties": {
          "cardIdentifier": {
            "description": "Refer to Card.cardIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Card status after card blocking request (BLOCKED)"
          },
          "blockingReason": {
            "type": "string",
            "description": "Blocking reason provided in the request"
          },
          "blockingReasonDetail": {
            "type": "string",
            "description": "Complementary information of the blocking reason provided in the request if any"
          },
          "cardBlockingDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to CardBlockingInformation.cardBlockingDateTime"
          },
          "relatedBlockedCardList": {
            "description": "List of cards linked to the blocked card that have been blocked as well (cards from multi cards product or cards with same PAN for example)\nFor each blocked card, information such as card status, cardReference/issuerCardExternalReference, blocking reason, card blocking date and time is returned.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/BlockCardResponse"
            }
          }
        },
        "title": "BlockCardResponse"
      },
      "BusinessCase": {
        "type": "object",
        "properties": {
          "accountReserveBillingAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nFraction of ReserveBillingAmount which has not expired and has not been cancelled (i.e. no clearing and no manual intervention) so far and therefore still influences the open-to-buy via the account reserve (on top of the account balance). A positive value is a debit for the cardholder and a credit for the issuer. Whereas a negative value is a credit for the cardholder and a debit for the issuer.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "accountReserveStatus": {
            "type": "string",
            "example": "List'None', 'Active', 'Expired', 'Cancelled', 'Other'",
            "description": "Indicates together with AccountReserveBillingAmount to what extend the business case influences the open-to-buy via the account reserve (on top of the account balance). Possible values are:\n- None (ReserveBillingAmount is and was never part of the account reserve; AccountReserveBillingAmount is absent)\n- Active (ReserveBillingAmount amount is fully or partially part of the account reserve; it can be cancelled or updated; it can expire; AccountReserveBillingAmount is greater than zero)\n- Expired (ReserveBillingAmount has expired and is no longer part of the account reserve; AccountReserveBillingAmount is zero)\n- Cancelled (ReserveBillingAmount has been entirely cancelled (due to clearing or manual intervention) and is no longer part of the account reserve; AccountReserveBillingAmount is zero)\n- Other\nCan only be present in case BusinessCaseType is FinancialRequest. Absent in case Cancelled is true or all associated authorizations have been declined. The caller must be prepared to receive new values in this field at any time."
          },
          "businessCaseIdentifier": {
            "description": "Business case to which the transaction belongs. The provided information reflects its status after transaction completion. A business case is a group of transactions which logically belong together (e.g. original transaction and reversal of original transaction)",
            "allOf": [
              {
                "$ref": "#/definitions/BusinessCaseIdentifier"
              }
            ]
          },
          "businessCaseType": {
            "type": "string",
            "example": "List 'FinancialRequest', 'FinancialVerification', 'AccountVerification', 'BalanceEnquiry', 'StatementEnquiry', 'PinChange', 'PinUnblock', 'PickUp', 'CardReturn', 'Reconciliation', 'ReserveUpdate', 'ReserveExpiry', 'CardFileOperation', 'TokenLifeCycleEvent', 'Other', 'Unknown'",
            "description": "This value is the same for all transactions belonging to the same business case."
          },
          "cardAcceptorCity": {
            "type": "string",
            "description": "maxLength: 60\nCity the acceptor is resident (e.g. Frankfurt).Often exchanged with other applications via ISO 8583 field DE 43."
          },
          "cardAcceptorCountry": {
            "type": "string",
            "description": "Generic.AlphaNumericAcceptorCountryCode for the initial authorization."
          },
          "cardAcceptorName": {
            "type": "string",
            "description": "maxLength: 50\nThis field is not strictly defined and therefore variations are possible. Usually it is the merchant name as known to the cardholder. For ATMs it could be the location or the branch number. Often exchanged with other applications via ISO 8583 field DE 43."
          },
          "financialType": {
            "type": "string",
            "example": "List 'Cash', 'CashRefund', 'QuasiCash', 'QuasiCashRefund', 'Purchase', 'Refund', 'Load', 'Unload', 'FundsTransferCredit', 'FundsTransferDebit', 'OtherCredit', 'OtherDebit', 'Deposit', 'DepositRefund', 'Unknown'",
            "description": "Provides more details on the operation in case BusinessCaseType is FinancialRequest or FinancialVerification.This value is the same for all transactions belonging to the same financial business case."
          },
          "firstAuthorizationIdentifier": {
            "$ref": "#/definitions/AuthorizationIdentifier"
          },
          "firstAuthorizationTransactionDate": {
            "type": "string",
            "example": "2022-04-01T20:38:39Z",
            "description": "Time when the transaction referenced by FirstTxnId has been processed. Format: YYYY-MM-ddThh:mm:ssZ."
          },
          "issuerId": {
            "type": "string",
            "description": "Not used, will be removed"
          },
          "lastAuthorizationIdentifier": {
            "$ref": "#/definitions/AuthorizationIdentifier"
          },
          "lastAuthorizationTransactionDate": {
            "type": "string",
            "example": "2022-04-01T20:38:39Z",
            "description": "Time when the transaction referenced by LastTxnId has been processed. Format: YYYY-MM-ddThh:mm:ssZ."
          },
          "merchantCategoryCode": {
            "type": "string",
            "description": "maxLength: 4\nCategory code assigned to the acceptor (MCC)."
          },
          "reserveAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nReserved amount in transaction (acceptor) currency of initial authorization. A positive value is a debit for the cardholder and a credit for the acceptor whereas a negative value is a credit for the cardholder and a debit for the acceptor. Similar semantic as STNI field Generic.TotalAmount.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "reserveBillingAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nReserved amount in billing (cardholder) currency of initial authorization. A positive value is a debit for the cardholder and a credit for the acceptor whereas a negative value is a credit for the cardholder and a debit for the acceptor. Similar semantic as STNI field Generic.TotalBillingAmount.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Status of the business case"
          }
        },
        "title": "BusinessCase"
      },
      "BusinessCaseIdentifier": {
        "type": "object",
        "properties": {
          "businessCaseId": {
            "type": "string"
          }
        },
        "title": "BusinessCaseIdentifier"
      },
      "CancelCreditTransferRequest": {
        "type": "object",
        "properties": {
          "rejectionReason": {
            "type": "string",
            "description": "Reason for cancelling the credit transfer (free text)"
          }
        },
        "title": "CancelCreditTransferRequest"
      },
      "CancelCreditTransferResponse": {
        "type": "object",
        "required": [
          "creditTransferIdentifier",
          "status",
          "cancellationDate"
        ],
        "properties": {
          "creditTransferIdentifier": {
            "description": "Credit transfer identifier",
            "allOf": [
              {
                "$ref": "#/definitions/CreditTransferIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Credit transfer status"
          },
          "cancellationDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the OCT order was canceled"
          }
        },
        "title": "CancelCreditTransferResponse"
      },
      "CancelDirectDebitRequest": {
        "type": "object",
        "properties": {
          "rejectionReason": {
            "type": "string",
            "description": "Reason for cancelling the direct debit (free text)"
          }
        },
        "title": "CancelDirectDebitRequest"
      },
      "CancelDirectDebitResponse": {
        "type": "object",
        "required": [
          "directDebitIdentifier",
          "status",
          "cancellationDate"
        ],
        "properties": {
          "directDebitIdentifier": {
            "description": "Direct debit identifier",
            "allOf": [
              {
                "$ref": "#/definitions/DirectDebitIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Direct debit status"
          },
          "cancellationDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the Direct Debit order was canceled"
          }
        },
        "title": "CancelDirectDebitResponse"
      },
      "Card": {
        "type": "object",
        "required": [
          "issuerId"
        ],
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "cardIdentifier": {
            "description": "Identification of the card either by Issuer card external reference or by card reference",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "encryptedPan": {
            "description": "This field returns the encrypted PAN and the public key identifier if the encryption is activated on the platform.",
            "allOf": [
              {
                "$ref": "#/definitions/EncryptedPan"
              }
            ]
          },
          "pan": {
            "type": "string",
            "description": "Primary Account Number (PAN) also called card number (mandatory) \n It is calculated by our system from the BIN range associated to the card product or provided by the issuer."
          },
          "maskedPan": {
            "type": "string",
            "description": "Masked Primary Account Number (PAN) of the card (optional). \nExample: 445442******0275\nThe mask is defined per platform."
          },
          "panReference": {
            "type": "string",
            "description": "Reference related to the PAN\nCards having the same PAN have the same PAN reference.\nPAN reference is generated in the system according to the following algorithm : \n1 (VISA) or 2 (MCI) + 3 last digit of issuer + UUID (without the -)\nExample : 1006f041ae6814bf4f068aa501141c85d57d"
          },
          "expiryDate": {
            "type": "string",
            "description": "Card expiry date (mandatory)\nFormat is MMYY (month and year)"
          },
          "panSequenceNumber": {
            "type": "string",
            "description": "PAN sequence number is a number (usually from 1 to N) that allows identifying either cards with same PAN or cards with same PAN and same Expiry date"
          },
          "status": {
            "type": "string",
            "description": "Current status of the card (mandatory) \n Possible values: CREATED, ACTIVE, BLOCKED, DEACTIVATED, CANCELLED\n Status of the card (mandatory)\n The card status is changing during its life cycle according to business processes in the system.\n Possible values are :\n CREATED : The first status when the card is created. The card is not usable.\n ACTIVE : Card is active and ready for authorizations processing\n Examples of business processes triggering this status: contract creation request as per product configuration, card activation request, contract creation after a product change request.\n BLOCKED : card is blocked permanently (final status) or temporarily. Related authorizations are declined.\n DEACTIVATED : Card is deactivated (final status) and related authorizations are declined\n Examples of business processes triggering this status: contract closing request, card contract closing, contract closure after a product change request. Card was in ACTIVE status previously.\n CANCELLED : Card is cancelled (final status). Card has never been activated.\n Examples of business processes triggering this status: contract closing request, card contract closing, contract closure after a product change request. Card was in CREATED status previously."
          },
          "statusDate": {
            "type": "string",
            "format": "date-time",
            "description": "Last card status change date (mandatory)"
          },
          "externalStatus": {
            "type": "string",
            "description": "External status of the card\nPossible values are:\n- IN_PROGRESS (it implies the card has not registered in all the WL systems)\n- CREATED (it implies the card is registered in all the WL systems and ready for use)\n- ERROR (the synchronization process between WL systems is failed)"
          },
          "statusHistory": {
            "type": "array",
            "description": "List of card status history\nRefer to resource CardStatusHistory for detail information",
            "items": {
              "$ref": "#/definitions/CardStatusHistory"
            }
          },
          "embossingName": {
            "type": "string",
            "description": "First line of the name embossed on the physical card (mandatory)\nIt can be provided by the issuer or calculated by our system (if allowed within card Technology and Application model and depending on the selected embossing name calculation algorithm)"
          },
          "embossingName2ndLine": {
            "type": "string",
            "description": "Second line of the name embossed on the physical card, optional, can be provided only in addition to the first line.\nIt can be provided by the issuer or calculated by our system (if embossing name is required within card Technology and Application model and depending on the selected embossing name calculation algorithm)"
          },
          "embossingLine5": {
            "type": "string",
            "description": "Specific additional embossing line that can be used by the issuer (mandatory only if required within card Technology and Application model)\nIt is sent out to the embosser with card order."
          },
          "artwork": {
            "type": "string",
            "description": "Artwork (card design) used for the physical card (mandatory)"
          },
          "permanentlyBlocked": {
            "type": "boolean",
            "description": "Indicates if the card is permanently blocked (true) or not (false). Default value is false"
          },
          "emergencyCard": {
            "type": "boolean",
            "description": "This attribute indicates if the card is an emergency card (scheme emergency card service)."
          },
          "emergencyCashAdvance": {
            "type": "boolean",
            "description": "Deprecated - Not used"
          },
          "renewed": {
            "type": "boolean",
            "description": "Indicates if the card is renewed (true) or not (false). Default value is false"
          },
          "replaced": {
            "type": "boolean",
            "description": "Indicates if the card is replaced (true) or not (false). Default value is false"
          },
          "replacementReason": {
            "type": "string",
            "description": "Reason for replacing a card (mandatory only if the card is replaced)\nThe list of replacing reasons is configurable per issuer (For example, LOST, STOLEN, FRAUDULENT …)"
          },
          "blockingReason": {
            "type": "string",
            "description": "Reason for blocking a card (mandatory only if card status is blocked)\nThe list of blocking reasons is configurable per issuer (For example, LOST, STOLEN, FRAUDULENT …)"
          },
          "pinInheritanceCardIdentifier": {
            "description": "Identifier of the card from which the PIN is inherited (card is known in the issuing system).",
            "allOf": [
              {
                "$ref": "#/definitions/PinInheritanceCardIdentifier"
              }
            ]
          },
          "pinInheritanceCardReference": {
            "type": "string",
            "description": "Deprecated"
          },
          "pinInheritanceExternalCardIdentifier": {
            "description": "Identifier of the external card used when the card is only known by the PIN management module.",
            "allOf": [
              {
                "$ref": "#/definitions/PinInheritanceExternalCardIdentifier"
              }
            ]
          },
          "specificFields": {
            "type": "object",
            "description": "List of external data (label:value), separated by a \"|\", related to a card that can be provided by e.g. the issuer for information or for usage by other systems.\nExample : label1:value|label2:value\nThose provided data have no impact on our system business processes.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "renewedBy": {
            "description": "Card identifier of the new card created during the renewal process.\nRelevant information for the renewed card.",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "replacementBy": {
            "description": "Card identifier of the new card created during the replacement process.\nRelevant information for the replaced card.",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "renewedFor": {
            "description": "Card identifier of the renewed card.\nRelevant information for the new card created during the renewal process.",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "replacementFor": {
            "description": "Card identifier of the replaced card.\nRelevant information for the new card created during the replacement process.",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "cardContractIdentifier": {
            "description": "Card Contract Identifier",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "cardContract": {
            "description": "Card Contract",
            "allOf": [
              {
                "$ref": "#/definitions/CardContract"
              }
            ]
          },
          "orderIdentifiers": {
            "type": "array",
            "description": "Order Identifiers",
            "items": {
              "$ref": "#/definitions/OrderIdentifier"
            }
          },
          "orders": {
            "type": "array",
            "description": "List of orders linked to the Card",
            "items": {
              "$ref": "#/definitions/Order"
            }
          },
          "isCardDigitalizationAllowed": {
            "type": "boolean",
            "description": "Indicates if the digitalization of the card is allowed (true) or not (false, default value). \nThis attribute is returned during wallets (e.g. GooglePay, ApplePay) enrollment process to e.g. the Issuer TSP (in case the card digitalization is not allowed then the Issuer TSP should decline the enrollment).",
            "default": false
          },
          "multiCardInfo": {
            "description": "Multi card set if the card belongs to a multi card set",
            "allOf": [
              {
                "$ref": "#/definitions/MultiCardInfo"
              }
            ]
          },
          "cardScheme": {
            "type": "string",
            "description":"Card scheme to which the BIN of the card is belonging "
          },
          "virtual": {
            "type": "boolean",
            "description": "Indicates if the card is physical or virtual"
          },
          "contactlessEnabled": {
            "type": "boolean",
            "description": "Indicates if the chip contactless capability enabled or not"
          },
          "technologyType": {
            "type": "string",
            "description": "Technology of the card (code/short name)\nPossible values are : \n- VIRTUAL\n- EMV\n- MAGSTRIPE\n- EMV_MAGSTRIPE\n- CONTACT_ONLY (contact only for EMV card with magstripe)\n- DUAL_INTERFACE (contact+contactless for EMV card with magstripe)"
          },
          "techAndAppModelName": {
            "type": "string",
            "description": "Technology and application model name of the card"
          },
          "photoReference": {
            "type": "string",
            "description": "Reference of the photo sent to the embosser and retrieved from the card contract during the card order extraction (optional)."
          },
          "pictureReference": {
            "type": "string",
            "description": "Reference of the picture sent to the embosser and retrieved from the card contract during the card order extraction (optional)."
          },
          "logoReference": {
            "type": "string",
            "description": "Reference of the company logo sent to the embosser and retrieved from the card contract during the card order extraction (optional).\nRelevant only for corporate cards."
          },
          "dispatchCode": {
            "type": "string",
            "description": "If present the dispatch code is sent to the embosser. The dispatch code defines the corporate card orders delivery address which is known and managed by the embosser (Corporate cards only). If not present the standard process is applied to retrieve the card delivery address."
          },
          "automaticDeactivationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the card is deactivated automatically (x days after its replacement if the feature is enabled)."
          },
          "contractType": {
            "type": "string",
            "description": "Indicates if the card is a consumer (private) or corporate card. \n Possible values: \n CORPORATE \nCONSUMER ",
            "enum": [
              "CORPORATE",
              "CONSUMER"
            ]
          },
          "cardDeactivationRuleOverride": {
            "type": "string",
            "description": "Indicates which card deactivation rule is enabled for the card. It overrides the product card deactivation rule Possible value : FIRST_APPROVED_AUTHO (1st approved online authorization)"
          },
          "partnerExternalCardReference": {
            "type": "string",
            "description": "This reference is generated by our system using rules define with the issuer that needs it."
          },
          "recovered": {
            "type": "boolean",
            "description": "Indicates if the card is recovered (true) or not (false). Default value is false."
          },
          "recoveryDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the card was recovered. Only relevant if the card is recovered."
          },
          "lastSavingMeasureCode": {
            "type": "string",
            "description": "Indicates the last saving measure applied (a saving measure is used to forbid some actions or remove the forbidding. For example: block the card replacement, the card renewal, the PIN mailer reprint)"
          }
        },
        "title": "Card"
      },
      "ModifyAllCardsBlockingInformationRequest": {
        "type": "object",
        "properties": {
          "pan": {
            "type": "string",
            "description": "The issuer can provide the PAN to update blocking information for all cards with the same PAN.\nEither the PAN or the PAN reference is mandatory to update blocking information for all cards with same PAN or same PAN reference."
          },
          "panReference": {
            "type": "string",
            "description": "The issuer can provide the PAN reference to update blocking information for all cards with the same PAN.\nEither the PAN or the PAN reference is mandatory to update blocking information for all cards with same PAN or same PAN reference."
          },
          "blockingReason": {
            "type": "string",
            "description": "Reason of the card blocking.\nIt is selected among the card blocking reasons configured for the issuer.\nA permanently blocked card can't be updated with a temporary card blocking reason."
          },
          "blockingReasonDetail": {
            "type": "string",
            "description": "Complementary information describing the defined blocking reason \nFree text"
          },
          "lostStolenDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the card has been lost or stolen\nCan be updated if the card was blocked previously in a context of loss/theft\nRequired if the card is blocked in a context of loss/theft"
          },
          "pinCompromised": {
            "type": "boolean",
            "description": "Indicates if the PIN is compromised (true) or not (false).\nCan be updated if the blocking reason was previously Lost or Stolen.\nTo be provided if the new blocking reason is Lost or Stolen"
          },
          "transferEffectiveDate": {
            "type": "string",
            "format": "date-time",
            "description": "Transfer effective date. It must be a date prior to the card blocking date time"
          },
          "comment": {
            "type": "string",
            "description": "Comment associated with the card blocking action.\nFree text."
          },
          "scheduledCardBlockingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the permanent card blocking is scheduled.If scheduledCardBlockingDate is provided, scheduledCardBlockingDelay is not relevant."
  
          },
          "scheduledCardBlockingDelay": {
            "type": "integer",
            "format": "int32",
            "description": "Delay in calendar days used to block the card in the future.It can be updated if needed as long as the scheduled card blocking date is not yet reached and if the new scheduled card blocking date is in the future.If scheduledCardBlockingDelay is provided, scheduledCardBlockingDate is not relevant."
          },
          "scheduledCardBlockingReason": {
            "type": "string",
            "description": "Scheduled permanent blocking reason.\nIt is relevant if the card is already temporarily blocked.\nIt can be updated if needed as long as the scheduled card blocking date is not yet reached\nPermanent blocking reasons used context of loss/theft are not allowed."
          },
          "cppFlag": {
            "type": "boolean",
            "description": "DEPRECATED"
          },
          "fraudProcess": {
            "type": "string",
            "description": "Fraud process which leads to card blocking.\n\t\t\t\t\tPossible values : \n\t\t\t\t•CPP : the card is in CCP list\n\t\t\t\t•TFI : Fraud detected for a single card\n\t\t\t\t•MBA : Fraud detected for several cards (Mass action)"
          }
        },
        "title": "ModifyAllCardsBlockingInformationRequest"
      },
      "SignContractRequest": {
        "type": "object",
        "properties": {
          "activateAllCards": {
            "type": "boolean",
            "default": false,
            "description": "Indicates if cards under the contract should be activated when the contract is signed (true).\nBy default, the value is false."
          }
        },
        "title": "SignContractRequest"
      },
      "ApiResponseEntitySignContractResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/SignContractResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntitySignContractResponse"
      },
      "SignContractResponse": {
        "type": "object",
        "properties": {
          "contract": {
            "$ref": "#/definitions/SignContractResponseContract"
          }
        },
        "title": "SignContractResponse"
      },
      "ModifyAllCardsBlockingInformationResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata",
          "data"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/BlockAllCardsResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ModifyAllCardsBlockingInformationResponse"
      },
      "ModifyCardBlockingInformationRequest": {
        "type": "object",
        "properties": {
          "scheduledCardBlockingDelay": {
            "type": "integer",
            "format": "int32",
            "description": "Delay in calendar days used to block the card in the future.\nIt can be updated if needed as long as the scheduled card blocking date is not yet reached and if the new scheduled card blocking date is in the future.\nIf scheduledCardBlockingDelay is provided, scheduledCardBlockingDate is not relevant."
          },
          "scheduledCardBlockingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the permanent card blocking is scheduled\nIf scheduledCardBlockingDate is provided, scheduledCardBlockingDelay is not relevant."
          },
          "scheduledCardBlockingReason": {
            "type": "string",
            "description": "Scheduled permanent blocking reason.\nIt is relevant if the card is already temporarily blocked.\nIt can be updated if needed as long as the scheduled card blocking date is not yet reached\nPermanent blocking reasons used context of loss/theft are not allowed."
          },
          "cppFlag": {
            "type": "boolean",
            "description": "DEPRECATED"
          },
          "blockingReason": {
            "type": "string",
            "description": "Reason of the card blocking.\nIt is selected among the card blocking reasons configured for the issuer.\nA permanently blocked card can't be updated with a temporary card blocking reason."
          },
          "blockingReasonDetail": {
            "type": "string",
            "description": "Complementary information describing the defined blocking reason \nFree text"
          },
          "lostStolenDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the card has been lost or stolen\nCan be updated if the card was blocked previously in a context of loss/theft\nRequired if the card is blocked in a context of loss/theft"
          },
          "pinCompromised": {
            "type": "boolean",
            "description": "Indicates if the PIN is compromised (true) or not (false).\nCan be updated if the blocking reason was previously Lost or Stolen.\nTo be provided if the new blocking reason is Lost or Stolen"
          },
          "transferEffectiveDate": {
            "type": "string",
            "format": "date-time",
            "description": "Transfer effective date. It must be a date prior to the card blocking date time"
          },
          "comment": {
            "type": "string",
            "description": "Comment associated with the card blocking action.\nFree text."
          },
          "fraudProcess": {
            "type": "string",
            "description": "Fraud process which leads to card blocking.\n\t\t\t\t\tPossible values : \n\t\t\t\t•CPP : the card is in CCP list\n\t\t\t\t•TFI : Fraud detected for a single card\n\t\t\t\t•MBA : Fraud detected for several cards (Mass action)"
          }
        },
        "title": "ModifyCardBlockingInformationRequest"
      },
      "ModifyCardBlockingInformationResponse": {
        "type": "object",
        "required": [
          "responseMetadata",
          "cardIdentifier"
        ],
        "properties": {
          "cardIdentifier": {
            "description": "Refer to Card.cardIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          }
        },
        "title": "ModifyCardBlockingInformationResponse"
      },
      "CardBlockingInformation": {
        "type": "object",
        "required": [
          "cardBlockingDateTime"
        ],
        "properties": {
          "cardBlockingDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the card has been blocked by our system"
          },
          "blockAgent": {
            "type": "string",
            "description": "Operator who blocked the card (mandatory only if the card is blocked). It corresponds to the name of the user, referenced in our system, mentioned at the card blocking time."
          },
          "blockingReason": {
            "type": "string",
            "description": "Reason for blocking a card (mandatory only if the card is blocked)\nThe list of blocking reasons is configurable per issuer (For example, LOST, STOLEN, FRAUDULENT …)"
          },
          "blockingReasonDetail": {
            "type": "string",
            "description": "Complementary information describing the defined blocking reason\nFree text"
          },
          "lostStolenDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the card has been lost or stolen\nThis date is provided in addition to the blocking reason (required only if the card is blocked in a context of loss/theft)"
          },
          "lossPlace": {
            "type": "string",
            "description": "Place where the card has been lost\nFree text"
          },
          "lossCountry": {
            "type": "string",
            "description": "Country of card loss or steal\nCan be required in certain countries (e.g. french issuers with CB)\nFree text (not check on the provided value)"
          },
          "lastUsageDate": {
            "type": "string",
            "format": "date-time",
            "description": " Date of last use of the card\nExample: for lost or stolen reason"
          },
          "lastUsagePlace": {
            "type": "string",
            "description": "Last place where the card has been used\nExample: for lost or stolen reason"
          },
          "lossCircumstances": {
            "type": "string",
            "description": "Description of the circumstances of the card loss\nFree text"
          },
          "lossReportedBy": {
            "type": "string",
            "description": "Person who has reported the card loss\nFree text"
          },
          "lossReportedVia": {
            "type": "string",
            "description": "How was reported the loss (channel)\nFree  text"
          },
          "fraudCode": {
            "type": "string",
            "description": "Fraud code can be used in the context of dispute management.\nFraud code (free text) is provided in case of Fraud for Fraud declaration to the schemes (VISA, MasterCard).\nThe value must be a value expected by the schemes."
          },
          "contactData": {
            "type": "string",
            "description": "Indicates contact data (usually phone number)\nFree text"
          },
          "pinCompromised": {
            "type": "boolean",
            "description": "Indicates if the PIN is compromised (true) or not (false) only in case of lost or stolen reason. Default value is false "
          },
          "customerRequestingBlockDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the customer has declared the blocking request.\nFor example, the cardholder calls the customer service at 4 pm to declare he lost his card and the card blocking request can only be sent at 5 pm to the system: then the customerRequestingBlockDateTime is 4 pm."
          },
          "transferEffectiveDate": {
            "type": "string",
            "format": "date-time",
            "description": "Transfer effective date (either a date prior to the card blocking date time or it is the card blocking date time in our system)"
          },
          "noReplacementReason": {
            "type": "string",
            "description": "The reason why the card is not replaced.\nFree text"
          },
          "comment": {
            "type": "string",
            "description": "Comment associated with the card blocking action\nFree text"
          },
          "cppFlag": {
            "type": "boolean",
            "description": "DEPRECATED"
          },
          "fraudProcess": {
            "type": "string",
            "description": "Fraud process in which the card is blocked. \nPossible values : \n•\tCPP : the card is in CCP list \n•\tTFI : Fraud detected for a single card \n•\tMBA : Fraud detected for several cards (Mass action)"
          },
          "scheduledCardBlockingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the permanent card blocking is scheduled"
          },
          "scheduledCardBlockingDelay": {
            "type": "integer",
            "description": "Delay in calendar days used to permanently block the card in the future"
          },
          "scheduledCardBlockingReason": {
            "type": "string",
            "description": "Blocking reason used when the card is blocked in the future\nRelevant if a scheduled permanent blocking is requested at the same time as an immediate temporary card blocking.\nPermanent blocking reasons used context of loss/theft are not allowed."
          },
          "transactionId": {
            "type": "string",
            "description": "Indicates the transactionId of the suspicious transaction that has triggered the card blocking."
          }
        },
        "title": "CardBlockingInformation"
      },
      "CardContract": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "cardContractIdentifier": {
            "description": "Identification of the card contract either by Issuer card contract external reference or by card contract reference",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "cardTemplateReference": {
            "type": "string",
            "description": "Card template reference used for card contract creation"
          },
          "cardTypeCode": {
            "type": "string",
            "description": "Scheme card type from the card profile"
          },
          "cardTypeLabel": {
            "type": "string",
            "description": "Scheme card type label from the card profile"
          },
          "status": {
            "type": "string",
            "description": "Status of the card contract (mandatory)\nThe status of the card contract is changing during its life cycle according to business processes in the system.\nPossible values are :\n- CREATED : The first status when the card contract is created. Related card is not activated.\n- ACTIVE : The card contract is active. Related card is activated as per product configuration\nExamples of business processes triggering this status: contract creation request, contract creation after a product change request.\n- CLOSED : The card contract is closed and the associated card is deactivated/cancelled (if not already permanently blocked). Card renewal and card replacement are not possible.\nExamples of business processes triggering this status: contract closing request, card contract closing request, contract closure after a product change request."
          },
          "openingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the card contract (mandatory)"
          },
          "activationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the card contract becomes active in our system"
          },
          "closingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Closing date of the card contract (present only in case of card contract is already closed or card contract closing is scheduled)"
          },
          "closingComment": {
            "type": "string",
            "description": "Comment associated with the card contract closing action (optional)\nFree text"
          },
          "closingReason": {
            "type": "string",
            "description": "Indicates the reason for closing the card contract (present only in case of card contract is already closed or card contract closing is scheduled) Free text"
          },
          "closingDelayType": {
            "type": "string",
            "description": "The closing type of the card contract (present only in case of card contract is already closed or card contract closing is scheduled)\nThe closing type can be:\nIMMEDIATE (at current date)\nSCHEDULED (at future date, greater than the current date)\nSCHEDULED_EXP_DATE (at the expiration date of active card)"
          },
          "trustedAuthenticationReference": {
            "type": "string",
            "description": "Unique reference generated by card management system used as trusted authentication credential\nIt is related to a card. Same reference is used in case of card renewal/replacement.\nUsed for ACS enrolment (3D Secure)"
          },
          "newCardRenewalAllowed": {
            "type": "boolean",
            "description": "Indicates if the renewal is allowed for a card (true) or not (false). \nDefault value is true."
          },
          "blockingRenewalReasonCode": {
            "type": "string",
            "description": "Reason for blocking the renewal of a card (optional)\nThe list of renewal blocking reasons is configurable per issuer (For example : LOST, CREDIT_RISK, FRAUDULENT …)"
          },
          "newCardReplacementAllowed": {
            "type": "boolean",
            "description": "Indicates if the replacement is allowed for a card (true) or not (false). Default value is false "
          },
          "blockingReplacementReasonCode": {
            "type": "string",
            "description": "Reason for blocking the replacement of a card (optional) The list of replacement blocking reasons is configurable per issuer (For example, CONTRACT_SUSPENSION …)"
          },
          "blockingPinReorderReasonCode": {
            "type": "string",
            "description": "Mandatory reason to be set for blocking a pin reorder\nThe list of blocking reasons for pin reorder is configurable per issuer (For example, CONTRACT_SUSPENSION …)"
          },
          "newPinReorderAllowed": {
            "type": "boolean",
            "description": "The pin reorder process can be blocked (blocking pin reorder reason code must be provided) or not."
          },
          "blockingPinReminderReasonCode": {
            "type": "string",
            "description": "Mandatory reason to be set for blocking pin reminder\nThe list of blocking reasons for pin reminder is configurable per issuer (For example, CONTRACT_SUSPENSION …)"
          },
          "newPinReminderAllowed": {
            "type": "boolean",
            "description": "The pin reminder process can be blocked (blocking pin reminder reason code must be provided) or not."
          },
          "issuerBranchCode": {
            "type": "string",
            "description": "The Branch code (optional)\nBy default, the value is NO_BRANCH."
          },
          "artwork": {
            "type": "string",
            "description": "Artwork (card design) defined for the card contract (mandatory)"
          },
          "forcedEmbossingName": {
            "type": "string",
            "description": "First line of the name to be embossed on the next physical card if provided by the issuer (optional)"
          },
          "forcedEmbossingName2ndLine": {
            "type": "string",
            "description": "The second line of the name to be embossed on the physical card if provided by the issuer (optional)\nCan be present (optional) only if first line of forced embossing name is present and if embossing name calculation algorithm accepts a second line."
          },
          "schemeDeclarationOptOut": {
            "type": "boolean",
            "description": "Indicates if issuer shall stop providing card/account updates to MasterCard ABU service or VISA VAU service (true) or not (false). By default, value is false."
          },
          "principalSupplementaryCardIndicator": {
            "type": "string",
            "description": "Indicates if it is a Principal card or an additional card (mandatory)\nPossible values: PRINCIPAL, SUPPLEMENTARY"
          },
          "productCategory": {
            "type": "string",
            "description": "Defines the category of the product (mandatory)\nThe list of product categories is configurable per issuer (e.g. CREDIT, DEBIT, PREPAID)"
          },
          "productCategoryLabel": {
            "type": "string",
            "description": "Label of the product category (optional)\nExample: IMMEDIATE_DEBIT_DEBIT, REVOLVING_CREDIT_CREDIT, DIFFERED_DEBIT_CREDIT"
          },
          "specificFields": {
            "type": "object",
            "description": "List of external data (label:value), separated by a \"|\", related to a card contract that can be provided by e.g. the issuer for information or for usage by other systems.\nExample : label1:value|label2:value\nThose provided data have no impact on our system business processes.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "productIdentifier": {
            "description": "Identifier of the product used to create the contract to which the card contract is belonging. It corresponds also to the identifier of the product used to create the card contract if the card contract is created from the product directly.",
            "allOf": [
              {
                "$ref": "#/definitions/ProductIdentifier"
              }
            ]
          },
          "productExtensionIdentifier": {
            "description": "Identifier of the product extension used to create the card contract. \n Relevant if the card contract is created from a product extension.",
            "allOf": [
              {
                "$ref": "#/definitions/ProductExtensionIdentifier"
              }
            ]
          },
          "selectedModels": {
            "type": "array",
            "description": "List of models linked to the card contract",
            "items": {
              "$ref": "#/definitions/CardContractModel"
            }
          },
          "cardClass": {
            "type": "string",
            "description": "Information provided by the issuer to categorize cards within a contract.\nThe list of allowed card classes is defined by the issuer at its convenience according to its own business rules (e.g special conditions on fees for example) and is configured at product level to be controlled at card creation."
          },
          "cardIdentifiers": {
            "type": "array",
            "description": "Card Identifiers",
            "items": {
              "$ref": "#/definitions/CardIdentifier"
            }
          },
          "cards": {
            "type": "array",
            "description": "List of cards linked to the card contract. See the Card's datatype for the detail list of the attributes",
            "items": {
              "$ref": "#/definitions/Card"
            }
          },
          "cardHolderIdentifier": {
            "description": "Card Holder Identifier",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "vipFlag": {
            "type": "boolean",
            "default": false,
            "description": "Indicates if the holder of the priority pass is a VIP or not. This information is used to determine the priority pass fees to apply. \n if true, VIP fees are applied.  \n If false, standard fees are applied. \n By default, the value is false."
          },
          "contractIdentifier": {
            "description": "Contract Identifier",
            "allOf": [
              {
                "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "relatedAccounts": {
            "type": "array",
            "description": "List of posting accounts linked to a card contract",
            "items": {
              "$ref": "#/definitions/AccountRelation"
            }
          },
          "cardProfileDescription": {
            "type": "string",
            "description": "Description of the card profile linked to a card"
          },
          "originalCardContractIdentifier": {
            "description": "CardContract Identifier of the original cardContract in case of ProductChange",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "changedCardContractIdentifier": {
            "description": "CardContract Identifier of the new cardContract in case of ProductChange",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "photoReference": {
            "type": "string",
            "description": "Reference of a cardholder photo used to personalise the card (free text), e.g. URL where object is stored, a reference (optional)."
          },
          "pictureReference": {
            "type": "string",
            "description": "Reference of an image used to personalise the card (free text), e.g. URL where object is stored, a reference (optional)."
          },
          "cardProfileReference": {
            "type": "string",
            "description": "Reference of the card profile."
          },
          "mainCardIndicator": {
            "type": "boolean",
            "description": "Indicates whether the card is the main one or not for a mutli cards product"
          },
          "logoReference": {
            "type": "string",
            "description": "For a corporate card a logo reference can be provided (free text), e.g. alphanumeric value, numeric value, URL where the logo is stored. This logo reference is sent to the embosser with the card order data."
          },
          "cardContractGroupReference": {
            "type": "string",
            "description": "Unique reference to group card contracts calculated by the system if required by the product configuration"
          },
          "contractType": {
            "type": "string",
            "description": "Indicates if it is a consumer (private) or corporate card. \n Possible values: \n CORPORATE \n CONSUMER",
            "enum": [
              "CORPORATE",
              "CONSUMER"
            ]
          },
          "deviceTokensNumber": {
            "type": "integer",
            "description": "Indicates the number of device tokens on the card attached to the card contract"
          },
          "merchantTokensNumber": {
            "type": "integer",
            "description": "Indicates the number of merchant tokens on the card attached to the card contract"
          },
          "authorizationDataValidation": {
            "description": "Cardholder data defined at card contract level and used by the Front Office for verification (AVS/ANI)",
            "allOf": [
              {
                "$ref": "#/definitions/AuthorizationDataValidation"
              }
            ]
          }
        },
        "title": "CardContract"
      },
      "CardContractIdentifier": {
        "type": "object",
        "description": "Identification of the card contract either by Issuer card contract external reference or by card contract reference",
        "properties": {
          "cardContractReference": {
            "type": "string",
            "description": "The reference of the card contract in our system, unique per platform\nThis reference is calculated from an algorithm (currently a unique algorithm 'DefaultCardContractReferenceAlgorithm' referenced in the card profile version).\nThe reference is composed of the issuerId + a sequence number of 16 digits (e;g; 100042000000000095003, where 10004 is the issuerId)"
          },
          "issuerCardContractExternalReference": {
            "type": "string",
            "description": "The external reference of the card contract provided by the issuer\nThis reference is unique per issuer and may be used to carry out research and find information."
          }
        },
        "title": "CardContractIdentifier"
      },
      "CardContractModel": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "Reference of a card contract model"
          },
          "type": {
            "type": "string",
            "description": "Type of a card contract model\nPossible values: CARD_CREATION_MODEL, CARD_AUTONUMBERING_MODEL, TECHNOLOGY_AND_APPLICATION_MODEL, EVENT_FEE_MODEL, CARD_RENEWAL_MODEL, CARD_REPLACEMENT_MODEL, PIN_PRODUCTION_MODEL, DISTRIBUTION_MODEL"
          }
        },
        "title": "CardContractModel"
      },
      "CardEvent": {
        "type": "object",
        "properties": {
          "eventType": {
            "type": "string",
            "example": "CardActivation, CardIssuing, CardCancellation, CardDeactivation, CardBlocking, CardUnblocking",
            "description": "Type of an event associated to a card \n Example: CardActivation, CardIssuing (can, be first issuing or replacement or renewal), CardCancellation, CardDeactivation, CardBlocking, CardUnblocking"
          },
          "eventDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date time when an event is performed on the card by our system (mandatory)\nExample: blocking card, unblocking card, replacement card"
          },
          "reason": {
            "type": "string",
            "description": "Reason associated to a card status (mandatory)\nThe list of  reasons is configurable per issuer (example: ActivationReason, CancellationReason, DeactivationReason, CardBlockingReason)"
          },
          "comment": {
            "type": "string",
            "description": "A comment (free text) used in case of blocking or unblocking a card (optional)"
          },
          "waiveFee": {
            "type": "boolean",
            "description": "Indicates if the fee was waived (true) or not (false). By default, value is false."
          },
          "blockingInformation": {
            "description": "Information related to the card blocking (present if the card is blocked)",
            "allOf": [
              {
                "$ref": "#/definitions/CardBlockingInformation"
              }
            ]
          },
          "pinChangeInformation": {
            "description": "Information related to the pin change (present if the event type if PinChange)",
            "allOf": [
              {
                "$ref": "#/definitions/PinChangeInformation"
              }
            ]
          },
          "feeConditions": {
            "type": "array",
            "description": "Fee conditions for this kind of event",
            "items": {
              "$ref": "#/definitions/FeeCondition"
            }
          }
        },
        "title": "CardEvent"
      },
      "CardIdentifier": {
        "type": "object",
        "description": "Identification of the card either by Issuer card external reference or by card reference",
        "properties": {
          "cardReference": {
            "type": "string",
            "description": "Reference of the card generated by our system, unique per platform.\nThis reference is calculated sequentially by an internal algorithm on 16 digits (e.g. 2000000000096013)."
          },
          "issuerCardExternalReference": {
            "type": "string",
            "description": "External reference of the card provided by the issuer.\nThis reference is unique per issuer and may be used to carry out research and find information."
          }
        },
        "title": "CardIdentifier"
      },
      "PinInheritanceCardIdentifier": {
        "type": "object",
        "properties": {
          "pinInheritanceCardReference": {
            "type": "string",
            "description": "The reference of the card from which the PIN is inherited."
          },
          "pinInheritanceIssuerCardExternalReference": {
            "type": "string",
            "description": "The external reference of the card from which the PIN is inherited."
          }
        },
        "title": "PinInheritanceCardIdentifier"
      },
      "PinInheritanceExternalCardIdentifier": {
        "type": "object",
        "properties": {
          "pinInheritanceExternalCardReference": {
            "type": "string",
            "description": "Reference of the external card used when the card is only known by the PIN management module (used in migration context)"
          }
        },
        "title": "PinInheritanceExternalCardIdentifier"
      },
      "CardStatusHistory": {
        "type": "object",
        "properties": {
          "eventType": {
            "type": "string",
            "description": "Event type associated to a card status and an event date (mandatory)\nExample: CardActivation, CardIssuing, CardCancellation, CardDeactivation, CardBlocking, CardUnblocking"
          },
          "eventDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date time when an event is performed on the card by our system (mandatory)\nExample: blocking card, unblocking card, replacement card"
          },
          "reason": {
            "type": "string",
            "description": "Reason associated to a card status (mandatory)\nThe list of  reasons is configurable per issuer (example: ActivationReason, CancellationReason, DeactivationReason, CardBlockingReason)"
          },
          "comment": {
            "type": "string",
            "description": "A comment (free text) used in case of blocking or unblocking a card (optional)"
          },
          "waiveFee": {
            "type": "boolean",
            "description": "Indicates if the fee was waived (true) or not (false). By default, value is false."
          },
          "blockingInformation": {
            "description": "Information related to the card blocking (present if the card is blocked)",
            "allOf": [
              {
                "$ref": "#/definitions/CardBlockingInformation"
              }
            ]
          }
        },
        "title": "CardStatusHistory"
      },
      "CloseCardContractRequest": {
        "type": "object",
        "required": [
          "closingReason",
          "closureDelayType"
        ],
        "properties": {
          "closingReason": {
            "type": "string",
            "description": "Reason for closing the card contract (free text)"
          },
          "closingComment": {
            "type": "string",
            "description": "Comment (free text) can be provided for closing the card contract."
          },
          "closureDelayType": {
            "type": "string",
            "description": "The closing type of the card contract. \nPossible values:\n- IMMEDIATE (at the current date)\n- SCHEDULED (at future date)\n- SCHEDULED_EXP_DATE (at the expiration date of the card)"
          },
          "closingDate": {
            "type": "string",
            "format": "date-time",
            "description": "If the delay type is SCHEDULED, the closing date must be provided and must be a future date."
          }
        },
        "title": "CloseCardContractRequest"
      },
      "CloseCardContractResponse": {
        "type": "object",
        "properties": {
          "cardContractIdentifier": {
            "$ref": "#/definitions/CardContractIdentifier"
          },
          "status": {
            "type": "string",
            "description": "Card contract status after the closure request depending on the delay type\nIf the delay type is IMMEDIATE, the card contract status is CLOSED.\nIf the delay type is SCHEDULED or SCHEDULED_EXP_DATE, the card contract status is not changed and will be CLOSED when the closing date is reached."
          },
          "closingDate": {
            "type": "string",
            "format": "date-time",
            "description": "If the delay type is IMMEDIATE, the closing date is the current date.\nIf the delay type is SCHEDULED, the closing date is the one provided in the request.\nIf the delay type is SCHEDULED_EXP_DATE, the closing date is the expiration date of the card.\nFormat: \"yyyy-MM-ddTHH:mm:ss.SSSZ\".\nNote: For closing type SCHEDULED_EXP_DATE:\n - If there are several cards within the card contract, the expiry date of the card with the highest PAN sequence number is taken (among the ones in ACTIVE, CREATED, or BLOCKED temporarily status). If all the cards have the same PSN, the expiry date of the latest issued card is taken.\n - Example 1: PSN incremented by PAN (product setup)\n   - Card1 is the initial issued card: PSN = 1\n   - Card1 has malfunction and is replaced by Card2 with same PAN and PSN = 2.\n     Then if the card contract closing is requested, the closing date is set with the expiry date of card2.\n - Example 2: PSN incremented by PAN (product setup)\n   - Card1 is the initial issued card: PSN = 1\n   - Card1 has malfunction and is replaced by Card2 with same PAN and PSN = 2.\n   - Card2 is lost: Card2 is permanently blocked and replaced by Card3 with new PAN and PSN = 1.\n     Then if the card contract closing is requested, the closing date is set with the expiry date of card3."
          }
        },
        "title": "CloseCardContractResponse"
      },
      "CloseContractRequest": {
        "type": "object",
        "required": [
          "closureDelayType",
          "closingReason"
        ],
        "properties": {
          "closingDate": {
            "type": "string",
            "format": "date-time",
            "description": "The closing date has to be provided when the closure delay type is SCHEDULED. In this case, the closing date must be greater than the current date."
          },
          "closingReason": {
            "type": "string",
            "description": "Reason for closing the contract (free text)"
          },
          "closingComment": {
            "type": "string",
            "description": "Comment associated with the contract closing action (free text)"
          },
          "closureDelayType": {
            "type": "string",
            "description": "Closure Delay Type.\nPossibles values :\n- IMMEDIATE (at current date)\n- SCHEDULED (at current date or at future date)\n- SCHEDULED_EXP_DATE (at expiry date of the principal card)"
          },
          "feeReimbursementAtCardContractClosing": {
            "type": "boolean",
            "description": "Indicates if the related membership/account setup fees must be partially reimbursed in case of contract closure"
          }
        },
        "title": "CloseContractRequest"
      },
      "SuspendContractRequest": {
        "type": "object",
        "required": [
          "closingReason"
        ],
        "properties": {
          "closingReason": {
            "type": "string",
            "description": "Reason of the contract suspension.\nThe same reason is used for the blocking of the card, the replacement and the renewal.\nTherefore, the reason must be configured as card blocking reason / replacement blocking reason / renewal blocking reason for the issuer."
          },
          "closingComment": {
            "type": "string",
            "description": "Comment associated with the contract suspension"
          },
          "feeReimbursementAtCardContractClosing": {
            "type": "boolean",
            "description": "Indicates if the related membership/account setup fees must be partially reimbursed in case of contract suspension.\nBy default, the value is False."
          }
        },
        "title": "SuspendContractRequest"
      },
      "CloseContractResponse": {
        "type": "object",
        "properties": {
          "contract": {
            "$ref": "#/definitions/CloseContractResponseContract"
          }
        },
        "title": "CloseContractResponse"
      },
      "CloseCorporateContractResponse": {
        "type": "object",
        "required": [
          "corporateContract",
          "accounts"
        ],
        "properties": {
          "corporateContract": {
            "description": "Data related to the contract closing",
            "allOf": [
              {
            "$ref": "#/definitions/CloseCorporateContractResponseCorporateContract"
              }
            ]
          },
          "accounts": {
            "type": "array",
            "description": "Account identifiers linked to the corporate contract",
            "items": {
              "$ref": "#/definitions/CloseCorporateContractResponseAccount"
            }
          }
        },
        "title": "CloseCorporateContractResponse"
      },
      "AddCorporateContractEntityResponse": {
        "type": "object",
        "properties": {
          "contract": {
            "description": "Response data",
            "allOf": [
              {
               "$ref": "#/definitions/AddCorporateContractEntityResponseContract"
              }
            ]
          },
          "customers": {
            "description": "Information related to all persons associated to the contract (contract holder, account owner, card holder)",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseCustomer"
            }
          },
          "companies": {
            "description": "Information related to all companies associated to the contract (e.g. contract owner, account owner)",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseCompany"
            }
          }
        },
        "title": "AddCorporateContractEntityResponse"
      },
      "AddCorporateContractEntityResponseContract": {
        "type": "object",
        "required": [
          "contractIdentifier",
          "corporateContractEntity"
        ],
        "properties": {
          "contractIdentifier": {
            "description": "Refer to ContractIdentifier.contractIdentifier",
            "allOf": [
              {
               "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "corporateContractEntity": {
            "description": "Data related to the new entity added in the company organization",
            "allOf": [
              {
               "$ref": "#/definitions/CreateCorporateContractResponseCorporateContractEntity"
              }
            ]
          }
        },
        "title": "AddCorporateContractEntityResponse.Contract"
      },
      "AddCorporateEmployeeCardsAndAccountsResponse": {
        "type": "object",
        "x-wl-sensitive-data": true,
        "required": [
          "contract"
        ],
        "properties": {
          "customers": {
            "description": "Information related to all persons associated to the contract (contract holder, account owner, card holder)",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseCustomer"
            }
          },
          "contract": {
            "description": "Data related to the corporate contract including information of the new employee cards and accounts added under the entity of the company organization",
            "allOf": [
              {
               "$ref": "#/definitions/AddCorporateEmployeeCardsAndAccountsResponseContract"
              }
            ]
          }
        },
        "title": "AddCorporateEmployeeCardsAndAccountsResponse"
      },
      "AddCorporateVcaServiceCardsAndAccountsResponse": {
        "type": "object",
        "required": [
          "contract"
        ],
        "properties": {
          "customers": {
            "description": "Information related to all persons associated to the contract (contract holder, account owner, card holder)",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseCustomer"
            }
          },
          "contract": {
            "description": "Data related to the corporate contract including information of the new VCA service cards and accounts added under the entity of the company organization",
            "allOf": [
              {
               "$ref": "#/definitions/AddCorporateEmployeeCardsAndAccountsResponseContract"
              }
            ]
          }
        },
        "title": "AddCorporateVcaServiceCardsAndAccountsResponse"
      },
      "AddCorporateEmployeeCardsAndAccountsResponseContract": {
        "type": "object",
        "required": [
          "contractIdentifier",
          "corporateContractEntity"
        ],
        "properties": {
          "contractIdentifier": {
            "description": "Refer to ContractIdentifier.contractIdentifier",
            "allOf": [
              {
               "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "corporateContractEntity": {
            "description": "Information of the entity associated to the employee cards and accounts",
            "allOf": [
              {
               "$ref": "#/definitions/AddCorporateEmployeeCardsAndAccountsResponseCorporateContractEntity"
              }
            ]
          },
          "corporateEmployeeCardsAndAccounts": {
            "description": "Data related to each employee cards and accounts",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseCorporateEmployeeCardsAndAccounts"
            }
          }
        },
        "title": "AddCorporateEmployeeCardsAndAccountsResponse.Contract"
      },
      "AddCorporateEmployeeCardsAndAccountsResponseCorporateContractEntity": {
        "type": "object",
        "required": [
          "level",
          "levelDescription"
        ],
        "properties": {
          "level": {
            "type": "integer",
            "description": "Refer to CorporateContractEntity.level",
            "example" :  2
          },
          "levelDescription": {
            "type": "string",
            "description": "Refer to CorporateContractLevel.levelDescription"
          },
          "parentCompanyEntityExternalReference": {
            "description": "Refer to CorporateContractEntity.parentCompanyEntityExternalReference",
            "type": "string"
          },
          "parentAccountIdentifier": {
            "description": "Refer to CorporateContractEntity.parentAccountIdentifier",
            "allOf": [
              {
               "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          }
        },
        "title": "AddCorporateEmployeeCardsAndAccountsResponse.CorporateContractEntity"
      },
      "CreateCorporateContractResponse": {
        "x-wl-sensitive-data": true,
        "type": "object",
        "required": [
          "contract"
        ],
        "properties": {
          "contract": {
            "description": "Response data",
            "allOf": [
              {
               "$ref": "#/definitions/CreateCorporateContractResponseContract"
              }
            ]
          },
          "customers": {
            "description": "Information related to all persons associated to the contract (contract holder, account owner, card holder)",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseCustomer"
            }
          },
          "companies": {
            "description": "Information related to all companies associated to the contract (e.g. contract owner, account owner)",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseCompany"
            }
          }
        },
        "title": "CreateCorporateContractResponse"
      },
      "CreateCorporateContractResponseContract": {
        "type": "object",
        "required": [
          "contractIdentifier",
          "status",
          "creationDate",
          "productIdentifier",
          "contractOwnerIdentifier",
          "corporateContractLevels",
          "corporateContractRootEntity"
        ],
        "properties": {
          "contractIdentifier": {
            "description": "Refer to ContractIdentifier.contractIdentifier",
            "allOf": [
              {
               "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "status": {
            "description": "Current status of the contract after corporate contract creation request (SIGNED)\nRefer to Contract.status",
            "type": "string"
          },
          "creationDate": {
            "description": "This is the contract creation date in our system.\nFormat : yyyy-MM-ddTHH:mm:ssZ",
            "type": "string",
            "format": "date-time"
          },
          "productIdentifier": {
            "description": "This is the reference of the product provided and used to instantiate the corporate contract.",
            "allOf": [
              {
               "$ref": "#/definitions/ProductIdentifier"
              }
            ]
          },
          "contractOwnerIdentifier": {
            "description": "Refer to CorporateContract.contractOwnerIdentifier",
            "allOf": [
              {
               "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "statementDuplicatedForCompany": {
            "description": "Refer to Contract.statementDuplicatedForCompany",
            "type": "boolean"
          },
          "hierarchyDefaultResetCreditLimit": {
            "description": "Refer to Contract.hierarchyDefaultResetCreditLimit",
            "type": "boolean"
          },
          "logoReference": {
            "description": "Refer to Contract.logoReference",
            "type": "string"
          },
          "dispatchCode": {
            "description": "Refer to Contract.dispatchCode",
            "type": "string"
          },
          "corporateContractLevels": {
            "description": "Information for each level in the company organization",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseCorporateContractLevel"
            }
          },
          "corporateContractRootEntity": {
            "description": "Data related to the root entity (corresponding to the first level of the company organization)",
            "allOf": [
              {
               "$ref": "#/definitions/CreateCorporateContractResponseCorporateContractRootEntity"
              }
            ]
          },
          "corporateContractEntities": {
            "description": "Information for each entity if any",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseCorporateContractEntity"
            }
          },
          "corporateEmployeeCardsAndAccounts": {
            "description": "Data related to each employee cards and accounts",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseCorporateEmployeeCardsAndAccounts"
            }
          }
        },
        "title": "CreateCorporateContractResponse.Contract"
      },
      "CreateCorporateContractResponseCorporateContractLevel": {
        "type": "object",
        "required": [
          "level",
          "levelDescription"
        ],
        "properties": {
          "level": {
            "type": "integer",
            "description": "Refer to CorporateContractLevel.level",
            "example" :  1
          },
          "levelDescription": {
             "description": "Refer to CorporateContractLevel.levelDescription",
             "type": "string"
          }
        },
        "title": "CreateCorporateContractResponse.CorporateContractLevel"
      },
      "CreateCorporateContractResponseCorporateContractRootEntity": {
        "type": "object",
        "required": [
          "companyEntityExternalReference",
          "rootAccount"
        ],
        "properties": {
          "companyEntityExternalReference": {
            "description": "Refer to CorporateContractEntity.companyEntityExternalReference",
            "type": "string"
          },
          "rootAccount": {
            "description": "Data related to the root account",
            "allOf": [
              {
               "$ref": "#/definitions/CreateCorporateContractResponseAccount"
              }
            ]
          }
        },
        "title": "CreateCorporateContractResponse.CorporateContractRootEntity"
      },
      "CreateCorporateContractResponseAccount": {
        "type": "object",
        "required": [
          "accountIdentifier",
          "root",
          "accountOwnerIdentifier"
        ],
        "properties": {
          "accountIdentifier": {
            "description": "Identification of the root account either by the Issuer account external reference or by the account reference..",
            "allOf": [
              {
               "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "root": {
            "description": "Refer to Account.root",
            "type": "boolean"
          },
          "accountOwnerIdentifier": {
            "description": "Refer to Account.accountOwnerIdentifier",
            "allOf": [
              {
               "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "accountGuarantorIdentifier": {
            "description": "Refer to Account.accountGuarantorIdentifier",
            "allOf": [
              {
               "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "status": {
            "description": "Current status of the account (ACTIVE, because a corporate contract is always created in SIGNED status).\nRefer to Account.status",
            "type": "string"
          }
        },
        "title": "CreateCorporateContractResponse.Account"
      },
      "CreateCorporateContractResponseCorporateContractEntity": {
        "type": "object",
        "required": [
          "level",
          "companyEntityExternalReference",
          "accountIdentifier",
          "corporateContractEntityAccounts"
        ],
        "properties": {
          "level": {
            "type": "integer",
            "description": "Refer to CorporateContractEntity.level",
            "example" :  2
          },
          "companyEntityExternalReference": {
            "description": "Refer to CorporateContractEntity.companyEntityExternalReference",
            "type": "string"
          },
          "parentCompanyEntityExternalReference": {
            "description": "Refer to CorporateContractEntity.parentCompanyEntityExternalReference",
            "type": "string"
          },
          "accountIdentifier": {
            "description": "Refer to CorporateContractEntity.accountIdentifier",
            "allOf": [
              {
               "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "parentAccountIdentifier": {
            "description": "Refer to CorporateContractEntity.parentAccountIdentifier",
            "allOf": [
              {
               "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "corporateContractEntityAccounts": {
            "description": "Information for each entity account (represent one entity of the company organization, e.g. country, division, department)",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseCorporateContractEntityAccount"
            }
          }
        },
        "title": "CreateCorporateContractResponse.CorporateContractEntity"
      },
      "CreateCorporateContractResponseCorporateContractEntityAccount": {
        "type": "object",
        "properties": {
          "account": {
            "description": "",
            "allOf": [
              {
               "$ref": "#/definitions/CreateCorporateContractResponseAccount"
              }
            ]
          }
        },
        "title": "CreateCorporateContractResponse.CorporateContractEntityAccount"
      },
      "CreateCorporateContractResponseCorporateEmployeeCardsAndAccounts": {
        "type": "object",
        "required": [
          "parentCompanyEntityExternalReference"
        ],
        "properties": {
          "parentCompanyEntityExternalReference": {
            "description": "Refer to CorporateContractEntity.parentCompanyEntityExternalReference",
            "type": "string"
          },
          "corporateEmployeeAccounts": {
            "description": "Information for each employee account",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseCorporateEmployeeAccount"
            }
          },
          "corporateEmployeeCards": {
            "description": "Information for each employee card",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseCorporateEmployeeCard"
            }
          }
        },
        "title": "CreateCorporateContractResponse.CorporateEmployeeCardsAndAccounts"
      },
      "CreateCorporateContractResponseCorporateEmployeeAccount": {
        "type": "object",
        "required": [
          "companyEntityExternalReference"
        ],
        "properties": {
          "companyEntityExternalReference": {
            "description": "External reference of the employee account.",
            "type": "string"
          },
          "account": {
            "description": "",
            "allOf": [
              {
               "$ref": "#/definitions/CreateCorporateContractResponseAccount"
              }
            ]
          }
        },
        "title": "CreateCorporateContractResponse.CorporateEmployeeAccount"
      },
      "CreateCorporateContractResponseCorporateEmployeeCard": {
        "type": "object",
        "properties": {
          "cardContract": {
            "description": "Information for each employee card contract ",
            "allOf": [
              {
               "$ref": "#/definitions/CreateCorporateContractResponseCardContract"
              }
            ]
          }
        },
        "title": "CreateCorporateContractResponse.CorporateEmployeeCard"
      },
      "CreateCorporateContractResponseCardContract": {
        "type": "object",
        "properties": {
          "cardContractIdentifier": {
            "description": "Refer to CardContract.cardContractIdentifier",
            "allOf": [
              {
               "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "cardHolderIdentifier": {
            "description": "Refer to CardContract.cardHolderIdentifier",
            "allOf": [
              {
               "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "status": {
            "description": "Card contract status after the corporate contract creation request (ACTIVE)",
            "type": "string"
          },
          "card": {
            "description": "Card data related to the new card",
            "allOf": [
              {
               "$ref": "#/definitions/CreateCorporateContractResponseCard"
              }
            ]
          }
        },
        "title": "CreateCorporateContractResponse.CardContract"
      },
      "CreateCorporateContractResponseCard": {
        "type": "object",
        "properties": {
          "cardIdentifier": {
            "description": "Refer to Card.cardIdentifier",
            "allOf": [
              {
               "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "pan": {
            "description": "Refer to Card.pan",
            "type": "string"
          },
          "panReference": {
            "description": "Refer to Card.panReference",
            "type": "string"
          },
          "maskedPan": {
            "description": "Refer to Card.maskedPan",
            "type": "string"
          },
          "expiryDate": {
            "description": "Refer to Card.expiryDate",
            "type": "string"
          },
          "panSequenceNumber": {
            "description": "Refer to Card.panSequenceNumber",
            "type": "string"
          },
          "status": {
            "description": "Card status after the corporate contract creation request (CREATED or ACTIVE)",
            "type": "string"
          },
          "orders": {
            "description": "Information of each order (card order, PIN mailer order) if any",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseOrder"
            }
          }
        },
        "title": "CreateCorporateContractResponse.Card"
      },
      "CreateCorporateContractResponseOrder": {
        "type": "object",
        "properties": {
          "orderIdentifier": {
            "description": "Refer to Order.orderIdentifier",
            "allOf": [
              {
               "$ref": "#/definitions/OrderIdentifier"
              }
            ]
          },
          "orderType": {
            "description": "The order can correspond to a card, a PIN mailer or a TAN mailer.\nPossible values are : CardOrder, PinMailerOrder, TanMailerOrder",
            "type": "string"
          },
          "currentInternalStatus": {
            "description": "Current internal status of the order:\n- CREATED: still to be validated by the branch\n- CONFIRMED: if the order is validated by the branch\n- ORDERABLE: if ready to be issued (depending on the configuration, e.g. PIN is generated and available)",
            "type": "string"
          }
        },
        "title": "CreateCorporateContractResponse.Order"
      },
      "CreateCorporateContractResponseCustomer": {
        "type": "object",
        "required": [
          "customerIdentifier",
          "lastName",
          "firstName",
          "addresses"
        ],
        "properties": {
          "customerIdentifier": {
            "description": "Refer to Customer.CustomerIdentifier",
            "allOf": [
              {
               "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Refer to courtesyTitle"
          },
          "lastName": {
            "description": "Refer to Customer.lastName",
            "type": "string"
          },
          "firstName": {
            "description": "Refer to Customer.firstName",
            "type": "string"
          },
          "addresses": {
            "description": "List of addresses of the customer whatever their type (MAIL, EMAIL, PHONE)",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseAddress"
            }
          }
        },
        "title": "CreateCorporateContractResponse.Customer"
      },
      "CreateCorporateContractResponseAddress": {
        "type": "object",
        "required": [
          "addressIdentifier",
          "addressLabel",
          "addressType"
        ],
        "properties": {
          "addressIdentifier": {
            "description": "Refer to Address.addressIdentifier",
            "allOf": [
              {
               "$ref": "#/definitions/AddressIdentifier"
              }
            ]
          },
          "addressLabel": {
            "description": "Refer to Address.addressLabel",
            "type": "string"
          },
          "addressType": {
            "description": "Refer to Address.addressType",
            "type": "string"
          }
        },
        "title": "CreateCorporateContractResponse.Address"
      },
      "CreateCorporateContractResponseCompany": {
        "type": "object",
        "required": [
          "customerIdentifier",
          "addresses"
        ],
        "properties": {
          "customerIdentifier": {
            "description": "Refer to Customer.CustomerIdentifier",
            "allOf": [
              {
               "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "corporateName": {
            "description": "Refer to Company.corporateName",
            "type": "string"
          },
          "addresses": {
            "description": "List of addresses of the company whatever their type (MAIL, EMAIL, PHONE)",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseAddress"
            }
          },
          "contacts": {
            "description": "List of contacts of the company",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractResponseContact"
            }
          }
        },
        "title": "CreateCorporateContractResponse.Company"
      },
      "CreateCorporateContractResponseContact": {
        "type": "object",
        "required": [
          "contactReference"
        ],
        "properties": {
          "name": {
            "description": "Refer to Contact.name",
            "type": "string"
          },
          "firstName": {
            "description": "Refer to Contact.firstName",
            "type": "string"
          },
          "departmentName": {
            "description": "Refer to Contact.departmentName",
            "type": "string"
          },
          "contactReference": {
            "description": "Refer to Contact.contactReference",
            "type": "string"
          }
        },
        "title": "CreateCorporateContractResponse.Contact"
      },
      "SuspendContractResponse": {
        "type": "object",
        "properties": {
          "contract": {
            "$ref": "#/definitions/SuspendContractResponseContract"
          }
        },
        "title": "SuspendContractResponse"
      },
      "CancelContractClosingResponse": {
        "type": "object",
        "properties": {
          "contractIdentifier": {
            "description": "Identification of the contract either by Issuer contract external reference or by contract reference.",
            "allOf": [
              {
            "$ref": "#/definitions/ContractIdentifier"
          }
            ]
          }
        },
        "title": "CancelContractClosingResponse"
      },
      "CancelContractSuspensionResponse": {
        "type": "object",
        "properties": {
          "contractIdentifier": {
            "description": "Identification of the contract either by Issuer contract external reference or by contract reference.",
            "allOf": [
              {
            "$ref": "#/definitions/ContractIdentifier"
          }
            ]
          }
        },
        "title": "CancelContractSuspensionResponse"
      },
      "CloseContractResponseAccount": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "description": "Identification of the account either by Issuer account external reference or by account reference.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "root": {
            "type": "boolean",
            "description": "Refer to Account.root"
          },
          "status": {
            "type": "string",
            "description": "Refer to Account.status"
          }
        },
        "title": "CloseContractResponse.Account"
      },
      "CloseCorporateContractResponseAccount": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "description": "Identification of the account either by Issuer account external reference or by account reference",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          }
        },
        "title": "CloseCorporateContractResponse.Accounts"
      },
      "SuspendContractResponseAccount": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "description": "Identification of the account either by Issuer account external reference or by account reference",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "root": {
            "type": "boolean",
            "description": "Indicates whether the account is the root account (true) or not (false)."
          },
          "status": {
            "type": "string",
            "description": "Account status after the contract suspension request (not changed, the account is still active during the contract suspension period)"
          }
        },
        "title": "SuspendContractResponse.Account"
      },
      "CloseContractResponseCard": {
        "type": "object",
        "required": [
          "panReference"
        ],
        "properties": {
          "cardIdentifier": {
            "description": "Identification of the card either by Issuer card external reference or by card reference.",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "maskedPan": {
            "type": "string",
            "description": "example: 445442******0275 Masked Primary Account Number (PAN) of the card "
          },
          "panReference": {
            "type": "string",
            "description": "Refer to Card.panReference"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date of the card.Format is MMYY (month and year)"
          },
          "panSequenceNumber": {
            "type": "string",
            "description": "Number identifying cards either with same PAN or with same PAN and same Expiry date (depending of the card product configuration)."
          },
          "status": {
            "type": "string",
            "description": "Card status after the contract closing request depending on the closure delay type\n If the closure delay type is IMMEDIATE, the card status can be DEACTIVATED, CANCELLED, BLOCKED (permanently).\n If the closure delay type is SCHEDULED, the card status is not changed."
          }
        },
        "title": "CloseContractResponse.Card"
      },
      "SuspendContractResponseCard": {
        "type": "object",
        "required": [
          "panReference"
        ],
        "properties": {
          "cardIdentifier": {
            "description": "Identification of the card either by Issuer card external reference or by card reference",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "maskedPan": {
            "type": "string",
            "example": "445442******0275",
            "description": "Masked Primary Account Number (PAN) of the card (optional)."
          },
          "panReference": {
            "type": "string",
            "description": "Refer to Card.panReference"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date of the card.\nFormat is MMYY (month and year)"
          },
          "panSequenceNumber": {
            "type": "string",
            "description": "Number identifying cards either with same PAN or with same PAN and same Expiry date (depending of the card product configuration)"
          },
          "status": {
            "type": "string",
            "description": "Card status after the contract suspension request (BLOCKED)"
          }
        },
        "title": "SuspendContractResponse.Card"
      },
      "CloseContractResponseCardContract": {
        "type": "object",
        "properties": {
          "cardContractIdentifier": {
            "description": "Identification of the card contract either by Issuer card contract external reference or by card contract reference.",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Card Contract status after the contract closing request depending on the closure delay type\nIf the closure delay type is IMMEDIATE, the card contract status is CLOSED.\n If the closure delay type is SCHEDULED or SCHEDULED_EXP_DATE, the card contract status is not changed."
          },
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CloseContractResponseCard"
            }
          }
        },
        "title": "CloseContractResponse.CardContract"
      },
      "SuspendContractResponseCardContract": {
        "type": "object",
        "properties": {
          "cardContractIdentifier": {
            "description": "Identification of the card contract either by Issuer card contract external reference or by card contract reference",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Card Contract status after the contract suspension request (not changed, the card contract is still active during the contract suspension period, only renewal/replacement are blocked)"
          },
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SuspendContractResponseCard"
            }
          },
          "replacementBlockingReason": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "renewalBlockingReason": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "blockingRenewalReasonCode": {
            "type": "string",
            "description": "Refer to CardContract.blockingRenewalReasonCode"
          },
          "blockingReplacementReasonCode": {
            "type": "string",
            "description": "Refer to CardContract.blockingReplacementReasonCode"
          }
        },
        "title": "SuspendContractResponse.CardContract"
      },
      "CloseContractResponseContract": {
        "type": "object",
        "properties": {
          "contractIdentifier": {
            "description": "Identification of the contract either by Issuer contract external reference or by contract reference.",
            "allOf": [
              {
            "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Contract status after the contract closing request depending on the closure delay type \nIf the closure delay type is IMMEDIATE, the contract status is CLOSED.\n If the closure delay type is SCHEDULED or SCHEDULED_EXP_DATE, the contract status is not changed and will be CLOSED when the closing date is reached."
          },
          "closingDate": {
            "type": "string",
            "format": "date-time",
            "description": "\nIf the closure delay type is IMMEDIATE, the closing date is the current date.\n If the closure delay type is SCHEDULED, the closing date is the one provided in the request.\nIf the closure delay type is SCHEDULED_EXP_DATE, the closing date is the expiry date of the principal card."
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CloseContractResponseAccount"
            }
          },
          "cardContracts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CloseContractResponseCardContract"
            }
          }
        },
        "title": "CloseContractResponse.Contract"
      },
      "CloseCorporateContractResponseCorporateContract": {
        "type": "object",
        "required": [
          "contractIdentifier",
          "status",
          "closingDate"
        ],
        "properties": {
          "contractIdentifier": {
            "description": "Identification of the contract either by Issuer contract external reference or by contract reference.",
            "allOf": [
              {
            "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Corporate contract status after the contract closing request depending on the closure delay type\nIf the closure delay type is IMMEDIATE, the contract status is CLOSED.\n If the closure delay type is SCHEDULED, the contract status is not changed and will be CLOSED when the closing date is reached."
          },
          "closingDate": {
            "type": "string",
            "format": "date-time",
            "description": "\nIf the closure delay type is IMMEDIATE, the closing date is the current date.\n If the closure delay type is SCHEDULED, the closing date is the one provided in the request."
          }
        },
        "title": "CloseCorporateContractResponse.CorporateContract"
      },
      "SuspendContractResponseContract": {
        "type": "object",
        "properties": {
          "contractIdentifier": {
            "description": "Identification of the contract either by Issuer contract external reference or by contract reference",
            "allOf": [
              {
            "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Contract status after the contract suspension request (not changed, the contract is still active during the contract suspension period)"
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SuspendContractResponseAccount"
            }
          },
          "cardContracts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SuspendContractResponseCardContract"
            }
          },
          "closingDate": {
            "type": "string",
            "description": "Refer to Contract.closingDate",
            "format": "date-time"
          }
        },
        "title": "SuspendContractResponse.Contract"
      },
      "CloseInsuranceContractResponse": {
        "type": "object",
        "required": [
          "accountIdentifier",
          "insuranceContractIdentifier"
        ],
        "properties": {
          "accountIdentifier": {
            "description": "The account that insurance contract belongs to ",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "insuranceContractIdentifier": {
            "description": "The insurance package which is linked to this contract",
            "allOf": [
              {
                "$ref": "#/definitions/InsuranceContractIdentifier"
              }
            ]
          }
        },
        "title": "CloseInsuranceContractResponse"
      },
      "Contact": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "name": {
            "type": "string",
            "description": "Contact name"
          },
          "firstName": {
            "type": "string",
            "description": "Contact first name"
          },
          "departmentName": {
            "type": "string",
            "description": "Contact department name. Free text."
          },
          "sex": {
            "type": "string",
            "description": "Sex of the contact"
          },
          "description": {
            "type": "string",
            "description": "Description of the role in the company (e.g. 'sales manager'). Free text"
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Title of the contact. Free text"
          },
          "contactIdentifier": {
            "description": "Unique contact identifier",
            "allOf": [
              {
                "$ref": "#/definitions/ContactIdentifier"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "Represents the type of contact for customer (person). The  possible values are configured per Issuer. \nAn example can be: Power_of_Attorney or Legal_Representative"
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "description": "Birth date of the contact"
          },
          "postalAddress": {
            "description": "The postal adress of the contact",
            "allOf": [
              {
                "$ref": "#/definitions/MailAddress"
              }
            ]
          }
        },
        "title": "Contact"
      },
      "Contract": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "contractIdentifier": {
            "description": "Identification of the contract either by Issuer contract external reference or by contract reference.",
            "allOf": [
              {
                "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "advertisementFlags": {
            "$ref": "#/definitions/AdvertisementFlags"
          },
          "issuerBranchCode": {
            "type": "string",
            "description": "Code of the branch which owns the contract. By default, value is NO_BRANCH."
          },
          "cardReleaseOrder": {
            "type": "string",
            "description": "Used for physical cards only and when the contract is created to know how to issue card orders towards embosser\nPossible values are:\n- IMMEDIATE: As soon as the contract is in awaiting signature, the card order is released by our system (send to embosser)\n- AUTOMATIC: As soon as the contract is signed, the card order is released by our system (send to embosser)"
          },
          "closingComment": {
            "type": "string",
            "description": "Comment associated with the contract closing action (optional)\nFree Text"
          },
          "closingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Closing date of the contract (present only in case of contract is already closed or contract closing is scheduled)"
          },
          "closingReason": {
            "type": "string",
            "description": "Indicates the reason for closing the contract (present only in case of contract is already closed or contract closing is scheduled)\nFree text."
          },
          "closureDelayType": {
            "type": "string",
            "description": "The closing type of the contract (present only in case of contract is already closed or contract closing is scheduled)\nThe closing type can be: \nIMMEDIATE (at current date)\nSCHEDULED (at current date or at future date)\nSCHEDULED_EXP_DATE (at expiry date of the principal card)",
            "enum": [
              "IMMEDIATE",
              "SCHEDULED",
              "SCHEDULED_EXP_DATE"
            ]
          },
          "dataAnalysisFlags": {
            "$ref": "#/definitions/DataAnalysisFlags"
          },
          "deliveryChannel": {
            "$ref": "#/definitions/DeliveryChannel"
          },
          "feeReimbursementAtCardContractClosing": {
            "type": "boolean",
            "description": "Reimbursement of membership fee at card contract closing is by default retrieved from issuer configuration"
          },
          "legitimacyDocuments": {
            "type": "array",
            "description": "This is the list of legitimacy documents: one document per cardholder, if provided.",
            "items": {
              "$ref": "#/definitions/LegitimacyDocument"
            }
          },
          "numberOfFreeCardsMembershipFee": {
            "type": "integer",
            "format": "int32",
            "description": "Number of cards for which membership fee is not generated (optional)"
          },
          "numberOfFreeCardsAccountSetupFee": {
            "type": "integer",
            "format": "int32",
            "description": "Number of cards for which account setup fee is not generated (optional)"
          },
          "numberOfFreeCardsPrimaryCardImpacted": {
            "type": "boolean",
            "default": false,
            "description": "Indicates if the primary card is always the first card to be considered as free and then the additional cards if any will be considered  (true) or if only additional cards can be free (false). By default, the value is False.\n\nE.g. Number of cards for which membership fee is not generated = 2\nIf the flag is True, the Primary card and only 1 additional card have no membership fee.\nIf the flag is False, membership fee is generated for the primary card and only 2 additional card have no membership fee."
          },
          "signatureDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the contract was signed (mandatory if the contract is in SIGNED status)"
          },
          "specificFields": {
            "type": "object",
            "description": "A list of values (label:value|) related to a contract that can be provided by e.g. the issuer for information or usage by other systems (optional).\nThose provided values have no impact on our system business processes.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "Current status of the contract in our system (mandatory)\nPossible values:\nAWAITING_SIGNATURE: the contract definition is completed by the issuer, but not signed yet\nSIGNED: the contract was signed, e.g. by the customer, the issuer after N days (no automatic process in our system)\nCLOSED:The contract is permanently closed (final status)"
          },
          "statusDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the current status of the contract was set."
          },
          "waiveFee": {
            "type": "boolean",
            "description": "Indicates if contract related fees are waived (true) or not (false) during contract life (by default, value is false).\nThis parameter is applied to the full contract and is used to waive all account setup and membership fees related to cards within the contract : membership fee (normal, pro-rata, reimbursement, turnover reimbursement) and account setup fees (normal, pro-rata).\nThis parameter can be modified later."
          },
          "accountIdentifiers": {
            "type": "array",
            "description": "List of all accounts (identifiers only) belonging to the account hierarchy of this contract.",
            "items": {
              "$ref": "#/definitions/AccountIdentifier"
            }
          },
          "accounts": {
            "type": "array",
            "description": "List of all accounts (with account data) belonging to the account hierarchy of this contract.",
            "items": {
              "$ref": "#/definitions/Account"
            }
          },
          "cardContractIdentifiers": {
            "type": "array",
            "description": "List of all cardContracts (identifiers only) belonging to this contract.",
            "items": {
              "$ref": "#/definitions/CardContractIdentifier"
            }
          },
          "cardContracts": {
            "type": "array",
            "description": "List of all cardContracts (with cardContract data) belonging to this contract.",
            "items": {
              "$ref": "#/definitions/CardContract"
            }
          },
          "contractOwnerIdentifier": {
            "description": "Identifier of the contract owner",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "contractCustomerIdentifiers": {
            "type": "array",
            "description": "List of all customers (identifiers only) belonging to this contract as contract owner, account owner, account guarantor, or cardholder.",
            "items": {
              "$ref": "#/definitions/CustomerIdentifier"
            }
          },
          "contractCustomers": {
            "type": "array",
            "description": "List of all customers (with customer data) belonging to this contract as contract owner, account owner, account guarantor, or cardholder.",
            "items": {
              "$ref": "#/definitions/Customer"
            }
          },
          "productIdentifier": {
            "description": "Identifier of the product which the contract is based on",
            "allOf": [
              {
                "$ref": "#/definitions/ProductIdentifier"
              }
            ]
          },
          "rootAccountIdentifier": {
            "description": "Identifier of the root account (in the account hierarchy) linked to this contract",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "contractFees": {
            "type": "array",
            "description": "Selected Account setup fee and Membership fee models for the accounts. ",
            "items": {
              "$ref": "#/definitions/ContractFee"
            }
          },
          "membershipFeeAnniversaryDate": {
            "type": "string",
            "format": "date-time",
            "description": "Next anniversary date of the membership fee (optional) used for the principal card and for the cards whose fees depend on the principal card. It can be changed when the fee frequency is Yearly"
          },
          "originalContractIdentifier": {
            "description": "Identifier of the original contract in case of Product Change",
            "allOf": [
              {
                "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "changedContractIdentifier": {
            "description": "Identifier of the new contract in case of Product Change",
            "allOf": [
              {
                "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "contractClosedByProductChange": {
            "description": "Information on the product change that closed this contract",
            "allOf": [
              {
                "$ref": "#/definitions/ProductChangeInformation"
              }
            ]
          },
          "contractCreatedFromProductChange": {
            "description": "Information on the product change that created this contract",
            "allOf": [
              {
                "$ref": "#/definitions/ProductChangeInformation"
              }
            ]
          },
          "coBrander": {
            "type": "string",
            "description": "coBrander associated to a consumer contract. This information is relevant when a product is shared by several cobranders. It is provided by the issuer at its convenience (Cobranders being managed by the issuer). This field is stored in our system as informational data at contract level and is populated at each account of the account hierarchy."
          },
          "addonSubscriptions": {
            "type": "array",
            "description": "List of add-on service subscriptions for contract's accounts or card contracts",
            "items": {
              "$ref": "#/definitions/AddOnSubscription"
            }
          }
        },
        "description": "Consumer contract entity",
        "title": "Contract"
      },
      "ContractFee": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "description": "Contract fees related account identifier",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "selectedModels": {
            "type": "array",
            "description": "Fee Model used for the contract (mandatory, Account setup fee and/or Membership fee models).",
            "items": {
              "$ref": "#/definitions/ContractModel"
            }
          },
          "membershipFeeAnniversaryDate": {
            "description": "Next anniversary date of the membership fee (optional) for the account",
            "type": "string",
            "format":"date-time"
          }
        },
        "title": "ContractFee"
      },
      "ContractIdentifier": {
        "type": "object",
        "description":"Identification of thecorporate contract either by Issuer contract external reference or by contract reference",
        "properties": {
          "contractReference": {
            "type": "string",
            "description": "The unique reference of the contract in our system, unique per platform\nThis reference is an UUID (universally unique identifier) on 36 digits (e.g.196c2215-9a80-4b8b-868c-18beb8c8c9)."
          },
          "issuerContractExternalReference": {
            "type": "string",
            "description": "The external reference of the contract provided by the issuer\nThis reference is unique per issuer and may be used to carry out research and find information."
          }
        },
        "title": "ContractIdentifier"
      },
      "ContractModel": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "Model Reference"
          },
          "type": {
            "type": "string",
            "description": "Type of model\nPossible values:\n- ACCOUNT_SETUP_FEE\n- MEMBERSHIP_FEE"
          }
        },
        "description": "Model containing predefined configuration for fee generation applicable on a contract",
        "title": "ContractModel"
      },
      "CreateAccountFutureUpdateRequest": {
        "type": "object",
        "required": [
          "futureChangeDate"
        ],
        "properties": {
          "futureChangeDate": {
            "description": "Refer to AccountFutureUpdate.futureChangeDate",
            "type": "string",
            "format": "date-time"
          },
          "accountFutureUpdateIdentifier": {
            "description": "Refer to AccountFutureUpdateIdentifier data type Can be provided by the issuer (e.g. used as identifier in Issuer's system).\nIf not provided by the issuer, it is filled by default with the reference generated by our system.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountFutureUpdateIdentifier"
              }
            ]
          },
          "sepaMandate": {
            "description": "The issuer can provide SEPA mandate",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAccountFutureUpdateRequestSepaMandate"
              }
            ]
          },
          "iban": {
            "description": "Refer to Account.iban\nHas to be provided as part of future update mandate input, except if the SEPA mandate UMR is provided (comes from another system).",
            "type": "string"
          },
          "updateReason": {
            "description": "Refer to AccountFutureUpdate.updateReason\nEmpty if no provided.",
            "type": "string"
          },
          "ibanOwnerName": {
            "description": "Refer to Account.ibanOwnerName\nHas to be provided as part of future update mandate input, except if the SEPA mandate UMR is provided (comes from another system).",
            "type": "string"
          },
          "bic": {
            "description": "Refer to Account.bic",
            "type": "string"
          },
          "amountDueFixedAmount": {
            "description": "Refer to Account.amountDueFixedAmount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "amountDueMinAmount": {
            "description": "Refer to Account.amountDueMinAmount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "greaterOrLesserAmountDue": {
            "description": "Refer to Account.greaterOrLesserAmountDue",
            "type": "string"
          },
          "amountDuePercentage": {
            "description": "Refer to Account.amountDuePercentage",
            "type": "string"
          },
          "directDebitFixedAmount": {
            "description": "Refer to Account.directDebitFixedAmount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "directDebitPercentage": {
            "description": "Refer to Account.directDebitPercentage",
            "type": "string"
          },
          "selectedModels": {
            "type": "array",
            "description": "Select the required model from the list.\nOnly types 'directDebitAmountModel','accountAmountDueModel' are managed for future updates",
            "items": {
              "$ref": "#/definitions/AccountModel"
            }
          },
          "sepaIndicator": {
            "type": "boolean",
            "description": "AccountFutureUpdate.sepaIndicator"
          },
          "secondIban": {
            "type": "string",
            "description": "Refer to Account.secondIban"
          },
          "paymentMode": {
            "type": "string",
            "description": "Refer to Account.paymentMode"
          }
        },
        "title": "CreateAccountFutureUpdateRequest"
      },
      "CreateAccountFutureUpdateResponse": {
        "type": "object",
        "required": [
          "accountFutureUpdateIdentifier"
        ],
        "properties": {
          "creationDate": {
            "description": "Indicates the date when the future update was created (mandatory)",
            "type": "string",
            "format": "date-time"
          },
          "futureChangeDate": {
            "description": "Refer to AccountFutureUpdate.futureChangeDate",
            "type": "string",
            "format": "date-time"
          },
          "accountIdentifier": {
            "description": "Account identifier",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "accountFutureUpdateIdentifier": {
            "description": "Refer to AccountFutureUpdateIdentifier data type",
            "allOf": [
              {
                "$ref": "#/definitions/AccountFutureUpdateIdentifier"
              }
            ]
          }
        },
        "title": "CreateAccountFutureUpdateResponse"
      },
      "ModifyAccountFutureUpdateRequest": {
        "type": "object",
        "properties": {
          "futureChangeDate": {
            "description": "Refer to AccountFutureUpdate.futureChangeDate",
            "type": "string",
            "format": "date-time"
          },
          "iban": {
            "description": "Refer to Account.iban\nHas to be provided as part of future update mandate input, except if the SEPA mandate UMR is provided (comes from another system).",
            "type": "string"
          },
          "updateReason": {
            "description": "Refer to AccountFutureUpdate.updateReason",
            "type": "string"
          },
          "ibanOwnerName": {
            "description": "Refer to Account.ibanOwnerName\nHas to be provided as part of future update mandate input, except if the SEPA mandate UMR is provided (comes from another system).",
            "type": "string"
          },
          "bic": {
            "description": "Refer to Account.bic",
            "type": "string"
          },
          "amountDueFixedAmount": {
            "description": "Refer to Account.amountDueFixedAmount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "amountDueMinAmount": {
            "description": "Refer to Account.amountDueMinAmount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "greaterOrLesserAmountDue": {
            "description": "Refer to Account.greaterOrLesserAmountDue",
            "type": "string"
          },
          "amountDuePercentage": {
            "description": "Refer to Account.amountDuePercentage",
            "type": "string"
          },
          "directDebitFixedAmount": {
            "description": "Refer to Account.directDebitFixedAmount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "directDebitPercentage": {
            "description": "Refer to Account.directDebitPercentage",
            "type": "string"
          },
          "selectedModels": {
            "type": "array",
            "description": "Select the required model from the list.",
            "items": {
              "$ref": "#/definitions/AccountModel"
            }
          },
          "sepaIndicator": {
            "type": "boolean",
            "description": "Refer to AccountFutureUpdate.sepaIndicator"
          },
          "secondIban": {
            "type": "string",
            "description": "Refer to Account.secondIban"
          },
          "paymentMode": {
            "type": "string",
            "description": "Refer to Account.paymentMode"
          },
          "sepaMandateUmr": {
            "description": "Refer to Account.sepaMandateUmr\nThe unique reference to identify the SEPA mandate can be provided to our system if mandate is created explicitly by another system.",
            "type": "string"
          },
          "debtorPhoneNumber": {
            "description": "Refer to AccountFutureUpdate.debtorPhoneNumber",
            "type": "string"
          },
          "debtorEmail": {
            "description": "Refer to AccountFutureUpdate.debtorEmail",
            "type": "string"
          },
          "debtorPostalAddress": {
            "description": "Refer to AccountFutureUpdate.debtorPostalAddress",
            "allOf": [
              {
                "$ref": "#/definitions/SepaMandateMailAddress"
              }
            ]
          },
          "mandateContractId": {
            "description": "Refer to AccountFutureUpdate.mandateContractId",
            "type": "string"
          },
          "mandateNatureType": {
            "description": "Refer to AccountFutureUpdate.mandateNatureType",
            "type": "string"
          },
          "mandateSignDate": {
            "description": "Refer to AccountFutureUpdate.mandateSignDate\nHas to be provided as part of future update mandate input, except if the SEPA mandate UMR is provided (comes from another system).",
            "type": "string",
            "format": "date-time"
          },
          "mandateSignCity": {
            "description": "Refer to AccountFutureUpdate.mandateSignCity",
            "type": "string"
          }
        },
        "title": "ModifyAccountFutureUpdateRequest"
      },
      "ModifyAccountFutureUpdateResponse": {
        "type": "object",
        "required": [
          "lastUpdateDate",
          "futureChangeDate",
          "accountIdentifier",
          "accountFutureUpdateIdentifier"
        ],
        "properties": {
          "lastUpdateDate": {
            "description": "Refer to AccountFutureUpdate.lastUpdateDate",
            "type": "string",
            "format": "date-time"
          },
          "futureChangeDate": {
            "description": "Refer to AccountFutureUpdate.futureChangeDate",
            "type": "string",
            "format": "date-time"
          },
          "accountIdentifier": {
            "description": "Identifier of an account",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "accountFutureUpdateIdentifier": {
            "description": "Refer to AccountFutureUpdateIdentifier data type",
            "allOf": [
              {
                "$ref": "#/definitions/AccountFutureUpdateIdentifier"
              }
            ]
          }
        },
        "title": "ModifyAccountFutureUpdateResponse"
      },
      "CancelAccountFutureUpdateRequest": {
        "type": "object",
        "required": [
          "futureChangeDate"
        ],
        "properties": {
          "updateReason": {
            "description": "Refer to AccountFutureUpdate.updateReason\nEmpty if no provided.",
            "type": "string"
          }
        },
        "title": "CancelAccountFutureUpdateRequest"
      },
      "CancelAccountFutureUpdateResponse": {
        "type": "object",
        "required": [
          "updateStatus"
        ],
        "properties": {
          "accountIdentifier": {
            "description": "Identifier of an account",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "accountFutureUpdateIdentifier": {
            "description": "Refer to AccountFutureUpdateIdentifier data type",
            "allOf": [
              {
                "$ref": "#/definitions/AccountFutureUpdateIdentifier"
              }
            ]
          },
          "updateStatus": {
            "type": "string",
            "description": "Refer to AccountFutureUpdate.updateStatus"
          }
        },
        "title": "CancelAccountFutureUpdateResponse"
      },
      "CreateAddOnSubscriptionRequest": {
        "type": "object",
        "required": [
          "addonReference",
          "serviceTypeReference"
        ],
        "properties": {
          "addonReference": {
            "type": "string",
            "description": "Reference of the add-on"
          },
          "subscriptionToReplaceAddonReference": {
            "description": "Processing parameter (old add-on reference) for replacing the add-on subscription for new one",
            "type": "string"
          },
          "subscriptionDate": {
            "type": "string",
            "description": "If provided, this date will be used as the starting date of the add-on subscription.",
            "format": "date-time"
          },
          "serviceTypeReference": {
            "type": "string",
            "description": "Reference of the type of add-on service."
          },
          "accountIdentifier": {
            "description": "The accountNumber of the Account for which to apply the add-on.\n*One of cardContractIdentifier/ accountIdentifier must be provided.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "cardContractIdentifier": {
            "description": "The reference of the CardContract for which to apply the add-on.\n*One of cardContractIdentifier/ accountIdentifier must be provided.",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "parameters": {
            "type": "array",
            "description": "List of add-on service parameters",
            "items": {
              "$ref": "#/definitions/CreateAddOnSubscriptionRequestAddOnParameter"
            }
          }
        },
        "title": "CreateAddOnSubscriptionRequest"
      },
      "CreateAddOnSubscriptionRequestAddOnParameter": {
        "type": "object",
        "required": [
          "reference",
          "type"
        ],
        "properties": {
          "reference": {
            "type": "string",
            "description": "Refer to AddOnServiceParameter.reference"
          },
          "value": {
            "type": "string",
            "description": "Refer to AddOnServiceParameter.value"
          }
        },
        "title": "CreateAddOnSubscriptionRequest.AddOnParameter"
      },
      "CreateAddOnSubscriptionResponse": {
        "type": "object",
        "required": [
          "addonReference",
          "serviceTypeReference"
        ],
        "properties": {
          "addonReference": {
            "type": "string",
            "description": "Name of the add-on"
          },
          "subscriptionDate": {
            "type": "string",
            "description": "Date of the add-on subscription.",
            "format": "date-time"
          },
          "accountIdentifier": {
            "description": "The accountIdentifier of the Account on which the subscription has been done",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "cardContractIdentifier": {
            "description": "The cardContractIdentifier of the Card Contract on which the subscription has been done",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          }
        },
        "title": "CreateAddOnSubscriptionResponse"
      },
      "CreateAddressRequestPhoneNumber": {
        "type": "object",
        "required": [
          "localPhoneNumber"
        ],
        "properties": {
          "countryCode": {
            "type": "string",
            "description": "Country dialing code (optional). Free text. It is recommended to provide a region dialing code (e.g. +33, +49)."
          },
          "localPhoneNumber": {
            "type": "string",
            "description": "Free text (mandatory). It’s recommended to provide an international phone number in accordance with the value provided in the country code Ex : - country code = ‘+’33’ and localPhoneNumber = ‘0622334455’ - country code = empty and localPhoneNumber = ‘+33622334455’             The value can be subject to a validation process if a specific rule has been configured at issuer level."
          }
        },
        "title": "CreateAddressRequest.PhoneNumber"
      },
      "CreateAddressRequestMailAddress": {
        "type": "object",
        "required": [
          "country"
        ],
        "properties": {
          "typeCode": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Courtesy title of the address. Free text"
          },
          "line1": {
            "type": "string",
            "description": "Address line 1 (conditional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "line2": {
            "type": "string",
            "description": "Address line 2 (conditional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "line3": {
            "type": "string",
            "description": "Address line 3 (conditional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "line4": {
            "type": "string",
            "description": "Address line 4 (conditional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "line5": {
            "type": "string",
            "description": "Address line 5 (conditional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "buildingNumber": {
            "type": "string",
            "description": "Building number of the address (optional)"
          },
          "boxNumber": {
            "type": "string",
            "description": "Box number of the address (optional)"
          },
          "streetName": {
            "type": "string",
            "description": "Street name of the address (optional)"
          },
          "postCode": {
            "type": "string",
            "description": "zip code of the address (optional)"
          },
          "townName": {
            "type": "string",
            "description": "City corresponding to the address"
          },
          "countrySubdivision": {
            "type": "string",
            "description": "Subdivision of the country (optional)"
          },
          "country": {
            "type": "string",
            "description": "Code of the country (mandatory). Free text. The value can be subject to a validation process if a specific rule has been configured at issuer level. The value can be optional if a specific rule has been configured."
          }
        },
        "title": "CreateAddressRequest.MailAddress"
      },
      "CreateAddressRequest": {
        "type": "object",
        "required": [
          "addressLabel",
          "addressType"
        ],
        "properties": {
          "issuerAddressExternalReference": {
            "type": "string",
            "description": "Unique external identifier provided by the issuer"
          },
          "addressLabel": {
            "type": "string",
            "example": "MAIN_POSTAL_ADDRESS",
            "description": "Indicate the class of the address amongst a list of possible values such as MAIN_POSTAL_ADDRESS, SECOND_POSTAL_ADDRESS, HOME_PHONE_NUMBER, PRIVATE_MOBILE_PHONE, PERSONAL_EMAIL.This list of values is shared between WL and the issuer during issuer configuration.Every label corresponds to a unique type of address. A customer (person) has at least one MAIN_POSTAL_ADDRESS (mandatory) and a company has at least one HEAD_OFFICE."
          },
          "addressType": {
            "type": "string",
            "example": "POSTAL_MAIL",
            "description": "The type of an address is POSTAL_MAIL, PHONE or E_MAIL",
            "enum": [
              "PHONE",
              "POSTAL_MAIL",
              "E_MAIL"
            ]
          },
          "postalAddress": {
            "description": "Customer Postal Address. This field is mandatory only if AddressType is POSTAL_MAIL.Depending on countries, the address format (mainly for line1, line 2, line3, line4 and line5) can have specific conditions such as length restriction. The customer should contact WL to check the address format and have more information.",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressRequestMailAddress"
              }
            ]
          },
          "emailAddress": {
            "description": "Customer Email. This field is mandatory only if AddressType is E_MAIL.",
            "allOf": [
              {
            "$ref": "#/definitions/EmailAddress"
              }
            ]
          },
          "phone": {
            "description": "Customer Phone details. This field is mandatory only if AddressType is PHONE.",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressRequestPhoneNumber"
              }
            ]
          },
          "addressUsages": {
            "type": "array",
            "description": "List of the usages linked to the address if any exists",
            "items": {
              "$ref": "#/definitions/AddressUsage"
            }
          },
          "startDate": {
            "type": "string",
            "description": "If the date is not provided, the current date and time of the user’s request is used.\nIf the provided date corresponds to the current date, the provided time is ignored and replaced by the current time of the system.\nIf the provided date is in the future (at least current date +1), provided date and time are used only if the LABEL of the address is already existing for the customer. In case the time is not provided, the time is set up to the start of the day (e.g. ‘T00:00:00’)\nIn all cases, if the address is created for the first time for a given LABEL, both date and time of the system are used and the address is immediately active. \nFor generic definition, refer to Address.startDate.",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "This date is conditional to the kind of address :\n- if the address is a permanent one (temporary flag = false or empty), the field must be empty\n- if the address is a temporary one (temporary flag = true), the field must be filled with the date corresponding to the end date of the active period of the temporary address",
            "format": "date-time"
          },
          "temporary": {
            "type": "boolean",
            "default": false,
            "description": "The flag indicates if the address is permanent (by default, false) or temporary (flag = true)",
            "format": "date-time"
          }
        },
        "title": "CreateAddressRequest"
      },
      "CreateAddressResponse": {
        "type": "object",
        "properties": {
          "addressIdentifier": {
            "description": "Identification of the customer address either by Issuer address external reference or by address reference",
            "allOf": [
              {
            "$ref": "#/definitions/AddressIdentifier"
          }
            ]
          }
        },
        "title": "CreateAddressResponse"
      },
      "CreateAddressAndSubscriptionRequest": {
        "type": "object",
        "required": [
          "createAddressRequest",
          "createAddOnSubscriptionRequest",
          "contractReference"
        ],
        "properties": {
          "createAddressRequest": {
            "$ref": "#/definitions/CreateAddressRequest"
          },
          "createAddOnSubscriptionRequest": {
            "$ref": "#/definitions/CreateAddOnSubscriptionRequest"
          },
          "contractReference": {
            "type": "string",
            "description": "Contract reference"
          }
        },
        "title": "CreateAddressAndSubscriptionRequest"
      },
      "CreateAddressAndSubscriptionResponse": {
        "type": "object",
        "required": [
          "createAddressResponse",
          "createAddOnSubscriptionResponse"
        ],
        "properties": {
          "createAddressResponse": {
            "description": "Refer to CreateAddressResponse",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressResponse"
              }
            ]
          },
          "createAddOnSubscriptionResponse": {
            "description": "Refer to CreateAddOnSubscriptionResponse",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddOnSubscriptionResponse"
              }
            ]
          }
        },
        "title": "CreateAddressAndSubscriptionResponse"
      },
      "CreateAddressUsageRequest": {
        "type": "object",
        "required": [
          "addressUsageName",
          "serviceCode"
        ],
        "properties": {
          "addressUsageName": {
            "type": "string",
            "example": "STATEMENT_SENDING",
            "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY."
          },
          "entityReference": {
            "type": "string",
            "description": "This corresponds to the application domain of the address. It can be eg a card contract reference, card account reference. It is an optional field.\nIt enables to have the same usage address for the same customer applied to different addresses (one cardholder with 2 card contracts: card delivery address usage is assigned to main postal address for contract A and card delivery address usage is also assigned to office postal address for contract B."
          },
          "serviceCode": {
            "type": "string",
            "example": "ACCOUNT_SERVICE",
            "description": "The Service for which the address usage is defined : CARD_SERVICE, ACCOUNT_SERVICE, …"
          }
        },
        "title": "CreateAddressUsageRequest"
      },
      "CreateAddressUsageResponse": {
        "type": "object",
        "required": [
          "addressUsageName",
          "serviceCode"
        ],
        "properties": {
          "addressUsageName": {
            "type": "string",
            "example": "STATEMENT_SENDING",
            "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY."
          },
          "entityReference": {
            "type": "string",
            "description": "This corresponds to the application domain of the address. It can be eg a card contract reference, card account reference. It is an optional field.\nIt enables to have the same usage address for the same customer applied to different addresses (one cardholder with 2 card contracts: card delivery address usage is assigned to main postal address for contract A and card delivery address usage is also assigned to office postal address for contract B."
          },
          "serviceCode": {
            "type": "string",
            "example": "ACCOUNT_SERVICE",
            "description": "The Service for which the address usage is defined : CARD_SERVICE, ACCOUNT_SERVICE, …"
          }
        },
        "title": "CreateAddressUsageResponse"
      },
      "AdviceProductExtensionRequest": {
        "type": "object",
        "required": [
          "issuerProductExternalReference"
        ],
        "properties": {
          "issuerProductExternalReference": {
            "type": "string",
            "description": "The issuer must provide the external reference of the product for which the advice is requested."
          }
        },
        "title": "AdviceProductExtensionRequest"
      },
      "ApiResponseEntityAdviceProductExtensionResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/AdviceProductExtensionResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityAdviceProductExtensionResponse"
      },
      "AdviceProductExtensionResponse": {
        "type": "object",
        "required": [
          "productIdentifier",
          "productExtensionIdentifier"
        ],
        "properties": {
          "productIdentifier": {
            "description": "Unique identifier of the product provided in the request",
            "allOf": [
              {
                "$ref": "#/definitions/ProductIdentifier"
              }
            ]
          },
          "productExtensionIdentifier": {
            "description": "Identifier of the product extension advised for the card creation",
            "allOf": [
              {
                "$ref": "#/definitions/ProductExtensionIdentifier"
              }
            ]
          }
        },
        "title": "AdviceProductExtensionResponse"
      },
      "ApiResponseEntityAdviceProductExtensionCardResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/AdviceProductExtensionCardResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityAdviceProductExtensionCardResponse"
      },
      "AdviceProductExtensionCardResponse": {
        "type": "object",
        "required": [
          "cardIdentifier"
        ],
        "properties": {
          "cardIdentifier": {
            "description": "Unique identifier of the card provided in the request",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "advisedProductExtensionIdentifier": {
            "description": "Identifier of the product extension advised for the card replacement",
            "allOf": [
              {
                "$ref": "#/definitions/ProductExtensionIdentifier"
              }
            ]
          },
          "currentProductExtensionIdentifier": {
            "description": "Identifier of the current product extension for the card to be replaced",
            "allOf": [
              {
                "$ref": "#/definitions/ProductExtensionIdentifier"
              }
            ]
          }
        },
        "title": "AdviceProductExtensionCardResponse"
      },
      "OverrideProductExtensionBalancingRequest": {
        "type": "object",
        "x-wl-patch-request": true,
        "properties": {
          "deviceTokensThreshold": {
            "type": "integer",
            "description": "Threshold on the device tokens number"
          },
          "merchantTokensThreshold": {
            "type": "integer",
            "description": "Threshold on the merchant tokens number"
          },
          "profiles": {
            "type": "array",
            "description": "The issuer can override the percentages of one or several profiles",
            "items": {
              "$ref": "#/definitions/OverrideProductExtensionBalancingProfile"
            }
          }
        },
        "title": "OverrideProductExtensionBalancingRequest"
      },
      "OverrideProductExtensionBalancingProfile": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the profile to override."
          },
          "percentages": {
            "type": "array",
            "description": "List of percentages to be applied to select the product extension",
            "items": {
              "$ref": "#/definitions/ProductExtensionBalancingPercentage"
            }
          }
        },
        "title": "OverrideProductExtensionBalancingProfile"
      },
      "ProductExtensionBalancingPercentage": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "description": "Value of this percentage for the product extension (e.g. 60 means 60%)"
          },
          "productExtensionIdentifier": {
            "description": "Identifier of the product extension for the percentage ",
            "allOf": [
              {
                "$ref": "#/definitions/ProductExtensionIdentifier"
              }
            ]
          }
        },
        "title": "ProductExtensionBalancingPercentage"
      },
      "ApiResponseEntityOverrideProductExtensionBalancingResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/OverrideProductExtensionBalancingResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityOverrideProductExtensionBalancingResponse"
      },
      "OverrideProductExtensionBalancingResponse": {
        "type": "object",
        "properties": {
          "productIdentifier": {
            "description": "Identifier of the product used to overide the parameters of the load balancing.",
            "allOf": [
              {
                "$ref": "#/definitions/ProductIdentifier"
              }
            ]
          }
        },
        "title": "OverrideProductExtensionBalancingResponse"
      },
      "OverrideCardProducerBalancingRequest": {
        "type": "object",
        "properties": {
          "percentages": {
            "type": "array",
            "description": "List of parameters to be applied for card creation and card replacement",
            "items": {
              "$ref": "#/definitions/CardProducerBalancingPercentage"
            }
          },
          "renewalPercentages": {
            "type": "array",
            "description": "List of parameters to be applied for card renewal",
            "items": {
              "$ref": "#/definitions/CardProducerBalancingPercentage"
            }
          }
        },
        "title": "OverrideCardProducerBalancingRequest"
      },
      "CardProducerBalancingPercentage": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "description": "Value of percentage allocated to the card producer (e.g. 60 means 60%)"
          },
          "cardProducer": {
            "type": "string",
            "description": "Card producer for the percentage."
          }
        },
        "title": "CardProducerBalancingPercentage"
      },
      "ApiResponseEntityOverrideCardProducerBalancingResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/OverrideCardProducerBalancingResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityOverrideCardProducerBalancingResponse"
      },
      "OverrideCardProducerBalancingResponse": {
        "type": "object",
        "properties": {
          "cardProductIdentifier": {
            "description": "Card template reference used to overide the parameters of the load balancing.",
            "allOf": [
              {
                "$ref": "#/definitions/CardProductIdentifier"
              }
            ]
          }
        },
        "title": "OverrideCardProducerBalancingResponse"
      },
      "CardProductIdentifier": {
        "type": "object",
        "properties": {
          "cardTemplateReference": {
            "type": "string",
            "description": "Reference of the card template used to instantiate a card"
          }
        },
        "title": "CardProductIdentifier"
      },
      "ApiResponseEntityProductExtensionBalancing": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ProductExtensionBalancing"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityProductExtensionBalancing"
      },
      "ProductExtensionBalancing": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "deviceTokensThreshold": {
            "type": "integer",
            "description": "Threshold on the device tokens number"
          },
          "merchantTokensThreshold": {
            "type": "integer",
            "description": "Threshold on the merchant tokens number"
          },
          "productIdentifier": {
            "description": "Unique identifier of the product used for the product extensions' load balancing",
            "allOf": [
              {
                "$ref": "#/definitions/ProductIdentifier"
              }
            ]
          },
          "profiles": {
            "type": "array",
            "description": "List of profiles configured for the product extension choice",
            "items": {
              "$ref": "#/definitions/ProductExtensionBalancingProfile"
            }
          }
        },
        "title": "ProductExtensionBalancing"
      },
      "ProductExtensionBalancingProfile": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the profile"
          },
          "cardProductIdentifier": {
            "description": "Unique identifier of the card product",
            "allOf": [
              {
                "$ref": "#/definitions/CardProductIdentifier"
              }
            ]
          },
          "deviceTokensOperator": {
            "type": "string",
            "description": "Operator used by the algorithm to compare the device tokens counter to the threshold for this profile"
          },
          "merchantTokensOperator": {
            "type": "string",
            "description": "Operator used by the algorithm to compare the merchant tokens counter to the threshold for this profile"
          },
          "percentages": {
            "type": "array",
            "description": "List of percentages applied to select the product extension",
            "items": {
              "$ref": "#/definitions/ProductExtensionBalancingPercentage"
            }
          }
        },
        "title": "ProductExtensionBalancingProfile"
      },
      "ApiResponseEntityCardProducerBalancing": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CardProducerBalancing"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCardProducerBalancing"
      },
      "CardProducerBalancing": {
        "type": "object",
        "properties": {
          "cardProductIdentifier": {
            "description": "Unique identifier of the card product",
            "allOf": [
              {
                "$ref": "#/definitions/CardProductIdentifier"
              }
            ]
          },
          "percentages": {
            "type": "array",
            "description": "List of parameters to be applied for card creation and card replacement",
            "items": {
              "$ref": "#/definitions/CardProducerBalancingPercentage"
            }
          },
          "renewalPercentages": {
            "type": "array",
            "description": "List of parameters to be applied for card renewal",
            "items": {
              "$ref": "#/definitions/CardProducerBalancingPercentage"
            }
          }
        },
        "title": "CardProducerBalancing"
      },
      "CreateAuthorizationRestrictionOverrideRequest": {
        "type": "object",
        "properties": {
          "activationEndTime": {
            "type": "string",
            "format": "date-time",
            "description": "Last point in time at which the override will be considered. Has to be later than ActivationStartTime. Can be present without ActivationStartTime. If not provided the override will be taken into account forever."
          },
          "activationStartTime": {
            "type": "string",
            "format": "date-time",
            "description": "First point in time at which the override will be considered. Has to be before ActivationEndTime. Can be present without ActivationEndTime. If not provided the override will be taken into account immediately."
          },
          "conditionCheck": {
            "type": "boolean",
            "description": "Overrides the default configured for the corresponding restriction attribute. In case JSON null is provided then the default becomes effective."
          },
          "conditionParameters": {
            "type": "array",
            "description": "Overrides the default configured for the corresponding restriction attribute (see configuration entity explanations). An item must not have leading or trailing spaces. Moreover it must not contain any comma. In case JSON null is provided then the default becomes effective.",
            "items": {
              "type": "string"
            }
          },
          "priority": {
            "type": "integer",
            "description": "In case multiple overrides with overlapping activation times are existing this information is used to resolve this situation by applying the overrides one by one starting with the one with lowest priority. The priority needs to be unique accross all overrides with overlapping activation timespans, which are associated with the same restriction and the same account. That means, two overrides for the same account and same restriction can have the same priority, if they are not active at the same time. If they are active at the same time, unique priorities must be given. If the field is not set in the request, it will be set to 0"
          }
        },
        "title": "CreateAuthorizationRestrictionOverrideRequest"
      },
      "CreateConsumerContractRequest": {
        "type": "object",
        "required": [
          "contract"
        ],
        "properties": {
          "customers": {
            "type": "array",
            "description": "The issuer has to provide all new customers (as person) which don't already exist in our system in a dedicated list (customers).\nFor each new customer, the issuer :\n- can provide an unique external reference: whether this external reference is already assigned to an existing customer for this issuer in our system then the contract creation request is denied\n- must provide mandatory fields and a correlation id that can be used in the contract part to assign the customer, not yet created in our system, as contract owner, root or card account owner, cardholder, etc",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestCustomer"
            }
          },
          "contract": {
            "$ref": "#/definitions/CreateConsumerContractRequestContract"
          },
          "addCardsAccounts": {
            "description": "With the contract creation request it is possible to provide data for one additional card only (it can be e.g. a single card, a twin card), not configured in the product but in a product extension..",
            "allOf": [
              {
                "$ref": "#/definitions/CreateConsumerContractRequestAddCardsAccounts"
              }
            ]
          }
        },
        "title": "CreateConsumerContractRequest"
      },
      "CreateConsumerContractRequestAccount": {
        "type": "object",
        "required": [
          "accountTemplateReference"
        ],
        "properties": {
          "issuerAccountExternalReference": {
            "type": "string",
            "description": "The issuer can provide the external reference for the new account (maximum length of 255 characters).This external reference must be unique per issuer.\nIf not provided, the external reference is calculated by our system if a generation algorithm is configured at account hierarchy level (ExternalReferenceGeneratorAlgorithm), else the issuer account external reference will be empty."
          },
          "accountTemplateReference": {
            "type": "string",
            "description": "The issuer must provide the account template reference to identify the account (e.g. root, card account)."
          },
          "accountOwnerRequestCorrelationId": {
            "type": "string",
            "description": "Not to be provided if the account owner is the same as the contract owner.\nOtherwise the issuer can provide the correlation id of the new customer which represent the account owner (defined in the data block CreateConsumerContractRequest.Customer)."
          },
          "accountOwnerIdentifier": {
            "description": "Not to be provided if the account owner is the same as the contract owner.\nOtherwise if the account owner already exists in our system then the issuer has to provide the customer reference or the issuer external customer reference of the existing customer. If the account owner does not exist in our system then accountOwnerRequestCorrelationId has to be filled.",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "accountGuarantorRequestCorrelationId": {
            "type": "string",
            "description": "The issuer can provide the correlation id of the new customer which represent the account guarantor (defined in the data block CreateConsumerContractRequest.Customer)."
          },
          "accountGuarantorIdentifier": {
            "description": "If the account guarantor already exists in our system then the issuer can provide the customer reference or the issuer external customer reference of the existing customer.",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "closureCalendarReference": {
            "type": "string",
            "description": "The issuer can provide a specific closure calendar model reference, otherwise the default one from the account template is used."
          },
          "statementModelReference": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "restrictionModelReference": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "creditInterestModelReference": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "name": {
            "type": "string",
            "description": "The issuer can provide the name of the account, otherwise the account template reference is used."
          },
          "iban": {
            "type": "string",
            "description": "Refer to Account.iban\nHas to be provided except if the payment processing channel is SEPA and SEPA mandate UMR is provided (comes from another system)."
          },
          "ibanOwnerName": {
            "type": "string",
            "description": "Refer to Account.ibanOwnerName\nIf Issuer expects to produce direct debits and outgoing credit transfers, it is recommended the Iban owner name to be always provided, except if the payment processing channel is SEPA and SEPA mandate UMR is provided (comes from another system)."
          },
          "secondIban": {
            "type": "string",
            "description": "Refer to Account.secondIban"
          },
          "bic": {
            "type": "string",
            "description": "Refer to Account.bic"
          },
          "sepaIndicator": {
            "type": "boolean",
            "description": "The issuer can indicate if the payment processing channel is SEPA or not (also valid for outgoing credit transfer processing channel).\nIf payment processing channel is SEPA (SEPA indicator is true) and  payment mode is AUTOPAYMENT or DIRECTDEBIT_WITH_CONFIRMATION, then SEPA mandate data must be provided.\nSEPA indicator default value  is false."
          },
          "sepaMandate": {
            "description": "The issuer must provide SEPA mandate if payment processing channel is SEPA (SEPA indicator is true) and payment mode is AUTOPAYMENT",
            "allOf": [
              {
                "$ref": "#/definitions/CreateConsumerContractRequestSepaMandate"
              }
            ]
          },
          "creditLimitAmount": {
            "description": "The issuer can provide a specific credit limit amount (within the minimum/maximum range defined in the restriction model for the credit limit) to replace the default permanent credit limit value.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "accountMembershipNumber1": {
            "type": "string",
            "description": "The issuer can provide the membership number 1 of the account."
          },
          "accountMembershipNumber2": {
            "type": "string",
            "description": "The issuer can provide the membership number 2 of the account."
          },
          "insurancePackageReference": {
            "type": "string",
            "description": "The issuer can provide the reference of the insurance package it wants to apply on an account. This account must be a paying account and this reference of insurance package must be configured for this account."
          },
          "insuranceEventCode": {
            "type": "string",
            "description": "An insurance package can be configured to be activated automatically at contract creation time, if it is not the case then the Insurance event code to activate insurance fee calculation should be provided (corresponding event code is defined for the insurance package)."
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide the Specific Fields for the new account.\nIt is a list of values (label:value|) related to the account (pass-thru data).",
            "additionalProperties": {
              "type": "string"
            }
          },
          "selectedModels": {
            "type": "array",
            "description": "The issuer can provide specific account model reference, otherwise the default one from the account template is used.\n\nList of possible models:      \n• restrictionModel                            \n• statementModel (only for credit account)     \n• accountAmountDueModel (only for credit account)   \n• directDebitAmountModel (only for credit account)                                                                         \n• creditInterestModel (only for credit account)",
            "items": {
              "$ref": "#/definitions/AccountModel"
            }
          },
          "externalRestrictions": {
            "type": "array",
            "description": "Deprecated - Replaced by ExternalVelocityLimits",
            "items": {
              "$ref": "#/definitions/ExternalRestriction"
            }
          },
           "externalVelocityLimits": {
            "type": "array",
            "description": "List of external velocity limits related to the account",
            "items": {
              "$ref": "#/definitions/ExternalVelocityLimit"
            }
          },
          "externalAuthorizationsRestrictions": {
            "type": "array",
            "description": "List of external authorization restrictions related to the account",
            "items": {
              "$ref": "#/definitions/ExternalAuthorizationsRestriction"
            }
          },
          "requestCorrelationId": {
            "type": "string",
            "description": "Unique alias provided by the issuer for each new account (Conditional).\nDuring the contract creation processing, this alias is used to assign the new account to contract fees (same value as the value provided in accountRequestCorrelationId defined in the data block CreateConsumerContractRequest.ContractFee) or to address usage provided in the request (same value as the value provided in entityRequestCorrelationId defined in the data block CreateConsumerContractRequest.AddressUsage)"
          },
          "contractAddOnsSubscriptions": {
            "type": "array",
            "description": "List of contract add-on service to subscribe for this account.",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestAddOnSubscription"
            }
          },
          "accountOutgoingCreditTransferFeature": {
            "description": "Description of OCT features at account level if different from the configuration or definition at account hierarchy level",
            "allOf": [
              {
                "$ref": "#/definitions/AccountOutgoingCreditTransferFeature"
              }
            ]
          }
        },
        "title": "CreateConsumerContractRequest.Account"
      },
      "CreateConsumerContractRequestAccountHierarchy": {
        "type": "object",
        "description": "The issuer must provide at least data related to the root account and other accounts if any when creating the contract.",
        "required": [
          "accounts"
        ],
        "properties": {
          "structureType": {
            "type": "string",
            "description": "The issuer can provide this field for e.g. the root account, for information only (no check, no related business process), to indicate if the contract contains a single card only or can have several cards.\nPossible values are:\n- FAMILY : the contract can have 1 or several cards\n- REGULAR : the contract can have a single card only"
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide Specific Fields for the new account hierarchy.\nIt is a list of values (label:value|) related to the account hierarchy (pass-thru data).",
            "additionalProperties": {
              "type": "string"
            }
          },
          "accounts": {
            "type": "array",
            "description": "Data related to each account have to be provided.",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestAccount"
            }
          },
          "hierarchySelectedModels": {
            "type": "array",
            "description": "The issuer can provide a specific account model instead of the default one of the account hierarchy.\n\nE.g. OCT on demand is enabled in the default reimbursement model and is disabled in the new model.",
            "items": {
              "$ref": "#/definitions/AccountHierarchyModel"
            }
          },
          "reimbursementModelReference": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "hierarchyOutgoingCreditTransferFeature": {
            "description": "The issuer can enable or not each different Outgoing Credit Transfer (OCT) options if this latter is enabled and if can be overriden within the reimbursement model.\nE.g. the periodicOCT is allowed in the reimbursement model, default choice, and it is not possible to override this choice. When creating the account hierarchy it is not possible to change this configuration and to not allow this option.",
            "allOf": [
              {
                "$ref": "#/definitions/HierarchyOutgoingCreditTransferFeature"
              }
            ]
          }
        },
        "title": "CreateConsumerContractRequest.AccountHierarchy"
      },
      "CreateConsumerContractRequestAddCardsAccounts": {
        "type": "object",
        "description": "With the contract creation request it is possible to provide data for one additional card only (it can be e.g. a single card, a twin card), not configured in the product but in a product extension.",
        "required": [
          "accounts",
          "cardContracts",
          "issuerProductExtensionExternalReference"
        ],
        "properties": {
          "issuerProductExtensionExternalReference": {
            "type": "string",
            "description": "The issuer provides the reference of the product extension to be used (a product extension is usually composed of 1 card - 1 account, but other combinations are also possible)."
          },
          "accounts": {
            "type": "array",
            "description": "The issuer provides data for each account depending on the product extension.\nE.g. if the product extension contains 1 card account then data for 1 account has to be provided.",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestAccount"
            }
          },
          "cardContracts": {
            "type": "array",
            "description": "The issuer provides data for each card contract depending on the product extension.\nE.g. if the product extension contains 2 cards then data for 2 card contracts has to be provided.",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestCardContract"
            }
          }
        },
        "title": "CreateConsumerContractRequest.AddCardsAccounts"
      },
      "CreateConsumerContractRequestAddOnParameter": {
        "type": "object",
        "required": [
          "reference",
          "value"
        ],
        "properties": {
          "reference": {
            "type": "string",
            "description": "Refer to AddOnServiceParameter.reference"
          },
          "value": {
            "type": "string",
            "description": "Refer to AddOnServiceParameter.value"
          }
        },
        "title": "CreateConsumerContractRequest.AddOnParameter"
      },
      "CreateConsumerContractRequestAddOnSubscription": {
        "type": "object",
        "required": [
          "addonReference",
          "serviceTypeReference"
        ],
        "properties": {
          "addonReference": {
            "type": "string",
            "description": "Refer to AddOnSubscription.addonReference"
          },
          "subscriptionDate": {
            "type": "string",
            "description": "If provided, this date will be used as the starting date of the add-on subscription.",
            "format": "date-time"
          },
          "serviceTypeReference": {
            "type": "string",
            "description": "Refer to AddOnSubscription.serviceType"
          },
          "parameters": {
            "type": "array",
            "description": "The issuer can provide a list of parameters related to the addOn.",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestAddOnParameter"
            }
          }
        },
        "title": "CreateConsumerContractRequest.AddOnSubscription"
      },
      "CreateConsumerContractRequestAddress": {
        "type": "object",
        "required": [
          "addressLabel",
          "addressType"
        ],
        "properties": {
          "addressLabel": {
            "type": "string",
            "example": "MAIN_POSTAL_ADDRESS",
            "description": "Refer to Address.addressLabel"
          },
          "addressType": {
            "type": "string",
            "example": "POSTAL_MAIL",
            "description": "Refer to Address.addressType"
          },
          "postalAddress": {
            "$ref": "#/definitions/CreateAddressRequestMailAddress"
          },
          "emailAddress": {
            "$ref": "#/definitions/EmailAddress"
          },
          "phone": {
            "$ref": "#/definitions/CreateAddressRequestPhoneNumber"
          },
          "addressUsages": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestAddressUsage"
            }
          },
          "issuerAddressExternalReference": {
            "type": "string",
            "description": "Refer to AddressIdentifier.issuerAddressExternalReference"
          }
        },
        "title": "CreateConsumerContractRequest.Address"
      },
      "CreateConsumerContractRequestAddressUsage": {
        "type": "object",
        "required": [
          "addressUsageName",
          "serviceCode"
        ],
        "properties": {
          "addressUsageName": {
            "type": "string",
            "example": "STATEMENT_SENDING",
            "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY."
          },
          "entityReference": {
            "type": "string",
            "description": "This field is filled by the User while adding the usage to a particular Address of the Customer. It can be eg a card contract reference, card account reference. It is an optional field."
          },
          "serviceCode": {
            "type": "string",
            "example": "ACCOUNT_SERVICE",
            "description": "The Service for which the address usage is defined : CARD_SERVICE (IBO CMS), ACCOUNT_SERVICE (IBO CAS), …"
          },
          "entityRequestCorrelationId": {
            "type": "string",
            "description": "The issuer can provide the correlation id of the new entity (card contract or account) which linked to the address usage (account defined in the data block CreateConsumerContractRequest.Account and card contract defined in the data block CreateConsumerContractRequest.CardContract -  field : requestCorrelationId)."
          },
          "entityType": {
            "type": "string",
            "description": "If a correlation id is filled for an entity reference, the entity type must be provided to indicate if the entity is related to a card contract or to an account.\nPossible values:\n- CARD_CONTRACT\n- ACCOUNT",
            "enum": [
              "ACCOUNT",
              "CARD_CONTRACT"
            ]
          }
        },
        "title": "CreateConsumerContractRequest.AddressUsage"
      },
      "CreateCustomerRequestAddress": {
        "type": "object",
        "required": [
          "addressLabel",
          "addressType"
        ],
        "properties": {
          "addressLabel": {
            "type": "string",
            "example": "MAIN_POSTAL_ADDRESS",
            "description": "Refer to Address.addressLabel"
          },
          "addressType": {
            "type": "string",
            "example": "POSTAL_MAIL",
            "description": "Refer to Address.addressType"
          },
          "postalAddress": {
            "$ref": "#/definitions/CreateAddressRequestMailAddress"
          },
          "emailAddress": {
            "$ref": "#/definitions/EmailAddress"
          },
          "phone": {
            "$ref": "#/definitions/CreateAddressRequestPhoneNumber"
          },
          "addressUsages": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCustomerRequestAddressUsage"
            }
          },
          "issuerAddressExternalReference": {
            "type": "string",
            "description": "Unique external identifier provided by the issuer (optional)"
          }
        },
        "title": "CreateCustomerRequest.Address"
      },
      "CreateCustomerRequestAddressUsage": {
        "type": "object",
        "required": [
          "addressUsageName",
          "serviceCode"
        ],
        "properties": {
          "addressUsageName": {
            "type": "string",
            "example": "STATEMENT_SENDING",
            "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY."
          },
          "entityReference": {
            "type": "string",
            "description": "This field is filled by the User while adding the usage to a particular Address of the Customer. It can be eg a card contract reference, card account reference. It is an optional field."
          },
          "serviceCode": {
            "type": "string",
            "example": "ACCOUNT_SERVICE",
            "description": "The Service for which the address usage is defined : CARD_SERVICE (IBO CMS), ACCOUNT_SERVICE (IBO CAS), …"
          },
          "entityRequestCorrelationId": {
            "type": "string",
            "description": "The issuer can provide the correlation id of the new entity (card contract or account) which linked to the address usage (account defined in the data block CreateConsumerContractRequest.Account and card contract defined in the data block CreateConsumerContractRequest.CardContract)."
          },
          "entityType": {
            "type": "string",
            "description": "If a correlation id is filled for an entity reference, the entity type must be provided to indicate if the entity is related to a card contract or to an account.\nPossible values:\n- CARD_CONTRACT\n- ACCOUNT",
            "enum": [
              "ACCOUNT",
              "CARD_CONTRACT"
            ]
          }
        },
        "title": "CreateCustomerRequest.AddressUsage"
      },
      "CreateConsumerContractRequestCard": {
        "type": "object",
        "description": "Card related data to be provided for the creation of the first card.",
        "properties": {
          "pan": {
            "type": "string",
            "description": "The issuer can provide the Primary Account Number (PAN) or card number if this is allowed by the product configuration only.. The provided PAN must belong to the card product BIN range."
          },
          "issuerCardExternalReference": {
            "type": "string",
            "description": "The issuer can provide the external reference for the new card (maximum length is 50 characters). This external reference must be unique per issuer.\nIf not provided, the card will not have an external reference. the external reference is calculated by our System."
          },
          "embossingLine5": {
            "type": "string",
            "description": "The issuer must provide the embossing line 5 if required within card Technology and Application model. Else the issuer can provide it and the embossing line 5 will be sent to the embosser."
          },
          "expiryDate": {
            "type": "string",
            "description": "The issuer can provide the expiry date of the card if allowed by the product configuration.\nIf provided and not allowed then an error is generated.\nFormat is MMYY (month and year)."
          },
          "pinInheritanceCardReference": {
            "type": "string",
            "description": "Deprecated"
          },
          "pinInheritanceCardIdentifier": {
            "description": "If the PIN inheritance is authorized for the issuer, the issuer can provide the reference of a card (card reference in our system or external card reference provided by the issuer) to inherit the PIN from a another card (if the provided card reference does not exist in the system, no PIN inheritance could be used).",
            "allOf": [
              {
                "$ref": "#/definitions/PinInheritanceCardIdentifier"
              }
            ]
          },
          "pinInheritanceExternalCardIdentifier": {
            "description": "The issuer can provide the reference of the external card only known by the PIN management module to inherit the PIN.",
            "allOf": [
              {
                "$ref": "#/definitions/PinInheritanceExternalCardIdentifier"
              }
            ]
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide the Specific Fields for the new card.\nIt is a list of values (label:value|) related to the card (pass-thru data).",
            "additionalProperties": {
              "type": "string"
            }
          },
          "cardOrder": {
            "$ref": "#/definitions/CreateConsumerContractRequestCardOrder"
          },
          "pinMailerOrder": {
            "$ref": "#/definitions/CreateConsumerContractRequestPinMailerOrder"
          },
          "encryptedPin": {
            "$ref": "#/definitions/CreateConsumerContractRequestEncryptedPin"
          },
          "externalCobadgedCardNumber": {
            "type": "string",
            "description": "This is an external card number used for Giro card in Germany"
          },
          "externalCobadgedSequenceNumber": {
            "type": "string",
            "description": "This is the sequence number of the external card for Giro card in Germany"
          },
          "externalCobadgedExpiryDate": {
            "type": "string",
            "description": "This is the expiry date of the external card for Giro card in Germany"
          },
          "externalAuthorizationsRestrictions": {
            "type": "array",
            "description": "List of external authorization restrictions related to the card to be passed to the Front Office",
            "items": {
              "$ref": "#/definitions/ExternalAuthorizationsRestriction"
            }
          }
        },
        "title": "CreateConsumerContractRequest.Card"
      },
      "CreateConsumerContractRequestCardContract": {
        "type": "object",
        "description": "Data related to each card contract and card have to be provided.\nIf there is no card at contract creation time then no data to be provided.",
        "required": [
          "cardTemplateReference"
        ],
        "properties": {
          "issuerCardContractExternalReference": {
            "type": "string",
            "description": "The issuer can provide the external reference for the new card contract.\nRefer to CardContractIdentifier.cardContractReference."
          },
          "cardTemplateReference": {
            "type": "string",
            "description": "The issuer must provide the card template reference to be used for card contract creation."
          },
          "artwork": {
            "type": "string",
            "description": "The issuer can provide the artwork to be used for the card contract creation, among those allowed, instead of the default one retrieved from the card template."
          },
          "cardHolderRequestCorrelationId": {
            "type": "string",
            "description": "Not to be provided if the cardholder is the same as the account owner of the default account of the card.\nOtherwise the issuer can provide the correlation id of the new customer which represent the cardholder (defined in the data block CreateConsumerContractRequest.Customer)."
          },
          "cardHolderIdentifier": {
            "description": "Not to be provided if the cardholder is the same as the account owner of the default account of the card.\nIf the cardholder already exists in our system then the issuer has to provide the customer reference or the issuer external customer reference of the existing customer.\nIf the cardholder does not exist in our system then cardholderRequestCorrelationId has to be filled.",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "principalSupplementaryCardIndicator": {
            "type": "string",
            "description": "The issuer can indicate if it is the principal card or a supplementary one.\nPossible values: PRINCIPAL, SUPPLEMENTARY\nBy default, no check is applied.If this indicator is not provided, all cards are considered as PRINCIPAL. E.g. when creating a new contract, 2 cards can be created as PRINCIPAL.It is also possible to apply specific checks by product configuration.  In this case, the first created card will be the PRINCIPAL one and the other ones will be supplementary if any.",
            "enum": [
              "PRINCIPAL",
              "SUPPLEMENTARY"
            ]
          },
          "issuerBranchCode": {
            "type": "string",
            "description": "The issuer can provide the issuer branch code of the card contract. If not provided, then the contract issuer branch code is used."
          },
          "forcedEmbossingName": {
            "type": "string",
            "description": "The first line of the name to be embossed on the physical card for the new card can be provided. \nThe field is mandatory depending on the issuer configuration. \nThe character \"*\" is not allowed in the line 1 of the embossing name."
          },
          "forcedEmbossingName2ndLine": {
            "type": "string",
            "description": "The second line of the name to be embossed on the physical card for the new card can be provided (if allowed by the product configuration).\nThe character \"*\" is not allowed in the line 2 of the embossing name."
          },
          "selectedModels": {
            "type": "array",
            "description": "The issuer can set one or several specific card contract models instead of the default ones from the card template (used by default).\n\nList of possible models:   \nCARD_CREATION_MODEL\nTECHNOLOGY_AND_APPLICATION_MODEL\nEVENT_FEE_MODEL,\nDISTRIBUTION_MODEL ",
            "items": {
              "$ref": "#/definitions/CardContractModel"
            }
          },
          "cardEventFeeModelReference": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "distributionModelReference": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "cardCreationModelReference": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "techAndAppModelReference": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "vipFlag": {
            "type": "boolean",
            "default": false,
            "description": "Indicates if the card contract is VIP (priority pass) and allows to define fees amount (true) or not (false)."
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide the Specific Fields for the new card contract.\nIt is a list of values (label:value|) related to the card contract (pass-thru data)",
            "additionalProperties": {
              "type": "string"
            }
          },
          "cardClass": {
            "type": "string",
            "description": "The issuer can provide the card class (free text, no business rule).Example: Standard, Extended"
          },
          "card": {
            "$ref": "#/definitions/CreateConsumerContractRequestCard"
          },
          "photoReference": {
            "type": "string",
            "description": "The issuer can provide the photo reference for the new card.Refer to Card.photoReference"
          },
          "pictureReference": {
            "type": "string",
            "description": "The issuer can provide the picture reference for the new card.Refer to Card.pictureReference"
          },
          "contractAddOnsSubscriptions": {
            "type": "array",
            "description": "List of contract add-on service to subscribe for this card contract.",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestAddOnSubscription"
            }
          },
          "authorizationDataValidation": {
            "description": "The issuer can indicate cardholder data used by the Front Office for verification.",
            "allOf": [
              {
                "$ref": "#/definitions/AuthorizationDataValidation"
              }
            ]
          },
           "cardContractSourceInheritance": {
            "description": "Card contract data to be inherited during card replacement with brand switch.",
            "allOf": [
              {
             "$ref": "#/definitions/CardContractSourceInheritance"
              }
            ]
          },
          "schemeDeclarationOptOut": {
            "type": "boolean",
            "description": "Indicates if the issuer wants to stop providing card/account updates to MasterCard ABU service or VISA VAU service (true) or not (false)."
          },
           "requestCorrelationId": {
            "type": "string",
            "description": "Unique alias provided by the issuer for each new account (Conditional).\nDuring the contract creation processing, this alias is used to assign the new card contract to address usage provided in the request"
          }
        },
        "title": "CreateConsumerContractRequest.CardContract"
      },
      "CreateConsumerContractRequestCardOrder": {
        "type": "object",
        "description": "The issuer can provide data related to the card order if physical card is requested.\nIf not provided and required then the default sending mode is retrieved from product configuration.",
        "properties": {
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide the Specific Fields for the card order.\nIt is a list of values (label:value|) related to the card order provided to the embosser (pass-thru data).",
            "additionalProperties": {
              "type": "string"
            }
          },
          "cardProducer": {
            "type": "string",
            "description": "The issuer can provide the card producer if it is different than the default one (defined in the card profile)."
          },
          "sendingMode": {
            "type": "string",
            "example": "Normal",
            "description": "The issuer can provide the sending mode if a physical card (card order) is requested. Default sending mode is retrieved from configuration.\nExample: Normal, Urgent, Ultra Urgent"
          },
          "skipCardOrderGeneration": {
            "type": "boolean",
            "description": "If this field is true, the card order will not be generated (no plastic).\nBy default, a card order is requested (except if it is a virtual card configured in the Technology and Application model). ",
            "default": false
          },
          "customDeliveryAddressee": {
            "type": "string",
            "description": "Refer to Order.customDeliveryAddressee\nWhen the customDeliveryAddress is provided, the field must also be provided."
          },
          "customDeliveryAddress": {
            "description": "Refer to Order.customDeliveryAddress.\nThe customDeliveryAddressee must also be provided when the field is provided.",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressRequestMailAddress"
              }
            ]
          }
        },
        "title": "CreateConsumerContractRequest.CardOrder"
      },
      "CreateConsumerContractRequestContract": {
        "type": "object",
        "description": "The issuer must provide data related to the contract.",
        "required": [
          "accountHierarchy",
          "issuerProductExternalReference"
        ],
        "properties": {
          "issuerProductExternalReference": {
            "type": "string",
            "description": "The issuer must provide the external reference of the product which the contract will be based on."
          },
          "issuerContractExternalReference": {
            "type": "string",
            "description": "The issuer can provide an external reference (e.g. used as contract identifier in Issuer's system). This latter can be used by the issuer to identify, retrieve the contract later, etc\nIf not provided by the issuer, it is filled by default with the contract reference generated by our system."
          },
          "issuerBranchCode": {
            "type": "string",
            "description": "The issuer can provide the code of the branch which owns the contract.If not provided, the default configured branch code is used."
          },
          "status": {
            "type": "string",
            "description": "The issuer can request to create the consumer contract\n- either in AWAITING_SIGNATURE status: e.g. the contract is completed, but not yet signed by the customer\n- either in SIGNED status: e.g. the contract is completed and was signed by the customer\n\nBy default the contract is created in SIGNED status if no value is provided.",
            "enum": [
              "AWAITING_SIGNATURE",
              "SIGNED"
            ]
          },
          "cardReleaseOrder": {
            "type": "string",
            "description": "The issuer must provide this field if the contract has at least one card with a plastic and if no default value is configured at product level (else an error will be generated).\nNot to be provided if the contract has virtual card only (ignored if provided and not needed).\nPossible values are:\n- IMMEDIATE: As soon as the contract is in awaiting signature, the card order is released by our system (send to embosser).\n- AUTOMATIC: As soon as the contract is signed, the card order is released by our system (send to embosser)."
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide Specific Fields for the new contract.\nIt is a list of values (label:value|) related to the card (pass-thru data).",
            "additionalProperties": {
              "type": "string"
            }
          },
          "contractFees": {
            "type": "array",
            "description": "The issuer can replace both default membership fee and account set up fee models for each account (usually card account). The accountIdentifier or accountRequestCorrelationId can be used to identify the account (defined in the data block CreateConsumerContractRequest.Account).",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestContractFee"
            }
          },
          "waiveFee": {
            "type": "boolean",
            "description": "The issuer can indicate if contract related fees, membership fee and account setup fee, are waived (true) or not (false, by default).\nThis choice is valid for all the cards under the contract at subscription time and later. This choice can be modified later."
          },
          "numberOfFreeCardsMembershipFee": {
            "type": "integer",
            "format": "int32",
            "description": "The issuer can define the number of cards for which membership fee is not generated (free cards).\nIf not provided, the default value will be used if defined at product level."
          },
          "numberOfFreeCardsAccountSetupFee": {
            "type": "integer",
            "format": "int32",
            "description": "The issuer can define the number of cards for which account setup fee is not generated  (free cards).\nIf not provided, the default value will be used if defined at product level."
          },
          "numberOfFreeCardsPrimaryCardImpacted": {
            "type": "boolean",
            "default": false,
            "description": "The issuer can indicate if the primary card is always the first card to be considered as free and then the additional cards if any will be considered  (true) or if only additional cards can be free (false). By default, the value is False.\n\nE.g. Number of cards for which membership fee is not generated = 2\nIf the flag is True, the Primary card and only 1 additional card have no membership fee.\nIf the flag is False, membership fee is generated for the primary card and only 2 additional cards have no membership fee. \n"
          },
          "feeReimbursementAtCardContractClosing": {
            "type": "boolean",
            "description": "The issuer can indicate if membership fee and account setup fee have to be reimbursed in case of card contract closing.\nIt is a reimbursement, calculated pro-rata to the latest fee posting date and the closing date of the card contract. If it is not provided, then the default one from membership fee (or account setup) is used.\nRegarding the account setup fee models, it is used only if it is posted less than a year ago."
          },
          "deliveryChannel": {
            "description": "The issuer can specify the channel for letter delivery used for this contract.",
            "allOf": [
              {
                "$ref": "#/definitions/DeliveryChannel"
              }
            ]
          },
          "advertisementFlags": {
            "description": "The issuer can specify which advertisement flags are enabled (Email, Letter, Phone, etc.).",
            "allOf": [
              {
                "$ref": "#/definitions/AdvertisementFlags"
              }
            ]
          },
          "dataAnalysisFlags": {
            "description": "The issuer can specify which data analysis flags are enabled (person, paymentTransaction, exchangeThirdParties, etc.).",
            "allOf": [
              {
                "$ref": "#/definitions/DataAnalysisFlags"
              }
            ]
          },
          "coBrander": {
            "type": "string",
            "description": "The issuer can specify the coBrander (free text) associated to the consumer contract in case the product is shared by several Cobranders. \nThe issuer provides the information at its convenience, Cobranders being managed by the issuer directly.\nThe information stored at contract level and then populated at each account of the account hierarchy."
          },
          "legitimacyDocuments": {
            "description": "The issuer can provide the list of legitimacy documents for each cardholder of the contract.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestLegitimacyDocument"
            }
          },
          "contractOwnerRequestCorrelationId": {
            "type": "string",
            "description": "If the contract owner does not exist in our system as customer, the issuer must provide the correlation id of the new customer related to it (defined in the data block CreateConsumerContractRequest.Customer)."
          },
          "contractOwnerIdentifier": {
            "description": "If the contract owner already exists in our system as customer, the issuer must provide either the customerReference or the issuerCustomerExternalReference related to it.\nIf the contract owner does not exist in our system then the contractOwnerRequestCorrelationId has to be filled.",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "accountHierarchy": {
            "$ref": "#/definitions/CreateConsumerContractRequestAccountHierarchy"
          },
          "cardContracts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestCardContract"
            }
          }
        },
        "title": "CreateConsumerContractRequest.Contract"
      },
      "CreateConsumerContractRequestContractFee": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "description": "The issuer may to provide the account reference or the issuer external account reference of the existing account if available otherwise accountRequestCorrelationId should be used.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "accountSetupFeeModelReference": {
            "type": "string",
            "description": "Account setup fee model used for the account"
          },
          "membershipFeeModelReference": {
            "type": "string",
            "description": "Membership fee model used for the account"
          },
          "accountRequestCorrelationId": {
            "type": "string",
            "description": "The issuer can provide the correlation id of the new account for which the contract fee must be applied (this id is defined in the data block CreateConsumerContractRequest.Account at contract level and/or at addCardsAccounts level - field : requestCorrelationId)."
          }
        },
        "title": "CreateConsumerContractRequest.ContractFee"
      },
      "CreateConsumerContractRequestCustomer": {
        "type": "object",
        "description": "The issuer has to provide customers which don't already exist in our system. Each new customer is identified by a correlation id.\nFor example:\n- If a contract owner and a cardholder are not defined in the system, the issuer must provide customer data into 2 blocks (one block to define the contract owner, identified by correlation id as e.g. CUSTOMER1, and one block to define the cardholder, identified by correlation id as e.g. CUSTOMER2).\n- If both contract owner and a cardholder are already defined in the system, this part will be empty.",
        "required": [
          "addresses",
          "firstName",
          "lastName",
          "requestCorrelationId"
        ],
        "properties": {
          "requestCorrelationId": {
            "type": "string",
            "description": "Unique alias provided by the issuer for each new customer.\nDuring the contract creation processing, this alias is used to assign a new customer to certain customer roles (cardholder, contract owner, account owner, guarantor)."
          },
          "issuerCustomerExternalReference": {
            "type": "string",
            "description": "Refer to CustomerIdentifier.issuerCustomerExternalReference"
          },
          "active": {
            "type": "boolean",
            "description": "DEPRECATED",
            "default": true
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Refer to Customer.courtesyTitle"
          },
          "lastName": {
            "type": "string",
            "description": "Refer to Customer.lastName"
          },
          "firstName": {
            "type": "string",
            "description": "Refer to Customer.firstName "
          },
          "onlineRiskCategory": {
            "type": "string",
            "example": "Standard",
            "description": "Categorizes the person for online risk management. \nList of possible values is defined per Issuer (eg.Business, Student, Teenager, Standard). \nMandatory if no default value is defined"
          },
          "offlineRiskCategory": {
            "type": "string",
            "example": "Standard",
            "description": "Categorizes the person for offline risk management. \nList of possible values is defined per Issuer (eg.Business, Student, Teenager, Standard). \nMandatory if no default value is defined"
          },
          "commercialStatus": {
            "type": "string",
            "example": "Normal",
            "description": "Defines the commercial status of a Person Customer among a list of possible values configured per issuer. \nOne of the possible values can be set as default value (eg. Normal, Address Only, Bankruptcy, Active Customer).\nMandatory if no default value is defined"
          },
          "secondFirstName": {
            "type": "string",
            "description": "Refer to Customer.secondFirstName"
          },
          "maidenName": {
            "type": "string",
            "description": "Refer to Customer.maidenName"
          },
          "correspondenceName":{
              "type": "string",
              "description": "Refer to Customer.correspondenceName"
          },
          "sex": {
            "type": "string",
            "description": "Refer to Customer.sex"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "description": "Birth date is required to create a card if a minimum age is defined in the card profile"
          },
          "birthPlace": {
            "type": "string",
            "description": "Refer to Customer.birthPlace"
          },
          "nationality": {
            "type": "string",
            "description": "Refer to Customer.nationality"
          },
          "profession": {
            "type": "string",
            "description": "Refer to Customer.profession "
          },
          "employerName": {
            "type": "string",
            "description": "Refer to Customer.employerName"
          },
          "employerAddress": {
            "type": "string",
            "description": "Refer to Customer.employerAddress"
          },
          "monthlySalary": {
            "type": "integer",
            "format": "int64",
            "description": "Refer to Customer.monthlySalary "
          },
          "maritalStatus": {
            "type": "string",
            "description": "Refer to Customer.maritalStatus"
          },
          "preferredCorrespondenceLanguage": {
            "type": "string",
            "description": "Refer to Customer.preferredCorrespondenceLanguage"
          },
          "picture": {
            "type": "string",
            "description": "Refer to Customer.picture "
          },
          "url1": {
            "type": "string",
            "description": "Refer to Customer.url1"
          },
          "url2": {
            "type": "string",
            "description": "Refer to Customer.url2"
          },
          "secretQuestion": {
            "type": "string",
            "description": "Refer to Customer.secretQuestion"
          },
          "secretAnswer": {
            "type": "string",
            "description": "Refer to Customer.secretAnswer"
          },
          "vatNumber": {
            "type": "string",
            "description": "Refer to Customer.vatNumber"
          },
          "vatCountry": {
            "type": "string",
            "description": "Refer to Customer.vatCountry"
          },
          "customerClass": {
            "type": "string",
            "description": "Refer to Customer.customerClass"
          },
          "employee": {
            "type": "boolean",
            "description": "Refer to Customer.employee "
          },
          "partnerExternalReference": {
            "type": "string",
            "description": "Refer to Customer.partnerExternalReference "
          },
          "doNotContact": {
            "type": "boolean",
            "description": "Refer to Customer.doNotContact "
          },
          "specificFields": {
            "type": "object",
            "description": "Refer to Customer.specificFields",
            "additionalProperties": {
              "type": "string"
            }
          },
          "addresses": {
            "type": "array",
            "description": "The Main postal address (addressLabel as MAIN_POSTAL_ADDRESS)  has to be provided because used as default address by all business processes if no address usage is defined.E.g. if no address usage as CARD_DELIVERY is attached to a customer's address then the Main postal address is used as card order delivery address.",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestAddress"
            }
          },
          "vulnerabilities": {
            "description": "List of vulnerabilities applicable to the customer.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Vulnerability"
            }
          },
          "vulnerabilityIndicator": {
            "type": "boolean",
            "description": "indicates if the client is vulnerable"
          },
          "vulnerabilityNote": {
            "type": "string",
            "description": "note about the client's vulnerability (free text)"
          },
          "contacts": {
            "type": "array",
            "description": "List of contacts linked to the customer",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestContact"
            }
          }
        },
        "title": "CreateConsumerContractRequest.Customer"
      },
      "CreateConsumerContractRequestContact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The contact name has to be provided if the department name is not provided."
          },
          "firstName": {
            "type": "string",
            "description": "Refer to Contact.firstName"
          },
          "departmentName": {
            "type": "string",
            "description": "The department name has to be provided if the contact name is not provided."
          },
          "sex": {
            "type": "string",
            "description": "Refer to Contact.sex"
          },
          "description": {
            "type": "string",
            "description": "Refer to Contact.description"
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Refer to Contact.courtesyTitle"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "description": "The contact's date of birth"
          },
          "postalAddress" : {
            "description": "The postal adress of the contact",
            "allOf": [
                {
                "$ref": "#/definitions/CreateAddressRequestMailAddress"
                }
             ]
          },
          "type": {
            "type": "string",
            "description": "Refer to Contact.type"
          }
        },
        "title": "CreateConsumerContractRequest.Contact"
      },
      "CreateConsumerContractRequestEncryptedPin": {
        "type": "object",
        "description": "The issuer can provide an encrypted PIN if it is allowed by the product configuration (self-selected PIN before production received from the issuer).\nIf the field is provided but this is not allowed then the field is ignored (no error).",
        "required": [
          "keyId",
          "pinAlgorithmId",
          "pinBlock",
          "pinBlockFormat"
        ],
        "properties": {
          "pinBlock": {
            "type": "string",
            "description": "Refer to EncryptedPin.pinBlock"
          },
          "pinBlockFormat": {
            "type": "string",
            "description": "Refer to EncryptedPin.pinBlockFormat"
          },
          "pinAlgorithmId": {
            "type": "string",
            "description": "Refer to EncryptedPin.pinAlgorithmId"
          },
          "key": {
            "type": "string",
            "description": "Refer to EncryptedPin.key"
          },
          "keyId": {
            "type": "string",
            "description": "Refer to EncryptedPin.keyId"
          },
          "requestId": {
            "type": "string",
            "description": "The issuer can provide the unique identifier of the request (free text, stored in the PIN management module).\nIf provided, its value must be unique per Issuer."
          },
          "requestorId": {
            "type": "string",
            "description": "The issuer can provide the identifier of the requestor (free text, stored in the PIN management module)."
          }
        },
        "title": "CreateConsumerContractRequest.EncryptedPin"
      },
      "CreateConsumerContractRequestLegitimacyDocument": {
        "type": "object",
        "required": [
          "legitimacyDocumentType",
          "legitimacyDocumentId",
          "legitimacyDocumentDate",
          "legitimacyDocumentExpiryDate",
          "legitimated"
        ],
        "properties": {
          "legitimacyDocumentType": {
            "type": "string",
            "description": "The issuer must provide the type of the legitimacy document (example: passport, identity card, etc.). \nFree text"
          },
          "legitimacyDocumentId": {
            "type": "string",
            "description": "The issuer must provide the Id of the legitimacy document (example: the number of the passport).\nFree text (no check)"
          },
          "legitimacyDocumentDate": {
            "type": "string",
            "format": "date-time",
            "description": "The issuer must provide the delivery date of the legitimacy document (no check)"
          },
          "legitimacyDocumentExpiryDate": {
            "type": "string",
            "format": "date-time",
            "description": "The issuer must provide the expiry date of the legitimacy document.\nNo check on this field"
          },
          "legitimated": {
            "type": "boolean",
            "description": "The issuer must indicate if the document is legitimate (true) or not (false). By default, the value is false."
          },
          "customerIdentifier": {
            "description": "Not to be provided if the owner of the legitimacy document is the same as the contract owner.\nIf the owner of the legitimacy document already exists in our system then the issuer has to provide the customer reference or the issuer external customer reference of the existing customer.\nOtherwise the issuerCustomerExternalReference has to be provided.",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "customerRequestCorrelationId": {
            "type": "string",
            "description": "Not to be provided if the owner of the legitimacy document is the same as the contract owner. Otherwise the issuer can provide the correlation id of the new customer which represent the owner of the legitimacy document (defined in the data block CreateConsumerContractRequest.Customer)."
          }
        },
        "title": "CreateConsumerContractRequest.LegitimacyDocument"
      },
      "CreateConsumerContractRequestPinMailerOrder": {
        "type": "object",
        "description": "The issuer can provide data related to a PIN mailer order if it is configured as required in the PIN production model.\nIf not provided and required then the default sending mode is retrieved from product configuration.",
        "properties": {
          "sendingMode": {
            "type": "string",
            "example": "Normal",
            "description": "The issuer must provide the sending mode if a PIN mailer is requested.\nExample: Normal, Urgent, Ultra Urgent"
          },
          "skipPinMailerOrderGeneration": {
            "type": "boolean",
            "description": "If this field is true, the PIN mailer will be not generated.\nIf false or empty, the product configuration will be used. By default, value is false",
            "default": false
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide the Specific Fields for the PIN mailer order.\nIt is a list of values (label:value|) related to the PIN mailer order (pass-thru data)",
            "additionalProperties": {
              "type": "string"
            }
          },
          "customDeliveryAddressee": {
            "type": "string",
            "description": "Refer to Order.customDeliveryAddressee\nWhen the customDeliveryAddress is provided, the field must also be provided."
          },
          "customDeliveryAddress": {
            "description": "Refer to Order.customDeliveryAddress.\nThe customDeliveryAddressee must also be provided when the field is provided.",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressRequestMailAddress"
              }
            ]
          }
        },
        "title": "CreateConsumerContractRequest.PinMailerOrder"
      },
      "CreateConsumerContractRequestSepaMandate": {
        "type": "object",
        "properties": {
          "debtorAddressType": {
            "type": "string",
            "description": "Deprecated field - not to be used",
            "enum": [
              "ADDR",
              "PBOX",
              "BIZZ",
              "DLVY",
              "HOME"
            ]
          },
          "debtorEmail": {
            "type": "string",
            "description": "SEPA debtor e-mail"
          },
          "debtorId": {
            "type": "string",
            "description": "Deprecated field - not to be used"
          },
          "debtorName": {
            "type": "string",
            "description": "Deprecated field - not to be used"
          },
          "debtorPhoneNumber": {
            "type": "string",
            "description": "SEPA debtor phone number"
          },
          "debtorPostalAddress": {
            "description": "Address lines 1 and 2, street name, building number, post code, town name, country and country subdivision can be provided in certain cases - refer to SEPA rules when debtor's address is required.",
            "allOf": [
              {
                "$ref": "#/definitions/SepaMandateMailAddress"
              }
            ]
          },
          "mandateContractId": {
            "type": "string",
            "description": "Mandate underlying contract identifier (external reference) used by the issuer. E.g., if the mandate is set up along with the contract creation, it may contain the application number, etc. "
          },
          "mandateNatureType": {
            "type": "string",
            "description": "SEPA mandate nature type. PAPER_MANDATE is taken as a default.\nList of mandate possible nature types (for future usage only, not to be used):\nCOMPUTING_MIGRATION_NO_SIGNATURE, COMPUTING_MIGRATION_WITH_SIGNATURE, FR_MIGRATION_DOMESTIC_FILES,\nMANDATE_FROMDIGITALIZATION, e_MANDATE, SIGNATURE_MANDATE, MYBANK_e_MANDATE, IDEAL_e_MANDATE"
          },
          "mandateSignCity": {
            "type": "string",
            "description": "SEPA mandate city of signature"
          },
          "mandateSignDate": {
            "type": "string",
            "format": "date-time",
            "description": "The mandate signature date has to be provided except if the SEPA mandate UMR is provided (comes from another system)."
          },
          "sepaMandateUmr": {
            "type": "string",
            "description": "Unique reference to identify the SEPA mandate. Can be provided to our system if mandate is created explicitly by another system."
          }
        },
        "title": "CreateConsumerContractRequest.SepaMandate"
      },
      "CreateConsumerContractResponse": {
        "x-wl-sensitive-data": true,
        "type": "object",
        "required": [
          "contract",
          "customers"
        ],
        "properties": {
          "contract": {
            "description": "Information related to the contract.",
            "allOf": [
              {
            "$ref": "#/definitions/CreateConsumerContractResponseContract"
              }
            ]
          },
          "customers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractResponseCustomer"
            }
          }
        },
        "title": "CreateConsumerContractResponse"
      },
      "CreateConsumerContractResponseAccount": {
        "type": "object",
        "required": [
          "accountIdentifier",
          "root",
          "status",
          "accountOwnerIdentifier",
          "accountGuarantorIdentifier"
        ],
        "properties": {
          "accountIdentifier": {
            "description": "Identification of the account either by the Issuer account external reference or by the account reference.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "root": {
            "type": "boolean",
            "description": "Refer to Account.root"
          },
          "status": {
            "type": "string",
            "description": "Current status of the account.\nRefer to Account.status"
          },
          "accountOwnerIdentifier": {
            "description": "Identification of the account owner either by Issuer customer external reference or by customer reference.",
            "allOf": [
              {
            "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "accountGuarantorIdentifier": {
            "description": "Identification of the account guarantor either by Issuer customer external reference or by customer reference.",
            "allOf": [
              {
            "$ref": "#/definitions/CustomerIdentifier"
          }
            ]
          }
        },
        "title": "CreateConsumerContractResponse.Account"
      },
      "SignContractResponseAccount": {
        "type": "object",
        "required": [
          "accountIdentifier",
          "root",
          "status"
        ],
        "properties": {
          "accountIdentifier": {
            "description": "Identification of the account either by the Issuer account external reference or by the account reference.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "root": {
            "type": "boolean",
            "description": "Refer to Account.root"
          },
          "status": {
            "type": "string",
            "description": "Current status of the account.\nRefer to Account.status"
          }
        },
        "title": "SignContractResponse.Account"
      },
      "CreateConsumerContractResponseAddress": {
        "type": "object",
        "properties": {
          "addressIdentifier": {
            "description": "Identification of the customer address either by Issuer address external reference or by address reference",
            "allOf": [
              {
            "$ref": "#/definitions/AddressIdentifier"
              }
            ]
          },
          "addressLabel": {
            "type": "string",
            "description": "Refer to Address.addressLabel"
          },
          "addressType": {
            "type": "string",
            "description": "Refer to Address.addressType"
          }
        },
        "title": "CreateConsumerContractResponse.Address"
      },
      "CreateConsumerContractResponseCard": {
        "type": "object",
        "required": [
          "cardIdentifier"
        ],
        "properties": {
          "cardIdentifier": {
            "description": "Identification of the card either by Issuer card external reference or by card reference.",
            "allOf": [
              {
            "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "pan": {
            "type": "string",
            "description": "The PAN is returned only if the user is allowed to see the clear PAN.Refer to Card.pan"
          },
          "maskedPan": {
            "type": "string",
            "description": "The masked PAN is always returned.Refer to Card.maskedPan"
          },
          "expiryDate": {
            "type": "string",
            "description": "Refer to Card.expiryDate"
          },
          "panSequenceNumber": {
            "type": "string",
            "description": "Refer to Card.panSequenceNumber"
          },
          "status": {
            "type": "string",
            "description": "Current status of the card\nRefer to Card.status"
          },
          "externalStatus": {
            "type": "string",
            "description": "External status of the card\nPossible values are:\n- IN_PROGRESS (it implies the card has not registered in all the WL systems)\n- CREATED (it implies the card is registered in all the WL systems and ready for use)\n- ERROR (the synchronization process between WL systems is failed)"
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractResponseOrder"
            }
          },
          "panReference": {
            "type": "string",
            "description": "This reference is generated by our system from the PAN value. All cards with same PAN have the same panReference in our system.\nE.g. Issuers can store this PAN reference instead of the PAN and can request to e.g. block all cards having this PAN reference.\nRefer to the resource Card.panReference for its description."
          }
        },
        "title": "CreateConsumerContractResponse.Card"
      },
      "SignContractResponseCard": {
        "type": "object",
        "required": [
          "cardIdentifier",
          "panReference",
          "maskedPan",
          "expiryDate",
          "panSequenceNumber",
          "status"
        ],
        "properties": {
          "cardIdentifier": {
            "description": "Identification of the card either by Issuer card external reference or by card reference",
            "allOf": [
              {
            "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "maskedPan": {
            "type": "string",
            "description": "Refer to Card.maskedPan"
          },
          "expiryDate": {
            "type": "string",
            "description": "Refer to Card.expiryDate"
          },
          "panSequenceNumber": {
            "type": "string",
            "description": "Refer to Card.panSequenceNumber"
          },
          "status": {
            "type": "string",
            "description": "Card status after the contract signing request (CREATED or ACTIVE)"
          },
          "panReference": {
            "type": "string",
            "description": "Refer to Card.panReference"
          }
        },
        "title": "SignContractResponse.Card"
      },
      "CreateConsumerContractResponseCardContract": {
        "type": "object",
        "required": [
          "principalSupplementaryCardIndicator",
          "relatedAccounts"
        ],
        "description": "Information for each card contract if any",
        "properties": {
          "cardContractIdentifier": {
            "description": "Identification of the card contract either by Issuer card contract external reference or by card contract reference.",
            "allOf": [
              {
            "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "cardHolderIdentifier": {
            "description": "Identification of the card holder either by Issuer customer external reference or by customer reference.",
            "allOf": [
              {
            "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "cardContractGroupReference": {
            "type": "string",
            "description": "An unique reference to group card contracts when the customer card is replaced with a new brand\nRefer to CardContract.cardContractGroupReference."
          },
          "status": {
            "type": "string",
            "description": "Current status of the card contract\nRefer to CardContract.status."
          },
          "principalSupplementaryCardIndicator": {
            "type": "string",
            "description": "Indicates if the card is a Principal card or a supplementary one\nPossible values: PRINCIPAL, SUPPLEMENTARY",
            "enum": [
              "PRINCIPAL",
              "SUPPLEMENTARY"
            ]
          },
          "card": {
            "description": "Information related to the card",
            "allOf": [
              {
            "$ref": "#/definitions/CreateConsumerContractResponseCard"
              }
            ]
          },
          "relatedAccounts": {
            "type": "array",
            "description": "List of posting accounts for transactions (scheme financial card transactions) per 'relation' (posting rule):\n- there is at least the default account where all transactions are posted by default (relation = DEFAULT - no criteria to be checked against transaction data)\n- then it is possible to have additional relations and corresponding posting accounts where the relation is a combination of criteria to determine the right posting account, e.g. posting account for cash withdrawal operations only, for one currency, for currency different than Euro.\nThe different relations are ordered by priority (the DEFAULT one has the lowest priority).\nWhen an incoming card transaction is processed by our system each relation (posting rules) is evaluated first (from the highest to the lowest priority). As soon as a relation (posting rule) is successfully checked against transaction data then the transaction is posted to the associated account. If no relation (posting rule) is successfully checked then the transaction is posted to the default account.",
            "items": {
              "$ref": "#/definitions/AccountRelation"
            }
          },
          "externalCobadgedCardNumber": {
            "type": "string",
            "description": "This is an external card number used for Giro card in Germany"
          },
          "externalCobadgedSequenceNumber": {
            "type": "string",
            "description": "This is the sequence number of the external card for Giro card in Germany"
          },
          "externalCobadgedExpiryDate": {
            "type": "string",
            "description": "This is the expiry date of the external card for Giro card in Germany"
          },
          "originalCardContractIdentifier": {
            "$ref": "#/definitions/CardContractIdentifier"
          },
          "changedCardContractIdentifier": {
            "$ref": "#/definitions/CardContractIdentifier"
          }
        },
        "title": "CreateConsumerContractResponse.CardContract"
      },
      "SignContractResponseCardContract": {
        "type": "object",
        "required": [
          "cardContractIdentifier",
          "status",
          "cards"
        ],
        "description": "Information for each card contract if any",
        "properties": {
          "cardContractIdentifier": {
            "description": "Identification of the card contract either by Issuer card contract external reference or by card contract reference",
            "allOf": [
              {
            "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Current status of the card contract\nRefer to CardContract.status."
          },
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SignContractResponseCard"
            }
          }
        },
        "title": "SignContractResponse.CardContract"
      },
      "CreateConsumerContractResponseContract": {
        "type": "object",
        "required": [
          "contractIdentifier",
          "status",
          "creationDate",
          "productIdentifier",
          "contractOwnerIdentifier",
          "accounts"
        ],
        "properties": {
          "contractIdentifier": {
            "description": "Identification of the contract either by Issuer contract external reference or by contract reference.",
            "allOf": [
              {
            "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Current status of the contract\nRefer to Contract.status"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "This is the contract creation date in our system.\nFormat : yyyy-MM-ddTHH:mm:ssZ"
          },
          "signatureDate": {
            "type": "string",
            "format": "date-time",
            "description": "This is the date when the contract is set to \"signed\" status in our system.\nFormat : yyyy-MM-ddTHH:mm:ssZ"
          },
          "issuerBranchCode": {
            "type": "string",
            "description": "Refer to Contract.issuerBranchCode"
          },
          "cardReleaseOrder": {
            "type": "string",
            "description": "The card release order is the one from the request if provided, otherwise is the one retrieved from the product configuration."
          },
          "productIdentifier": {
            "description": "This is the reference of the product provided and used to instantiate the contract.",
            "allOf": [
              {
                "$ref": "#/definitions/ProductIdentifier"
              }
            ]
          },
          "contractOwnerIdentifier": {
            "description": "Identification of the contract owner either by Issuer customer external reference or by customer reference.",
            "allOf": [
              {
            "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "accounts": {
            "type": "array",
            "description": "Information related to the accounts (at least the root account).",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractResponseAccount"
            }
          },
          "cardContracts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractResponseCardContract"
            }
          }
        },
        "title": "CreateConsumerContractResponse.Contract"
      },
      "SignContractResponseContract": {
        "type": "object",
        "required": [
          "contractIdentifier",
          "status",
          "accounts"
        ],
        "properties": {
          "contractIdentifier": {
            "description": "Identification of the contract either by Issuer contract external reference or by contract reference",
            "allOf": [
              {
            "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Current status of the contract\nRefer to Contract.status"
          },
          "accounts": {
            "type": "array",
            "description": "Information related to the accounts (at least the root account)",
            "items": {
              "$ref": "#/definitions/SignContractResponseAccount"
            }
          },
          "cardContracts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SignContractResponseCardContract"
            }
          }
        },
        "title": "SignContractResponse.Contract"
      },
      "CreateConsumerContractResponseCustomer": {
        "type": "object",
        "description": "Information related to all persons associated to the contract (contract holder, account owner, card holder)",
        "required": [
          "customerIdentifier",
          "lastName",
          "firstName",
          "addresses"
        ],
        "properties": {
          "customerIdentifier": {
            "description": "Identification of the customer either by Issuer customer external reference or by customer reference.",
            "allOf": [
              {
            "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Refer to Customer.courtesyTitle"
          },
          "lastName": {
            "type": "string",
            "description": "Refer to Customer.lastName"
          },
          "firstName": {
            "type": "string",
            "description": "Refer to Customer.firstName"
          },
          "addresses": {
            "type": "array",
            "description": "Information for each address of the customer",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractResponseAddress"
            }
          },
          "contacts": {
            "type": "array",
            "description": "List of contacts of the customer",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractResponseContact"
            }
          }
        },
        "title": "CreateConsumerContractResponse.Customer"
      },
      "CreateConsumerContractResponseContact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Refer to Contact.name"
          },
          "firstName": {
            "type": "string",
            "description": "Refer to Contact.firstName"
          },
          "type": {
            "type": "string",
            "description": "Refer to Contact.type"
          },
          "contactReference": {
            "type": "string",
            "description": "Refer to Contact.contactReference"
          }
        },
        "title": "CreateConsumerContractResponse.Contact"
      },
      "CreateConsumerContractResponseOrder": {
        "type": "object",
        "required": [
          "orderIdentifier"
        ],
        "description": "Information of each order (card order, PIN mailer order) if any",
        "properties": {
          "orderIdentifier": {
            "description": "Identification of the order either by its order reference.",
            "allOf": [
              {
            "$ref": "#/definitions/OrderIdentifier"
              }
            ]
          },
          "orderType": {
            "type": "string",
            "description": "The order can correspond to a card, a PIN mailer or a TAN mailer.\nPossible values are : CardOrder, PinMailerOrder, TanMailerOrder"
          },
          "currentInternalStatus": {
            "type": "string",
            "description": "Current internal status of the order:\n- CREATED: still  to be validated by the branch\n- CONFIRMED: if the order is validated by the branch\n- ORDERABLE: if ready to be issued (depending on the configuration, e.g. PIN is generated and available)"
          }
        },
        "title": "CreateConsumerContractResponse.Order"
      },
      "CreateCreditTransferRequest": {
        "type": "object",
        "required": [
          "accountIdentifier",
          "amount",
          "ibanOwnerName",
          "iban"
        ],
        "properties": {
          "accountIdentifier": {
            "description": "Card account identifier to be debited.",
            "allOf": [
              {
            "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "amount": {
            "description": "Amount of credit transfer",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "ibanOwnerName": {
            "type": "string",
            "description": "Refer to Account.ibanOwnerName"
          },
          "bic": {
            "type": "string",
            "description": "Refer to Account.bic"
          },
          "iban": {
            "type": "string",
            "description": "Refer to Account.iban"
          },
          "externalOperationCode": {
            "type": "string",
            "description": "The external operation code of the balance adjustment can be provided."
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Due date for OCT. Valid for SEPA OCT only"
          }
        },
        "title": "CreateCreditTransferRequest"
      },
      "CreateCreditTransferResponse": {
        "type": "object",
        "required": [
          "directDebitIdentifier",
          "status"
        ],
        "properties": {
          "creditTransferIdentifier": {
            "description": "Credit transfer identifier",
            "allOf": [
              {
                "$ref": "#/definitions/CreditTransferIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Credit transfer status"
          }
        },
        "title": "CreateCreditTransferResponse"
      },
      "CreateDirectDebitRequest": {
        "type": "object",
        "required": [
          "overPaymentAccountIdentifier",
          "amount"
        ],
        "properties": {
          "overPaymentAccountIdentifier": {
            "description": "Card account identifier to be credited",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "amount": {
            "description": "Amount of Direct Debit",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "externalOperationCode": {
            "type": "string",
            "description": "The external operation code of the balance adjustment can be provided."
          }
        },
        "title": "CreateDirectDebitRequest"
      },
      "CreateDirectDebitResponse": {
        "type": "object",
        "required": [
          "directDebitIdentifier",
          "status"
        ],
        "properties": {
          "directDebitIdentifier": {
            "description": "Direct debit identifier",
            "allOf": [
              {
                "$ref": "#/definitions/DirectDebitIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Direct debit status"
          }
        },
        "title": "CreateDirectDebitResponse"
      },
      "CreateInsuranceContractRequest": {
        "type": "object",
        "required": [
          "insurancePackageReference"
        ],
        "properties": {
          "insurancePackageReference": {
            "type": "string",
            "description": "Insurance package reference among the ones configured for the issuer"
          },
          "insuranceEventCode": {
            "type": "string",
            "description": "Insurance event related to insurance activation can be provided. \nIf not provided, first event with 'Activate Insurance' action of the package is applied. "
          }
        },
        "title": "CreateInsuranceContractRequest"
      },
      "CreateInsuranceContractResponse": {
        "type": "object",
        "required": [
          "accountIdentifier",
          "insuranceContractIdentifier"
        ],
        "properties": {
          "accountIdentifier": {
            "description": "The account that insurance contract belongs to ",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "insuranceContractIdentifier": {
            "description": "The insurance package which is linked to this contract",
            "allOf": [
              {
                "$ref": "#/definitions/InsuranceContractIdentifier"
              }
            ]
          }
        },
        "title": "CreateInsuranceContractResponse"
      },
      "CreateInsuranceEventRequest": {
        "type": "object",
        "required": [
          "insuranceEventCode",
          "insuranceEventDate"
        ],
        "properties": {
          "insuranceEventCode": {
            "type": "string",
            "description": "Insurance event code"
          },
          "insuranceEventDate": {
            "type": "string",
            "format": "date-time",
            "description": "Insurance event date"
          },
          "insuranceEventDescription": {
            "type": "string",
            "description": "Insurance event description (free text)"
          }
        },
        "title": "CreateInsuranceEventRequest"
      },
      "CreateInsuranceEventResponse": {
        "type": "object",
        "required": [
          "accountIdentifier",
          "insuranceContractIdentifier"
        ],
        "properties": {
          "accountIdentifier": {
            "$ref": "#/definitions/AccountIdentifier"
          },
          "insuranceContractIdentifier": {
            "$ref": "#/definitions/InsuranceContractIdentifier"
          }
        },
        "title": "CreateInsuranceEventResponse"
      },
      "CreateOperationBalanceAdjustmentRequest": {
        "type": "object",
        "required": [
          "balanceAdjustmentReason ",
          "externalOperationReference",
          "externalOperationDate",
          "externalOperationServicePoster",
          "referenceAmount"
        ],
        "properties": {
          "balanceAdjustmentReason ": {
            "type": "string",
            "description": "The reason why the balance adjustment is requested\nAllowed value list depends on the issuer configuration",
            "example": "DISPUTE_ADJUSTMENT"
          },
          "description": {
            "type": "string",
            "description": "Textual description of the operation\nCan contain a free text that can be used when the operation is presented to the Customer"
          },
          "externalOperationReference": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nExternal reference of the operation to be created."
          },
          "externalOperationDate": {
            "format": "date-time",
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe date the operation is performed (in general, the current date should be provided)."
          },
          "externalOperationServicePoster": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe identifier of the external system which provides the operation to be posted (free text)"
          },
          "externalOperationCode": {
            "type": "string",
            "description": "The external operation code of the balance adjustment operation can be provided to identify the operation type in the issuer system."
          },
          "referenceAmount": {
            "description": "The amount of the operation (amount/exponent/currency values)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "valueDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the operation impacts balances or counters.\nIf not provided, the value date is set to the external operation date if the external operation date is not in the past, otherwise the value date is set to the current date."
          }
        },
        "title": "CreateOperationBalanceAdjustmentRequest"
      },
      "TurnoverInformation": {
        "type": "object",
        "required": [
          "rootAccountIdentifier",
          "issuerId"
        ],
        "properties": {
          "rootAccountIdentifier": {
            "$ref": "#/definitions/AccountIdentifier"
          },
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "nextMembershipAnniversaryDate": {
            "format": "date-time",
            "type": "string",
            "description": "The next anniversary of the Membership fee."
          },
          "previousPeriodTurnovers": {
            "description": "previous turnovers",
            "type": "array",
            "items": {
              "$ref": "#/definitions/PreviousPeriodTurnover"
            }
          },
          "currentTurnoverAmount": {
            "description": "The amount of the current Turnover (amount/exponent/currency values)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          }
        },
        "title": "TurnoverInformation"
      },
      "Turnover": {
        "type": "object",
        "required": [
          "rootAccountIdentifier",
          "issuerId"
        ],
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "rootAccountIdentifier": {
            "description": "Identifier of the root account",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "turnoverType": {
            "type": "string",
            "description": "The type of turonver : \n- DEFAULT  \n- MEMBERSHIP_FEE"
          },
          "currentTurnoverAmount": {
            "description": "The amount of the current Turnover (amount/exponent/currency values). It can be a montthly or an annual turnover.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "nextAnniversaryDate": {
            "format": "date-time",
            "type": "string",
            "description": "Next anniversary date. \n If turnoverTpe = MEMBERSHIP_FEE \n If annual turnover, the membership fee booking date of the next year is returned \n If monthly turnover,  the membership fee booking date of the next month is returned \n If turnoverTpe = DEFAULT \n The anniversary date of account or the contract of the next year is returned (annual turnover) "
          },
          "previousPeriodTurnovers": {
            "description": "Turnover information for the 5 last periods. \n If annual turnover, the turnover of the 5 previous years is returned \n If monthly turnover,  the turnover of the 5 previous months is returned",
            "type": "array",
            "items": {
              "$ref": "#/definitions/PreviousPeriodTurnover"
            }
          }
        },
        "title": "Turnover"
      },
      "PreviousPeriodTurnover": {
        "type": "object",
        "required": [
          "periodType",
          "startDate",
          "endDate"
        ],
        "properties": {
          "periodType": {
            "type": "string",
            "description": "Period type : T-1, T-2, T-3, T-4, T-5 (5 periods maximum) with \n T-1 : Turnover information for the last year (for annual turnover) / the last month (for monthly turnover) \nT-x : Turnover information from x years ago (for annual turnover) / from x months ago (for monthly turnover)"
          },
          "startDate ": {
            "format": "date-time",
            "type": "string",
            "description": "The start date of the turnover period."
          },
          "endDate ": {
            "format": "date-time",
            "type": "string",
            "description": "The end date of the turnover period."
          },
          "turnoverAmount": {
            "description": "Turnover amount for the period (amount/exponent/currency values)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          }
        },
        "title": "PreviousPeriodTurnover"
      },
      "CreateOperationBalanceAdjustmentResponse": {
        "type": "object",
        "required": [
          "operationIdentifier"
        ],
        "properties": {
          "operationIdentifier": {
            "description": "Identifier of the operation created during the balance adjustment (generated by our system)",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          }
        },
        "title": "CreateOperationBalanceAdjustmentResponse"
      },
      "CreateOperationFeeRequest": {
        "type": "object",
        "required": [
          "adjustment",
          "externalOperationReference",
          "externalOperationDate",
          "externalOperationServicePoster",
          "feeType",
          "referenceAmount"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Textual description of the operation\nCan contain a free text that can be used when the operation is presented to the Customer."
          },
          "adjustment": {
            "type": "boolean",
            "description": "This flag indicates if this operation is an adjustment or not."
          },
          "adjustmentReason ": {
            "type": "string",
            "description": "The reason why the adjustment fee is requested\nFree text or allowed value list depending on the configuration\nMandatory when adjustment is true"
          },
          "externalOperationReference": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nExternal reference of the operation to be created."
          },
          "externalOperationDate": {
            "format": "date-time",
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe date the operation is performed (in general, the current date should be provided)."
          },
          "externalOperationServicePoster": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe identifier of the external system which provides the operation to be posted (free text)."
          },
          "externalOperationCode": {
            "type": "string",
            "description": "The external operation code of the fee operation can be provided to identify the operation type in the issuer system."
          },
          "feeType": {
            "type": "string",
            "description": "The type of fee used to create the current operation. \nPossible values (additional types can be configured for the issuer) : MARKUP_FEE, TRANSACTION_FEE, PERIODIC_FEE, VOLUME_FEE, INSURANCE_FEE, MANUAL_FEE, STATEMENT_FEE, EVENT_FEE, RMESSAGE_FEE, CARD_FEE, ACCOUNT_SETUP_FEE, MEMBERSHIP_FEE, ADDON_SERVICE_FEE"
          },
          "referenceAmount": {
            "description": "The amount of the operation (amount/exponent/currency values)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "valueDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the operation impacts balances or counters.\nIf not provided, the value date is set to the external operation date if the external operation date is not in the past, otherwise the value date is set to the current date."
          },
          "subFeeType": {
            "description": "Refer to Operation.subFeeType",
            "type": "string"
          },
          "frequency": {
            "description": "Refer to Operation.frequency",
            "type": "string"
          }
        },
        "title": "CreateOperationFeeRequest"
      },
      "CreateOperationFeeResponse": {
        "type": "object",
        "required": [
          "operationIdentifier"
        ],
        "properties": {
          "operationIdentifier": {
            "description": "Identifier of the operation created during the fee generation (generated by our system)",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          }
        },
        "title": "CreateOperationFeeResponse"
      },
      "ResetBalanceRequest": {
        "type": "object",
        "required": [
          "externalOperationReference",
          "externalOperationDate",
          "externalOperationServicePoster"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Textual description of the operation to be generated during the account balance reset\nCan contain a free text that can be used when the operation is presented to the Customer"
          },
          "externalOperationReference": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nExternal reference of the operation to be created."
          },
          "externalOperationDate": {
            "format": "date-time",
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe date the operation is performed (in general, the current date should be provided)"
          },
          "externalOperationServicePoster": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe identifier of the external system which provides the operation to be posted (free text)"
          },
          "externalOperationCode": {
            "type": "string",
            "description": "The external operation code of the balance reset can be provided to identify the operation type in the issuer system."
          }
        },
        "title": "ResetBalanceRequest"
      },
      "ResetBalanceResponse": {
        "type": "object",
        "required": [
          "operationIdentifier",
          "referenceAmount"
        ],
        "properties": {
          "operationIdentifier": {
            "description": "Identifier of the operation created during the balance reset (generated by our system)",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          },
          "referenceAmount": {
            "description": "Amount of the balance reset on the account (amount/exponent/currency values)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          }
        },
        "title": "ResetBalanceResponse"
      },
      "ApiResponseEntityResetBalanceResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Issuer response entity",
            "allOf": [
              {
                "$ref": "#/definitions/ResetBalanceResponse"
              }
            ]
          }
        },
        "title": "ApiResponseEntityResetBalanceResponse"
      },
      "CreateOperationLoadRequest": {
        "type": "object",
        "required": [
          "externalOperationReference",
          "externalOperationDate",
          "externalOperationServicePoster",
          "referenceAmount"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Textual description of the operation\nCan contain a free text that can be used when the operation is presented to the Customer."
          },
          "externalOperationReference": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nExternal reference of the operation to be created."
          },
          "externalOperationDate": {
            "format": "date-time",
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe date the operation is performed (in general, the current date should be provided)."
          },
          "externalOperationServicePoster": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe identifier of the external system which provides the operation to be posted (free text)."
          },
          "externalOperationCode": {
            "type": "string",
            "description": "The external operation code of the load operation can be provided to identify the operation type in the issuer system."
          },
          "referenceAmount": {
            "description": "The amount of the operation (amount/exponent/currency values)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "paymentChannel": {
            "type": "string",
            "description": "The channel by which the payment is performed.\nThe possible values are:\nDIRECT_DEBIT\nCHEQUE\nCASH\nONLINE_MONEY\nNO_CHANNEL_PROVIDED\nINCOMING_PAYMENT\nNote that NO_CHANNEL_PROVIDED will be set by default if the paymentChannel is not provided"
          },
          "sepa": {
            "type": "boolean",
            "description": "Indicates whether the payment is performed in SEPA format. \nBy default, the value is false."
          }
        },
        "title": "CreateOperationLoadRequest"
      },
      "CreateOperationLoadResponse": {
        "type": "object",
        "required": [
          "operationIdentifier"
        ],
        "properties": {
          "operationIdentifier": {
            "description": "Identifier of the operation created during the account loading (generated by our system)",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          }
        },
        "title": "CreateOperationLoadResponse"
      },
      "CreateOperationPaymentRequest": {
        "type": "object",
        "required": [
          "externalOperationReference",
          "externalOperationDate",
          "externalOperationServicePoster",
          "referenceAmount"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Textual description of the operation\nCan contain a free text that can be used when the operation is presented to the Customer"
          },
          "externalOperationReference": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nExternal reference of the operation to be created."
          },
          "externalOperationDate": {
            "format": "date-time",
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe date the operation is performed (in general, the current date should be provided)."
          },
          "externalOperationServicePoster": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe identifier of the external system which provides the operation to be posted (free text)"
          },
          "externalOperationCode": {
            "type": "string",
            "description": "The external operation code of the payment operation can be provided to identify the operation type in the issuer system."
          },
          "overPaymentAccountIdentifier": {
            "description": "Identifier of the account in case of overpayment situation\nIf provided, the overpayment account must be in an active or being closed status",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "referenceAmount": {
            "description": "The amount of the operation (amount/exponent/currency values)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "valueDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the operation impacts balances or counters.\nIf not provided, the value date is set to the external operation date.\nWhen the value date is in the future, a pending operation is created."
          },
          "paymentChannel": {
            "type": "string",
            "description": "The channel by which the payment is performed (optional field). \nThe possible values are:\nDIRECT_DEBIT\nCHEQUE\nCASH\nONLINE_MONEY \nNO_CHANNEL_PROVIDED\nINCOMING_PAYMENT\nNote that NO_CHANNEL_PROVIDED will be set by default if the paymentChannel is not provided."
          },
          "sepa": {
            "type": "boolean",
            "description": "Indicates whether the payment is performed in SEPA format.\nBy default, the value is false."
          }
        },
        "title": "CreateOperationPaymentRequest"
      },
      "CreateOperationPaymentResponse": {
        "type": "object",
        "required": [
          "operationIdentifier"
        ],
        "properties": {
          "operationIdentifier": {
            "description": "Identifier of the operation created during the payment (generated by our system)",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          }
        },
        "title": "CreateOperationPaymentResponse"
      },
      "CreateOperationReimbursementRequest": {
        "type": "object",
        "required": [
          "externalOperationReference",
          "externalOperationDate",
          "externalOperationServicePoster"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Textual description of the  operation\nCan contain a free text that can be used when the operation is presented to the Customer."
          },
          "externalOperationReference": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nExternal reference of the operation to be created."
          },
          "externalOperationDate": {
            "format": "date-time",
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe date the operation is performed (in general, the current date should be provided)."
          },
          "externalOperationServicePoster": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe identifier of the external system which provides the operation to be posted (free text)."
          },
          "externalOperationCode": {
            "type": "string",
            "description": "The external operation code of the reimbursment can be provided to identify the operation type in the issuer system."
          },
          "destinationIban": {
            "type": "string",
            "description": "An IBAN can be used for the reimbursement to transfer the input amount on this IBAN.\nIf not provided, the reimbursment will be done on the IBAN associated to the account."
          },
          "reimbursementType": {
            "type": "string",
            "description": "The reimbursement type can be:\n- 'FULL': The balance of the account limited to the Open-To Buy will be reimbursed. \n- 'PARTIAL': If the input amount is greater than the amount to be considered (balance amount limited to the Open-To Buy) , the maximum of the available amount will be reimbursed.\n- 'MAX':  If the input amount is greater than the maximum available (balance amount limited to the Open-To Buy), then the reimbursement will be refused.\nIf the reimbursement type is not provided, the default value \"MAX\" will be used."
          },
          "referenceAmount": {
            "description": "The amount of the operation (amount/exponent/currency values).\n The maximum amount is the balance amount limited to the Open-To-Buy.\n This field must not be provided if the reimbursement type is \"FULL\". Otherwise, the request is rejected.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          }
        },
        "title": "CreateOperationReimbursementRequest"
      },
      "CreateOperationReimbursementResponse": {
        "type": "object",
        "required": [
          "operationIdentifier"
        ],
        "properties": {
          "operationIdentifier": {
            "description": "Identifier of the operation created during the reimbursement (genereated by our system)",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          }
        },
        "title": "CreateOperationReimbursementResponse"
      },
      "CreateOperationUnloadRequest": {
        "type": "object",
        "required": [
          "externalOperationReference",
          "externalOperationDate",
          "externalOperationServicePoster",
          "referenceAmount"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "Textual description of the  operation\nCan contain a free text that can be used when the operation is presented to the Customer."
          },
          "externalOperationReference": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nExternal reference of the operation to be created."
          },
          "externalOperationDate": {
            "format": "date-time",
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe date the operation is performed (in general, the current date should be provided)."
          },
          "externalOperationServicePoster": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe identifier of the external system which provides the operation to be posted (free text)."
          },
          "externalOperationCode": {
            "type": "string",
            "description": "The external operation code of the unload can be provided to identify the operation type in the issuer system."
          },
          "referenceAmount": {
            "description": "The amount of the operation (amount/exponent/currency values)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          }
        },
        "title": "CreateOperationUnloadRequest"
      },
      "CreateOperationUnloadResponse": {
        "type": "object",
        "required": [
          "operationIdentifier"
        ],
        "properties": {
          "operationIdentifier": {
            "description": "Identifier of the operation created during the account unloading (generated by our system)",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          }
        },
        "title": "CreateOperationUnloadResponse"
      },
      "CreateTanRequest": {
        "type": "object",
        "required": [
          "tanOrigin",
          "sendingMode"
        ],
        "properties": {
          "tanOrigin": {
            "type": "string",
            "description": "Origin of the TAN request, e.g. GUI. (free text)"
          },
          "sendingMode": {
            "type": "string",
            "description": "Sending mode selected among the sending modes allowed in the card product for the TAN mailer e.g. NORMAL, URGENT"
          },
          "specificFields": {
            "type": "object",
            "example": "{\"tanSF1\":\"tanSF1Value\",\"tanSF2\":\"tanSF2Value\"}",
            "description": "List of external data (label:value), separated by a '|', related to an order that can be provided by e.g. the issuer for information or for usage by other systems.Example : label1:value|label2:value.Those provided data have no impact on our system business processes.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "waiveFee": {
            "type": "boolean",
            "description": "Indicates whether the TAN order fee (if any) while requesting TAN password is waived. Default value is false.",
            "default": false
          },
          "waiveShippingFee": {
            "type": "boolean",
            "description": "Indicates whether the TAN order shipping fee is waived. Default value is false.",
            "default": false
          }
        },
        "title": "CreateTanRequest"
      },
      "CreateTanResponse": {
        "type": "object",
        "properties": {
          "orderIdentifier": {
            "$ref": "#/definitions/OrderIdentifier"
          },
          "currentInternalStatus": {
            "type": "string",
            "example": "ORDERABLE",
            "description": "Current internal status of the order (mandatory)."
          },
          "orderType": {
            "type": "string",
            "example": "CardOrder, TanMailerOrder, PinMailerOrder",
            "description": "Type of the order."
          }
        },
        "title": "CreateTanResponse"
      },
      "CreateTemporaryCreditLimitRequest": {
        "type": "object",
        "required": [
          "activationEndTime",
          "temporaryCreditLimitAmount"
        ],
        "properties": {
          "temporaryCreditLimitAmount": {
            "description": "Refer to TemporaryCreditLimit.temporaryCreditLimitAmount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "activationStartTime": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to TemporaryCreditLimit.activationStartTime"
          },
          "activationEndTime": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to TemporaryCreditLimit.activationEndTime"
          },
          "manageOverlap": {
            "type": "boolean",
            "default": false,
            "description": "The parameter has the following possible values: TRUE/FALSE. In case it is set to 'TRUE', and there is overlap of future dates between two and more temporary credit limits, then the most recent one will be prioritized and the previous ones' dates will be adjusted accordingly. In case it is set to 'FALSE' and a creation of new temporary credit limit is requested, the dates of which overlap with an existing one, then the new request will be rejected. The default value of the parameter is set to 'FALSE'"
          }
        },
        "title": "CreateTemporaryCreditLimitRequest"
      },
      "CreateTemporaryCreditLimitResponse": {
        "type": "object",
        "required": [
          "accountIdentifier",
          "root",
          "temporaryCreditLimitIdentifier",
          "temporaryCreditLimitAmount",
          "activationStartTime",
          "activationEndTime"
        ],
        "properties": {
          "accountIdentifier": {
            "description": "Account references provided in the request",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "root": {
            "type": "boolean",
            "description": "Indicates if the account is a root account (true) or not (false)."
          },
          "temporaryCreditLimitIdentifier": {
            "description": "Refer to TemporaryCreditLimit.temporaryCreditLimitIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/TemporaryCreditLimitIdentifier"
              }
            ]
          },
          "temporaryCreditLimitAmount": {
            "description": "Refer to TemporaryCreditLimit.temporaryCreditLimitAmount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "activationStartTime": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to TemporaryCreditLimit.activationStartTime"
          },
          "activationEndTime": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to TemporaryCreditLimit.activationEndTime"
          },
          "relatedTemporaryCreditLimits": {
            "type": "array",
            "description": "List of other accounts involved by the temporary credit limit",
            "items": {
              "$ref": "#/definitions/RelatedTemporaryCreditLimit"
            }
          }
        },
        "title": "CreateTemporaryCreditLimitResponse"
      },
      "CreateVelocityLimitOverrideRequest": {
        "type": "object",
        "properties": {
          "activationEndTime": {
            "type": "string",
            "format": "date-time",
            "description": "Last point in time at which the override will be considered.\nHas to be later than ActivationStartTime. Can be present without ActivationStartTime.\nIf not provided the override will be taken into account forever.\nExample: 2020-07-28T10:13:15.421Z"
          },
          "activationStartTime": {
            "type": "string",
            "format": "date-time",
            "description": "First point in time at which the override will be considered. \nHas to be before ActivationEndTime. Can be present without ActivationEndTime.\nIf not provided the override will be taken into account immediately.\nExample: 2020-07-28T10:13:15.421Z"
          },
          "maximumAmount": {
            "description": "In most of the cases the value given here will be positive or zero.\nIn case JSON null is provided what is configured on higher levels becomes effective.\nIf MaximumAmountCheck = true then a non-null value must be given. Otherwise the field must be absent.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "maximumAmountCheck": {
            "type": "boolean",
            "description": "In case JSON null is provided what is configured on higher levels becomes effective."
          },
          "maximumCount": {
            "type": "integer",
            "format": "int32",
            "description": "In case JSON null is provided what is configured on higher levels becomes effective.\nIf MaximumCountCheck = true then a non-null value must be given. Otherwise the field must be absent."
          },
          "maximumCountCheck": {
            "type": "boolean",
            "description": "In case JSON null is provided what is configured on higher levels becomes effective."
          },
          "priority": {
            "type": "integer",
            "description": "In case multiple overrides with overlapping activation times are existing this information is used to resolve this situation by applying the overrides one by one starting with the one with lowest priority. The priority needs to be unique accross all overrides with overlapping activation timespans, which are associated with the same velocity check and the same account. That means, two overrides for the same account and same velocity check can have the same priority, if they are not active at the same time. If they are active at the same time, unique priorities must be given. If property is not set, it will be set to a default value of 0"
          }
        },
        "title": "CreateVelocityLimitOverrideRequest"
      },
      "CreditLimit": {
        "type": "object",
        "properties": {
          "creditLimitAmount": {
            "description": "Credit limit amount allowed by the issuer (mandatory)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the permanent credit limit is active."
          }
        },
        "title": "CreditLimit"
      },
      "ActiveCreditLimit": {
        "type": "object",
        "properties": {
          "creditLimitAmount": {
            "description": "Current credit limit amount that the customer can spend - either temporary (if there is temporary credit limit) or permanent (conditional, pay later). \nThe credit limit amount is always in debit position.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the current credit limit (temporary or permanent) becomes active."
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Only filled if the active credit limit is a temporary one. It is the date when the current temporary credit limit becomes inactive and is replaced by the next active credit limit (permanent or temporary credit limit)."
          }
        },
        "title": "ActiveCreditLimit"
      },
      "CreditTransfer": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "creditTransferIdentifier": {
            "description": "Unique Credit Transfer Identifier",
            "allOf": [
              {
                "$ref": "#/definitions/CreditTransferIdentifier"
              }
            ]
          },
          "accountIdentifier": {
            "description": "Account identifier linked to the credit transfer",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the OCT"
          },
          "amount": {
            "description": "OCT amount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "statusHistory": {
            "description": "History of credit transfer changes",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreditTransferStatusHistory"
            }
          },
          "ibanOwnerName": {
            "type": "string",
            "description": "Refer to Account.ibanOwnerName"
          },
          "iban": {
            "type": "string",
            "description": "Refer to Account.iban"
          },
          "bic": {
            "type": "string",
            "description": "Refer to Account.bic"
          },
          "sci": {
            "type": "string",
            "description": "SEPA Creditor Identifier (for SEPA OCT)"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "New due date if it was recomputed on SPS side (present when due date was recomputed. Valid for SEPA OCT only)"
          },
          "sepaIndicator": {
            "type": "boolean",
            "description": "Indicates if OCT is SEPA or not"
          },
          "octType": {
            "type": "string",
            "description": "F, for OCT types using the credit balance only \nK, for OCT types using the OTB"
          },
          "remittanceInfo": {
            "type": "string",
            "description": "Based on a template defined at product level per product reference \nIf such template is not defined then Remittance information is empty\nIf template is defined for transaction type as F and K (see OCT type) then the field is built based on it. \nIts content depends on the free text and dynamic fields present."
          },
          "rejectionCode": {
            "type": "string",
            "description": "Rejection code received throughout OCT processing lifecycle"
          },
          "rejectionReason": {
            "type": "string",
            "description": "Rejection reason received throughout OCT processing lifecycle"
          },
          "status": {
            "type": "string",
            "description": "The status of the OCT"
          },
          "eventSource": {
            "type": "string",
            "description": "Source of an event that triggers an update of OCT"
          },
          "cancellationDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the OCT order was canceled"
          }
        },
        "title": "CreditTransfer"
      },
      "CreditTransferIdentifier": {
        "type": "object",
        "properties": {
          "endToEndId": {
            "type": "string",
            "description": "Credit transfer identifier"
          }
        },
        "title": "CreditTransferIdentifier"
      },
      "Customer": {
        "type": "object",
        "required": [
          "onlineRiskCategory",
          "offlineRiskCategory"
        ],
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "customerIdentifier": {
            "description": "Unique identifier. Refer to Customer Identifier data type for detail information",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "active": {
            "type": "boolean",
            "description": "DEPRECATED"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "description": "Birth date of Person Customer (conditional depending on the card profile configuration). If present, the value can be subject to a validation process if a specific rule has been configured at issuer level."
          },
          "birthPlace": {
            "type": "string",
            "description": "Birth Place of Person Customer (optional).\nFree text"
          },
          "commercialStatus": {
            "type": "string",
            "description": "Defines the commercial status of a Person Customer among a list of possible values configured per issuer. One of the possible values can be set as default value (eg. Normal, Address Only, Bankruptcy, Active Customer). (mandatory)"
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Courtesy Title of Person Customer (optional). Free text. If present, the value can be subject to a validation process if a specific rule has been configured at issuer level."
          },
          "customerClass": {
            "type": "string",
            "description": "for future use (optional)"
          },
          "doNotContact": {
            "type": "boolean",
            "description": "if the Person Customer does not want to be contacted by the issuer set to 'true' otherwise to be set to 'false'. If not provided, value is NULL(optional)"
          },
          "employee": {
            "type": "boolean",
            "description": "Flag indicating if the Person Customer is an employee of the issuer. If not provided, value is NULL(optional)"
          },
          "employerAddress": {
            "type": "string",
            "description": "Employer's Address of Person Customer (optional).\nFree text"
          },
          "employerName": {
            "type": "string",
            "description": "Employer's Name of Person Customer. (optional).\nFree text"
          },
          "firstName": {
            "type": "string",
            "description": "First Name of Person Customer (mandatory)"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name of Person Customer (mandatory)"
          },
          "maidenName": {
            "type": "string",
            "description": "Maiden Name of Person Customer (optional)"
          },
          "correspondenceName":{
              "type" : "string",
              "description": "Correspondence Name of Person Customer (optional)."
          },
          "maritalStatus": {
            "type": "string",
            "description": "Marital Status of Person Customer. Free text (optional)"
          },
          "monthlySalary": {
            "type": "string",
            "description": "Average monthly salary of Person Customer (optional)"
          },
          "nationality": {
            "type": "string",
            "description": "Nationality of Person Customer(optional). Free text."
          },
          "offlineRiskCategory": {
            "type": "string",
            "description": "Categorizes the person for offline risk management. List of possible values is defined per Issuer  (eg.Business, Student, Teenager, Standard). "
          },
          "onlineRiskCategory": {
            "type": "string",
            "description": "Categorizes the person for online risk management. List of possible values is defined per Issuer (eg.Business, Student, Teenager, Standard) (mandatory) "
          },
          "partnerExternalReference": {
            "type": "string",
            "description": "External Reference provided by the issuer (optional)"
          },
          "picture": {
            "type": "string",
            "description": "Picture reference of the Person Customer (eg url, filename). Free text.\n(optional)"
          },
          "preferredCorrespondanceLanguage": {
            "type": "string",
            "description": "Deprecated"
          },
          "preferredCorrespondenceLanguage": {
            "type": "string",
            "description": "Preferred correspondence language of the Person Customer (optional). Free text but ISO639-1 code is recommended (e.g. ‘nl’,’fr’,’de’,’en’). If present, the value can be subject to a validation process if a specific rule has been configured at issuer level."
          },
          "profession": {
            "type": "string",
            "description": "Profession of Person Customer. Free text.\n(optional)"
          },
          "secondFirstName": {
            "type": "string",
            "description": "Second First Name of Person Customer (optional)"
          },
          "secretAnswer": {
            "type": "string",
            "description": "Answer to Secret Question for security (optional)"
          },
          "secretQuestion": {
            "type": "string",
            "description": "Secret Question for security (optional)"
          },
          "sex": {
            "type": "string",
            "description": "Gender of Person Customer (optional). Free text. If present, the value can be subject to a validation process if a specific rule has been configured at issuer level."
          },
          "specificFields": {
            "type": "object",
            "description": "List of external data (label:value), separated by a \"|\", related to a customer that can be provided by e.g. the issuer for information or for usage by other systems.\nExample : label1:value|label2:value\nThose provided data have no impact on our system business processes.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "url1": {
            "type": "string",
            "description": "First URL of the Person Customer (optional)"
          },
          "url2": {
            "type": "string",
            "description": "Second URL of the Person Customer (optional)"
          },
          "vatCountry": {
            "type": "string",
            "description": "Tax country. Useful if Person is indeed a company.\n(optional)"
          },
          "vatNumber": {
            "type": "string",
            "description": "Tax number. Useful if Person is indeed a company.\n(optional)"
          },
          "addressIdentifiers": {
            "type": "array",
            "description": "List of active address references whatever their type (MAIL, EMAIL, PHONE). The address can be a temporary address if it is active at the time of the request.\nAt least, the main postal address reference should be retrieved (mandatory)",
            "items": {
              "$ref": "#/definitions/AddressIdentifier"
            }
          },
          "addresses": {
            "type": "array",
            "description": "List of active addresses whatever their type (MAIL, EMAIL, PHONE). See the Address's datatype for the detail list of the attributes",
            "items": {
              "$ref": "#/definitions/Address"
            }
          },
          "vulnerabilities": {
            "description": "List of vulnerabilities applicable to the customer.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Vulnerability"
            }
          },
          "vulnerabilityIndicator": {
            "type": "boolean",
            "description": "indicates if the client is vulnerable"
          },
          "vulnerabilityNote": {
            "type": "string",
            "description": "note about the client's vulnerability (free text)"
          },
          "contactIdentifiers": {
            "type": "array",
            "description": "List of contact references of the customer.",
            "items": {
              "$ref": "#/definitions/ContactIdentifier"
            }
          },
          "contacts": {
            "type": "array",
            "description": "List of contacts of the customer.",
            "items": {
              "$ref": "#/definitions/Contact"
            }
          }
        },
        "title": "Customer"
      },
      "CustomerHistory": {
        "type": "object",
        "required": [
          "onlineRiskCategory",
          "offlineRiskCategory"
        ],
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "customerIdentifier": {
            "description": "Unique identifier. Refer to Customer Identifier data type for detail information",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time",
            "description": "Indicates the date when the update is processed"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "description": "Birth date of Person Customer (optional). If present, the value can be subject to a validation process if a specific rule has been configured at issuer level."
          },
          "birthPlace": {
            "type": "string",
            "description": "Birth Place of Person Customer (optional).\nFree text"
          },
          "commercialStatus": {
            "type": "string",
            "description": "Defines the commercial status of a Person Customer among a list of possible values configured per issuer. One of the possible values can be set as default value (eg. Normal, Address Only, Bankruptcy, Active Customer). (mandatory)"
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Courtesy Title of Person Customer (optional). Free text. If present, the value can be subject to a validation process if a specific rule has been configured at issuer level."
          },
          "customerClass": {
            "type": "string",
            "description": "for future use (optional)"
          },
          "doNotContact": {
            "type": "boolean",
            "description": "if the Person Customer does not want to be contacted by the issuer set to 'true' otherwise to be set to 'false'. If not provided, value is NULL(optional)"
          },
          "employee": {
            "type": "boolean",
            "description": "Flag indicating if the Person Customer is an employee of the issuer. If not provided, value is NULL(optional)"
          },
          "employerAddress": {
            "type": "string",
            "description": "Employer's Address of Person Customer (optional).\nFree text"
          },
          "employerName": {
            "type": "string",
            "description": "Employer's Name of Person Customer. (optional).\nFree text"
          },
          "firstName": {
            "type": "string",
            "description": "First Name of Person Customer (mandatory)"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name of Person Customer (mandatory)"
          },
          "maidenName": {
            "type": "string",
            "description": "Maiden Name of Person Customer (optional)"
          },
          "correspondenceName": {
            "type": "string",
            "description": "Correspondence Name of Person Customer (optional)."
          },
          "maritalStatus": {
            "type": "string",
            "description": "Marital Status of Person Customer. Free text (optional)"
          },
          "monthlySalary": {
            "type": "string",
            "description": "Average monthly salary of Person Customer (optional)"
          },
          "nationality": {
            "type": "string",
            "description": "Nationality of Person Customer(optional). Free text."
          },
          "offlineRiskCategory": {
            "type": "string",
            "description": "Categorizes the person for offline risk management. List of possible values is defined per Issuer  (eg.Business, Student, Teenager, Standard). "
          },
          "onlineRiskCategory": {
            "type": "string",
            "description": "Categorizes the person for online risk management. List of possible values is defined per Issuer (eg.Business, Student, Teenager, Standard) (mandatory) "
          },
          "partnerExternalReference": {
            "type": "string",
            "description": "External Reference provided by the issuer (optional)"
          },
          "picture": {
            "type": "string",
            "description": "Picture reference of the Person Customer (eg url, filename). Free text.\n(optional)"
          },
          "preferredCorrespondanceLanguage": {
            "type": "string",
            "description": "Deprecated"
          },
          "preferredCorrespondenceLanguage": {
            "type": "string",
            "description": "Preferred correspondence language of the Person Customer (optional). Free text but ISO639-1 code is recommended (e.g. â€˜nlâ€™,â€™frâ€™,â€™deâ€™,â€™enâ€™). If present, the value can be subject to a validation process if a specific rule has been configured at issuer level."
          },
          "profession": {
            "type": "string",
            "description": "Profession of Person Customer. Free text.\n(optional)"
          },
          "secondFirstName": {
            "type": "string",
            "description": "Second First Name of Person Customer (optional)"
          },
          "secretAnswer": {
            "type": "string",
            "description": "Answer to Secret Question for security (optional)"
          },
          "secretQuestion": {
            "type": "string",
            "description": "Secret Question for security (optional)"
          },
          "sex": {
            "type": "string",
            "description": "Gender of Person Customer (optional). Free text. If present, the value can be subject to a validation process if a specific rule has been configured at issuer level."
          },
          "specificFields": {
            "type": "object",
            "description": "List of external data (label:value), separated by a \"|\", related to a customer that can be provided by e.g. the issuer for information or for usage by other systems.\nExample : label1:value|label2:value\nThose provided data have no impact on our system business processes.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "url1": {
            "type": "string",
            "description": "First URL of the Person Customer (optional)"
          },
          "url2": {
            "type": "string",
            "description": "Second URL of the Person Customer (optional)"
          },
          "vatCountry": {
            "type": "string",
            "description": "Tax country. Useful if Person is indeed a company.\n(optional)"
          },
          "vatNumber": {
            "type": "string",
            "description": "Tax number. Useful if Person is indeed a company.\n(optional)"
          },
          "vulnerabilities": {
            "description": "List of vulnerabilities applicable to the customer.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Vulnerability"
            }
          },
          "vulnerabilityIndicator": {
            "type": "boolean",
            "description": "indicates if the client is vulnerable"
          },
          "vulnerabilityNote": {
            "type": "string",
            "description": "note about the client's vulnerability (free text)"
          }
        },
        "title": "CustomerHistory"
      },
      "ContractMember": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "customerIdentifier": {
            "description": "DEPRECATED Replaced by customer",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "description": "DEPRECATED Replaced by customer"
          },
          "birthPlace": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "commercialStatus": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "courtesyTitle": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "customerClass": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "doNotContact": {
            "type": "boolean",
            "description": "DEPRECATED Replaced by customer"
          },
          "employee": {
            "type": "boolean",
            "description": "DEPRECATED Replaced by customer"
          },
          "employerAddress": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "employerName": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "firstName": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "lastName": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "maidenName": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "correspondenceName": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "maritalStatus": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "monthlySalary": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "nationality": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "offlineRiskCategory": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "onlineRiskCategory": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "partnerExternalReference": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "picture": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "preferredCorrespondanceLanguage": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "preferredCorrespondenceLanguage": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "profession": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "secondFirstName": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "secretAnswer": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "secretQuestion": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "sex": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "specificFields": {
            "type": "object",
            "description": "DEPRECATED Replaced by customer",
            "additionalProperties": {
              "type": "string"
            }
          },
          "url1": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "url2": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "vatCountry": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "vatNumber": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "addressIdentifiers": {
            "type": "array",
            "description": "DEPRECATED Replaced by customer",
            "items": {
              "$ref": "#/definitions/AddressIdentifier"
            }
          },
          "addresses": {
            "type": "array",
            "description": "DEPRECATED Replaced by customer",
            "items": {
              "$ref": "#/definitions/Address"
            }
          },
          "vulnerabilities": {
            "description": "DEPRECATED Replaced by customer",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Vulnerability"
            }
          },
          "vulnerabilityIndicator": {
            "type": "boolean",
            "description": "DEPRECATED Replaced by customer"
          },
          "vulnerabilityNote": {
            "type": "string",
            "description": "DEPRECATED Replaced by customer"
          },
          "contactIdentifiers": {
            "type": "array",
            "description": "DEPRECATED Replaced by customer",
            "items": {
              "$ref": "#/definitions/ContactIdentifier"
            }
          },
          "contacts": {
            "type": "array",
            "description": "DEPRECATED Replaced by customer",
            "items": {
              "$ref": "#/definitions/Contact"
            }
          },
          "customer": {
            "description": "Customer data only if the customer is a person.",
            "allOf": [
              {
                "$ref": "#/definitions/Customer"
              }
            ]
          },
          "company": {
            "description": "Company data only if the customer is a company.",
            "allOf": [
              {
                "$ref": "#/definitions/Company"
              }
            ]
          }
        },
        "title": "ContractMember"
      },
      "ReplaceCustomerInContractRequestTargetCustomer": {
        "type": "object",
        "properties": {
          "existingCustomerIdentifier": {
            "description": "If the issuer wants to replace a customer of the contract by another one already existing in our system, he has to provide either the issuer customer external reference or the customer reference.",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "newCustomer": {
            "description": "If the issuer wants to replace the customer of the contract by a new one, he has to provide customer data to create the new customer.",
            "allOf": [
              {
                "$ref": "#/definitions/ReplaceCustomerInContractRequestCustomer"
              }
            ]
          }
        },
        "title": "ReplaceCustomerInContractRequest.TargetCustomer"
      },
      "ReplaceCustomerInContractRequestCustomer": {
        "type": "object",
        "required": [
          "firstName",
          "lastName",
          "addresses"
        ],
        "properties": {
          "issuerCustomerExternalReference": {
            "type": "string",
            "description": "Customer identifier provided by the Issuer"
          },
          "active": {
            "type": "boolean",
            "description": "DEPRECATED"
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Refer to Customer.courtesyTitle"
          },
          "lastName": {
            "type": "string",
            "description": "Refer to Customer.lastName"
          },
          "firstName": {
            "type": "string",
            "description": "Refer to Customer.firstName"
          },
          "onlineRiskCategory": {
            "type": "string",
            "description": "If this field is not provided and a default value is configured, the default value will be used. Otherwise the issuer must provide an online risk category among those allowed,."
          },
          "offlineRiskCategory": {
            "type": "string",
            "description": "If this field is not provided and a default value is configured, the default value will be used. Otherwise the issuer must provide an offline risk category among those allowed,."
          },
          "commercialStatus": {
            "type": "string",
            "description": "If this field is not provided and a default value is configured, the default value will be used. Otherwise the issuer must provide a commercial status among those allowed,."
          },
          "customerReference": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "secondFirstName": {
            "type": "string",
            "description": "Refer to Customer.secondFirstName"
          },
          "maidenName": {
            "type": "string",
            "description": "Refer to Customer.maidenName"
          },
          "correspondenceName": {
            "type": "string",
            "description": "Refer to Customer.correspondenceName"
          },
          "sex": {
            "type": "string",
            "description": "Refer to Customer.sex"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to Customer.birthDate"
          },
          "birthPlace": {
            "type": "string",
            "description": "Refer to Customer.birthPlace"
          },
          "nationality": {
            "type": "string",
            "description": "Refer to Customer.nationality"
          },
          "profession": {
            "type": "string",
            "description": "Refer to Customer.profession"
          },
          "employerName": {
            "type": "string",
            "description": "Refer to Customer.employerName"
          },
          "employerAddress": {
            "type": "string",
            "description": "Refer to Customer.employerAddress"
          },
          "monthlySalary": {
            "type": "string",
            "description": "Refer to Customer.monthlySalary"
          },
          "maritalStatus": {
            "type": "string",
            "description": "Refer to Customer.maritalStatus"
          },
          "preferredCorrespondenceLanguage": {
            "type": "string",
            "description": "Refer to Customer.preferredCorrespondenceLanguage"
          },
          "picture": {
            "type": "string",
            "description": "Refer to Customer.picture"
          },
          "url1": {
            "type": "string",
            "description": "Refer to Customer.url1"
          },
          "url2": {
            "type": "string",
            "description": "Refer to Customer.url2"
          },
          "secretQuestion": {
            "type": "string",
            "description": "Refer to Customer.secretQuestion"
          },
          "secretAnswer": {
            "type": "string",
            "description": "Refer to Customer.secretAnswer"
          },
          "vatNumber": {
            "type": "string",
            "description": "Refer to Customer.vatNumber"
          },
          "vatCountry": {
            "type": "string",
            "description": "Refer to Customer.vatCountry"
          },
          "customerClass": {
            "type": "string",
            "description": "Refer to Customer.customerClass"
          },
          "employee": {
            "type": "boolean",
            "description": "Refer to Customer.employee"
          },
          "partnerExternalReference": {
            "type": "string",
            "description": "Refer to Customer.partnerExternalReference"
          },
          "doNotContact": {
            "type": "boolean",
            "description": "Refer to Customer.doNotContact"
          },
          "specificFields": {
            "type": "object",
            "description": "Refer to Customer.specificFields",
            "additionalProperties": {
              "type": "string"
            }
          },
          "addresses": {
            "type": "array",
            "description": "The Main postal address (addressLabel as MAIN_POSTAL_ADDRESS)  has to be provided because used as default address by all business processes if no address usage is defined.E.g. if no address usage as CARD_DELIVERY is attached to a customer's address then the Main postal address is used as card order delivery address.",
            "items": {
              "$ref": "#/definitions/ReplaceCustomerInContractRequestAddress"
            }
          }
        },
        "title": "ReplaceCustomerInContractRequest.Customer"
      },
      "ReplaceCustomerInContractRequestAddress": {
        "type": "object",
        "required": [
          "addressLabel",
          "addressType"
        ],
        "properties": {
          "addressLabel": {
            "type": "string",
            "description": "example: MAIN_POSTAL_ADDRESS Refer to Address.addressLabel"
          },
          "addressType": {
            "type": "string",
            "description": "example: POSTAL_MAIL Refer to Address.addressType"
          },
          "postalAddress": {
            "description": "Refer to Address.postalAddress",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressRequestMailAddress"
              }
            ]
          },
          "emailAddress": {
            "description": "Refer to Address.eMail",
            "allOf": [
              {
                "$ref": "#/definitions/EmailAddress"
              }
            ]
          },
          "phone": {
            "description": "Refer to Address.phone",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressRequestPhoneNumber"
              }
            ]
          },
          "addressUsages": {
            "description": "Refer to Address.addressUsages",
            "type": "array",
            "items": {
              "$ref": "#/definitions/AddressUsage"
            }
          },
          "mainAddress": {
            "type": "boolean",
            "description": "Deprecated"
          },
          "issuerAddressExternalReference": {
            "type": "string",
            "description": "Refer to Address.issuerAddressExternalReference"
          }
        },
        "title": "ReplaceCustomerInContractRequest.Address"
      },
      "ReplaceCustomerInConsumerContractResponseContract": {
        "type": "object",
        "properties": {
          "contractIdentifier": {
            "description": "Refer to ContractIdentifier.contractIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "contractOwnerIdentifier": {
            "description": "Refer to Contract.contractOwnerIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "accounts": {
            "type": "array",
            "description": "Information related to the account",
            "items": {
              "$ref": "#/definitions/ReplaceCustomerInConsumerContractResponseAccount"
            }
          },
          "cardContracts": {
            "type": "array",
            "description": "Information for each card contract if any.",
            "items": {
              "$ref": "#/definitions/ReplaceCustomerInConsumerContractResponseCardContract"
            }
          }
        },
        "title": "ReplaceCustomerInConsumerContractResponse.Contract"
      },
      "ReplaceCustomerInConsumerContractResponseAccount": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "description": "Refer to Account.accountIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "root": {
            "type": "boolean",
            "description": "Refer to Account.root"
          },
          "accountOwnerIdentifier": {
            "description": "Refer to Account.accountOwnerIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "accountGuarantorIdentifier": {
            "description": "Refer to Account.accountGuarantorIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          }
        },
        "title": "ReplaceCustomerInConsumerContractResponse.Account"
      },
      "ReplaceCustomerInConsumerContractResponseCardContract": {
        "type": "object",
        "properties": {
          "cardContractIdentifier": {
            "description": "Refer to CardContract.cardContractIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "cardHolderIdentifier": {
            "description": "Refer to CardContract.cardHolderIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          }
        },
        "title": "ReplaceCustomerInConsumerContractResponse.CardContract"
      },
      "CustomerIdentifier": {
        "type": "object",
        "description": "Identification of the updated customer either by Issuer customer external reference or by customer reference",
        "properties": {
          "customerReference": {
            "type": "string",
            "description": "Reference computed internally by our system"
          },
          "issuerCustomerExternalReference": {
            "type": "string",
            "description": "Reference provided by the Issuer"
          }
        },
        "title": "CustomerIdentifier"
      },
      "TransactionIdentifier": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "Internal transaction identifier generated by our system. 17-digit incremental number (10000000000000001)"
          }
        },
        "title": "TransactionIdentifier"
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "transactionIdentifier": {
            "description": "Internal identifier associated to the transaction",
            "allOf": [
              {
                "$ref": "#/definitions/TransactionIdentifier"
              }
            ]
          },
          "acquirerReferenceData": {
            "type": "string",
            "description": "Acquirer Reference Number (ARN) associated to the transaction\n\nMCI : DE 031 - Acquirer Reference Data\nVISA : TCR0 Acquirer Reference Number pos. 27-49"
          },
          "acquisitionMaterial": {
            "type": "string",
            "description": "Type of material used to realize the transaction.\nPossible values:\nATM, POS, INTERNET, MANUAL, VOICE_PHONE, UNATTENDED_TERMINAL, MOBILE, UNKNOWN"
          },
          "cardAcceptorCity": {
            "type": "string",
            "description": "Card Acceptor Location (City) associated to the transaction\n\nMCI : DE 43 - Card Acceptor Name/Location s3 - Card Acceptor City\nVISA : TCR0 - Merchant City"
          },
          "cardAcceptorCountry": {
            "type": "string",
            "description": "Card Acceptor Country Code associated to the transaction\n\nMCI : DE 43 - Card Acceptor Name/Location s6 - Card Acceptor Country Code\nVISA : TCR0 - Merchant Country"
          },
          "cardAcceptorIdCode": {
            "type": "string",
            "description": "Identifies the card acceptor ID assigned by the acquirer. This ID must represent a unique identifier for each merchant name/location within the acquiring BIN.\nCard Acceptor (Merchant) Identifier associated to the transaction\n\nMCI : DE 042 - Card Acceptor ID Code\nVISA : TCR5 - Acquirer's Business ID"
          },
          "cardAcceptorName": {
            "type": "string",
            "description": "Complete Card Acceptor Name / Location (Merchant) associated to the transaction\n\nMCI : DE 43 - Card Acceptor Name/Location s1 to s6 - Card Acceptor Name/Location\nVISA : TCR0"
          },
          "cardAcceptorZipCode": {
            "type": "string",
            "description": "Card Acceptor ZIP Code associated to the transaction\n\nMCI : DE 43 - Card Acceptor Name/Location s4 - Card Acceptor Postal (ZIP) Code\nVISA : TCR0 - Merchant zip code"
          },
          "cardScheme": {
            "type": "string",
            "description": "Short name of national or international network, if implicated."
          },
          "debit": {
            "type": "boolean",
            "description": "Sign associated to the transaction according to the Cardholder side\n* true = Cardholder debited\n* false = Cardholder credited"
          },
          "maskedPan": {
            "type": "string",
            "description": "Masked Primary Account Number (PAN) of card present in the transaction"
          },
          "merchantCategoryCode": {
            "type": "string",
            "description": "Classifies the type of business applicable to the card acceptor"
          },
          "pan": {
            "type": "string",
            "description": "Primary Account Number (PAN) present in the transaction\n\nMCI : DE 02  PrimaryAccountNumber\nVISA : TCR0 pos. 5-20 AccountNumber"
          },
          "reconciliationAmount": {
            "description": "Transaction amount provided by the scheme in the currency agreed between the scheme and the issuer/WL.\nMandatory for 1st presentment.\nScheme Reconciliation Amount / Currency / Exponent\n\nMCI: DE 005 / DE 050 / associated PDS 0148\nVISA: Destination Amount / Destination Currency",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "reversal": {
            "type": "boolean",
            "description": "This flag indicates if this operation is a reversal (true) or not (false)"
          },
          "transactionAmount": {
            "description": "DE 4 (Amount, Transaction) is the amount of funds the cardholder requested in the currency appearing on the transaction information document (TID), which may be the acquirer’s local currency or a currency acceptable to the cardholder and card acceptor that the acquirer supports, exclusive of PDS 0146 (Amounts, Transaction Fee). If no currency is identified on the TID, the transaction is deemed to have taken place in the currency that is legal tender at the point of interaction.\nAmount of the transaction. This field contains numerics. Two decimal positions are implied. If the Original Source Currency code is 392 (Japanese Yen), any value other than zero after the decimal produces an Invalid Amount error.\nMCI DE 004\nVISA TCR0\n",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "transactionDate": {
            "type": "string",
            "format": "date-time",
            "description": "Transaction Date in Merchant site when transaction has been performed\nE.g. : 2023-02-04T00:00:00+01:00\n- MCI: DE 012 (Date and Time, Local Transaction)\n- VISA : TCR0 pos. 58-61"
          },
          "walletId": {
            "type": "string",
            "description": "Indicates the identifier of the wallet (Apple Pay or other token requestor) used for the transaction\n"
          },
          "approvalCode": {
            "type": "string",
            "description": "Authorization Approval Code associated to the transaction\n\nMCI : DE 038 - Approval Code\nVISA : TCR0 Authorization Code pos. 152-157"
          },
          "pointOfSaleEnvironment": {
            "type": "string",
            "description": "Recurring transaction indicator, indicating that the cardholder\nand merchant have agreed to periodic billing for goods and services, such as\nutility bills, internet connection, and magazine subscriptions.\nValues:\nSpace = default\nR = Recurring Payment Transaction\nI = Installment Payment\nC = Credential on File"
          },
          "mailPhoneEcommerceAndPaymentIndicator": {
            "type": "string",
            "description": "Mail Phone Ecommerce and Payment Indicator indicates if transaction was initiated as mail order, telephone order or electronic commerce. \nUsed in Visa interchange validation and determination.  \nRequired in input for Visa transactions. \nBase II mapped from Draft data TCR1 position 116. \nDomain: \nSpace - Field not applicable or acquirer did not specify.  \n1 - Mail/Phone Order (MO/TO). \n2 - Recurring transaction (valid only for U.S. acquired transactions). \n3 - Instalment payment.  \n4 - Unknown classification/other mail order.  \n5 - Secure Electronic Commerce Transaction. \n6 - Non-Authenticated Security Transaction at a 3-D Secure-capable merchant, and merchant attempted to authenticate the cardholder using 3-D secure. \n7 - Non-Authenticated Security Transaction \n8 - Non-secure transaction. \n9 - For optional regional use only."
          },
          "pointOfService": {
            "description": "Represent the card entry mode information\n\nMCI DE22 Point of Service (POS) Entry Mode\nVISA TCR0 160 CardholderIDMethod, 162-163 PosEntryMode ",
            "allOf": [
              {
                "$ref": "#/definitions/PointOfService"
              }
            ]
          },
          "acquirerId": {
            "type": "string",
            "description": "VISA mapping is the following: TC05, TCR0 Field: Acquirer Reference Number POS 27-49. Should be taken positions 2-7 of this field (Acquirer BIN)\nMCI mapping is the following: DE 31 Acquirer Reference Data, Positions 2-7 of the field"
          },
          "destinationId": {
            "description": "VISA mapping is the following: Determined based on transaction data.\nMCI mapping is the following: DE 93 transaction Destination Institution ID code.",
            "type": "string"
          },
          "authorizationBusinessCaseIdentifier": {
            "description": "Internal identifier provided by the WLP Front Office in each Authorisation Message received. Only present if transaction (first presentment) matched with an authorization.",
            "allOf": [
              {
                "$ref": "#/definitions/AuthorizationBusinessCaseIdentifier"
              }
            ]
          },
          "cardIdentifier": {
            "description": "Refer to Card.cardIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "panTokenIdentifier": {
            "description": "Token Requestor Identifier value associated to the transaction\n\nMCI : PDS 0059 - Token Requestor ID\nVISA : TCR5 Token Requestor ID pos. 149-159",
            "allOf": [
              {
                "$ref": "#/definitions/PanTokenIdentifier"
              }
            ]
          },
          "lodgingInformation": {
            "description": "The list of lodging information parameters from the clearing file",
            "allOf": [
              {
                "$ref": "#/definitions/LodgingInformation"
              }
            ]
          },
          "carRentalInformation": {
            "description": "The list of car rental information parameters from the clearing file",
            "allOf": [
              {
                "$ref": "#/definitions/CarRentalInformation"
              }
            ]
          },
          "airItineraryInformation": {
            "description": "The list of air itinerary parameters from the clearing file",
            "allOf": [
              {
                "$ref": "#/definitions/AirItineraryInformation"
              }
            ]
          },
          "eCommerceSecurityLevelIndicator": {
            "description": "Information about security protocol for internet transactions\nMCI only : PDS 0052 - Electronic Commerce Security Level Indicator",
            "allOf": [
              {
                "$ref": "#/definitions/ECommerceSecurityLevelIndicator"
              }
            ]
          },
          "transactionCategory": {
            "type": "string",
            "description": "Internal transaction category. Possible values : BILL_PAYMENT, CASH, CASH_WITHDRAWAL, CREDIT, CREDIT_ADJUSTMENT, CREDIT_FEE, CREDIT_PAYMENT, DEBIT_ADJUSTMENT, DEBIT_FEE, DEBIT_PAYMENT, FUND_TRANSFER, LOAD, PAYMENT, REFUND_PURCHASE, SALES, SALES_CASHBACK"
          },
          "status": {
            "type": "string",
            "description": "Transaction status in the system \n\nPossible values : \n- CREATED\n- ABANDON\n- IN_ERROR\n- DELETED\n- REPROCESS\n- PROCESSED\n- EMBARGO_WAIT"
          },
          "transmissionDate": {
            "type": "string",
            "format": "date-time",
            "description": "Transmission date from the scheme\n\nMCI : PDS 0158 - s5 Central Site Business Date\nVISA : TCR0 164-167 Central Processing Date (YDDD)"
          },
          "billingAmount": {
            "description": "Transaction amount converted to the cardholder billing currency\nMCI only - DE6 Amount, Cardholder Billing",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "recalculatedBillingAmount": {
            "description": "Refer to Operation.referenceAmount if transaction has been posted on an account",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "disputeStatus": {
            "type": "string",
            "description": "Indicate status of dispute folder in case transaction has been disputed\nPossible values : \n- OPEN\n- CLOSED"
          },
          "fraudStatus": {
            "type": "string",
            "description": " Indicate if transaction is fraudulent\n\nPossible values : \n- FRAUDULENT"
          },
          "accountIdentifier": {
            "description": "Identifier of the entry account configured for the card number provided in the transaction. \n\nRefer to Account.accountIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "action": {
            "type": "string",
            "description": "Action done by the system on the transaction\n\nPossible values : \n•\tPOST_TO_ACCOUNT_SERVICE\n•\tOPEN_FRAUD_CASE\n•\tOPEN_DISPUTE_CASE_AND_POST_TO_ACCOUNT_SERVICE\n•\tOPEN_DISPUTE_CASE\n•\tOPEN_FRAUD_CASE_AND_POST_TO_ACCOUNT_SERVICE\n•\tOPEN_DISPUTE_CASE_AND_OPEN_FRAUD_CASE\n•\tPOST_TO_ACCOUNT_SERVICE_AND_FRAUD_SERVICE\n•\tSUSPEND_TRANSACTION_BY_ACTION_CODE\n•\tNO_POST"
          },
          "panToken": {
            "type": "string",
            "description": "MCI : PDS 0001 Mastercard Mapping Service Account Number\nVISA : TCR5  pos.150-165 panToken"
          },
          "processingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date the transaction has been processed by the system"
          },
           "virtualServiceCardNumber": {
            "type": "string",
            "description": "Virtual Service Card Number of the transaction"
          },
          "reversed": {
            "type": "boolean",
            "description": "Indicates if the transaction is reversed"
          },
          "authorizationIdentifier": {
            "description": "Identifier of authorization matched with this transaction",
            "allOf": [
              {
                "$ref": "#/definitions/AuthorizationIdentifier"
              }
            ]
          }
        },
        "title": "Transaction"
      },
      "TransactionDetails": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/definitions/Transaction"
          },
          {
            "properties": {
              "alternativeIban": {
                "type": "string",
                "description": "Corresponds to PAN token received from the scheme MCI : pds0001 - Mastercard Mapping Service Account Number"
              },
              "brand": {
                "type": "string",
                "description": "Brand associated to the Issuer Account Range (BIN) such as \"MCC\" (MasterCard) , \"DMC\" (Debit MasterCard), \"MSI\" (Maestro), \"CIR\" (Cirrus), \"VIS\" (VISA)."
              },
              "cardTypeCode": {
                "type": "string",
                "description": "Scheme Product associated in the Issuing Back Office system to the Issuer Account Range"
              },
              "cashAmount": {
                "description": "Additional Amount / Currency / Exponent for Cash Back transaction amount\n* MCI : DE 054 s2 = 40 - Amount, Cash Back\n* VISA : TCR1 pos. 158-166 Cashback",
                "allOf": [
                  {
                    "$ref": "#/definitions/Amount"
                  }
                ]
              },
              "dccIndicator": {
                "type": "string",
                "description": "This field must contain one of these values (optional):\n1 = DCC performed\nspace = default, no DCC has been performed"
              },
              "gratuityAmount": {
                "description": "Additional Amount / Currency / Exponent for Gratuity transaction amount in the transaction currency Only for MC",
                "allOf": [
                  {
                    "$ref": "#/definitions/Amount"
                  }
                ]
              },
              "panExpiryDate": {
                "type": "string",
                "description": "Card expiry date present in the transaction Format is \"MMYY\" (month and year)\n\nMCI : DE 14 - Date Expiration"
              },
              "panSequenceNumber": {
                "type": "string",
                "description": "PAN sequence number from the transaction\n\nMCI : DE 23 - Card Sequence Number\nVISA : TCR7 pos. 7-9 Card Sequence Number"
              },
              "poiAmount": {
                "description": "Additional Amount / Currency / Exponent for DCC (Dynamic Currency Conversion) transaction amount - Only for MC",
                "allOf": [
                  {
                    "$ref": "#/definitions/Amount"
                  }
                ]
              },
              "surchargeAmount": {
                "description": "Additional Amount / Currency / Exponent for surcharge transaction amount in Transaction Currency",
                "allOf": [
                  {
                    "$ref": "#/definitions/Amount"
                  }
                ]
              },
              "terminalId": {
                "type": "string",
                "description": "Code that identifies the card acceptor terminal or ATM."
              },
              "acquiringBankCode": {
                "type": "string",
                "description": "Determined using the originator member id. Bank code stored in the system for the member."
              },
              "originatorMemberId": {
                "type": "string",
                "description": "Transaction Originator Member ID. Identifies the transaction originator institution.\nMCI  : DE94 - Transaction Originator Institution ID Code\nVISA: TCR0 27-49 acquiring reference number position 2-7"
              },
              "schemeTransactionIdentifier": {
                "type": "string",
                "description": "Scheme Transaction Identifier allows to identify uniquely a transaction through its full life cycle.\nMCI : DE63 - Transaction Life Cycle ID S2 - Trace ID\nVISA : TCR5 Transaction Identifier"
              },
              "destinationRegionCode": {
                "type": "string",
                "description": "Region code stored in the system for the member linked to the card prefix."
              },
              "schemeExchangeRateDate": {
                "type": "string",
                "format": "date-time",
                "description": "Indicates the date of used exchange rates when performing currency conversions.\nPresence of the date does not imply that a currency conversion took place. Having the exchange rate date stored allows retrieving a rate for a given day.\nE.g. used when recalculating the interchange amount or in dispute scenarios where an amount also need to be calculated using the exchange rate of a specific day.\nMCI : PDS158 - Business Activity Subfield 5 - Business Date. VISA : Central Processing Date  TCR0 164-167."
              },
              "feeProgramIndicator": {
                "type": "string",
                "description": "Visa field containing an interchange reimbursement fee program indicator (FPI), which is used in assessing the fee amount applied to.\nSet in First Presentments and required in subsequent lifecycle messages.VISA : TCR1 pos 76-78"
              },
              "functionCode": {
                "type": "integer",
                "description": "The IPM message uses a combination of two elements to define the message type : Message Type Identifier (MTI) + Data Element (DE) 24 (Function Code)\nThe MTI identifies the general ISO message type and the Function Code more specifically defines the message’s purpose.MCI : DE24 Function Code"
              },
              "inputInterfaceCode": {
                "type": "string",
                "description": "Identifies the service forwarding transactions into the transaction processing service"
              },
              "messageTypeIdentifier": {
                "type": "integer",
                "description": "Message Type Identifier (MTI) is a four-digit numeric field identifying the general classification of a message being processed. MCI only"
              },
              "originatorCountryCode": {
                "type": "string",
                "description": "Determined using the originator member id. Country code stored in the system for the member."
              },
              "originatorRegionCode": {
                "type": "string",
                "description": "Determined using the originator member id. Region code stored in the system for the member."
              },
              "outputInterfaceCodes": {
                "type": "array",
                "description": "Identifies the output services to which the transaction processing service has forwarded the transaction",
                "items": {
                  "type": "string"
                }
              },
              "processingCode": {
                "description": "Processing Code is a series of digits that describe the effect of a transaction on a customer account and the type of accounts affected.Used for MasterCard Interchange validation and determination.Further, required for MasterCard Fee collection messages created in the Transaction processing service MCI : DE03 - Processing Code",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProcessingCode"
                  }
                ]
              },
              "receivingMemberId": {
                "type": "string",
                "description": "Receiving Member ID identifies the receiving institution. \nMCI : DE100 - Receiving Institution ID Code. If not present – it is found as the processor member of the destinationMemberId"
              },
              "retrievalReferenceNumber": {
                "type": "string",
                "description": "Retrieval Reference Number is a transaction information document reference number.\nMCI : DE37 - Retrieval Reference Number"
              },
              "routingMode": {
                "type": "string",
                "description": "Internal determined routing mode.Possible values : ACQUIRER, ISSUER, DISPUTE, UNDECIDED, PROCESSOR, ONUS, EXTERNAL"
              },
              "suspendDescription": {
                "type": "string",
                "description": "Text field in which a more detailed description of the exact suspends conditions can be recorded.Used informatively to resolve suspend cases easier."
              },
              "suspendReasonCode": {
                "type": "string",
                "description": "Reason code for transaction suspension. List of possible values is configurable in our system."
              },
              "terminalTypeCode": {
                "type": "string",
                "description": "Terminal Type code for terminal devices.Used for interchange validation and determination. Also, used in dispute context for establishing transactions conditions and rule set.\nMCI : PDS 023 - Terminal Type\nVIS : TCR1 pos.124 UnattendedAcceptanceTerminalIndicator"
              },
              "cardValidationIndicator": {
                "type": "string",
                "description": "CVC 2 Validation Program Indicator.\nMCI : PDS 44 - Program Participation Indicator Subfield 1 - CVC 2 Validation Program Indicator"
              },
              "contactlessChargebackEligibilityIndicator": {
                "type": "string",
                "description": "QPS/PayPass Chargeback Eligibility Indicator.\nMCI : PDS 44 - Program Participation Indicator Subfield 2 - QPS/PayPass Chargeback Eligibility Indicator"
              },
              "floorLimitIndicator": {
                "type": "string",
                "description": "Mandatory for Visa presentments. Not applicable to other card schemes.Indicates if the transaction was above or below the merchant’s floor limit for the date of the purchase.\nVIS :TCR0 - Floor Limit Indicator"
              },
              "multipleClearingSequenceNumber": {
                "type": "integer",
                "description": "Can be used when acquirers submit multiple clearing transactions for a single card-not-present authorization message.The multiple clearing sequence number distinguishes a specific clearing transaction from all other clearing transactions submitted for the same authorization\nVIS : TCR05 - Multiple Clearing Sequence Number"
              },
              "multipleClearingSequenceCount": {
                "type": "integer",
                "description": "Can be used when acquirers submit multiple clearing transactions for a single card-not-present authorization message.The multiple clearing sequence count qualifies the total of multi clearing transactions VIS : TCR05 - Multiple Clearing Sequence Count"
              },
              "offline": {
                "type": "boolean",
                "description": "If true it indicates that the first presentment was done without authorization."
              },
              "onUs": {
                "type": "boolean",
                "description": "This field is received in VISA and MCI file header to identify if the received file is onus or offus"
              },
              "bookingDate": {
                "type": "string",
                "format": "date-time",
                "description": "This date is received in VISA and MCI file header\n\nMCI : PDS105 - File ID Subfield 2  - File Reference Date\nVIS : TC90 Processing Date"
              },
              "cardAcceptorStreet": {
                "type": "string",
                "description": "Card Acceptor Street associated to the transaction\nMCI : DE43 - Card Acceptor Name/Location Subfield 2 - Card Acceptor Street Address"
              },
              "processorId": {
                "type": "string",
                "description": "VISA : TC90 File Header Processing BIN ,MCI : n/a"
              }
            }
          }
        ],
        "title": "TransactionDetails"
      },
      "ProcessingCode": {
        "type": "object",
        "required": [
          "fromAccountType",
          "toAccountType",
          "transactionType"
        ],
        "properties": {
          "fromAccountType": {
            "type": "string",
            "description": "MCI : DE3 Subfield 2 - CardHolder \"From\" Account Type Code"
          },
          "toAccountType": {
            "type": "string",
            "description": "MCI : DE3 Subfield 3 - CardHolder \"To\" Account Type Code"
          },
          "transactionType": {
            "type": "string",
            "description": "MCI : DE3 Subfield 1 - Cardholder Transaction Type"
          }
        },
        "title": "ProcessingCode"
      },
      "Company": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "customerIdentifier": {
            "description": "Unique identifier. Refer to Customer Identifier data type for detail information",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "active": {
            "type": "boolean",
            "description": "DEPRECATED"
          },
          "corporateName": {
            "type": "string",
            "description": "Name of the company"
          },
          "nationalFiscalIdentifier": {
            "type": "string",
            "description": "National fiscal identifier of the company (for information only)"
          },
          "vatCode": {
            "type": "string",
            "description": "Value added tax code of the company (for information only). Free text."
          },
          "type": {
            "type": "string",
            "description": "Type of company (e.g. Governmental, public company, private company). For information only. Free text."
          },
          "size": {
            "type": "string",
            "description": "Size of the company. Free text (e.g. small, medium, 100)."
          },
          "businessArea": {
            "type": "string",
            "description": "Definition of the activity of the company. Free text."
          },
          "activityCode": {
            "type": "string",
            "description": "Activity of the company (e.g. 'rent car', 'retailer'). Free text."
          },
          "revenue": {
            "type": "string",
            "description": "Annual turnover of the company. Free text"
          },
          "legalForm": {
            "type": "string",
            "description": "Definition of the legal form of the company (e.g. in France : SA, SARL, EURL). Free text."
          },
          "commercialStatus": {
            "type": "string",
            "description": "Commercial status of the company (e.g. 'normal', 'Active in Liquidation', 'Inactive'). List of possible values is determined per issuer. A default value is defined for each issuer."
          },
          "preferredCorrespondenceLanguage": {
            "type": "string",
            "description": "Preferred correspondence language of the company (optional). Free text but ISO639-1 code is recommended (e.g. ‘nl’,’fr’,’de’,’en’). If present, the value can be subject to a validation process if a specific rule has been configured at issuer level."
          },
          "specificFields": {
            "type": "object",
            "description": "A list of values (label:value|) related to a company that can be provided by e.g. the issuer for information or usage by other systems (optional).\nThose provided values have no impact on our system business processes.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "partnerExternalReference": {
            "type": "string",
            "description": "External Reference provided by the issuer (optional)"
          },
          "addressIdentifiers": {
            "type": "array",
            "description": "List of address references whatever their type (MAIL, EMAIL, PHONE). The address can be a temporary address.At least, the main postal address reference should be retrieved (mandatory)",
            "items": {
              "$ref": "#/definitions/AddressIdentifier"
            }
          },
          "addresses": {
            "type": "array",
            "description": "List of addresses whatever their type (MAIL, EMAIL, PHONE). See the Address's datatype for the detail list of the attributes",
            "items": {
              "$ref": "#/definitions/Address"
            }
          },
          "contactIdentifiers": {
            "type": "array",
            "description": "List of contact references of the company.",
            "items": {
              "$ref": "#/definitions/ContactIdentifier"
            }
          },
          "contacts": {
            "type": "array",
            "description": "List of contacts of the company.",
            "items": {
              "$ref": "#/definitions/Contact"
            }
          }
        },
        "title": "Company"
      },
      "CompanyHistory": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "customerIdentifier": {
            "description": "Unique identifier. Refer to Customer Identifier data type for detail information",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "effectiveDate": {
            "type": "string",
            "format": "date-time",
            "description": "Indicates the date when the update is processed"
          },
          "corporateName": {
            "type": "string",
            "description": "Name of the company"
          },
          "nationalFiscalIdentifier": {
            "type": "string",
            "description": "National fiscal identifier of the company (for information only)"
          },
          "vatCode": {
            "type": "string",
            "description": "Value added tax code of the company (for information only). Free text."
          },
          "type": {
            "type": "string",
            "description": "Type of company (e.g. Governmental, public company, private company). For information only. Free text."
          },
          "size": {
            "type": "string",
            "description": "Size of the company. Free text (e.g. small, medium, 100)."
          },
          "businessArea": {
            "type": "string",
            "description": "Definition of the activity of the company. Free text."
          },
          "activityCode": {
            "type": "string",
            "description": "Activity of the company (e.g. 'rent car', 'retailer'). Free text."
          },
          "revenue": {
            "type": "string",
            "description": "Annual turnover of the company. Free text"
          },
          "legalForm": {
            "type": "string",
            "description": "Definition of the legal form of the company (e.g. in France : SA, SARL, EURL). Free text."
          },
          "commercialStatus": {
            "type": "string",
            "description": "Commercial status of the company (e.g. 'normal', 'Active in Liquidation', 'Inactive'). List of possible values is determined per issuer. A default value is defined for each issuer."
          },
          "preferredCorrespondenceLanguage": {
            "type": "string",
            "description": "Preferred correspondence language of the company (optional). Free text but ISO639-1 code is recommended (e.g. ‘nl’,’fr’,’de’,’en’). If present, the value can be subject to a validation process if a specific rule has been configured at issuer level."
          },
          "specificFields": {
            "type": "object",
            "description": "A list of values (label:value|) related to a company that can be provided by e.g. the issuer for information or usage by other systems (optional).\nThose provided values have no impact on our system business processes.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "partnerExternalReference": {
            "type": "string",
            "description": "External Reference provided by the issuer (optional)"
          }
        },
        "title": "CompanyHistory"
      },
      "CorporateContract": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "contractIdentifier": {
            "description": "Identification of the corporate contract either by Issuer contract external reference or by contract reference.",
            "allOf": [
              {
                "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "closingComment": {
            "type": "string",
            "description": "Comment associated with the corporate contract closing action (optional)\nFree text."
          },
          "closingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Closing date of the corporate contract (present only in case of contract is already closed or contract closing is scheduled)"
          },
          "closingReason": {
            "type": "string",
            "description": "Indicates the reason for closing the contract (present only if the contract is already closed or if the contract closing is scheduled)\n(free text)"
          },
          "closureDelayType": {
            "type": "string",
            "description": "The closing type of the contract (present only in case of contract is already closed or contract closing is scheduled)\nThe provided closing type corresponds to the value provided in the close corporate contract API request.\nPossible values :\n- IMMEDIATE \n- SCHEDULED"
          },
          "signatureDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the corporate contract was signed (mandatory if the contract is in SIGNED status)"
          },
          "specificFields": {
            "type": "object",
            "description": "A list of values (label:value|) related to a contract that can be provided by e.g. the issuer for information or usage by other systems (optional).\nThose provided values have no impact on our system business processes.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "Current status of the corporate contract in our system (mandatory)\nPossible values:\nSIGNED: the contract was signed, e.g. by the customer, the issuer after N days (no automatic process in our system)\nCLOSED:The contract is permanently closed (final status)"
          },
          "statusDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the current status of the corporate contract was set."
          },
          "contractOwnerIdentifier": {
            "description": "Identifier of the contract owner. It can be a customer or a company.",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "contractCustomers": {
            "type": "array",
            "description": "List of all customers (with customer data) belonging to this corporate contract as e;g. contract owner, account owner, account guarantor, or cardholder.\nThis list of customers can not exceed a limit of occurrences (100)",
            "items": {
              "$ref": "#/definitions/Customer"
            }
          },
          "contractCompanies": {
            "type": "array",
            "description": "List of all companies (with company data) belonging to this corporate contract as e.g. contract owner or account owner.",
            "items": {
              "$ref": "#/definitions/Company"
            }
          },
          "rootAccountIdentifier": {
            "description": "Identifier of the root account (in the account hierarchy) linked to this corporate contract",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "productIdentifier": {
            "description": "Identifier of the product which the corporate contract is based on",
            "allOf": [
              {
                "$ref": "#/definitions/ProductIdentifier"
              }
            ]
          },
          "customerIdentifier": {
            "type": "array",
            "description": "List of all customers (identifiers only) belonging to this corporate contract as e.g. contract owner, account owner, account guarantor, or cardholder.",
            "items": {
              "$ref": "#/definitions/CustomerIdentifier"
            }
          },
          "statementDuplicatedForCompany": {
            "type": "boolean",
            "description": "Indicates if the company receives a duplicate for statement generated by other paying accounts in the corporate contract",
            "default": false
          },
          "logoReference": {
            "type": "string",
            "description": "Reference of the logo to be present on card in the corporate contract (can be replaced by another logo when requesting to create a card from this contract)."
          },
          "dispatchCode": {
            "type": "string",
            "description": "Disptach code to be used by the embosser to send the cards for the corporate contract"
          },
          "hierarchyDefaultResetCreditLimit": {
            "type": "boolean",
            "description": "Indicates, for a corporate contract only, the default value at contract level to be applied for each account if the Open-to-buy should be reset to its maximum Credit limit at Authorization system side as soon as an account cycle is closed. Of course the amount due (minimum payment amount) is considered as to be repaid by the customer by our solution.",
            "default": false
          },
          "postingAccountForMembershipFee": {
            "type": "string",
            "description": "Indicates if the membership fees have to be posted to employee card accounts, interemdiate entity account or to the root (as default value, usually paid by the company) for the corporate contract.\nPossible values:\n- ROOT_ACCOUNT \n- CARD_ACCOUNT\n- ENTITY_ACCOUNT"
          },
          "postingAccountForAccountSetupFee": {
            "type": "string",
            "description": "Indicates if the account setup fees have to be posted to employee card accounts, interemdiate entity account or to the root (as default value, usually paid by the company) for the corporate contract.\nPossible values:\n- ROOT_ACCOUNT \n- CARD_ACCOUNT\n- ENTITY_ACCOUNT"
          },
          "feeReimbursementAtCardContractClosing": {
            "type": "boolean",
            "description": "Parameter used to specify if membership fee has to be reimbursed in case of card contract closing. \nBy default, the issuer parameter is used (but can be customized at contract level).",
            "default": false
          },
          "corporateContractLevels": {
            "type": "array",
            "description": "List of all levels of a company organization belonging to the corporate contract",
            "items": {
              "$ref": "#/definitions/CorporateContractLevel"
            }
          },
          "corporateContractEntities": {
            "type": "array",
            "description": "List of all entities of a company organization (company itself, divisions, departments, …)   belonging to the corporate contract",
            "items": {
              "$ref": "#/definitions/CorporateContractEntity"
            }
          },
          "corporateEmployeeAccounts": {
            "type": "array",
            "description": "List of employee accounts that belong to a corporate contract",
            "items": {
              "$ref": "#/definitions/CorporateEmployeeAccount"
            }
          },
          "rootAccount": {
            "description": "The root account linked to the corporate contract",
            "allOf": [
              {
                "$ref": "#/definitions/Account"
              }
            ]         
          },
          "postingEntityLevelForMembershipFee": {
            "type": "integer",
            "description": "Defines the corresponding Entity level of the corporate contract on which the Membership fee will be posted (if fees have to be posted to the interemdiate entity account)"
          },
          "postingEntityLevelForAccountSetupFee": {
            "type": "integer",
            "description": "Defines the corresponding Entity level of the corporate contract on which the Account Setup fee will be posted (if fees have to be posted to the interemdiate entity account)"
          }
        },
        "title": "CorporateContract"
      },
      "CorporateContractLevel": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "Level number in the company organization (e.g. 1 corresponding to the company, 2 corresponding to country)",
            "example" :  "1"
          },
          "levelDescription": {
            "type": "string",
            "description": "Description of the level in the company organization (e.g. Company for level 1, Country for level 2)"
          }
        },
        "description": "Specify the level in the company organization",
        "title": "CorporateContractLevel"
      },
      "CorporateContractEntity": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "description": "Identifier of the entity account",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "parentAccountIdentifier": {
            "description": "Parent account identifier of the parent entity",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "account": {
            "description": "List of accounts (with account data) related to the entity",
            "allOf": [
              {
                "$ref": "#/definitions/Account"
              }
            ]
          },
          "level": {
            "type": "integer",
            "description": "Level number in the company organization (e.g. 1 corresponding to the company, 2 corresponding to country)",
            "example" :  2
          },
          "companyEntityExternalReference": {
            "type": "string",
            "description": "External reference of the entity within the company organization (e.g. a code representing the country: FRAN for France)"
          },
          "parentCompanyEntityExternalReference": {
            "type": "string",
            "description": "Entity external reference of the parent entity \nEmpty for the root"
          },
          "deliveryChannel": {
            "description": "Specify the channel for letter delivery used for an entity of the company organization.\nPossible values: WEB, LETTER, LETTER_AND_WEB",
            "allOf": [
              {
                "$ref": "#/definitions/DeliveryChannel"
              }
            ]
          },
          "advertisementFlags": {
            "description": "Specify possible channels used to provide advertisements (email, letter, phone, statement, sms) for an entity of the company organization.",
            "allOf": [
              {
                "$ref": "#/definitions/AdvertisementFlags"
              }
            ]
          }
        },
        "description": "Specify the corporate contract entity",
        "title": "CorporateContractEntity"
      },
      "CorporateEmployeeAccount": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "description": "Identifier of the employee account",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "account": {
            "description": "List of all accounts (with account data) linked to the employee",
            "allOf": [
              {
                "$ref": "#/definitions/Account"
              }
            ]
          },
          "parentCompanyEntityExternalReference": {
            "type": "string",
            "description": "Entity external reference of the parent account \nEmpty for the root"
          },
          "cardContracts": {
            "type": "array",
            "description": "List of all cardContracts (with cardContract data) belonging to this corporate contract.",
            "items": {
              "$ref": "#/definitions/CardContract"
            }
          },
          "customerIdentifiers": {
            "type": "array",
            "description": "List of customers (only identifiers) belonging to this corporate employee account as e.g. account owner, cardholder.",
            "items": {
              "$ref": "#/definitions/CustomerIdentifier"
            }
          },
          "customers": {
            "type": "array",
            "description": "List of customers (with customer data) belonging to this corporate employee account as e.g. account owner, cardholder",
            "items": {
              "$ref": "#/definitions/Customer"
            }
          },
          "parentAccountIdentifier": {
            "description": "Account identifier of the parent account. Each card account is linked to a parent account of the hierarchy (entity)",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "companyEntityExternalReference": {
            "type": "string",
            "description": "External reference of the entity used for the employee account"
          },
          "advertisementFlags": {
            "description": "Specify possible channels used to provide advertisements (email, letter, phone, statement, sms) for the employee account",
            "allOf": [
              {
                "$ref": "#/definitions/AdvertisementFlags"
              }
            ]
          },
          "deliveryChannel": {
            "description": "Specify the channel for letter delivery used for the employee account\nPossible values: WEB, LETTER, LETTER_AND_WEB",
            "allOf": [
              {
                "$ref": "#/definitions/DeliveryChannel"
              }
            ]
          },
          "postingAccountForMembershipFee": {
            "type": "string",
            "description": "Indicates if the membership fees have to be posted to employee card accounts, interemdiate entity account or to the root (usually paid by the company) as default value for the corporate contract.\nPossible values:\n- ROOT_ACCOUNT \n- CARD_ACCOUNT\n- ENTITY_ACCOUNT"
          },
          "postingAccountForAccountSetupFee": {
            "type": "string",
            "description": "Indicates if the account setup fees have to be posted to employee card accounts, interemdiate entity account or to the root (usually paid by the company) as default value for the corporate contract.\nPossible values:\n- ROOT_ACCOUNT \n- CARD_ACCOUNT\n- ENTITY_ACCOUNT"
          },
          "waiveFee": {
            "type": "boolean",
            "description": "Indicates if contract related fees, membership fee and account setup fee, are waived (true) or not (false, by default) for this employee account.",
            "default": false
          },
          "corporateProductType": {
            "type": "string",
            "description": "Type indicating if the account represents an employee, a company or an intermediate\nPossible values: EMPLOYEE, COMPANY, INTERMEDIARY"
          },
          "contractFee": {
            "description": "Contract Fee Models used for the account (Account setup fee and/or Membership fee models).",
            "allOf": [
              {
                "$ref": "#/definitions/ContractFee"
              }
            ]
          },
          "entityIdentifierMembershipFeePosting": {
            "description": "The corresponding entity identifier for Membership Fee posting",
            "allOf": [
              {
                "$ref": "#/definitions/FeePostingEntityIdentifier"
              }
            ]
          },
          "entityIdentifierAccountSetupFeePosting": {
            "description": "The corresponding entity identifier for Account Setup Fee posting",
            "allOf": [
              {
                "$ref": "#/definitions/FeePostingEntityIdentifier"
              }
            ]
          }
        },
        "description": "Specify the corporate employee account",
        "title": "CorporateEmployeeAccount"
      },
      "DataAnalysisFlags": {
        "type": "object",
        "properties": {
          "person": {
            "type": "boolean",
            "description": "Flag indicating person data related to the contract can be used for person data analysis (true) or not (false). Default value is false.",
            "default": false
          },
          "paymentTransaction": {
            "type": "boolean",
            "description": "Flag indicating if payment transactions related to the contract can be used for payment transactions data analysis (true) or not (false). Default value is false.",
            "default": false
          },
          "exchangeThirdParties": {
            "type": "boolean",
            "description": "Flag indicating if contract data can be exchanged between third parties (true) or not (false). Default value is false.",
            "default": false
          }
        },
        "description": "Specify which data analysis flags are enabled (person, paymentTransaction, exchangeThirdParties, etc.)",
        "title": "DataAnalysisFlags"
      },
      "DeactivateAddressResponse": {
        "type": "object",
        "properties": {
          "addressIdentifier": {
            "description": "Identification of the customer address either by Issuer address external reference or by address reference",
            "allOf": [
              {
            "$ref": "#/definitions/AddressIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Status of the address (INACTIVE)"
          }
        },
        "title": "DeactivateAddressResponse"
      },
      "DeactivateCardRequest": {
        "type": "object",
        "required": [
          "reason"
        ],
        "properties": {
          "reason": {
            "type": "string",
            "description": "Deactivation reason chosen among the reasons configured for the issuer"
          }
        },
        "title": "DeactivateCardRequest"
      },
      "DeactivateCardResponse": {
        "type": "object",
        "properties": {
          "cardIdentifier": {
            "description": "Card Identifier",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Card status after card deactivation request (DEACTIVATED/CANCELLED)"
          },
          "reason": {
            "type": "string",
            "description": "Deactivation reason provided in the request"
          },
          "deactivationDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the card has been deactivated in the system"
          }
        },
        "title": "DeactivateCardResponse"
      },
      "DeleteAddressUsageResponse": {
        "type": "object",
        "required": [
          "addressUsageName",
          "serviceCode"
        ],
        "properties": {
          "addressUsages": {
            "type": "array",
            "description": "List of deleted address usages",
            "items": {
              "$ref": "#/definitions/DeleteAddressUsageResponseAddressUsage"
            }
          }
        },
        "title": "DeleteAddressUsageResponse"
      },
      "CreateCompanyResponse": {
        "type": "object",
        "required": [
          "customerIdentifier"
        ],
        "properties": {
          "customerIdentifier": {
            "description": "Identification of the company either by Issuer customer external reference or by customer reference",
            "allOf": [
              {
            "$ref": "#/definitions/CustomerIdentifier"
          }
            ]
          },
          "company": {
            "$ref": "#/definitions/Company"
          }
        },
        "title": "CreateCompanyResponse"
      },
      "CreateCustomerResponse": {
        "type": "object",
        "required": [
          "customerIdentifier"
        ],
        "properties": {
          "customerIdentifier": {
            "$ref": "#/definitions/CustomerIdentifier"
          },
          "customer" : {
            "$ref" : "#/definitions/Customer"
          }
        },
        "title": "CreateCustomerResponse"
      },
      "DeleteAddressUsageResponseAddressUsage": {
        "type": "object",
        "required": [
          "addressUsageName",
          "serviceCode"
        ],
        "properties": {
          "addressUsageName": {
            "type": "string",
            "example": "STATEMENT_SENDING",
            "description": "The business process for which the address usage is defined such as CARD_DELIVERY, PIN_MAILER_DELIVERY, STATEMENT_DELIVERY."
          },
          "entityReference": {
            "type": "string",
            "description": "This corresponds to the application domain of the address. It can be eg a card contract reference, card account reference. It is an optional field.\nIt enables to have the same usage address for the same customer applied to different addresses (one cardholder with 2 card contracts: card delivery address usage is assigned to main postal address for contract A and card delivery address usage is also assigned to office postal address for contract B."
          },
          "serviceCode": {
            "type": "string",
            "example": "ACCOUNT_SERVICE",
            "description": "The Service for which the address usage is defined : CARD_SERVICE, ACCOUNT_SERVICE, …"
          }
        },
        "title": "DeleteAddressUsageResponseAddressUsage"
      },
      "DeleteTemporaryCreditLimitResponse": {
        "type": "object",
        "required": [
          "accountIdentifier",
          "root",
          "temporaryCreditLimitIdentifier"
        ],
        "properties": {
          "accountIdentifier": {
            "description": "Account references provided in the request",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "root": {
            "type": "boolean",
            "description": "Indicates if the account is a root account (true) or not (false)."
          },
          "temporaryCreditLimitIdentifier": {
            "description": "Refer to TemporaryCreditLimit.temporaryCreditLimitIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/TemporaryCreditLimitIdentifier"
              }
            ]
          },
          "relatedTemporaryCreditLimits": {
            "type": "array",
            "description": "List of other accounts involved by the temporary credit limit",
            "items": {
              "$ref": "#/definitions/RelatedTemporaryCreditLimit"
            }
          }
        },
        "title": "DeleteTemporaryCreditLimitResponse"
      },
      "DeliveryChannel": {
        "type": "object",
        "properties": {
          "contractLetterType": {
            "type": "string",
            "description": "Delivery channel used for card contract letters (optional)",
            "enum": [
              "EMAIL",
              "WEB",
              "LETTER",
              "LETTER_AND_WEB",
              "PUSH",
              "MOBILE_APP"
            ],
            "example":  "LETTER"
          },
          "disputeLetterType": {
            "type": "string",
            "description": "Delivery channel used for dispute letters (optional)",
            "enum": [
              "EMAIL",
              "WEB",
              "LETTER",
              "LETTER_AND_WEB",
              "PUSH",
              "MOBILE_APP"
            ],
            "example":  "LETTER"
          },
          "statementType": {
            "type": "string",
            "description": "Delivery channel used for statements (optional)",
            "enum": [
              "EMAIL",
              "WEB",
              "LETTER",
              "LETTER_AND_WEB",
              "PUSH",
              "MOBILE_APP"
            ],
            "example":  "LETTER"
          }
        },
        "description": "Specify the channel for letter delivery used for this contract",
        "title": "DeliveryChannel"
      },
      "DirectDebit": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "directDebitIdentifier": {
            "description": "Unique identifier of the Direct Debit",
            "allOf": [
              {
                "$ref": "#/definitions/DirectDebitIdentifier"
              }
            ]
          },
          "overPaymentAccountIdentifier": {
            "description": "Identifier of the overpayment account ",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "payingAccountIdentifier": {
            "description": "Identifier of the paying account",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "sci": {
            "type": "string",
            "description": "SEPA Creditor Identifier (for SEPA DD)"
          },
          "mandateUmr": {
            "type": "string",
            "description": "Unique Mandate Reference (for SEPA DD)"
          },
          "amount": {
            "description": "Direct Debit due amount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "sepaIndicator": {
            "type": "boolean",
            "description": "Indicates if DD is SEPA or no"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Creation Date of the DD"
          },
          "extractType": {
            "type": "string",
            "description": "Extract type"
          },
          "status": {
            "type": "string",
            "description": "DD Status"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Due date"
          },
          "sequenceType": {
            "type": "string",
            "description": "Sequence type"
          },
          "remittanceInfo": {
            "type": "string",
            "description": "Remittance info"
          },
          "rejectionReason": {
            "type": "string",
            "description": "Rejection Reason (if SDD is rejected)"
          },
          "debtorBankFee": {
            "description": "Debtor Bank Fee",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "creditorBankFee": {
            "description": "Creditor Bank Fee",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "cancellationDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the Direct Debit order was canceled"
          },
          "statusHistory": {
            "description": "Debtor Bank Fee",
            "type": "array",
            "items": {
              "$ref": "#/definitions/DirectDebitStatusHistory"
            }
          }
        },
        "title": "DirectDebit"
      },
      "DirectDebitIdentifier": {
        "type": "object",
        "properties": {
          "endToEndId": {
            "type": "string",
            "description": "DD identifier"
          }
        },
        "title": "DirectDebitIdentifier"
      },
      "DirectDebitStatusHistory": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the direct debit transfer on the particular status date "
          },
          "statusDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the direct debit status change"
          },
          "username": {
            "type": "string",
            "description": "Name of the user who requested to create or cancel the direct debit"
          },
          "origin": {
            "type": "string",
            "description": "Origin used when the direct debit was requested or cancelled."
          }
        },
        "title": "DirectDebitStatusHistory"
      },
      "CreditTransferStatusHistory": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the credit transfer on the particular status date "
          },
          "statusDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the credit transfer status change"
          },
          "username": {
            "type": "string",
            "description": "Name of the user who requested to create or cancel the credit transfer"
          },
          "origin": {
            "type": "string",
            "description": "Origin used when the credit tranfer was requested or cancelled."
          }
        },
        "title": "CreditTransferStatusHistory"
      },
      "DisputeFolderIdentifier": {
        "type": "object",
        "required": [
          "disputeFolderReference"
        ],
        "properties": {
          "disputeFolderReference": {
            "type": "string",
            "description": "The Dispute Folder Reference \nPresent if \"Dispute Folder\" creation is successful. \nThe value of this field is constructed by algorithm. Example for IDM4Sempris, it is like this : D-V-6500-1234-1 (D = for Dispute / M = MCI , V= VISA / 6500 = issuerId / 1234 = YDDD = julien date / 1 = the sequence  is constructed under (D-scheme Id- Issuer Id))"
          },
          "issuerDisputeExternalReference": {
            "type": "string",
            "description": "The issuer Dispute External Reference, Present if provided in the request."
          }
        },
        "title": "DisputeFolderIdentifier"
      },
      "EmailAddress": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the Customer (mandatory). The email address should have the following format: aaa@bbb.ccc\naaa, bbb, ccc are character string."
          }
        },
        "title": "EmailAddress"
      },
      "EmptyEntity": {
        "type": "object",
        "title": "EmptyEntity"
      },
      "EventStore": {
        "type": "object",
        "properties": {
          "businessRefType": {
            "type": "string",
            "description": "Business reference type to be pushed.\nExample: CONTRACT, CARD_CONTRACT, CARD, ACCOUNT, CUSTOMER, etc"
          },
          "businessRefValue": {
            "type": "string",
            "description": "Business reference value for a business reference type.\nExamples of values : card reference, customer reference, account number."
          },
          "correlationId": {
            "type": "string"
          },
          "eventDate": {
            "type": "string",
            "description": "Date when the event was created or modified in publisher system or the comment date",
            "format": "date-time"
          },
          "eventSubType": {
            "type": "string",
            "description": "optional - for certain applications, sub-events can be defined.\nExample for customer service GUI:  COMMENT, Complaint, PGUI (eventType, eventSubType, origin)\nPossible values: \"Inbound call\", \"complaint …\""
          },
          "eventType": {
            "type": "string",
            "description": "Event type\nTypically for CARD business Reference Type, event types relative to card status modification event can be CARD_ISSUE, FIRST_ACTIVATION, CARD_BLOCKING,..\nIn order to retrieve the comments , use COMMENT event-type.\nThe list of event types are shared during the design phase."
          },
          "issuerId": {
            "type": "integer",
            "description": "Issuer ID of the business event",
            "format": "int64"
          },
          "origin": {
            "type": "string",
            "description": "The system that has published the event or comment.\nExample : \"IBO\" for CMS,  \"PGUI\" for Customer Service GUI, \"WLP FO\" for authorization server."
          },
          "payload": {
            "type": "string",
            "description": "Additional information pushed by the application with the event.\nDifferent formats can be found :\n- free text\n- Display payload with \"Old\" and \"New\" value The \"Old\" value is optional and if not provided only the new value will be displayed.)"
          },
          "userId": {
            "type": "string",
            "description": "User in the publisher system that triggers the event"
          }
        },
        "title": "EventStore"
      },
      "CreateEventStoreEventRequest": {
          "type": "object",
          "properties": {
              "correlationId": {
                  "type": "string"
              },
              "origin": {
                  "type": "string"
              },
              "eventDate": {
                  "type": "string",
                  "format": "date-time"
              },
              "userId": {
                  "type": "string"
              },
              "eventType": {
                  "type": "string"
              },
              "payload": {
                  "type": "string"
              },
              "eventSubType": {
                  "type": "string"
              }
          }
      },
      "CreateEventStoreEventResponse": {
          "type": "object",
          "properties": {
              "message": {
                  "type": "string"
              }
          }
      },
      "FOTokenEvent": {
        "required": ["time"],
        "type": "object",
        "properties": {
            "issuerId": {
                "type": "integer",
                "format": "int64",
                "description": "Internal unique identifier of the issuer in WLP FO."
            },
            "txnId": {
                "type": "string",
                "description": "Unique identifier of notified transaction in WLP FO."
            },
            "cardId": {
                "type": "integer",
                "format": "int64",
                "description": "Reference to CARD.CARD_ID"
            },
            "txnOriginId": {
                "type": "integer",
                "format": "int64",
                "description": "Internal unique identifier of the transaction source (origin) in WLP FO."
            },
            "businessCaseId": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Unique identifier of the business case in WLP FO."
            },
            "endTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time when internal transaction processing has stopped in WLP FO."
            },
            "endTimeMs": {
                "type": "integer",
                "format": "int64",
                "description": "Millisecond fraction for the field endTime."
            },
            "declined": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Indicates whether the transaction was declined or approved."
            },
            "issuerReference": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Issuer reference according to SIBOI specification."
            },
            "paymentAccountReference": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "The payment account reference (PAR) which is linked to the PAN."
            },
            "businessCaseType": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Describes the type of business case. Includes values such as FinancialRequest, FinancialVerification, AccountVerification, BalanceEnquiry, StatementEnquiry, etc."
            },
            "cardScheme": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Indicates the card scheme the card belongs to. Possible values are VISA, MasterCard, Diners, Amex, JCB, UnionPay, Other, Unknown."
            },
            "txnOriginName": {
                "maxLength": 50,
                "minLength": 0,
                "type": "string",
                "description": "English text explaining TxnOriginId."
            },
            "tokenWalletId": {
                "maxLength": 3,
                "minLength": 0,
                "type": "string",
                "description": "Three digit code for the wallet provider. Only present for MasterCard tokens."
            },
            "tokenAssuranceLevel": {
                "maxLength": 2,
                "minLength": 0,
                "type": "string",
                "description": "Assurance level of the token-to-PAN binding. This field can be interpreted with the help of 'specification'. -VisaApi: See Visa API field tokenAssuranceMethod for valid values and their meaning -MasterCardApi: See Mastercard API field tokenAssuranceLevel for valid values and their meaning"
            },
            "tokenExpiryDate": {
                "maxLength": 4,
                "minLength": 0,
                "type": "string",
                "description": "Token Expiry Date specifies the year and month after which a token expires."
            },
            "tokenType": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Content depends on the interface where WLPFO received the message. It may be STOKI, MasterCard ISO8583 or Visa ISO8583 protocol."
            },
            "tokenStatus": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Status of token. Possible values: Active, Inactive, Suspended, Blocked, Other, Unknown."
            },
            "tokenScore": {
                "maxLength": 2,
                "minLength": 0,
                "type": "string",
                "description": "Content according to card scheme definition."
            },
            "tokenConsumerEntryMode": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Information how the card details have been entered by the consumer. It refines the information from PanSource. Currently only present for Visa tokens. The possible values and their meaning depend on field Specification. VisaApi (Corresponds to field consumerEntryMode)"
            },
            "tokenConsumerWalletId": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Three digit code for the wallet provider. Only present for MasterCard tokens."
            },
            "tokenDeviceId": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "For Secure Element (SE) wallet providers, this value will be the SE ID in hex binary characters transformed to a 128-character string. For Host Card Emulation (HCE) wallet providers, this field will be the Device ID as determined by the digital wallet provider (DWP). All alphanumeric and special characters are allowed for HCE DWPs. For Card-on-File (COF) wallets, this value will not be present."
            },
            "tokenDeviceIpAddress": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "The IP address of the device at the time of the provisioning request, with the value represented in 255.255.255.255 format. An octet (255) may be 1-3 digits in length but cannot contain any leading zeros."
            },
            "tokenDeviceLanguage": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "ISO 639 Version 3 Language Code."
            },
            "tokenDeviceLocation": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Contains the general location of the device. Information will be supplied with latitude/longitude rounded to the nearest whole digit."
            },
            "tokenDeviceName": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Readable name of device, as entered by end-user. Can contain UTF8 international or special characters."
            },
            "tokenDeviceOperatingSystem": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "The operating system of the consumer device. The possible values and their meaning depend on field Specification. VisaApi (Corresponds to field osType). MasterCardApi (Corresponds to field osName)."
            },
            "tokenDevicePhoneNumber": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Complete or partial phone number. Content according to card scheme definition."
            },
            "tokenDeviceType": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "The possible values and their meaning depend on field Specification. VisaApi (Corresponds to field deviceType). MasterCardApi (Corresponds to field formFactor)."
            },
            "tokenLifeCycleTraceId": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "A message identifier that can be used to link some messages associated with a provisioning request. This should be used by the issuer in event/ message logging. For Visa matching over all token event types should be done by the tokenReferenceID. For Mastercard it will be the value of correlationId. Here EventType Activate can only be matched to Authorize by using the LifeCycleTraceId, because the ReferenceID is not present at this stage."
            },
            "tokenPanReferenceId": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Pan reference ID (anonymized alias of PAN), assigned by the token service provider. This value is unique under a token provider ID. For MDES it is the panUniqueReference."
            },
            "tokenPanSource": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Identifies the method how the cardholder provided the information about the card. KeyEntered (Manually entered by the cardholder), OnFile (Card information from wallet), MobileBankingApp (Via an application provided by the issuing bank), Token (From an already existing token), ChipDip (Reading the chip of the card), ContactlessTap (Contactless read of the card) Possible values: 'KeyEntered', 'OnFile', 'MobileBankingApp', 'Token', 'ChipDip', 'ContactlessTap', 'Other', 'Unknown'"
            },
            "tokenProvider": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Identifies the card scheme which acts as the TSP. Possible values: 'MasterCard', 'Visa', 'Other', 'Unknown'."
            },
            "tokenReferenceId": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Unique token reference ID, assigned by the token service provider. Content according to card scheme definition."
            },
            "tokenSecureElementId": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "The identifier of the Secure Element to be provisioned with the token. Mastercard: Present only when the token is provisioned to a Secure Element and when provided by the Wallet Provider. Visa: In case of SE tokens this data element will be filled with the value of the DeviceId."
            },
            "tokenSpecification": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Identifies the interface specification according to which those fields are filled for which WLP FO does not do any normalization. Each such field explicitly states in the description that its meaning depends on the value specified here. Possible values: 'VisaApi', 'VisaIso8583', 'MasterCardApi', 'MasterCardIso8583', 'Other', 'Unknown'."
            },
            "tokenTermsAndConditionsId": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "The ID of the terms and conditions on VTS or MDES which have been accepted by the consumer."
            },
            "tokenTermsAndConditionsTime": {
                "type": "string",
                "format": "date-time",
                "description": "Terms and conditions accepted date as delivered by the token requestor. The format is YYYYMMDDhhmmss and the time zone UTC."
            },
            "tokenRequestorId": {
                "maxLength": 255,
                "minLength": 0,
                "type": "string",
                "description": "Unique ID of the token requestor, assigned by the token service provider. Typically a wallet service provider or merchant."
            },
            "token": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string",
              "description": "Token value associated to the transaction"
            },
            "accountNumber": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string",
              "description": "Clear account number."
            },
            "alternativeCardNumber": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "Alternative card number. This card number is optionally used by WLP FO instead of the actual card number (PAN) when communicating with external systems."
            },
            "tokenEventTime": {
              "type": "string",
              "format": "date-time",
              "description": "Time when the token event has taken place at the scheme. The format is YYYYMMDDhhmmss and the time zone UTC."
            },
            "operationTime": {
              "type": "string",
              "description": "Local time in the format YYYYMMDDhhmmss on which the transaction took place."
            },
            "tokenApprovalDecision": {
              "type": "string",
              "description": "ApprovalDecision examples: List [ Green, Yellow, Red, Other ]. Module=poc. Interface specific=no. Subject to Change=no"
            },
            "tokenActivationPath": {
              "type": "string",
              "description": "ActivationPath examples: List [ StepUpOtp, StepUpCallCenter, StepUpBankingApp, Other ]. Module=poc. Interface specific=no. Subject to Change=no"
            },
            "tokenRequestorName": {
              "type": "string",
              "description": "Descriptive name of the requestor that an account holder can recognize. MasterCard API delivers this name in data element consumerFacingEntityName."
            },
            "tokenEventType": {
              "type": "string",
              "description": "Authorize, Create, Activate, Suspend, Resume, Deactivate, Refresh. Module=poc. Interface specific=no. Subject to Change=n"
            }
        }
    },
      "ForbiddenErrorApiResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ForbiddenResponseMetadata"
              }
            ]
          }
        },
        "title": "ForbiddenErrorApiResponse",
        "description": "Issuer response entity"
      },
      "ForbiddenResponseMetadata": {
        "type": "object",
        "required": [
          "correlationId",
          "responseDateTime",
          "statusCode",
          "statusMessage"
        ],
        "properties": {
          "correlationId": {
            "type": "string",
            "example": 12,
            "description": "Wall clock time required from service to generate the response"
          },
          "responseDateTime": {
            "type": "string",
            "example": "format:yyyy-MM-dd'T'HH:mm:ss.SSSZ",
            "description": "Timestamp when response date was generated"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "example": 403,
            "description": "HTTP status code"
          },
          "statusMessage": {
            "type": "string",
            "example": "Forbidden",
            "description": "Executed REST API status message"
          }
        },
        "title": "ForbiddenResponseMetadata"
      },
      "ErrorApiResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "description": "Issuer error response",
        "title": "ErrorApiResponse"
      },
      "FeeCondition": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Conditions of the fee generation for the event (optional)"
          },
          "operationType": {
            "type": "string",
            "description": "Contains the type of the operation on which the criteria applies\nFor example: PinOrderIssuing - PIN_REQUEST (optional)"
          },
          "criteria": {
            "type": "string",
            "description": "Criteria of the fee condition\nFor example:\n(counter['ALL'] - counter['IVR'] ) > 1 => If the condition is successfull, one Fee is allocated (optional)"
          }
        },
        "title": "FeeCondition"
      },
      "GetAuthorizationResponse": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "$ref": "#/definitions/AccountIdentifier"
          },
          "approvalCode": {
            "type": "string",
            "description": "maxLength: 10\nCode computed at time of authorization and returned to requestor in case of an approval.Often exchanged with other applications via ISO 8583 field DE 38."
          },
          "authorizationBusinessCaseIdentifier": {
            "$ref": "#/definitions/AuthorizationBusinessCaseIdentifier"
          },
          "authorizationIdentifier": {
            "$ref": "#/definitions/AuthorizationIdentifier"
          },
          "businessCaseType": {
            "type": "string",
            "example": "List 'FinancialRequest', 'FinancialVerification', 'AccountVerification', 'BalanceEnquiry', 'StatementEnquiry', 'PinChange', 'PinUnblock', 'PickUp', 'CardReturn', 'Reconciliation', 'ReserveUpdate', 'ReserveExpiry', 'CardFileOperation', 'TokenLifeCycleEvent', 'Other', 'Unknown'",
            "description": "This value is the same for all transactions belonging to the same business case. "
          },
          "cardAcceptorCity": {
            "type": "string",
            "description": "maxLength: 60\nCity the acceptor is resident (e.g. Frankfurt)."
          },
          "cardAcceptorCountry": {
            "type": "string",
            "description": "Generic.AlphaNumericAcceptorCountryCode for the initial authorization."
          },
          "cardAcceptorName": {
            "type": "string",
            "description": "maxLength: 50\nThis field is not strictly defined and therefore variations are possible. Usually it is the merchant name as known to the cardholder. For ATMs it could be the location or the branch number. Often exchanged with other applications via ISO 8583 field DE 43."
          },
          "cardReference": {
            "type": "string",
            "description": "minLength: 1\nmaxLength: 100\nCard Reference from IBO."
          },
          "cardScheme": {
            "type": "string",
            "example": "List 'VISA', 'MasterCard', 'Diners', 'Amex', 'JCB', 'UnionPay', 'RuPay', 'Eftpos', 'Twint', 'Alipay', 'WeChatPay', 'Payconiq', 'PayPal', 'Other', 'Unknown'",
            "description": "Indicates the card scheme to which the card belongs to."
          },
          "cashbackAmount": {
            "description": "maximum: 1000000000000000000\nPortion of EnquiredAmount dedicated to cashback. The sign is the same as the one of EnquiredAmount.  ",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "cashbackBillingAmount": {
            "description": "maximum: 1000000000000000000\nSimilar to CashbackAmount but in billing (cardholder) currency. ",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "collection": {
            "type": "boolean",
            "description": "Not used, will be removed"
          },
          "comment": {
            "type": "string",
            "description": "maxLength: 255\nArbitrary textual remark given when transaction was triggered."
          },
          "declineReason": {
            "type": "string",
            "example": "List 'CardBlocked', 'FraudSuspected', 'Cvv2Missing', 'TechnicalError', 'OverLimit', 'OverUsageLimit', 'OverCreditLimit', 'Cvv2Wrong', 'CvvWrong', 'CavvWrong', 'CardUnknown', 'CardExpired', 'PinWrong', 'PinTriesOverLimit', 'PinTriesAlmostOverLimit', 'RestrictionViolated', 'ArqcWrong', 'TxnNotAllowed', 'MerchantUnknown', 'ReplyTimeout', 'Other', 'Unknown'",
            "description": "Depending on the interface configuration on WLP FO either this field or MappedResultCode will be populated in all notifications. "
          },
          "declined": {
            "type": "boolean",
            "description": "Indicates whether the transaction was declined or approved."
          },
          "deltaAmount": {
            "description": "maximum: 1000000000000000000\nIncrease or decrease from the old to the new total amount of business case in transaction (acceptor) currency. That is: New TotalAmount = Old TotalAmount + DeltaAmount.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "deltaBillingAmount": {
            "description": "maximum: 1000000000000000000\nSimilar to DeltaAmount but in billing (cardholder) currency.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "enquiredAmount": {
            "description": "maximum: 1000000000000000000\nRequested amount in transaction (acceptor) currency. A positive value is a debit for the cardholder and a credit for the acceptor. Whereas a negative value is a credit for the cardholder and a debit for the acceptor. A partial approval (including purchase only) can be detected by comparing EnquiredAmount with ApprovedAmount. In case they are different it is a partial approval.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "enquiredBillingAmount": {
            "description": "maximum: 1000000000000000000\nSimilar to EnquiredAmount but in billing (cardholder) currency.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "entryMode": {
            "type": "string",
            "example": "List 'KeyEntry', 'Magstripe', 'Chip', 'ContactlessMagstripe', 'ContactlessChip', 'BarCode', 'Ocr', 'File', 'AutoEntry', 'Other', 'Unknown'",
            "description": "Indicates the way the card data was captured."
          },
          "environmentType": {
            "type": "string",
            "example": "List 'POI', 'MailOrder', 'PhoneOrder', 'ECommerce', 'Voice', 'Other', 'Unknown'",
            "description": "Indicates the environment in which the transaction took place."
          },
          "financialType": {
            "type": "string",
            "example": "List 'Cash', 'CashRefund', 'QuasiCash', 'QuasiCashRefund', 'Purchase', 'Refund', 'Load', 'Unload', 'FundsTransferCredit', 'FundsTransferDebit', 'OtherCredit', 'OtherDebit', 'Deposit', 'DepositRefund', 'Unknown'",
            "description": "Provides more details on the operation in case BusinessCaseType is FinancialRequest or FinancialVerification.This value is the same for all transactions belonging to the same financial business case."
          },
          "issuerId": {
            "type": "string",
            "description": "Not used, will be removed"
          },
          "mappedSecurityTypeId": {
            "type": "string",
            "description": "Not used, wll be removed"
          },
          "maskedPan": {
            "type": "string",
            "description": "maxLength: 28\nMasked card number (PAN). Only the first 6 and the last 4 digits are visible. All other digits are replaced by a hash character.\nAbsent if the card number is in scope of PCI and the interface is configured for suppressing the masked card number."
          },
          "merchantCategoryCode": {
            "type": "string",
            "description": "maxLength: 4\nCategory code assigned to the acceptor (MCC)."
          },
          "onPremisesOfAcceptor": {
            "type": "boolean",
            "example": "List 'OnPremisesOfAcceptor', 'OffPremisesOfAcceptor', 'OnPremisesOfCardholder', 'OffPremisesOfCardholder', 'Other', 'Unknown'",
            "description": "Indicates the location of the terminal"
          },
          "onlinePinCheckResult": {
            "type": "string",
            "example": "List 'Correct', 'Wrong', 'Unable', 'Other', 'Unknown'",
            "description": "OnlinePinCheckResult. See values in examples."
          },
          "openToBuy": {
            "description": "maximum: 1000000000000000000\nAvailable line of the cardholder after transaction completion in billing currency.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "operationDate": {
            "type": "string",
            "format": "date-time",
            "example": "2022-04-01T20:38:39Z",
            "description": "minLength: 14\nmaxLength: 14\nTime at which the transaction took place. The format is YYYY-MM-ddThh:mm:ssZ and the time zone is the one of the merchant. It is only guaranteed that the string consists of decimal digits. But it is not ensured the value is valid. For example the month could be outside of the range from 01 to 12."
          },
          "pan": {
            "type": "string",
            "example": "2022-04-01T20:38:39Z",
            "description": "maxLength: 28\nClear card number (PAN).\nAbsent if the card number is in scope of PCI and the interface is configured for suppressing the clear card number."
          },
          "panExpiryDate": {
            "type": "string",
            "description": "Expiry date of card/plastic in the format YYYYMM.It is only guaranteed that the string consists of decimal digits. But it is not ensured the value is valid. For example the month could be outside of the range from 01 to 12."
          },
          "panReference": {
            "type": "string",
            "description": "maxLength: 100\nAlternative card number, coming from IBO. This card number is optionally used by WLP FO instead of the actual card number (PAN) when communicating with external systems."
          },
          "panSequenceNumber": {
            "type": "string",
            "description": "maximum: 9999\nSequence number of card."
          },
          "reserveAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nReserved amount in transaction (acceptor) currency of initial authorization. A positive value is a debit for the cardholder and a credit for the acceptor whereas a negative value is a credit for the cardholder and a debit for the acceptor. Similar semantic as STNI field Generic.TotalAmount.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "resultCode": {
            "type": "string",
            "description": "maxLength: 20\nFinal and detailed result code of transaction. Any automated evaluation of this information has to consider that new result codes are introduced often and even existing ones can disappear or change. Therefore this data element should be used for information purpose only."
          },
          "resultDescription": {
            "type": "string",
            "description": "maxLength: 300\nEnglish text explaining the meaning of ResultCode."
          },
          "resultType": {
            "type": "string",
            "example": "List 'Approval', 'Decline', 'Referral', 'PickUp', 'Other'",
            "description": "Approval (transaction approved),Decline (transaction refused),Referral (transaction refused),PickUp (transaction refused),Other (transaction refused)."
          },
          "securityTypeId": {
            "type": "integer",
            "format": "int32",
            "description": "maximum: 999999999\nInternal unique identifier of security type in WLP FO."
          },
          "securityTypeName": {
            "type": "string",
            "description": "maxLength: 100\nEnglish text explaining SecurityTypeId."
          },
          "standIn": {
            "type": "boolean",
            "description": "Indicates whether WLP FO has stood in for the switch-out peer (request) or whether the transaction is managed in store-and-forward mode towards the switch-out peer (advice).This field is only present if the field SwitchOutPeerId is present."
          },
          "surchargeAmount": {
            "description": "maximum: 1000000000000000000\nPortion of EnquiredAmount dedicated to surcharge imposed by the acceptor or the acquirer. The sign is the same as the one of EnquiredAmount.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "surchargeBillingAmount": {
            "description": "maximum: 1000000000000000000\nSimilar to SurchargeAmount but in billing (cardholder) currency.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "terminalId": {
            "type": "string",
            "description": "maxLength: 20\nId of terminal."
          },
          "terminalType": {
            "type": "string",
            "example": "List 'Attended', 'Atm', 'PetrolPump', 'Adm', 'LimitedAmountAdm', 'Mobile', 'InFlight', 'ChargingStation', 'Other', 'Unknown'",
            "description": "Indicates the type of the terminal."
          },
          "totalAmount": {
            "description": "maximum: 1000000000000000000\nOverall reservation/authorization (if capturing is not finalized) or capture amount (if capturing is finalized) of business case in transaction (acceptor) currency after transaction completion. A positive value is a debit for the cardholder and a credit for the acceptor. Whereas a negative value is a credit for the cardholder and a debit for the acceptor.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "totalBillingAmount": {
            "description": "maximum: 1000000000000000000\nSimilar to TotalAmount but in billing (cardholder) currency.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "transactionDate": {
            "type": "string",
            "example": "2022-04-01T20:38:39Z",
            "description": "Time and date at which the transaction took place. The format is YYYY-MM-ddThh:mm:ssZ and the time zone is the one of the merchant. It is only guaranteed that the string consists of decimal digits. But it is not ensured the value is valid. For example the month could be outside of the range from 01 to 12."
          },
          "transactionSubType": {
            "type": "string",
            "example": "List 'Request', 'Advice', 'Other', 'Unknown'",
            "description": "Indicates the sub-type of the performed operation for some of the listed TransactionType_2 and TransactionType_3 values.\nA request asks to business-wise check whether the operation is allowed and can actually be performed whereas an advice is a notification which has to be treated in a suitable way and can not be declined because of business reasons.\nIn case TransactionType_3 is Action possible values are Request and Advice. If TransactionType_3 has the value Reversal it is always Advice and for Confirmation it is all the time Unknown.\nThe definition is almost the one of the STRAPI field transactionSubType. The only difference is that confirmations on STRAPI are flagged (implicitly) as advices whereas the value here is Unknown."
          },
          "transactionType": {
            "type": "string",
            "example": "List 'Authorization', 'Reversal', 'Confirmation', 'Rollback', 'ReserveUpdate', 'ReserveExpiry', 'Other', 'Unknown",
            "description": "Indicates the type of the performed operation for some of the listed BusinessCaseType values."
          },
          "transactionTypeId": {
            "type": "string",
            "description": "maximum: 999999999\nInternal unique identifier of transaction type in WLP FO."
          },
          "transactionTypeName": {
            "type": "string",
            "description": "maxLength: 100\nEnglish text explaining TransactionTypeId."
          },
          "velocityLimitChecks": {
            "type": "array",
            "description": "Information on velocity check evaluations done by WLP FO.",
            "items": {
              "$ref": "#/definitions/VelocityLimitCheck"
            }
          }
        },
        "title": "GetAuthorizationResponse"
      },
      "GetAuthorizationRestrictionOverrideResponse": {
        "type": "object",
        "properties": {
          "activationEndTime": {
            "type": "string",
            "example": "2020-07-28T10:13:15.421Z",
            "description": "Last point in time at which the override will be considered. Has to be later than ActivationStartTime. Can be present without ActivationStartTime. If not provided the override will be taken into account forever."
          },
          "activationStartTime": {
            "type": "string",
            "example": "2020-07-28T10:13:15.421Z",
            "description": "First point in time at which the override will be considered. Has to be before ActivationEndTime. Can be present without ActivationEndTime. If not provided the override will be taken into account immediately."
          },
          "authorizationRestrictionOverrideIdentifier": {
            "$ref": "#/definitions/AuthorizationRestrictionOverrideIdentifier"
          },
          "collection": {
            "type": "boolean",
            "description": "Not used, will be removed"
          },
          "conditionCheck": {
            "type": "boolean",
            "description": "Overrides the default configured for the corresponding restriction attribute (see configuration entity explanations). In case JSON null is provided then the default becomes effective."
          },
          "conditionParameters": {
            "type": "array",
            "description": "Overrides the default configured for the corresponding restriction attribute. An item must not have leading or trailing spaces. Moreover it must not contain any comma. In case JSON null is provided then the default becomes effective.",
            "items": {
              "type": "string"
            }
          },
          "defaultAuthorizationRestrictionReference": {
            "$ref": "#/definitions/AuthorizationRestrictionIdentifier"
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the override is still present or has been deleted."
          },
          "issuerId": {
            "type": "string",
            "description": "Not used, will be removed."
          },
          "priority": {
            "type": "string",
            "description": "minimum: 0\nmaximum: 9999\nIn case multiple overrides with overlapping activation times are existing this information is used to resolve this situation by applying the overrides one by one starting with the one with lowest priority. The priority needs to be unique across all overrides associated with a restriction and an account. Required field when inserting."
          }
        },
        "title": "GetAuthorizationRestrictionOverrideResponse"
      },
      "GetAuthorizationRestrictionResponse": {
        "type": "object",
        "properties": {
          "authorizationRestrictionIdentifier": {
            "$ref": "#/definitions/AuthorizationRestrictionIdentifier"
          },
          "collection": {
            "type": "boolean",
            "description": "Not used, will be removed"
          },
          "conditionCheck": {
            "type": "boolean",
            "description": "Overrides the default configured for the corresponding restriction attribute (see configuration entity explanations). In case JSON null is provided then the default becomes effective."
          },
          "conditionCheckOrigin": {
            "type": "string",
            "description": "Indicates from which level ConditionCheck has been taken. Possible values: Default, Exception, Override, Other."
          },
          "conditionParameters": {
            "type": "array",
            "description": "Overrides the default configured for the corresponding restriction attribute. An item must not have leading or trailing spaces. Moreover it must not contain any comma. In case JSON null is provided then the default becomes effective.",
            "items": {
              "type": "string"
            }
          },
          "conditionParametersOrigin": {
            "type": "string",
            "description": "Indicates from which level ConditionItems has been taken. Possible values: Default, Exception, Override, Other."
          },
          "issuerId": {
            "type": "string",
            "description": "Not used, will be removed"
          },
          "name": {
            "type": "string",
            "description": "minLength: 1\nDescriptive text for the restriction. The caller should be forward compatible regarding the length of this field. The caller should at least support 50 characters length."
          }
        },
        "title": "GetAuthorizationRestrictionResponse"
      },
      "GetBusinessCaseResponse": {
        "type": "object",
        "properties": {
          "accountReserveBillingAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nFraction of ReserveBillingAmount which has not expired and has not been cancelled (i.e. no clearing and no manual intervention) so far and therefore still influences the open-to-buy via the account reserve (on top of the account balance). A positive value is a debit for the cardholder and a credit for the issuer. Whereas a negative value is a credit for the cardholder and a debit for the issuer.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "accountReserveStatus": {
            "type": "string",
            "example": "List'None', 'Active', 'Expired', 'Cancelled', 'Other'",
            "description": "Indicates together with AccountReserveBillingAmount to what extend the business case influences the open-to-buy via the account reserve (on top of the account balance). Possible values are:\n- None (ReserveBillingAmount is and was never part of the account reserve; AccountReserveBillingAmount is absent)\n- Active (ReserveBillingAmount amount is fully or partially part of the account reserve; it can be cancelled or updated; it can expire; AccountReserveBillingAmount is greater than zero)\n- Expired (ReserveBillingAmount has expired and is no longer part of the account reserve; AccountReserveBillingAmount is zero)\n- Cancelled (ReserveBillingAmount has been entirely cancelled (due to clearing or manual intervention) and is no longer part of the account reserve; AccountReserveBillingAmount is zero)\n- Other\nCan only be present in case BusinessCaseType is FinancialRequest. Absent in case Cancelled is true or all associated authorizations have been declined. The caller must be prepared to receive new values in this field at any time."
          },
          "businessCaseIdentifier": {
            "description": "Business case to which the transaction belongs. The provided information reflects its status after transaction completion. A business case is a group of transactions which logically belong together (e.g. original transaction and reversal of original transaction)",
            "allOf": [
              {
                "$ref": "#/definitions/BusinessCaseIdentifier"
              }
            ]
          },
          "businessCaseType": {
            "type": "string",
            "example": "List 'FinancialRequest', 'FinancialVerification', 'AccountVerification', 'BalanceEnquiry', 'StatementEnquiry', 'PinChange', 'PinUnblock', 'PickUp', 'CardReturn', 'Reconciliation', 'ReserveUpdate', 'ReserveExpiry', 'CardFileOperation', 'TokenLifeCycleEvent', 'Other', 'Unknown'",
            "description": "This value is the same for all transactions belonging to the same business case."
          },
          "cardAcceptorCity": {
            "type": "string",
            "description": "maxLength: 60\nCity the acceptor is resident (e.g. Frankfurt).Often exchanged with other applications via ISO 8583 field DE 43."
          },
          "cardAcceptorCountry": {
            "type": "string",
            "description": "Generic.AlphaNumericAcceptorCountryCode for the initial authorization."
          },
          "cardAcceptorName": {
            "type": "string",
            "description": "maxLength: 50\nThis field is not strictly defined and therefore variations are possible. Usually it is the merchant name as known to the cardholder. For ATMs it could be the location or the branch number. Often exchanged with other applications via ISO 8583 field DE 43."
          },
          "collection": {
            "type": "boolean",
            "description": "Not used, will be removed"
          },
          "financialType": {
            "type": "string",
            "example": "List 'Cash', 'CashRefund', 'QuasiCash', 'QuasiCashRefund', 'Purchase', 'Refund', 'Load', 'Unload', 'FundsTransferCredit', 'FundsTransferDebit', 'OtherCredit', 'OtherDebit', 'Deposit', 'DepositRefund', 'Unknown'",
            "description": "Provides more details on the operation in case BusinessCaseType is FinancialRequest or FinancialVerification.This value is the same for all transactions belonging to the same financial business case."
          },
          "firstAuthorizationIdentifier": {
            "$ref": "#/definitions/AuthorizationIdentifier"
          },
          "firstAuthorizationTransactionDate": {
            "type": "string",
            "example": "2022-04-01T20:38:39Z",
            "description": "Time when the transaction referenced by FirstTxnId has been processed. Format: YYYY-MM-ddThh:mm:ssZ."
          },
          "issuerId": {
            "type": "string",
            "description": "Not used, will be removed"
          },
          "lastAuthorizationIdentifier": {
            "$ref": "#/definitions/AuthorizationIdentifier"
          },
          "lastAuthorizationTransactionDate": {
            "type": "string",
            "example": "2022-04-01T20:38:39Z",
            "description": "Time when the transaction referenced by LastTxnId has been processed. Format: YYYY-MM-ddThh:mm:ssZ."
          },
          "merchantCategoryCode": {
            "type": "string",
            "description": "maxLength: 4\nCategory code assigned to the acceptor (MCC)."
          },
          "reserveAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nReserved amount in transaction (acceptor) currency of initial authorization. A positive value is a debit for the cardholder and a credit for the acceptor whereas a negative value is a credit for the cardholder and a debit for the acceptor. Similar semantic as STNI field Generic.TotalAmount.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "reserveBillingAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nReserved amount in billing (cardholder) currency of initial authorization. A positive value is a debit for the cardholder and a credit for the acceptor whereas a negative value is a credit for the cardholder and a debit for the acceptor. Similar semantic as STNI field Generic.TotalBillingAmount.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "The status of the business case"
          }
        },
        "title": "GetBusinessCaseResponse"
      },
      "GetPinRequest": {
        "type": "object",
        "description": "encryptedSessionKey is the encrypted session key to be used for encrypting the PIN in the reply",
        "properties": {
          "event": {
            "type": "string",
            "description": "EXTERNAL (default), INTERNAL, ATM or IVR"
          },
          "encryptedSessionKey": {
            "$ref": "#/definitions/EncryptedData"
          }
        },
        "title": "GetPinRequest"
      },
      "GetPinByPanRequest": {
          "type": "object",
          "description": "encryptedSessionKey is the encrypted session key to be used for encrypting the PIN in the reply",
          "properties": {
              "event": {
                  "type": "string",
                  "description": "EXTERNAL (default -> just don't mention the field), INTERNAL, ATM or IVR"
              },
              "encryptedSessionKey": {
                  "$ref": "#/definitions/EncryptedData"
              },
              "encryptedPan": {
                  "$ref": "#/definitions/EncryptedPanData"
              },
              "pan": {
                  "type": "string",
                  "description": "Either encryptedPan or pan should be mentioned"
              },
              "panSequenceNumber": {
                  "type": "string",
                  "description": "Either panSequenceNumber or panExpiryDate should be mentioned, or both"
              },
              "panExpiryDate": {
                  "type": "string",
                  "description": "Format MMYY - Either panSequenceNumber or panExpiryDate should be mentioned, or both"
              },
              "encryptedPinBlockPan": {
                  "$ref": "#/definitions/EncryptedPanData"
              },
              "pinBlockPan": {
                  "type": "string",
                  "description": "Only for cases where PAN input to PIN block computation should be overriden; either encryptedPinBlockPan or pinBlockPan should be mentioned"
              }
          },
          "title": "GetPinByPanRequest"
      },
      "GetPinResponse": {
        "type": "object",
        "required": [
          "externalPinAttribute"
        ],
        "properties": {
          "cardIdentifier": {
            "$ref": "#/definitions/CardIdentifier"
          },
          "externalPinAttribute": {
            "$ref": "#/definitions/PinAttribute"
          }
        },
        "title": "GetPinResponse"
      },
      "SetPinRequest": {
        "type": "object",
        "required": [
          "pinAttribute"
        ],
        "properties": {
          "event": {
            "type": "string",
            "description": "EXTERNAL (default), INTERNAL, ATM or IVR"
          },
          "panExpiryDate": {
            "type": "string",
            "description": "Format MMYY"
          },
          "pinAttribute": {
            "$ref": "#/definitions/PinAttribute"
          }
        },
        "title": "SetPinRequest"
      },
      "SetPinByPanRequest": {
          "type": "object",
          "required": [
              "pinAttribute"
          ],
          "properties": {
              "event": {
                  "type": "string",
                  "description": "EXTERNAL (default -> just don't mention the field), INTERNAL, ATM or IVR"
              },
              "pinAttribute": {
                  "$ref": "#/definitions/PinAttribute"
              },
              "encryptedPan": {
                  "$ref": "#/definitions/EncryptedPanData"
              },
              "pan": {
                  "type": "string",
                  "description": "Either encryptedPan or pan should be mentioned"
              },
              "panSequenceNumber": {
                  "type": "string",
                  "description": "Either panSequenceNumber or panExpiryDate should be mentioned, or both"
              },
              "panExpiryDate": {
                  "type": "string",
                  "description": "Format MMYY - Either panSequenceNumber or panExpiryDate should be mentioned, or both"
              },
              "encryptedPinBlockPan": {
                  "$ref": "#/definitions/EncryptedPanData"
              },
              "pinBlockPan": {
                  "type": "string",
                  "description": "Only for cases where PAN input to PIN block computation should be overriden; either encryptedPinBlockPan or pinBlockPan should be mentioned"
              }
          },
          "title": "SetPinByPanRequest"
      },	
      "SetPinResponse": {
        "type": "object",
        "description": "pinAttribute is just an echo of the input PIN",
        "properties": {
          "pinAttribute": {
            "$ref": "#/definitions/PinAttribute"
          }
        },
        "title": "SetPinResponse"
      },
      "GetCvvRequest": {
        "type": "object",
        "description": "encryptedSessionKey is the encrypted session key to be used for encrypting the CVV in the reply",
        "required": [
          "encryptedSessionKey"
        ],
        "properties": {
          "encryptedSessionKey": {
            "$ref": "#/definitions/EncryptedData"
          }
        },
        "title": "GetCvvRequest"
      },
      "GetCvvResponse": {
        "type": "object",
        "required": [
          "encryptedCardSecurityCode"
        ],
        "properties": {
          "encryptedCardSecurityCode": {
            "$ref": "#/definitions/EncryptedCardSecurityCode"
          }
        },
        "title": "GetCvvResponse"
      },
      "ValidateCvvRequest": {
        "type": "object",
        "description": "Either cardSecurityCode or encryptedCardSecurityCode + encryptedSessionKey should be mentioned - in the latter case, encryptedSessionKey is the encrypted session key used for encrypting the CVV in the request",
        "properties": {
          "cardSecurityCode": {
            "type": "string"
          },
          "encryptedCardSecurityCode": {
            "$ref": "#/definitions/EncryptedCardSecurityCode"
          },
          "encryptedSessionKey": {
            "$ref": "#/definitions/EncryptedData"
          }
        },
        "title": "ValidateCvvRequest"
      },
      "ValidateCvvResponse": {
        "type": "object",
        "required": [
          "isValid"
        ],
        "properties": {
          "isValid": {
            "type": "boolean"
          }
        },
        "title": "ValidateCvvResponse"
      },
      "EncryptedCardSecurityCode": {
        "type": "object",
        "required": [
          "algoId",
          "encryptedData",
          "keyId",
          "initializationVector",
          "authenticationTag"
        ],
        "properties": {
          "algoId": {
            "type": "string",
            "description": "03 for AES-GCM"
          },
          "encryptedData": {
            "type": "string",
            "description": "Cryptogram in hexadecimal string representation"
          },
          "keyId": {
            "type": "string",
            "description": "00 for a session key"
          },
          "initializationVector": {
            "type": "string",
            "description": "AES-GCM initialization vector in hexadecimal string representation"
          },
          "authenticationTag": {
            "type": "string",
            "description": "AES-GCM authentication tag in hexadecimal string representation"
          }
        },
        "title": "EncryptedCardSecurityCode"
      },
      "EncryptedData": {
        "type": "object",
        "required": [
          "algoId",
          "encryptedData",
          "keyId"
        ],
        "properties": {
          "algoId": {
            "type": "string",
            "description": "Algorithm used to encrypt Session Key\nAllowed Value:\n06 for RSA"
          },
          "encryptedData": {
            "type": "string",
            "description": "Cryptogram in hexadecimal string representation"
          },
          "keyId": {
            "type": "string",
            "description": "Key set used for request\nAllowed Value:\n01 - Keyset1\n02 - Keyset2"
          }
        },
        "title": "EncryptedData"
      },
      "EncryptedPanData": {
        "type": "object",
        "required": [
          "algoId",
          "encryptedData",
          "keyId"
        ],
        "properties": {
          "algoId": {
            "type": "string",
            "description": "00 = PCI-AES, 01 = BEST, 02 = PCI-PAN, 03 = AES-GCM, 11 = PCI-TDES"
          },
          "encryptedData": {
            "type": "string",
            "description": "Cryptogram in hexadecimal string representation"
          },
          "keyId": {
            "type": "string",
            "description": "Either PCI hexadecimal key index or 01 for BEST/AES-GCM keyset 1 or 02 for BEST/AES-GCM keyset 2"
          },
          "sessionKey": {
            "type": "string",
            "description": "BEST session key in hexadecimal string representation"
          },
          "initializationVector": {
            "type": "string",
            "description": "BEST or AES-GCM initialization vector in hexadecimal string representation"
          },
          "authenticationTag": {
            "type": "string",
            "description": "AES-GCM authentication tag in hexadecimal string representation"
          }
        },
        "title": "EncryptedPanData"
      },
      "EncryptedPan": {
        "type": "object",
        "properties": {
          "encryptedValue": {
            "type": "string"
          },
          "publicKeyIdentifier": {
            "type": "string"
          }
        },
        "title": "EncryptedPan"
      },
      "PinAttribute": {
        "type": "object",
        "required": [
          "pinAlgorithmId",
          "pinBlock",
          "pinBlockFormat"
        ],
        "properties": {
          "encryptedSessionKey": {
            "$ref": "#/definitions/EncryptedData"
          },
          "key": {
            "type": "string",
            "description": "Not used"
          },
          "keyId": {
            "type": "string",
            "description": "Key set used for response\nAllowed Value:\n01 - Keyset1\n02 - Keyset2"
          },
          "pinAlgorithmId": {
            "type": "string",
            "description": "Algorithm used to encrypt the PIN\nAllowed Value:\n04 = ISO-4 (=> encryptedSessionKey required)\n05 = ISO-1-BAPOF (internal transport + BE banks)\n06 = RSA-APAC (deprecated)\n07 = BEST-PIN (internal migration)"
          },
          "pinBlock": {
            "type": "string",
            "description": "PIN block in hexadecimal string representation"
          },
          "pinBlockFormat": {
            "type": "string",
            "description": "ISO-4, ISO-1-BAPOF, RSA-APAC, BEST-PIN, etc. (free text, no strict constraint)"
          }
        },
        "title": "PinAttribute"
      },
      "PinChangeInformation": {
        "type": "object",
        "properties": {
          "freePinChangeCounter": {
            "type": "integer",
            "description": "Free pin change counter"
          },
          "requestDate": {
            "type": "string",
            "format": "date-time",
            "description": "Request date"
          },
          "source": {
            "type": "string",
            "description": "Source of the PIN change request (optional) e.g. IVR, online banking."
          },
          "changeType": {
            "type": "string",
            "description": "Type of the PIN change request (mandatory) e.g. First PIN selection or PIN change or PIN inherited from another card for which the PIN is changed."
          },
          "free": {
            "type": "boolean",
            "description": "Indicates if the pin change is free of charge"
          }
        },
        "title": "PinChangeInformation"
      },
      "GetVelocityLimitResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "description": "Cumulated authorization amount in period. Debits have a positive sign whereas credits have a negative one.\nThe returned value is the one being effective at operation execution time.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "collection": {
            "type": "boolean",
            "description": "Not used, will be removed"
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "description": "minimum: 0\nmaximum: 999999999\nNumber of transactions in period.\nThe returned value is the one being effective at operation execution time."
          },
          "issuerId": {
            "type": "string",
            "description": "Not needed, will be removed"
          },
          "maximumAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nMaximum threshold for the cumulated authorization amount in period. In most of the cases the value given here will be positive. \nThe returned value is the one being effective at operation execution time. Only present in case MaximumAmountCheck is true.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "maximumAmountCheck": {
            "type": "boolean",
            "description": "Indicates whether the cumulated authorization amount in period is compared with a maximum threshold or not. The returned value is the one being effective at operation execution time."
          },
          "maximumAmountCheckOrigin": {
            "type": "string",
            "description": "Indicates from which level MaximumAmountCheck has been taken. Possible values:  Default, Exception, Override, Other. "
          },
          "maximumAmountOrigin": {
            "type": "string",
            "description": "Indicates from which level MaximumAmountCheck has been taken\nOnly present in case MaximumAmount is present.\nEnum:\n[ Default, Exception, Override, Other ]"
          },
          "maximumCount": {
            "type": "integer",
            "format": "int32",
            "description": "minimum: 0\nmaximum: 999999999\nMaximum threshold for the number of transactions in period. \nThe returned value is the one being effective at operation execution time. Only present in case MaximumCountCheck is true."
          },
          "maximumCountCheck": {
            "type": "boolean",
            "description": "Indicates whether the number of transactions in period is compared with a maximum threshold or not.\nThe returned value is the one being effective at operation execution time."
          },
          "maximumCountCheckOrigin": {
            "type": "string",
            "description": "Indicates from which level MaximumCountCheck has been taken.\nPossible values: Default, Exception, Override, Other.\n"
          },
          "maximumCountOrigin": {
            "type": "string",
            "description": "Indicates from which level MaximumCount has been taken.\nPossible values: Default, Exception, Override, Other.\nOnly present in case MaximumCount is present."
          },
          "minimumAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nMinimum threshold for the cumulated authorization amount in period.\nIn most of the cases the value given here will be negative.\nThe returned value is the one being effective at operation execution time. Only present in case MinimumAmountCheck is true.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "minimumAmountCheck": {
            "type": "boolean",
            "description": "Indicates whether the cumulated authorization amount in period is compared with a minimum threshold or not.\nThe returned value is the one being effective at operation execution time."
          },
          "minimumAmountCheckOrigin": {
            "type": "string",
            "description": "Indicates from which level MinimumAmountCheck has been taken.\nPossible values: Default, Exception, Override, Other."
          },
          "minimumAmountOrigin": {
            "type": "string",
            "description": "Indicates from which level MinimumAmountCheck has been taken. \nPossible values: Default, Exception, Override, Other.\nOnly present in case MinimumAmount is present."
          },
          "name": {
            "type": "string",
            "description": "minLength: 1\nDescriptive text for the velocity limit, e.g. DAILY CASH"
          },
          "velocityLimitIdentifier": {
            "$ref": "#/definitions/VelocityLimitIdentifier"
          },
          "velocityLimitOverrideReference": {
            "type": "string"
          },
          "velocityLimitOverrideStartdate": {
            "type": "string",
            "format": "date-time"
          },
          "velocityLimitOverrideEnddate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "title": "GetVelocityLimitResponse"
      },
      "GetVelocityOverrideResponse": {
        "type": "object",
        "properties": {
          "activationEndTime": {
            "type": "string",
            "description": "Last point in time at which the override will be considered. Has to be later than ActivationStartTime. Can be present without ActivationStartTime. If not provided the override will be taken into account forever."
          },
          "activationStartTime": {
            "type": "string",
            "description": "First point in time at which the override will be considered. Has to be before ActivationEndTime. Can be present without ActivationEndTime. If not provided the override will be taken into account immediately."
          },
          "collection": {
            "type": "boolean",
            "description": "Not used, will be removed"
          },
          "defaultVelocityLimitReference": {
            "$ref": "#/definitions/VelocityLimitIdentifier"
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the override is still taken into account or has been deleted."
          },
          "issuerId": {
            "type": "string",
            "description": "Not used, will be removed"
          },
          "maximumAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nMaximum threshold for the cumulated authorization amount in period. In most of the cases the value given here will be positive. The returned value is the one being effective at operation execution time. Only present in case MaximumAmountCheck is true.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "maximumAmountCheck": {
            "type": "boolean",
            "description": "Indicates whether the number of transactions in period is compared with a maximum threshold or not. The returned value is the one being effective at operation execution time."
          },
          "maximumCount": {
            "type": "integer",
            "format": "int32",
            "description": "In case JSON null is provided what is configured on higher levels becomes effective. If MaximumCountCheck = true then a non-null value must be given. Otherwise the field must be absent."
          },
          "maximumCountCheck": {
            "type": "boolean",
            "description": "In case JSON null is provided what is configured on higher levels becomes effective."
          },
          "minimumAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nMinimum threshold for the cumulated authorization amount in period. In most of the cases the value given here will be negative. The returned value is the one being effective at operation execution time. Only present in case MinimumAmountCheck is true.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "minimumAmountCheck": {
            "type": "boolean",
            "description": "Indicates whether the cumulated authorization amount in period is compared with a minimum threshold or not. The returned value is the one being effective at operation execution time."
          },
          "priority": {
            "type": "string",
            "description": "minimum: 0\nmaximum: 9999\nIn case multiple overrides with overlapping activation times are existing this information is used to resolve this situation by applying the overrides one by one starting with the one with lowest priority. The priority needs to be unique across all overrides associated with a velocity check and an account. Required field when inserting."
          },
          "velocityLimitOverrideIdentifier": {
            "$ref": "#/definitions/VelocityLimitOverrideIdentifier"
          }
        },
        "title": "GetVelocityOverrideResponse"
      },
      "CreateEmergencyCardResponse": {
        "type": "object",
        "required": [
          "embossingName",
          "panReference"
        ],
        "properties": {
          "pan": {
            "type": "string",
            "description": "Primary Account Number (PAN) calculated by our system from the BIN range assigned to the emergency card product."
          },
     "maskedPan": {
            "type": "string",
            "description": "Masked Primary Account Number (PAN) of the card. Only the first 6 and the last 4 digits are visible. All other digits are replaced by a hash character.\nExample: 445442******0275"
          },
          "panReference": {
            "type": "string",
            "description": "Refer to Card.panReference."
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date of the card\nFormat is MMYY (month and year)"
          },
          "panSequenceNumber": {
            "type": "string",
            "description": "PAN sequence number is a number (usually from 1 to N) that allows identifying either cards with same PAN or cards with same PAN and same Expiry date"
          },
          "cardIdentifier": {
            "$ref": "#/definitions/CardIdentifier"
          },
          "statusDate": {
            "type": "string",
            "format": "date-time",
            "description": "Last card status change date"
          },
          "embossingName": {
            "type": "string",
            "description": "uncryptedcardHolderName (lines separated by '*', see EmbossingNameHelper)\n\nFirst line of the name embossed on the physical card (mandatory)\nIt can be provided by the issuer or calculated by the Issuing Back Office system (if allowed within card Technology and Application model and depending on the selected embossing name calculation algorithm)\n"
          },
          "status": {
            "type": "string",
            "description": "Card status"
          },
          "embossingName2ndLine": {
            "type": "string",
            "description": "Second line of the name embossed on the physical card, optional, can be provided only in addition to the first line.\nIt can be provided by the issuer or calculated by our system (if embossing name is required within card Technology and Application model and depending on the selected embossing name calculation algorithm)."
          },
          "activeCreditLimitAmount": {
            "description": "Active credit limit amount\nCan be inherited from the credit limit of old card according the issuer configuration. ",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "activationMethod": {
            "type": "string",
            "description": "Activation method of the emergency card e.g on card creation or on demand"
          }
        },
        "title": "CreateEmergencyCardResponse"
      },
      "Info": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Rest API Description"
          },
          "version": {
            "type": "string",
            "description": "Rest API Version"
          },
          "title": {
            "type": "string",
            "description": "Rest API Title"
          },
          "termsOfService": {
            "type": "string",
            "description": "Rest API Terms of Service"
          },
          "contact": {
            "description": "Rest API Support Contact",
            "allOf": [
              {
                "$ref": "#/definitions/SupportContact"
              }
            ]
          },
          "license": {
            "description": "Rest API License",
            "allOf": [
              {
                "$ref": "#/definitions/License"
              }
            ]
          }
        },
        "title": "Info"
      },
      "InsuranceContract": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "insuranceContractIdentifier": {
            "description": "Unique identifier of the insurance contract",
            "allOf": [
              {
                "$ref": "#/definitions/InsuranceContractIdentifier"
              }
            ]
          },
          "accountIdentifier": {
            "description": "The account linked to the insurance contract",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "lastInsuranceEventCode": {
            "type": "string",
            "description": "Last insurance event code"
          },
          "lastInsuranceEventDate": {
            "type": "string",
            "format": "date-time",
            "description": "Last event date"
          },
          "insuranceEvents": {
            "type": "array",
            "description": "The list of insurance events linked to this contract",
            "items": {
              "$ref": "#/definitions/InsuranceEvent"
            }
          },
          "status": {
            "type": "string",
            "description": "Status of insurance contract"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time",
            "description": "From when the contract is valid"
          },
          "accountOwnerBirthDate": {
            "type": "string",
            "format": "date-time",
            "description": "Owner's birth date"
          }
        },
        "title": "InsuranceContract"
      },
      "InsuranceContractIdentifier": {
        "type": "object",
        "description": "The insurance package which is linked to this contract ",
        "properties": {
          "insurancePackageReference": {
            "type": "string",
            "description":"Reference of the insurance contract"
          }
        },
        "title": "InsuranceContractIdentifier"
      },
      "InsuranceEvent": {
        "type": "object",
        "properties": {
          "insuranceEventCode": {
            "type": "string",
            "description": "Insurance event code"
          },
          "insuranceEventDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of insurance event"
          },
          "insuranceEventDescription": {
            "type": "string",
            "description": "Description of the insurance event"
          }
        },
        "title": "InsuranceEvent"
      },
      "InternalServerErrorErrorApiResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/InternalServerErrorResponseMetadata"
              }
            ]
          }
        },
        "title": "InternalServerErrorErrorApiResponse",
        "description": "Issuer response entity"
      },
      "InternalServerErrorResponseMetadata": {
        "type": "object",
        "required": [
          "correlationId",
          "responseDateTime",
          "statusCode",
          "statusMessage"
        ],
        "properties": {
          "correlationId": {
            "type": "string",
            "example": 12,
            "description": "Wall clock time required from service to generate the response"
          },
          "responseDateTime": {
            "type": "string",
            "example": "format:yyyy-MM-dd'T'HH:mm:ss.SSSZ",
            "description": "Timestamp when response date was generated"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "example": 500,
            "description": "HTTP status code"
          },
          "statusMessage": {
            "type": "string",
            "example": "Internal server error",
            "description": "Executed REST API status message"
          }
        },
        "title": "InternalServerErrorResponseMetadata"
      },
      "Issuer": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier in the system"
          },
          "name": {
            "type": "string",
            "description": "Issuer name"
          },
          "externalBankCode": {
            "type": "string",
            "description": "Issuer External Bank Code"
          },
          "parentIssuer": {
            "description": "Parent issuer in the issuer hierarchy configured in the system",
            "allOf": [
              {
                "$ref": "#/definitions/Issuer"
              }
            ]
          }
        },
        "title": "Issuer"
      },
      "LegitimacyDocument": {
        "type": "object",
        "properties": {
          "legitimacyDocumentType": {
            "type": "string",
            "description": "Type of the legitimacy document (example: passport, identity card, etc.)"
          },
          "legitimacyDocumentId": {
            "type": "string",
            "description": "Id of the legitimacy document (example: the number of the passport)"
          },
          "legitimacyDocumentDate": {
            "type": "string",
            "format": "date-time",
            "description": "Delivery date of the legitimacy document"
          },
          "legitimacyDocumentExpiryDate": {
            "type": "string",
            "format": "date-time",
            "description": "Expiry date of the legitimacy document"
          },
          "legitimated": {
            "type": "boolean",
            "description": "Indicates if the document is provided for legitimacy (true) or not (false). \nBy default, value is false."
          },
          "customerIdentifier": {
            "description": "Identifies the owner of this document.",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          }
        },
        "description": "Legitimacy document information",
        "title": "LegitimacyDocument"
      },
      "License": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "title": "License"
      },
      "Links": {
        "type": "object",
        "required": [
          "self"
        ],
        "properties": {
          "self": {
            "type": "string",
            "example": "/x/{x}?x=x",
            "description": "Service method URL"
          },
          "next": {
            "type": "string",
            "example": "/x/{x}?page[offset]=2",
            "description": "URL pagination query parameter next page"
          }
        },
        "title": "Links"
      },
      "LoyaltyPoint": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string",
            "description": " Unit in which the loyalty points are expressed. Defined by Bonus/Loyalty program (can be currency, points...) (optional)."
          },
          "cumulatedValue": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of loyalty points (optional)."
          }
        },
        "title": "LoyaltyPoint"
      },
      "PointOfService": {
        "type": "object",
        "properties": {
          "entryModePan": {
            "type": "string",
            "description": "VISA TCR0 PosEntryMode."
          },
          "entryModePin": {
            "type": "string",
            "description": "VISA TCR0 CardholderIDMethod."
          },
          "conditionCode": {
            "type": "string",
            "description": "VISA. Field equals to \"02\" if PosEntryMode is populated, \"00\" if not populated."
          },
          "posTerminalCapability": {
            "type": "string",
            "description": "VISA TCR0 PosTerminalCapability"
          },
          "cardDataInputCapability": {
            "type": "string",
            "description": "MCI DE 22 (Point of Service [POS] Entry Mode), subfield 1 indicates the set of methods supported by the terminal for the input of account number, card, or mobile device data."
          },
          "cardholderAuthenticationCapability": {
            "type": "string",
            "description": "MCI DE 22 (Point of Service [POS] Entry Mode), subfield 2 describes the capability of the terminal device to support/accept authentication data."
          },
          "cardCaptureCapability": {
            "type": "string",
            "description": "MCI DE 22 (Point of Service [POS] Entry Mode), subfield 3 indicates whether the terminal has card capture capabilities."
          },
          "terminalOperatingEnvironment": {
            "type": "string",
            "description": "MCI DE 22 (Point of Service [POS] Entry Mode), subfield 4 indicates whether the card acceptor is attending the terminal and the location of the terminal."
          },
          "cardholderPresentData": {
            "type": "string",
            "description": "MCI DE 22 (Point of Service [POS] Entry Mode), subfield 5 indicates whether the cardholder is present at the point of service and explains the condition if the cardholder is not present."
          },
          "cardPresentData": {
            "type": "string",
            "description": "MCI DE 22 (Point of Service [POS] Entry Mode), subfield 6 indicates if the card is present at the point of service."
          },
          "cardDataInputMode": {
            "type": "string",
            "description": "MCI DE 22 (Point of Service [POS] Entry Mode), subfield 7 indicates the method used for PAN entry to initiate a transaction."
          },
          "cardholderAuthenticationMethod": {
            "type": "string",
            "description": "MCI DE 22 (Point of Service [POS] Entry Mode), subfield 8 indicates the method by which the cardholder’s identity was verified at the point of service."
          },
          "cardholderAuthenticationEntity": {
            "type": "string",
            "description": "MCI DE 22 (Point of Service [POS] Entry Mode), subfield 9 indicates the entity through which the cardholder’s identity was verified at the point of service."
          },
          "cardDataOutputCapability": {
            "type": "string",
            "description": "MCI DE 22 (Point of Service [POS] Entry Mode), subfield 10 indicates the ability of the terminal to write or output data to a card."
          },
          "terminalDataOutputCapability": {
            "type": "string",
            "description": "MCI DE 22 (Point of Service [POS] Entry Mode), subfield 11 indicates the print and display capabilities of the terminal."
          },
          "pinCaptureCapability": {
            "type": "string",
            "description": "MCI DE 22 (Point of Service [POS] Entry Mode), subfield 12 indicates the maximum number of PIN characters that the POS terminal can capture."
          }
        },
        "title": "PointOfService"
      },
      "LodgingInformation": {
        "type": "object",
        "properties": {
          "businessFormatCode": {
            "type": "string",
            "description": "The fields represents additional data from VISA clearing file addendum.\nVISA mapping is the following: TC05, TCR3 - INDUSTRY-SPECIFIC DATA - LODGING; Field: Business Format Code (Value: CA); POS: 17-18."
          },
          "noShowIndicator": {
            "type": "string",
            "description": "The fields represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR3 - INDUSTRY-SPECIFIC DATA - LODGING; Field: Lodging No-Show Indicator; POS 27.\nMCI mapping is the following: PDS 0690. PDS 0690 (No Show Indicator) provides an indicator noting that the individual did not show up after making a reservation for a vehicle or lodging."
          },
          "extraCharges": {
            "type": "string",
            "description": "The fields represents additional data from VISA clearing file addendum.\nVISA mapping is the following: TC05, TCR3 - INDUSTRY-SPECIFIC DATA - LODGING; Field: Lodging Extra Charges; POS 28–33."
          },
          "checkInDate": {
            "type": "string",
            "description": "The fields represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR3 - INDUSTRY-SPECIFIC DATA - LODGING; Field: Lodging Check-in Date (YYMMDD); POS 38-43.\nMCI mapping is the following: PDS 0574. PDS 0574 (Arrival Date) contains the cardholder check-in date (YYMMDD)."
          },
          "dailyRoomRate": {
            "type": "string",
            "description": "The fields represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR3 - INDUSTRY-SPECIFIC DATA - LODGING; Field: Daily Room Rate; POS 44-55.\nMCI mapping is the following: PDS 0580. PDS 0580 (Room Rate) contains the daily room charges exclusive of taxes and fees. This PDS consists of two subfields:\n1. Room Rate Amount; POS: 1-12\n2. Room Rate Exponent; POS: 13"
          },
          "totalTax": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR3 - INDUSTRY-SPECIFIC DATA - LODGING; Field: Total Tax; POS 56-67.\nMCI mapping is the following: PDS 0597. PDS 0597 (Total Tax Amount) contains the total amount of sales tax or value added tax (VAT) on the total purchase amount."
          },
          "prepaidExpenses": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR3 - INDUSTRY-SPECIFIC DATA - LODGING; Field: Prepaid Expenses; POS 68-79.\nMCI mapping is the following: PDS 0704. PDS 0704 (Prepaid Expenses) provides the amount of deposit or other prepaid amounts for the lodging stay."
          },
          "foodBeverageCharge": {
            "type": "string",
            "description": "The field represents additional data from VISA clearing file addendum.\nVISA mapping is the following: TC05, TCR3 - INDUSTRY-SPECIFIC DATA - LODGING; Field: Food/Beverage Charges; POS 80-91."
          },
          "folioCashAdvances": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR3 - INDUSTRY-SPECIFIC DATA - LODGING; Field: Folio Cash Advances; POS 92-103.\nMCI mapping is the following: PDS 0706. PDS 0706 (Cash Advances) provides the amount of cash received during the lodging stay."
          },
          "totalRoomNights": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR3 - INDUSTRY-SPECIFIC DATA - LODGING; Field: Room Nights; POS 104-105.\nMCI mapping is the following: PDS 0703. PDS 0703 (Total Room Nights) provides the total number of nights for which a room was contracted during a lodging stay."
          },
          "totalRoomTax": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR3 - INDUSTRY-SPECIFIC DATA - LODGING; Field: Total Room Tax; POS 106-117.\nMCI mapping is the following: PDS 0581. PDS 0581 (Total Room Tax) contains tax amount information such as the daily room tax, occupancy tax, energy tax, and tourist tax amounts. This PDS consists of three subfields:\n1. Total Room Tax Amount; POS: 1-12\n2. Total Room Tax Exponent; POS: 13\n 3. Total Room Tax Sign; POS: 14"
          }
        },
        "title": "LodgingInformation"
      },
      "CarRentalInformation": {
        "type": "object",
        "properties": {
          "businessFormatCode": {
            "type": "string",
            "description": "The fields represents additional data from VISA clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - CAR RENTAL; Field: Business Format Code (Value: CA); POS 17-18."
          },
          "days": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - CAR RENTAL; Field: Days Rented; POS 19-20.\nMCI mapping is the following: PDS 0691. PDS 0691 (Days Rented) provides the number of days that the vehicle was rented."
          },
          "noShowIndicator": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - CAR RENTAL; Field: Car Rental No-Show Indicator; POS 27.\nMCI mapping is the following: PDS 0690. PDS 0690 (No Show Indicator) provides an indicator noting that the individual did not show up after making a reservation for a vehicle or lodging."
          },
          "extraCharges": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - CAR RENTAL; Field: Car Rental Extra Charges; POS 28-33.\nMCI mapping is the following: PDS 0701. PDS 0701 (Extra Charges) provides the extra charges associated with the vehicle rental."
          },
          "checkOutDate": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - CAR RENTAL; Field: Car Rental Check-out Date (YYMMDD); POS 38-43.\nMCI mapping is the following: PDS 0551. PDS 0551 (Rental Check-Out Date) is the date when the vehicle was originally rented (YYMMDD)."
          },
          "dailyRentRate": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - CAR RENTAL; Field: Daily Rental Rate; POS 44-55.\nMCI mapping is the following: PDS 0553. PDS 0553 (Rental Rate) contains the rental rate charged for the vehicle and indicates whether it is a daily, weekly, or monthly rate. This PDS consists of two subfields:\n1. Rental Rate Indicator; POS: 1\n- D: Daily rate\n- W: Weekly rate\n- M: Monthly rate\n- space: Unknown or unreported\n2. Rental Rate; POS: 2-13"
          },
          "weeklyRentRate": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - CAR RENTAL; Field: Weekly Rental Rate; POS 56-67.\nMCI mapping is the following: PDS 0692. PDS 0692 (Weekly Rental Amount) provides the amount charged for a seven-day rental period."
          },
          "insuranceCharge": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - CAR RENTAL; Field: Insurance Charges; POS 68-79.\nMCI mapping is the following: PDS 0559. PDS 0559 (Vehicle Insurance) contains an indicator of whether the customer purchased insurance and of the insurance amount. This PDS consists of two subfields:\n1. Insurance Indicator; POS: 1\n- Y: Yes (insurance was purchased)\n- N: No (insurance was not purchased)\n- spaces: Unknown or unreported\n2. Insurance Charges; POS: 2-13"
          },
          "fuelCharge": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - CAR RENTAL; Field: Fuel Charges; POS 80-91.\nMCI mapping is the following: PDS 0698. PDS 0698 (Fuel Charge) provides the amount charged for fuel used during vehicle rental."
          },
          "classCode": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\n VISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - CAR RENTAL; Field: Car Class Code; POS 92-93.\nMCI mapping is the following: PDS 0568. PDS 0568 (Rental Class ID) contains the classification, such as midsize or luxury, of the vehicle rented."
          },
          "oneWayDropCharge": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - CAR RENTAL; Field: One-Way Drop-off Charges; POS 94-105.\nMCI mapping is the following: PDS 0694. PDS 0694 (One Way Drop Off Charge) provides a charge associated with not returning a vehicle to the original rental location."
          },
          "renterName": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - CAR RENTAL; Field: Renter Name; POS 106-145.\nMCI mapping is the following: PDS 0545. PDS 0545 (Renter Name) is the name of the individual making the vehicle rental agreement."
          }
        },
        "title": "CarRentalInformation"
      },
      "ECommerceSecurityLevelIndicator": {
        "type": "object",
        "properties": {
          "securityProtocol": {
            "type": "string",
            "description": "MCI : PDS 0052 s1 - Security Protocol indicates the presence and type of security protocol present in the authorization process."
          },
          "cardHolderAuthentication": {
            "type": "string",
            "description": "MCI : PDS 0052 s2 - Cardholder Authentication indicates the type of cardholder authentication used in the authorization process"
          },
          "ucafCollectionIndicator": {
            "type": "string",
            "description": "MCI : PDS 0052 s3 - UCAF Collection Indicator identifies the level of UCAF supported in the authorization process"
          }
        },
        "title": "ECommerceSecurityLevelIndicator"
      },
      "AirItineraryInformation": {
        "type": "object",
        "properties": {
          "businessFormatCode": {
            "type": "string",
            "description": "The fields represents additional data from VISA clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - PASSENGER ITINERARY DATA; Field: Business Format Code; POS 17-18."
          },
          "travelAgent": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - PASSENGER ITINERARY DATA; Field: Travel Agency Name; POS 92-116.\nMCI mapping is the following: PDS 0511. PDS 0511 (Travel Agency Name) is the name of the travel agency that issued the ticket."
          },
          "travelAgentCode": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - PASSENGER ITINERARY DATA; Field: Travel Agency Code; POS 84-91.\nMCI mapping is the following: PDS 0510. PDS 0510 (Travel Agency Code) is a code assigned to the travel agency."
          },
          "passengerName": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - PASSENGER ITINERARY DATA; Field: Passenger Name; POS 27-46.\nMCI mapping is the following: PDS 0505. PDS 0505 (Passenger Name) contains the name of the passenger to whom the ticket was issued."
          },
          "departureDate": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - PASSENGER ITINERARY DATA; Field: Departure Date (MMDDYY); POS 47-52.\nMCI mapping is the following: PDS 0520. PDS 0520 (Travel Date) is the effective ticket date, also referred as departure date (YYMMDD)."
          },
          "originCityCode": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - PASSENGER ITINERARY DATA; Field: Origination City/Airport Code; POS 53-55.\nMCI mapping is the following: PDS 0523. PDS 0523 (City of Origin/Airport Code) is the originating airport or railway name standard abbreviation."
          },
          "restrictedTicketIndicator": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - PASSENGER ITINERARY DATA; Field: Restricted Ticket Indicator; POS 117.\nMCI mapping is the following: PDS 0713. PDS 0713 (Restricted Ticket Indicator) provides the identifier noting that the ticket purchased has some restriction associated with its use."
          },
          "reservationSystem": {
            "type": "string",
            "description": "The fields represents additional data from VISA clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - PASSENGER ITINERARY DATA; Field: Computerized Reservation System; POS 142-145."
          },
          "creditReasonIndicator": {
            "type": "string",
            "description": "The fields represents additional data from VISA clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - PASSENGER ITINERARY DATA; Field: Credit Reason Indicator; POS 166."
          },
          "ticketChangeIndicator": {
            "type": "string",
            "description": "The fields represents additional data from VISA clearing file addendum.\nVISA mapping is the following: TC05, TCR 3 - INDUSTRY-SPECIFIC DATA - PASSENGER ITINERARY DATA; Field: Ticket Change Indicator; POS 167."
          },
          "ticketNumber": {
            "type": "string",
            "description": "The field represents additional data from VISA and MCI clearing file addendum.\nVISA mapping is the following: TC05, TCR0; Field: Merchant Name POS 92-116; POS 13-25 of this field should be taken as input.\nMCI mapping is the following: PDS 0506. PDS 0506 (Ticket Number) contains the number on the ticket."
          },
          "IATACode": {
            "type": "string",
            "description": "The field represents additional data from MCI clearing file addendum.\nMCI mapping is the following: PDS 0717. PDS 0717 (IATA Client Code) provides the International Air Transport Association (IATA) code identifying the company that purchased the ticket."
          },
          "leg1": {
            "allOf": [
              {
                "$ref": "#/definitions/TravelDetailLeg"
              }
            ],
            "description": "Description of first leg of trip"
          },
          "leg2": {
            "allOf": [
              {
                "$ref": "#/definitions/TravelDetailLeg"
              }
            ],
            "description": "Description of second leg of trip"
          },
          "leg3": {
            "allOf": [
              {
                "$ref": "#/definitions/TravelDetailLeg"
              }
            ],
            "description": "Description of third leg of trip"
          },
          "leg4": {
            "allOf": [
              {
                "$ref": "#/definitions/TravelDetailLeg"
              }
            ],
            "description": "Description of fourth leg of trip"
          }
        },
        "title": "AirItineraryInformation"
      },
      "TravelDetailLeg": {
        "type": "object",
        "properties": {
          "flightNumber": {
            "type": "string",
            "description": "Number of the airline flight to be taken. The mapping to each leg from VISA  and MCI file is present in general specification document"
          },
          "carrier": {
            "type": "string",
            "description": "Code indicating name of carrier. The mapping to each leg from VISA  and MCI file is present in general specification document"
          },
          "class": {
            "type": "string",
            "description": "Indicates service class (first class, business class, etc.). The mapping to each leg from VISA  and MCI file is present in general specification document"
          },
          "stopOver": {
            "type": "string",
            "description": "Indicates whether a stopover is allowed on this ticket. The mapping to each leg from VISA  and MCI file is present in general specification document"
          },
          "destination": {
            "type": "string",
            "description": "Indicates destination city's airport code. The mapping to each leg from VISA  and MCI file is present in general specification document"
          },
          "fareCode": {
            "type": "string",
            "description": "Fare basis code used for the trip. The mapping to each leg from VISA  and MCI file is present in general specification document"
          }
        },
        "title": "TravelDetailLeg"
      },
      "CreateAccountFutureUpdateRequestSepaMandate": {
        "type": "object",
        "properties": {
          "debtorPostalAddress": {
            "description": "Refer to AccountFutureUpdate.debtorPostalAddress",
            "allOf": [
              {
                "$ref": "#/definitions/SepaMandateMailAddress"
              }
            ]
          },
          "debtorEmail": {
            "type": "string",
            "description": "Refer to AccountFutureUpdate.debtorEmail"
          },
          "debtorPhoneNumber": {
            "type": "string",
            "description": "Refer to AccountFutureUpdate.debtorPhoneNumber"
          },
          "mandateContractId": {
            "type": "string",
            "description": "Refer to AccountFutureUpdate.mandateContractId"
          },
          "mandateNatureType": {
            "type": "string",
            "description": "Refer to AccountFutureUpdate.mandateNatureType"
          },
          "mandateSignCity": {
            "type": "string",
            "description": "Refer to AccountFutureUpdate.mandateSignCity"
          },
          "mandateSignDate": {
            "type": "string",
            "description": "Refer to AccountFutureUpdate.mandateSignDate\nThe mandate signature date has to be provided except if the SEPA mandate UMR is provided (comes from another system).",
            "format": "date-time"
          },
          "sepaMandateUmr": {
            "type": "string",
            "description": "Refer to Account.sepaMandateUmr\nThe unique reference to identify the SEPA mandate can be provided to our system if mandate is created explicitly by another system."
          }
        },
        "title": "CreateAccountFutureUpdateRequestSepaMandate"
      },
      "MailAddress": {
        "type": "object",
        "required": [
          "country"
        ],
        "properties": {
          "typeCode": {
            "type": "string",
            "description": "Deprecated field"
          },
          "line1": {
            "type": "string",
            "description": "Address line 1 (conditional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "line2": {
            "type": "string",
            "description": "Address line 2 (optional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "line3": {
            "type": "string",
            "description": "Address line 3 (optional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "line4": {
            "type": "string",
            "description": "Address line 4 (optional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "line5": {
            "type": "string",
            "description": "Address line 5 (optional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "buildingNumber": {
            "type": "string",
            "description": "Building number of the address (optional)"
          },
          "boxNumber": {
            "type": "string",
            "description": "Box number of the address (optional)"
          },
          "streetName": {
            "type": "string",
            "description": "Street name of the address (optional)"
          },
          "postCode": {
            "type": "string",
            "description": "Zip Code of the address (optional)"
          },
          "townName": {
            "type": "string",
            "description": "City corresponding to the address "
          },
          "countrySubdivision": {
            "type": "string",
            "description": "Subdivision of the country (optional)"
          },
          "country": {
            "type": "string",
            "description": "Code of the country (mandatory). Free text. The value can be subject to a validation process if a specific rule has been configured at issuer level. The value can be optional if a specific rule has been configured."
          },
          "countryName": {
            "type": "string",
            "description": "Country Name of the address. Free text"
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Courtesy title of the address. Free text"
          }
        },
        "title": "MailAddress"
      },
      "ModifyAccountRequest": {
        "type": "object",
        "x-wl-patch-request": true,
        "properties": {
          "bic": {
            "type": "string",
            "description": "Refer to Account.bic"
          },
          "paymentMode": {
            "type": "string",
            "description": "Refer to Account.paymentMode"
          },
          "iban": {
            "type": "string",
            "description": "Refer to Account.iban"
          },
          "overlimitContribution": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "accountGuarantorIdentifier": {
            "type": "object",
            "description": "Refer to Account.accountGuarantorIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "closureCalendar": {
            "type": "string",
            "description": "Refer to Account.closureCalendarReference"
          },
          "secondIban": {
            "type": "string",
            "description": "Refer to Account.secondIban"
          },
          "amountDueFixedAmount": {
            "type": "object",
            "description": "Refer to Account.amountDueFixedAmount.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "amountDuePercentage": {
            "type": "string",
            "description": "Refer to Account.amountDuePercentage"
          },
          "amountDueMinAmount": {
            "type": "object",
            "description": "Refer to Account.amountDueMinAmount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "greaterOrLesserAmountDue": {
            "type": "string",
            "description": "Refer to Account.greaterOrLesserAmountDue"
          },
          "accountHierarchySpecificFields": {
            "type": "object",
            "description": "Refer to Account.accountHierarchySpecificFields",
            "additionalProperties": {
              "type": "string"
            }
          },
          "ibanOwnerName": {
            "type": "string",
            "description": "Refer to Account.ibanOwnerName"
          },
          "spareChangeSaving": {
            "type": "boolean",
            "description": "Refer to Account.spareChangeSaving"
          },
          "sepaIndicator": {
            "type": "boolean",
            "description": "Refer to Account.sepaIndicator"
          },
          "directDebitFixedAmount": {
            "type": "object",
            "description": "Refer to Account.directDebitFixedAmount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "directDebitPercentage": {
            "type": "string",
            "description": "Refer to Account.directDebitPercentage"
          },
          "selectedModels": {
            "type": "array",
            "description": "Used to change the models of the account.",
            "items": {
              "$ref": "#/definitions/ModifyAccountRequestAccountModel"
            }
          },
          "accountMembershipNumber1": {
            "type": "string",
            "description": "Refer to Account.accountMembershipNumber1"
          },
          "accountMembershipNumber2": {
            "type": "string",
            "description": "Refer to Account.accountMembershipNumber2"
          },
          "specificFields": {
            "type": "object",
            "description": "Refer to Account.specificFields",
            "additionalProperties": {
              "type": "string"
            }
          },
          "hierarchyOutgoingCreditTransferFeature": {
            "type": "object",
            "description": "The issuer can override each different  Outgoing Credit Transfer (OCT) options if is allowed within the reimbursement model.",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyHierarchyOutgoingCreditTransferFeature"
              }
            ]
          },
          "accountOutgoingCreditTransferFeature": {
            "description": "The issuer can override each different  Outgoing Credit Transfer (OCT) options if is allowed within the reimbursement model.",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyAccountOutgoingCreditTransferFeature"
              }
            ]
          },
          "noOtbCheck": {
            "type": "boolean",
            "description": "Refer to Account.noOtbCheck"
          },
          "resetCreditLimit": {
            "type": "boolean",
            "description": "Refer to Account.resetCreditLimit"
          },
          "liabilityType": {
            "type": "string",
            "description": "Refer to Account.liabilityType"
          },
          "hierarchyDebitOrderDueDateDelay": {
            "type": "integer",
            "description": "Refer to Account.accountHierarchy.hierarchyDebitOrderDueDateDelay"
          },
          "accountDebitOrderDueDateDelay": {
            "type": "integer",
            "description": "Refer to Account.accountDebitOrderDueDateDelay"
          },
          "hierarchySelectedModels": {
            "type": "array",
            "description": "\nThe issuer can replace an account hierarchy model by another one (among those allowed for the product).\n\nE.g. OCT on demand is enabled in the current reimbursement model and is disabled in the new model.",
            "items": {
              "$ref": "#/definitions/AccountHierarchyModel"
            }
          },
          "dunningCaseStatus": {
            "type": "string",
            "description": "Status of the Dunning Case (optional, pay later):\n- ACTIVE\n- CLOSED"
          },
          "collectionCaseStatus": {
            "type": "string",
            "description": "Status of the Collection Case (optional, pay later):\n- ACTIVE\n- CLOSED"
          },
          "hierarchyOperationStatus": {
            "description": "The issuer can provide blocking/unblocking information for account hierarchy.",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyAccountHierarchyOperationStatus"
              }
            ]
          }
        },
        "title": "ModifyAccountRequest"
      },
      "ModifyAccountRequestAccountModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of an account model\nPossible values:\n•\teventFeeModel\n•\ttransactionFeeModel\n•\tmarkupFeeModel\n•\trestrictionModel\n•\tdebitInterestModel\n•\tinterestModel\n•\tdirectDebitAmountModel\n•\taccountAmountDueModel \n•\tstatementModel"
          },
          "reference": {
            "type": "string",
            "description": "Reference of the new model to be selected\nRefer to AccountModel.reference"
          },
          "originalModelReference": {
            "type": "string",
            "description": "Reference of the current model to be changed\nMust be provided for the following models. :\n•\tmarkupFeeModel\n•\ttransactionFeeModel"
          }
        },
        "title": "ModifyAccountRequest.AccountModel"
      },
      "ModifyAccountResponse": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "$ref": "#/definitions/AccountIdentifier"
          }
        },
        "title": "ModifyAccountResponse"
      },
      "ModifyAddressRequestPhoneNumber": {
        "type": "object",
        "required": [
          "localPhoneNumber"
        ],
        "properties": {
          "countryCode": {
            "type": "string",
            "description": "Country dialing code (optional). Free text. It is recommended to provide a region dialing code (e.g. +33, +49)."
          },
          "localPhoneNumber": {
            "type": "string",
            "description": "Free text (mandatory). It’s recommended to provide an international phone number in accordance with the value provided in the country code Ex : - country code = ‘+’33’ and localPhoneNumber = ‘0622334455’ - country code = empty and localPhoneNumber = ‘+33622334455’             The value can be subject to a validation process if a specific rule has been configured at issuer level."
          }
        },
        "title": "ModifyAddressRequest.PhoneNumber"
      },
      "ModifyAddressRequestMailAddress": {
        "type": "object",
        "required": [
          "country"
        ],
        "properties": {
          "typeCode": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Courtesy title of the address. Free text"
          },
          "line1": {
            "type": "string",
            "description": "Address line 1 (conditional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "line2": {
            "type": "string",
            "description": "Address line 2 (conditional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "line3": {
            "type": "string",
            "description": "Address line 3 (conditional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "line4": {
            "type": "string",
            "description": "Address line 4 (conditional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "line5": {
            "type": "string",
            "description": "Address line 5 (conditional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "buildingNumber": {
            "type": "string",
            "description": "Building number of the address (optional)"
          },
          "boxNumber": {
            "type": "string",
            "description": "Box number of the address (optional)"
          },
          "streetName": {
            "type": "string",
            "description": "Street name of the address (optional)"
          },
          "postCode": {
            "type": "string",
            "description": "zip code of the address (optional)"
          },
          "townName": {
            "type": "string",
            "description": "City corresponding to the address"
          },
          "countrySubdivision": {
            "type": "string",
            "description": "Subdivision of the country (optional)"
          },
          "country": {
            "type": "string",
            "description": "Code of the country (mandatory). Free text. The value can be subject to a validation process if a specific rule has been configured at issuer level. The value can be optional if a specific rule has been configured."
          }
        },
        "title": "ModifyAddressRequest.MailAddress"
      },
      "ModifyAddressRequest": {
        "type": "object",
        "required": [
          "addressLabel",
          "addressType"
        ],
        "properties": {
          "issuerAddressExternalReference": {
            "type": "string",
            "description": "Deprecated field - not to be used"
          },
          "addressLabel": {
            "type": "string",
            "example": "MAIN_POSTAL_ADDRESS",
            "description": "Indicate the class of the address amongst a list of possible values such as MAIN_POSTAL_ADDRESS, SECOND_POSTAL_ADDRESS, HOME_PHONE_NUMBER, PRIVATE_MOBILE_PHONE, PERSONAL_EMAIL. This list of values is shared between WL and the issuer during issuer configuration.Every label corresponds to a unique type of address. A customer (person) has at least one MAIN_POSTAL_ADDRESS (mandatory) and a company has at least one HEAD_OFFICE."
          },
          "addressType": {
            "type": "string",
            "example": "POSTAL_MAIL",
            "description": "The type of an address is POSTAL_MAIL, PHONE or E_MAIL",
            "enum": [
              "PHONE",
              "POSTAL_MAIL",
              "E_MAIL"
            ]
          },
          "postalAddress": {
            "description": "Customer Postal Address. This field is mandatory only if AddressType is POSTAL_MAIL.Depending on countries, the address format (mainly for line1, line 2, line3, line4 and line5) can have specific conditions such as length restriction. The customer should contact WL to check the address format and have more information.",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyAddressRequestMailAddress"
              }
            ]
          },
          "emailAddress": {
            "description": "Customer Email. This field is mandatory only if AddressType is E_MAIL.",
            "allOf": [
              {
            "$ref": "#/definitions/EmailAddress"
              }
            ]
          },
          "phone": {
            "description": "Customer Phone details. This field is mandatory only if AddressType is PHONE. ",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyAddressRequestPhoneNumber"
              }
            ]
          },
          "addressUsages": {
            "type": "array",
            "description": "List of the usages linked to the address if any exists",
            "items": {
              "$ref": "#/definitions/AddressUsage"
            }
          },
          "invalid": {
            "type": "boolean",
            "default": false,
            "description": "Deprecated"
          }
        },
        "title": "ModifyAddressRequest"
      },
      "ModifyAddressResponse": {
        "type": "object",
        "properties": {
          "addressIdentifier": {
            "description": "Identification of the customer address either by Issuer address external reference or by address reference",
            "allOf": [
              {
            "$ref": "#/definitions/AddressIdentifier"
          }
            ]
          }
        },
        "title": "ModifyAddressResponse"
      },
      "SepaMandateMailAddress": {
        "type": "object",
        "required": [
          "country"
        ],
        "properties": {
          "typeCode": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "line1": {
            "type": "string",
            "description": "Address line 1 (conditional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "line2": {
            "type": "string",
            "description": "Address line 2 (conditional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "line3": {
            "type": "string",
            "description": "Address line 3 (conditional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "line4": {
            "type": "string",
            "description": "Address line 4 (conditional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "line5": {
            "type": "string",
            "description": "Address line 5 (conditional). Free text. A specific issuer algorithm can be activated to e.g. build the line, apply controls (e.g. length restriction)."
          },
          "buildingNumber": {
            "type": "string",
            "description": "Building number of the address (optional)"
          },
          "boxNumber": {
            "type": "string",
            "description": "Box number of the address (optional)"
          },
          "streetName": {
            "type": "string",
            "description": "Street name of the address (optional)"
          },
          "postCode": {
            "type": "string",
            "description": "zip code of the address (optional)"
          },
          "townName": {
            "type": "string",
            "description": "City corresponding to the address"
          },
          "countrySubdivision": {
            "type": "string",
            "description": "Subdivision of the country (optional)"
          },
          "country": {
            "type": "string",
            "description": "Code of the country (mandatory). Free text. The value can be subject to a validation process if a specific rule has been configured at issuer level. The value can be optional if a specific rule has been configured."
          }
        },
        "title": "SepaMandateMailAddress"
      },
      "ModifyAuthorizationRestrictionOverrideRequest": {
        "type": "object",
        "properties": {
          "activationEndTime": {
            "type": "string",
            "format": "date-time",
            "description": "Last point in time at which the override will be considered. Has to be later than ActivationStartTime. Can be present without ActivationStartTime. If not provided the override will be taken into account forever."
          },
          "activationStartTime": {
            "type": "string",
            "format": "date-time",
            "description": "First point in time at which the override will be considered. Has to be before ActivationEndTime. Can be present without ActivationEndTime. If not provided the override will be taken into account immediately."
          },
          "conditionCheck": {
            "type": "boolean",
            "description": "Overrides the default configured for the corresponding restriction attribute. In case JSON null is provided then the default becomes effective."
          },
          "conditionParameters": {
            "type": "array",
            "description": "Overrides the default configured for the corresponding restriction attribute (see configuration entity explanations). An item must not have leading or trailing spaces. Moreover it must not contain any comma. In case JSON null is provided then the default becomes effective.",
            "items": {
              "type": "string"
            }
          },
          "priority": {
            "type": "integer",
            "description": "In case multiple overrides with overlapping activation times are existing this information is used to resolve this situation by applying the overrides one by one starting with the one with lowest priority. The priority needs to be unique accross all overrides with overlapping activation timespans, which are associated with the same restriction and the same account. That means, two overrides for the same account and same restriction can have the same priority, if they are not active at the same time. If they are active at the same time, unique priorities must be given. If the field is not set in the request, it will be set to 0"
          }
        },
        "title": "ModifyAuthorizationRestrictionOverrideRequest"
      },
      "ModifyCardContractRequest": {
        "type": "object",
        "x-wl-patch-request": true,
        "properties": {
          "artwork": {
            "type": "string",
            "description": "The issuer can provide another artwork among those allowed in the product configuration. It will be used when the card will be replaced or renewed."
          },
          "blockingRenewalReasonCode": {
            "type": "string",
            "description": "A blocking renewal reason code among those configured for the issuer must be provided if the card renewal process is blocked (NewCardRenewalAllowed is false)."
          },
          "blockingReplacementReasonCode": {
            "type": "string",
            "description": "A blocking replacement reason code among those configured for the issuer must be provided if the card replacement process is blocked (NewCardReplacementAllowed is false)."
          },
          "forcedEmbossingName": {
            "type": "string",
            "description": "The issuer can provide or modify the first line of the name embossed on the physical card. It will be used when the card will be replaced or renewed.\nThe character \"*\" is not allowed in the line 1 of the embossing name."
          },
          "forcedEmbossingName2ndLine": {
            "type": "string",
            "description": "The issuer can provide or modify the embossing name 2nd line of the card if the embossing name first line is provided and if allowed within card Technology and Application model.\nIt will be used when the card will be replaced or renewed.\nThe character \"*\" is not allowed in the line 2 of the embossing name.\nTo reset the embossing name 2nd line of the card, the value \"\" or null must be provided."
          },
          "schemeDeclarationOptOut": {
            "type": "boolean",
            "description": "The issuer can update this indicator used to declare the card event to the scheme (ABU/VAU report).\nThe default value depends on the product configuration."
          },
          "newCardRenewalAllowed": {
            "type": "boolean",
            "description": "The card renewal process can be blocked (blocking renewal reason code must be provided) or not."
          },
          "newCardReplacementAllowed": {
            "type": "boolean",
            "description": "The card replacement process can be blocked (blocking replacement reason code must be provided) or not. "
          },
          "blockingPinReorderReasonCode": {
            "type": "string",
            "description": "A blocking pin reorder reason code among those configured for the issuer must be provided if the pin reorder process is blocked (newPinReorderAllowed is false)."
          },
          "newPinReorderAllowed": {
            "type": "boolean",
            "description": "The pin reorder process can be blocked (blocking pin reorder reason code must be provided) or not."
          },
          "blockingPinReminderReasonCode": {
            "type": "string",
            "description": "A blocking pin reminder reason code among those configured for the issuer must be provided if the pin reminder process is blocked (newPinReminderAllowed is false)."
          },
          "newPinReminderAllowed": {
            "type": "boolean",
            "description": "The pin reminder process can be blocked (blocking pin reminder reason code must be provided) or not."
          },
          "issuerBranchCode": {
            "type": "string",
            "description": "Refer to CardContract.issuerBranchCode"
          },
          "vipFlag": {
            "type": "boolean",
            "default": false,
            "description": "Indicates if the holder of the priority pass is a VIP or not. This information is used to determine the priority pass fees to apply.\nIf true, VIP fees are applied. \nIf false, standard fees are applied."
          },
          "specificFields": {
            "type": "object",
            "description": "Refer to CardContract.specificFields",
            "additionalProperties": {
              "type": "string"
            }
          },
          "selectedModels": {
            "type": "array",
            "description": "The issuer can replace one or several models linked to the card contract by another one allowed in the product configuration.",
            "items": {
              "$ref": "#/definitions/CardContractModel"
            }
          },
          "cardClass": {
            "type": "string",
            "description": "The issuer can provide another card class among those allowed in the product configuration. \nRefer to CardContract.cardClass"
          },
          "photoReference": {
            "type": "string",
            "description": "A new photo reference can be provided (used for next cards in case of renewal, replacement)."
          },
          "pictureReference": {
            "type": "string",
            "description": "A new picture reference can be provided (used for next cards in case of renewal, replacement)."
          },
          "logoReference": {
            "type": "string",
            "description": "A new logo reference can be provided for corporate card only (used for next cards in case of renewal, replacement)."
          },
          "deviceTokensNumber": {
            "type": "integer",
            "description": "The issuer can provide the number of device tokens on the card attached to the card contract"
          },
          "merchantTokensNumber": {
            "type": "integer",
            "description": "The issuer can provide the number of merchant tokens on the card attached to the card contract"
          },
          "authorizationDataValidation": {
            "description": "The issuer can update cardholder data used by the Front Office for verification (AVS/ANI).",
            "allOf": [
              {
                "$ref": "#/definitions/AuthorizationDataValidation"
              }
            ]
          }
        },
        "title": "ModifyCardContractRequest"
      },
      "ModifyCardContractResponse": {
        "type": "object",
        "properties": {
          "cardContractIdentifier": {
            "description": "Refer to CardContract.cardContractIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          }
        },
        "title": "ModifyCardContractResponse"
      },
      "ModifyContractRequest": {
        "type": "object",
        "x-wl-patch-request": true,
        "properties": {
          "advertisementFlags": {
            "description": "Advertisement channels can be updated.",
            "allOf": [
              {
                "$ref": "#/definitions/AdvertisementFlags"
              }
            ]
          },
          "issuerBranchCode": {
            "type": "string",
            "description": "Issuer branch code to be modified"
          },
          "dataAnalysisFlags": {
            "description": "Data analysis flags to update",
            "allOf": [
              {
                "$ref": "#/definitions/DataAnalysisFlags"
              }
            ]
          },
          "deliveryChannel": {
            "description": "Specify the channel for letter delivery to update",
            "allOf": [
              {
                "$ref": "#/definitions/DeliveryChannel"
              }
            ]
          },
          "feeReimbursementAtCardContractClosing": {
            "type": "boolean",
            "description": "Parameter used to specify if the related membership/account setup fees must be partially reimbursed in case of closing contract or suspension."
          },
          "numberOfFreeCardsMembershipFee": {
            "type": "integer",
            "format": "int32",
            "description": "The issuer can provide or modify the number of cards for which membership fee is not generated (free cards).\nIf not provided, the default value will be used if defined at product level."
          },
          "numberOfFreeCardsAccountSetupFee": {
            "type": "integer",
            "format": "int32",
            "description": "The issuer can provide or modify the number of cards for which account setup fee is not generated  (free cards).\nIf not provided, the default value will be used if defined at product level."
          },
          "numberOfFreeCardsPrimaryCardImpacted": {
            "type": "boolean",
            "default": false,
            "description": "The issuer can indicate if the primary card is always the first card to be considered as free and then the additional cards if any will be considered  (true) or if only additional cards can be free (false)\n\nE.g. Number of cards for which membership fee is not generated = 2\nIf the flag is True, the Primary card and only 1 additional card have no membership fee.\nIf the flag is False, membership fee is generated for the primary card and only 2 additional cards have no membership fee. \n"
          },
          "specificFields": {
            "type": "object",
            "description": "Refer to Contract.specificFields",
            "additionalProperties": {
              "type": "string"
            }
          },
          "waiveFee": {
            "type": "boolean",
            "description": "whether contract fees (membership and account setup) are both waived during contract fee calculation (at contract creation, anniversary date, etc)"
          },
          "membershipFeeAnniversaryDate": {
            "type": "string",
            "format": "date-time",
            "description": "Anniversary date of the membership fee can be changed when the fee frequency is Yearly"
          }
        },
        "title": "ModifyContractRequest"
      },
      "ModifyContractResponse": {
        "type": "object",
        "required": [
          "contractIdentifier"
        ],
        "properties": {
          "contractIdentifier": {
            "$ref": "#/definitions/ContractIdentifier"
          }
        },
        "title": "ModifyContractResponse"
      },
      "ModifyContractCustomersAddressesRequest": {
        "type": "object",
        "required": [
          "addresses"
        ],
        "properties": {
          "addresses": {
            "type": "array",
            "description": "Each provided address must have\n- an addressLabel among the ones configured such as MAIN_POSTAL_ADDRESS\n- an address type to indicate whether it a postal, an e-mail or a phone number\n- the address itself depending on its type: MailAddress, EmailAddress or PhoneNumber\nEach provided address can have\n- none, 1,... N address usages - such address usage can be used to retrieve the address related to a business process  (e.g. CARD_DELIVERY used to identify the address to be used to send the card to the cardholder). If there is no address usage the Main postal address is used\n- startDate: this is the date when the provided address becomes valid (this date is always greater than the current date). If not provided this is by default the current date.\nAs a result, each contract member is updated with provided addresses.",
            "items": {
              "$ref": "#/definitions/ModifyContractCustomersAddressesRequestAddress"
            }
          }
        },
        "title": "ModifyContractCustomersAddressesRequest"
      },
      "ModifyContractCustomersAddressesRequestAddress": {
        "type": "object",
        "required": [
          "addressLabel",
          "addressType"
        ],
        "properties": {
          "addressLabel": {
            "type": "string",
            "example": "MAIN_POSTAL_ADDRESS",
            "description": "Refer to Address.addressLabel"
          },
          "addressType": {
            "type": "string",
            "example": "POSTAL_MAIL",
            "description": "Refer to Address.addressType"
          },
          "postalAddress": {
            "$ref": "#/definitions/ModifyAddressRequestMailAddress"
          },
          "emailAddress": {
            "$ref": "#/definitions/EmailAddress"
          },
          "phone": {
            "$ref": "#/definitions/ModifyAddressRequestPhoneNumber"
          },
          "addressUsages": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AddressUsage"
            }
          },
          "startDate": {
            "type": "string",
            "description": "If the date is not provided, the current date and time of the user’s request is used.\nIf the provided date corresponds to the current date, the provided time is ignored and replaced by the current time of the system.\nIf the provided date is in the future (at least current date +1), provided date and time are used only if the LABEL of the address is already existing for the customer. In case the time is not provided, the time is set up to the start of the day (e.g. ‘T00:00:00’)\nIn all cases, if the address is created for the first time for a given LABEL, both date and time of the system are used and the address is immediately active. \nFor generic definition, refer to Address.startDate.",
            "format": "date-time"
          },
          "invalid": {
            "type": "boolean",
            "default": false,
            "description": "The issuer can:\n- either invalidate the address of all members of the contract by setting this flag to True and providing only the addressLabel and the addressType (limited to address type as postalAddress in this release)\n- or validate the address of all members of the contract by setting this flag to False and providing the addressLabel, the addressType and the valid Address (limited to address type as postalAddress in this release)"
          }
        },
        "title": "ModifyContractCustomersAddressesRequest.Address"
      },
      "ModifyContractCustomersAddressesResponse": {
        "type": "object",
        "required": [
          "contractIdentifier",
          "customers"
        ],
        "properties": {
          "contractIdentifier": {
            "$ref": "#/definitions/ContractIdentifier"
          },
          "customers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ModifyContractCustomersAddressesResponseCustomer"
            }
          }
        },
        "title": "ModifyContractCustomersAddressesResponse"
      },
      "ModifyContractCustomersAddressesResponseAddress": {
        "type": "object",
        "properties": {
          "addressIdentifier": {
            "$ref": "#/definitions/AddressIdentifier"
          },
          "addressLabel": {
            "type": "string",
            "description": "Refer to Address.addressLabel"
          },
          "addressType": {
            "type": "string",
            "description": "Refer to Address.addressType"
          },
          "invalid": {
            "type": "boolean",
            "description": "Indicates if the address is invalid or not (limited to address type as postalAddress in this release)"
          }
        },
        "title": "ModifyContractCustomersAddressesResponse.Address"
      },
      "ModifyContractCustomersAddressesResponseCustomer": {
        "type": "object",
        "properties": {
          "customerIdentifier": {
            "$ref": "#/definitions/CustomerIdentifier"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ModifyContractCustomersAddressesResponseAddress"
            }
          }
        },
        "title": "ModifyContractCustomersAddressesResponse.Customer"
      },
      "ModifyContractFeeRequest": {
        "type": "object",
        "x-wl-patch-request": true,
        "required": [
          "selectedModels"
        ],
        "properties": {
          "selectedModels": {
            "type": "array",
            "description": "Fee Model used for the contract (mandatory, Account setup fee and/or Membership fee models).",
            "items": {
              "$ref": "#/definitions/ContractModel"
            }
          }
        },
        "title": "ModifyContractFeeRequest"
      },
      "ModifyContractFeeResponse": {
        "type": "object",
        "required": [
          "accountIdentifier"
        ],
        "properties": {
          "accountIdentifier": {
            "description": "Contract fees related account identifier",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          }
        },
        "title": "ModifyContractFeeResponse"
      },
      "ModifyCreditLimitRequest": {
        "type": "object",
        "required": [
          "creditLimitAmount"
        ],
        "properties": {
          "creditLimitAmount": {
            "description": "Permanent credit limit amount allowed by the issuer must be provided",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          }
        },
        "title": "ModifyCreditLimitRequest"
      },
      "ModifyCreditLimitResponse": {
        "type": "object",
        "required": [
          "creditLimitAmount"
        ],
        "properties": {
          "creditLimitAmount": {
            "description": "Permanent credit limit amount allowed by the issuer",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          }
        },
        "title": "ModifyCreditLimitResponse"
      },
      "ModifyCustomerRequest": {
        "x-wl-patch-request": true,
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "DEPRECATED",
            "default": true
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Refer to Customer.courtesyTitle "
          },
          "lastName": {
            "type": "string",
            "description": "Refer to Customer.lastName. Only mandatory when using PUT method"
          },
          "firstName": {
            "type": "string",
            "description": "Refer to Customer.firstName. Only mandatory when using PUT method"
          },
          "onlineRiskCategory": {
            "type": "string",
            "example": "Standard",
            "description": "Only when using PUT method : If this field is not provided and a default value is configured, the default value will be used. Otherwise, the issuer must provide an online risk category among those allowed"
          },
          "offlineRiskCategory": {
            "type": "string",
            "example": "Standard",
            "description": "Only when using PUT method : If this field is not provided and a default value is configured, the default value will be used. Otherwise, the issuer must provide an offline risk category among those allowed."
          },
          "commercialStatus": {
            "type": "string",
            "example": "Normal",
            "description": "Only when using PUT method : If this field is not provided and a default value is configured, the default value will be used. Otherwise, the issuer must provide a commercial status among those allowed."
          },
          "secondFirstName": {
            "type": "string",
            "description": "Refer to Customer.secondFirstName"
          },
          "maidenName": {
            "type": "string",
            "description": "Refer to Customer.maidenName"
          },
          "correspondenceName":{
              "type": "string",
              "description": "Refer to Customer.correspondenceName"
          },
          "sex": {
            "type": "string",
            "description": "Refer to Customer.sex"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to Customer.birthDate "
          },
          "birthPlace": {
            "type": "string",
            "description": "Refer to Customer.birthPlace "
          },
          "nationality": {
            "type": "string",
            "description": "Refer to Customer.nationality"
          },
          "profession": {
            "type": "string",
            "description": "Refer to Customer.profession "
          },
          "employerName": {
            "type": "string",
            "description": "Refer to Customer.employerName"
          },
          "employerAddress": {
            "type": "string",
            "description": "Refer to Customer.employerAddress"
          },
          "monthlySalary": {
            "type": "string",
            "description": "Refer to Customer.monthlySalary "
          },
          "maritalStatus": {
            "type": "string",
            "description": "Refer to Customer.maritalStatus"
          },
          "preferredCorrespondenceLanguage": {
            "type": "string",
            "description": "Refer to Customer.preferredCorrespondenceLanguage"
          },
          "picture": {
            "type": "string",
            "description": "Refer to Customer.picture "
          },
          "url1": {
            "type": "string",
            "description": "Refer to Customer.url1"
          },
          "url2": {
            "type": "string",
            "description": "Refer to Customer.url2"
          },
          "secretQuestion": {
            "type": "string",
            "description": "Refer to Customer.secretQuestion"
          },
          "secretAnswer": {
            "type": "string",
            "description": "Refer to Customer.secretAnswer"
          },
          "vatNumber": {
            "type": "string",
            "description": "Refer to Customer.vatNumber"
          },
          "vatCountry": {
            "type": "string",
            "description": "Refer to Customer.vatCountry"
          },
          "customerClass": {
            "type": "string",
            "description": "Refer to Customer.customerClass"
          },
          "employee": {
            "type": "boolean",
            "description": "Refer to Customer.employee "
          },
          "partnerExternalReference": {
            "type": "string",
            "description": "Refer to Customer.partnerExternalReference"
          },
          "doNotContact": {
            "type": "boolean",
            "description": "Refer to Customer.doNotContact"
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can update the list of external data related to the cardHolder during the card replacement.\nA new data can be added or an existing data can be updated (label1 = new value) or removed ( (label1 = null).\nAny existing data that is not present in this list is not updated in the card contract.\nRefer to Customer.specificFields",
            "additionalProperties": {
              "type": "string"
            }
          },
          "vulnerabilities": {
            "description": "List of vulnerabilities applicable to the customer.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Vulnerability"
            }
          },
          "vulnerabilityIndicator": {
            "type": "boolean",
            "description": "indicates if the client is vulnerable"
          },
          "vulnerabilityNote": {
            "type": "string",
            "description": "note about the client's vulnerability (free text)"
          },
          "contacts": {
            "type": "array",
            "description": "List of contacts linked to the customer",
            "items": {
              "$ref": "#/definitions/ModifyCustomerRequestContact"
            }
          }
        },
        "title": "ModifyCustomerRequest"
      },
      "ModifyCustomerRequestContact": {
        "x-wl-patch-request": true,
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Refer to Contact.lastName"
          },
          "firstName": {
            "type": "string",
            "description": "Refer to Contact.firstName "
          },
          "description": {
            "type": "string",
            "description": "Refer to Contact.description "
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Refer to Customer.courtesyTitle "
          },
          "sex": {
            "type": "string",
            "description": "Refer to Contact.sex"
          },
          "type": {
            "type": "string",
            "description": "Refer to Contact.type"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to Contact.birthDate "
          },
          "postalAddress" : {
            "description": "The postal adress of the contact",
            "allOf": [
                {
                "$ref": "#/definitions/ModifyAddressRequestMailAddress"
                }
             ]
          }
        },
        "title": "ModifyCustomerRequestContact"
      },
      "ModifyCompanyRequestContact": {
        "x-wl-patch-request": true,
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Refer to Contact.lastName"
          },
          "firstName": {
            "type": "string",
            "description": "Refer to Contact.firstName "
          },
          "description": {
            "type": "string",
            "description": "Refer to Contact.description "
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Refer to Customer.courtesyTitle "
          },
          "sex": {
            "type": "string",
            "description": "Refer to Contact.sex"
          },
          "departmentName": {
            "type": "string",
            "description": "Refer to Contact.departmentName"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to Contact.birthDate "
          },
          "postalAddress" : {
            "description": "The postal adress of the contact",
            "allOf": [
                {
                "$ref": "#/definitions/ModifyAddressRequestMailAddress"
                }
             ]
          }
        },
        "title": "ModifyCompanyRequestContact"
      },
      "CloseCorporateContractRequest": {
        "type": "object",
        "required": [
          "closureDelayType",
          "closingReason"
        ],
        "properties": {
          "closingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Closing Date to be provided when closure delay type = SCHEDULED. In this case, the closing date must be greater than the current date."
          },
          "closingReason": {
            "type": "string",
            "description": "Refer to CorporateContract.closingReason"
          },
          "closingComment": {
            "type": "string",
            "description": "Refer to CorporateContract.closingComment"
          },
          "closureDelayType": {
            "type": "string",
            "description": "Type of the closure delay\nPossibles values :\n- IMMEDIATE for an immediate contract closing\n- SCHEDULED for a contract closing at a provided date"
          },
          "feeReimbursementAtCardContractClosing": {
            "type": "boolean",
            "description": "Indicates if the related membership/account setup fees must be partially reimbursed.\nIf not provided, the default value at MembershipFeeModel and AccountSetupFeeModel levels will be applied."
          }
        },
        "title": "CloseContractRequest"
      },
      "ModifyCorporateContractEntityRequest": {
        "x-wl-patch-request": true,
        "type": "object",
        "properties": {
          "deliveryChannel": {
            "description": "Specify the channel for letter delivery to be updated for the account of an entity of the company organization.\nCurrently, only the values WEB, LETTER or LETTER_AND_WEB can be used.",
            "allOf": [
              {
                "$ref": "#/definitions/DeliveryChannel"
              }
            ]
          },
          "advertisementFlags": {
            "description": "Advertisement channels can be updated for the account of an entity of the company organization.",
            "allOf": [
              {
                "$ref": "#/definitions/AdvertisementFlags"
              }
            ]
          }
        },
        "title": "ModifyCorporateContractEntityRequest"
      },
      "AddCorporateContractEntityRequest": {
        "type": "object",
        "required": [
          "addCorporateContractEntity"
        ],
        "properties": {
          "customers": {
            "description": "The issuer has to provide all new customers (as person) which don't already exist in our system in a dedicated list (customers).\nFor each new customer, the issuer :\n- can provide an unique external reference: whether this external reference is already assigned to an existing customer for this issuer in our system then the contract creation request is denied\n- must provide mandatory fields and a correlation id that can be used in the contract part to assign the customer, not yet created in our system, as contract owner, root or card account owner, cardholder, etc",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestCustomer"
            }
          },
          "companies": {
            "description": "The issuer has to provide companies which don't already exist in our system in a dedicated list (companies).\nFor each new company, the issuer :\n- can provide an unique external reference: whether this external reference is already assigned to an existing company for this issuer in our system then the contract creation request is denied\n- must provide mandatory fields and a correlation id that can be used in the contract part to assign the company, not yet created in our system, as contract owner, root or card account owner etc",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestCompany"
            }
          },
          "addCorporateContractEntity": {
            "description": "It is possible to add an entity (e.g. country, division, department) into the company organization of an existing corporate contract (configured in a product extension).",
            "allOf": [
              {
                "$ref": "#/definitions/CreateCorporateContractRequestAddCorporateContractEntity"
              }
            ]
          }
        },
        "title": "AddCorporateContractEntityRequest"
      },
      "AddCorporateEmployeeCardsAndAccountsRequest": {
        "type": "object",
        "required": [
          "addCorporateEmployeeCardsAndAccounts"
        ],
        "properties": {
          "customers": {
            "description": "The issuer has to provide customers (here usually 1 employee only) which don't already exist in our system in a dedicated list (customers).\nFor each new customer, the issuer :\n- can provide an unique external reference: whether this external reference is already assigned to an existing customer for this issuer in our system then the cards and accounts creation request is denied\n- must provide mandatory fields and a correlation id that can be used in the addCorporateEmployeeCardsAndAccounts part to assign the customer, not yet created in our system, as card account owner, cardholder, etc",
            "type": "array",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestCustomer"
            }
          },
          "addCorporateEmployeeCardsAndAccounts": {
            "description": "It is possible to add one or several employees with cards and accounts (configured in a product extension).\nUsually this API is used to add one employee only with its new card and card account.",
            "allOf": [
              {
                "$ref": "#/definitions/CreateCorporateContractRequestAddCorporateEmployeeCardsAndAccounts"
              }
            ]
          }
        },
        "title": "AddCorporateEmployeeCardsAndAccountsRequest"
      },
      "AddCorporateVcaServiceCardsAndAccountsRequest": {
        "type": "object",
        "required": [
          "addCorporateVcaServiceCardsAndAccounts"
        ],
        "properties": {
          "customers": {
            "type": "array",
            "description": "The issuer has to provide customers (here usually 1 employee only) which don't already exist in our system in a dedicated list (customers)..\nFor each new customer, the issuer :\n- can provide an unique external reference: whether this external reference is already assigned to an existing customer for this issuer in our system then the cards and accounts creation request is denied\n- must provide mandatory fields and a correlation id that can be used in the addCorporateVcaServiceCardsAndAccounts part to assign the customer, not yet created in our system, as card account owner, cardholder, etc",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestCustomer"
            }
          },
          "addCorporateVcaServiceCardsAndAccounts": {
            "description": "It is possible to add one or several VCA Service cards and accounts (configured in a product extension).",
            "allOf": [
              {
            "$ref": "#/definitions/CreateCorporateContractRequestAddCorporateVcaServiceCardsAndAccounts"
          }
            ]
          }
        },
        "title": "AddCorporateVcaServiceCardsAndAccountsRequest"
      },
      "CreateCorporateContractRequest": {
        "type": "object",
        "required": [
          "corporateContract"
        ],
        "properties": {
          "customers": {
            "type": "array",
            "description": "The issuer has to provide all new customers (as person) which don't already exist in our system in a dedicated list (customers).\nFor each new customer, the issuer :\n- can provide an unique external reference: whether this external reference is already assigned to an existing customer for this issuer in our system then the contract creation request is denied\n- must provide mandatory fields and a correlation id that can be used in the contract part to assign the customer, not yet created in our system, as contract owner, root or card account owner, cardholder, etc",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestCustomer"
            }
          },
          "companies": {
            "type": "array",
            "description": "The issuer has to provide companies which don't already exist in our system in a dedicated list (companies).\nFor each new company, the issuer :\n- can provide an unique external reference: whether this external reference is already assigned to an existing company for this issuer in our system then the contract creation request is denied\n- must provide mandatory fields and a correlation id that can be used in the contract part to assign the company, not yet created in our system, as contract owner, root or card account owner etc",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestCompany"
            }
          },
          "corporateContract": {
            "$ref": "#/definitions/CreateCorporateContractRequestContract"
          },
          "addCorporateContractEntities": {
            "type": "array",
            "description": "With the corporate contract creation request it is possible to add an entity (e.g. country, division, department) into the company organization (configured in a product extension).",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestAddCorporateContractEntity"
            }
          },
          "addCorporateEmployeeCardsAndAccounts": {
            "type": "array",
            "description": "With the corporate contract creation request it is possible to add one or several employees with cards and accounts (configured in a product extension).",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestAddCorporateEmployeeCardsAndAccounts"
            }
          },
          "addCorporateVcaServiceCardsAndAccounts": {
            "type": "array",
            "description": "With the corporate contract creation request it is possible to add one or several virtual cards and accounts (configured in a product extension).",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestAddCorporateVcaServiceCardsAndAccounts"
            }
          }
        },
        "title": "CreateCorporateContractRequest"
      },
      "CreateCorporateContractRequestContract": {
        "type": "object",
        "description": "The issuer must provide data related to the contract.",
        "required": [
          "issuerProductExternalReference",
          "corporateContractRootEntity",
          "accountHierarchy"
        ],
        "properties": {
          "issuerProductExternalReference": {
            "type": "string",
            "description": "The issuer must provide the external reference of the product to be used to create the corporate contract."
          },
          "issuerContractExternalReference": {
            "type": "string",
            "description": "The issuer can provide an external reference (e.g. used as contract identifier in Issuer's system). This latter can be used by the issuer to identify, retrieve the contract later, etc.\nIf not provided by the issuer, it is filled by default with the contract reference generated by our system."
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide Specific Fields for the new contract.\nIt is a list of values (label:value|) related to the card (pass-thru data).",
            "additionalProperties": {
              "type": "string"
            }
          },
          "contractOwnerRequestCorrelationId": {
            "type": "string",
            "description": "If the contract owner does not exist in our system as customer or company, the issuer must provide the correlation id of the new customer related to it (defined in the data block CreateCorporateContractRequest.Customer or in CreateCorporateContractRequest.Customer).\nIt can be a customer or a company."
          },
          "contractOwner": {
            "description": "If the contract owner already exists in our system as customer or company, the issuer must provide either the customerReference or the issuerCustomerExternalReference related to it.\nIf the contract owner does not exist in our system then the contractOwnerRequestCorrelationId has to be filled.\nIt can be a customer or a company.",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "statementDuplicatedForCompany": {
            "type": "boolean",
            "description": "The issuer can indicate if the company receives a duplicate for statement generated by other paying accounts in the corporate contract (true). By default, the value is false.\nE.g. A card account is paid by the cardholder itself, the company can receive a duplicate of its statement.",
            "default": false
          },
          "hierarchyDefaultResetCreditLimit": {
            "type": "boolean",
            "description": "The issuer can indicate, for a Corporate contract only, the default value at contract level to be applied for each account if the Open-to-buy should be reset to its maximum Credit limit at Authorization system side as soon as an account cycle is closed. Of course the amount due (minimum payment amount) is considered as to be repaid by the customer by our solution."
          },
          "logoReference": {
            "type": "string",
            "description": "The issuer can provide the default logo reference to be used for each card issued from this corporate contract."
          },
          "dispatchCode": {
            "type": "string",
            "description": "The issuer can provide the default dispatch code to be used by the embosser to send cards to the right addressee."
          },
          "postingAccountForMembershipFee": {
            "type": "string",
            "description": "The issuer can indicate if the membership fees have to be posted to employee card accounts, intermediate entity account or to the root (usually paid by the company) as default value for the corporate contract.\nPossible values:\n- ROOT_ACCOUNT \n- CARD_ACCOUNT \n- ENTITY_ACCOUNT"
          },
          "postingAccountForAccountSetupFee": {
            "type": "string",
            "description": "The issuer can indicate if the account setup fees have to be posted to employee card account, intermediate entity account or to the root (usually paid by the company) as default value for the corporate contract. \nPossible values:\n- ROOT_ACCOUNT \n- CARD_ACCOUNT \n- ENTITY_ACCOUNT"
          },
          "corporateContractLevels": {
            "type": "array",
            "description": "The issuer can provide the list of all levels of a company organization belonging to the corporate contract.",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestCorporateContractLevel"
            }
          },
          "corporateContractRootEntity": {
            "$ref": "#/definitions/CreateCorporateContractRequestCorporateContractRootEntity"
          },
          "accountHierarchy": {
            "$ref": "#/definitions/CreateCorporateContractRequestAccountHierarchy"
          },
          "postingEntityLevelForMembershipFee": {
            "type": "integer",
            "description": "The Issuer must provide the corresponding entity level for Membership fee posting, when postingAccountForMembershipFee = ENTITY_ACCOUNT"
          },
          "postingEntityLevelForAccountSetupFee": {
            "type": "integer",
            "description": "The Issuer must provide the corresponding entity level for Account Setup fee posting, when postingAccountForAccountSetupFee = ENTITY_ACCOUNT"
          }
        },
        "title": "CreateCorporateContractRequest.Contract"
      },
      "CreateCorporateContractRequestCorporateContractLevel": {
        "type": "object",
        "required": [
          "level",
          "levelDescription"
        ],
        "properties": {
          "level": {
            "type": "integer",
            "description": "The issuer must provide the level number in the company organization (e.g. 1 corresponding to the company, 2 corresponding to country)",
            "example" :  1
          },
          "levelDescription": {
            "type": "string",
            "description": "The issuer must provide the description of the level in the company organization (e.g. Company for level 1, Country for level 2)"
          }
        },
        "title": "CreateCorporateContractRequest.CorporateContractLevel"
      },
      "CreateCorporateContractRequestCorporateContractRootEntity": {
        "type": "object",
        "description": "The issuer must define the first level of the company organization (corresponding to the root entity).",
        "required": [
          "companyEntityExternalReference",
          "rootAccount"
        ],
        "properties": {
          "companyEntityExternalReference": {
            "type": "string",
            "description": "The issuer must provide the external reference of the entity within the company organization (e.g. a code representing the country: FRAN for France) "
          },
          "rootAccount": {
            "description": "The issuer must provide data related to the root account.",
            "allOf": [
              {
                "$ref": "#/definitions/CreateCorporateContractRequestAccount"
              }
            ]
          },
          "deliveryChannel": {
            "description": "The issuer can specify the channel for letter delivery used for the root entity (corresponding to the first level of the company organization).\nCurrently, only the values WEB, LETTER or LETTER_AND_WEB can be used.",
            "allOf": [
              {
                "$ref": "#/definitions/DeliveryChannel"
              }
            ]
          },
          "advertisementFlags": {
            "description": "The issuer can specify which advertisement flags are enabled (Email, Letter, Phone, etc.) used for the root entity (corresponding to the first level of the company organization).",
            "allOf": [
              {
                "$ref": "#/definitions/AdvertisementFlags"
              }
            ]
          }
        },
        "title": "CreateCorporateContractRequest.CorporateContractRootEntity"
      },
      "CreateCorporateContractRequestAccount": {
        "type": "object",
        "properties": {
          "issuerAccountExternalReference": {
            "type": "string",
            "description": "The issuer can provide the external reference for the new account (maximum length of 255 characters).This external reference must be unique per issuer.\nIf not provided, the external reference is calculated by our system if a generation algorithm is configured at account hierarchy level (ExternalReferenceGeneratorAlgorithm), else the issuer account external reference will be empty."
          },
          "accountTemplateReference": {
            "type": "string",
            "description": "The issuer must provide the account template reference to identify the account to be created (optional if only one account has to be created in the product extension)."
          },
          "accountOwnerRequestCorrelationId": {
            "type": "string",
            "description": "Not to be provided if the account owner is the same as the contract owner.\nOtherwise the issuer can provide the correlation id of the new customer or company which represent the account owner (defined in the data block CreateCorporateContractRequest.Customer or in CreateCorporateContractRequest.Company)."
          },
          "accountOwnerIdentifier": {
            "description": "Not to be provided if the account owner is the same as the contract owner.\nOtherwise if the account owner already exists in our system then the issuer has to provide the customer reference or the issuer external customer reference of the existing customer or company. If the account owner does not exist in our system then accountOwnerRequestCorrelationId has to be filled.",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "accountGuarantorRequestCorrelationId": {
            "type": "string",
            "description": "The issuer can provide the correlation id of the new customer or company which represent the account guarantor (defined in the data block CreateCorporateContractRequest.Customer or in CreateCorporateContractRequest.Company)."
          },
          "accountGuarantorIdentifier": {
            "description": "If the account guarantor already exists in our system then the issuer can provide the customer reference or the issuer external customer reference of the existing customer or company.",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "selectedModels": {
            "type": "array",
            "description": "The issuer can provide specific account model reference, otherwise the default one from the account template is used.\n\nList of possible models:\n•\trestrictionModel\n•\tstatementModel\n•\tdebitInterestModel\n•\tcreditInterestModel\n•\ttransactionFeeModel\n•\tmarkupFeeModel                ",
            "items": {
              "$ref": "#/definitions/AccountModel"
            }
          },
          "closureCalendarReference": {
            "type": "string",
            "description": "The issuer can provide a specific closure calendar reference, otherwise the default one from the account template is used."
          },
          "name": {
            "type": "string",
            "description": "The issuer can provide the name of the account.\nRefer to Account.name"
          },
          "iban": {
            "type": "string",
            "description": "Refer to Account.iban\nHas to be provided if the IBAN is configured as mandatory in product configuration.\nIf the IBAN is mandatory and the IBAN is not provided, an error occurs\nIf the IBAN is mandatory and the IBAN is provided, the IBAN checksum is performed. If the check is ko (=invalid IBAN), an errors occurs.\nIf  the IBAN is not mandatory and the IBAN is provided during the account creation, the IBAN is stored as received without any check."
          },
          "ibanOwnerName": {
            "type": "string",
            "description": "Refer to Account.ibanOwnerName\nIf Issuer expects to produce direct debits and outgoing credit transfers, it is recommended the Iban owner name to be always provided, except if the payment processing channel is SEPA and SEPA mandate UMR is provided (comes from another system)."
          },
          "secondIban": {
            "type": "string",
            "description": "Refer to Account.secondIban"
          },
          "bic": {
            "type": "string",
            "description": "Refer to Account.bic"
          },
          "sepaIndicator": {
            "type": "boolean",
            "description": "The issuer can indicate if the payment processing channel is SEPA or not (also valid for outgoing credit transfer processing channel).\nIf payment processing channel is SEPA (SEPA indicator is true) and payment mode is AUTOPAYMENT (Direct debit without confirmation), then SEPA mandate data must be provided.\nSEPA indicator default value is false."
          },
          "sepaMandate": {
            "$ref": "#/definitions/CreateCorporateContractRequestSepaMandate"
          },
          "creditLimitAmount": {
            "description": "The issuer can provide a specific credit limit amount (within the minimum/maximum range defined in the restriction model for the credit limit) to replace the default permanent credit limit value.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "accountMembershipNumber1": {
            "type": "string",
            "description": "The issuer can provide the membership number 1 of the account."
          },
          "accountMembershipNumber2": {
            "type": "string",
            "description": "The issuer can provide the membership number 2 of the account."
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide the specific fields for the new account.\nIt is a list of values (label:value|) related to the account (pass-thru data).",
            "additionalProperties": {
              "type": "string"
            }
          },
          "payingAccountType": {
            "type": "string",
            "description": "The paying account type can be provided by the issuer or if not provided it is retrieved from the account template.\nIn case it is mandatory in the issuer configuration then the provided value should be the same than the one provided for the account hierarchy.\n\nPossible values:\n- ROOT_PAYS\n- ITSELF_PAYS\n\nSee examples described for CreateCorporateContractRequest.AccountHierarchy.hierarchyPayingAccountType\n\nIn case no payingAccountType is provided on the account hierarchy, then the possible values are:\n- ROOT_PAYS\n- ITSELF_PAYS\n- ENTITY_PAYS"
          },
          "paymentMode": {
            "type": "string",
            "description": "The payment mode can be provided by the issuer or if not provided it is retrieved from the account template.\n\nPossible values:\n- CARDHOLDER_DETERMINED : customer repays its debt by itself (fund transfer to the issuer)\n- AUTOPAYMENT : customer repays its debt via Direct Debit (issued by issuer and paid automatically after X days)"
          },
          "noOtbCheck": {
            "type": "boolean",
            "description": "The issuer can indicate if the Open-to-buy (OTB) must be checked or not when an authorization (authorization system) or a transaction (clearing) is processed.\nThis can be used when there is no need to check the OTB of an account (e.g. for certain levels of a corporate organization)."
          },
          "resetCreditLimit": {
            "type": "boolean",
            "description": "The issuer can indicate if the Open-to-buy should be reset to its maximum Credit limit at Authorization system side as soon as a account cycle is closed. Of course the amount due (minimum payment amount) is considered as to be repaid by the customer by our solution.\nThe default behavior is retrieved from the contract (Corporate only)"
          },
          "liabilityType": {
            "type": "string",
            "description": "The issuer can provide the liability type of the new account (free text). This liability type can be different for each issuer and is stored in our solution for information purpose (e.g. can be used for reporting), not used by any business process."
          },
          "accountDebitOrderDueDateDelay": {
            "type": "integer",
            "description": "The issuer can provide the debit order due date delay for the new account (number of days). This delay is used to calculate the Direct Debit payment date for each cycle of repayment."
          },
          "requestCorrelationId": {
            "type": "string",
            "description": "Unique alias provided by the issuer for each new account (Conditional).\nDuring the corporate contract creation processing, this alias is used to assign the new account to contract fees provided in the request "
          },
          "corporateContractAddOnsSubscriptions": {
            "type": "array",
            "description": "The issuer can subscribe to additional services (e.g. new letter, travel insurance)",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestAddOnSubscription"
            }
          },
          "payingEntityAccountIdentifier": {
            "description": "The field is used to identify the corresponding entity when the payingAccountType = 'ENTITY_PAYS'. This field provides the possibility to find the exact entity account by its account identifier.",
            "allOf": [
              {
            "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "payingEntityCompanyExternalReference": {
            "type": "string",
            "description": "The field is used to identify the corresponding entity when the payingAccountType = 'ENTITY_PAYS'. This field provides the possibility to find the exact entity account by the external reference of the corporate entity."
          },
          "payingAccountEntityLevel": {
            "type": "integer",
            "description": "The field is used to identify the corresponding entity when the payingAccountType = 'ENTITY_PAYS'. This field provides the possibility to find the exact entity account by its level number."
          }
        },
        "title": "CreateCorporateContractRequest.Account"
      },
      "CreateCorporateContractRequestAddOnSubscription": {
        "type": "object",
        "properties": {
          "addonReference": {
            "type": "string",
            "description": "Refer to AddOnSubscription.addonReference"
          },
          "subscriptionDate": {
            "type": "string",
            "description": "If provided, this date will be used as the starting date of the add-on subscription.",
            "format": "date-time"
          },
          "serviceTypeReference": {
            "type": "string",
            "description": "Refer to AddOnSubscription.serviceType"
          },
          "parameters": {
            "type": "array",
            "description": "The issuer can provide a list of parameters related to the addOn.",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestAddOnParameter"
            }
          }
        },
        "title": "CreateCorporateContractRequest.AddOnSubscription"
      },
      "CreateCorporateContractRequestAddOnParameter": {
        "type": "object",
        "properties": {
          "reference": {
            "type": "string",
            "description": "Refer to AddOnServiceParameter.reference"
          },
          "value": {
            "type": "string",
            "description": "Refer to AddOnServiceParameter.value"
          }
        },
        "title": "CreateCorporateContractRequest.AddOnParameter"
      },
      "CreateCorporateContractRequestAccountHierarchy": {
        "type": "object",
        "description": "The issuer must provide at least data related to the root account when creating the corporate contract.",
        "properties": {
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide Specific Fields for the new account hierarchy.\nIt is a list of values (label:value|) related to the account hierarchy (pass-thru data).",
            "additionalProperties": {
              "type": "string"
            }
          },
          "hierarchySelectedModels": {
            "type": "array",
            "description": "The issuer can provide specific account model reference for the account hierarchy, otherwise the default one is used.\n\nList of possible models:     \n•\treimbursementModel",
            "items": {
              "$ref": "#/definitions/AccountHierarchyModel"
            }
          },
          "hierarchyDebitOrderDueDateDelay": {
            "type": "integer",
            "description": "The issuer can override the default debit order due date delay defined in the closure calendar."
          },
          "hierarchyPayingAccountType": {
            "type": "string",
            "description": "The issuer must provide at hierarchy level the paying account type if it is mandatory in the issuer configuration. Then the same value must be provided for each account within this hierarchy or should be the same defined within the account template.\n\nPossible values:\n- ROOT_PAYS\n- ITSELF_PAYS\n\nExamples:\nCase 1: issuer configuration indicates that paying account type is mandatory\n. The payingAccountType must be provided at hierarchy level, e.g. ROOT_PAYS\n. then for each account to be created the payingAccountType is either provided with value as ROOT_PAYS or is retrieved from account template but must have value as ROOT_PAYS\n\nCase 2: issuer configuration indicates that paying account type is not mandatory\n. It is not mandatory to provide a payingAccountType value at hierarchy level\n. when creating an account the payingAccountType value can be provided or is retrieved from account template (if provided at hierarchy level then each account must have same value than hierarchy)"
          },
          "hierarchyOutgoingCreditTransferFeature": {
            "$ref": "#/definitions/CreateCorporateContractRequestHierarchyOutgoingCreditTransferFeature"
          }
        },
        "title": "CreateCorporateContractRequest.AccountHierarchy"
      },
      "CreateCorporateContractRequestHierarchyOutgoingCreditTransferFeature": {
        "type": "object",
        "description": "The issuer can enable or not each different Outgoing Credit Transfer (OCT) options if this latter is enabled and if can be overriden within the reimbursement model.\nE.g. the periodicOCT is allowed in the reimbursement model, default choice, and it is not possible to override this choice. When creating the account hierarchy it is not possible to change this configuration and to not allow this option.",
        "properties": {
          "periodicOctAllowed": {
            "type": "boolean",
            "description": "The issuer can enable or disable the periodic OCT option, if it is possible within the reimbursement model to change the default choice."
          },
          "periodicOctType": {
            "type": "string",
            "description": "The issuer can override the periodic OCT type if allowed within the reimbursment model.\nPossibles values:\n- DAILY = OCT can be triggered on a daily basis if account is in credit position\n- CYCLIC = OCT can be triggered at cycle closure date if account is in credit position"
          },
          "periodicMaxThreshold": {
            "description": "The issuer can override the maximum threshold amount defined for periodic OCT if allowed within the reimbursment model, where maximum threshold amount provides lower limit for OCT amount calculation, i.e., if maximum threshold amount is provided, the OCT amount will be equal not to card account credit balance but to account credit balance – maximum threshold amount instead.\nE.g. maximum threshold amount as 10.000€: if credit balance is 15.000€ then OCT is issued with amount equal to 15.000-10.000 = 5.000€. If credit balance is 9.000€ then OCT is issued.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "octOnContractTerminationAllowed": {
            "type": "boolean",
            "description": "The issuer can enable or disable the OCT on contract termination, if it is possible within the reimbursement model to change the default choice."
          },
          "octOnDemandAllowed": {
            "type": "boolean",
            "description": "The issuer can enable or disable the OCT on demand, if it is possible within the reimbursement model to change the default choice."
          },
          "octOnDemandLimitType": {
            "type": "string",
            "description": "The issuer can override the limit type of the OCT on demand if allowed within the reimbursement \nPossible values:\n- BALANCE = a customer can only request an OCT in case of account in credit position\n- OTB (open-to-buy) = a customer can request an OCT from its current Open-to-buy (so from its credit limit allowed by the issuer)"
          },
          "octOnAccountTerminationAllowed": {
            "type": "boolean",
            "description": "The issuer can enable or not each different Outgoing Credit Transfer (OCT) options if this latter is enabled and if can be overriden within the reimbursement model.\nE.g. the periodicOCT is allowed in the reimbursement model, default choice, and it is not possible to override this choice. When creating the account hierarchy it is not possible to change this configuration and to not allow this option."
          }
        },
        "title": "CreateCorporateContractRequest.HierarchyOutgoingCreditTransferFeature"
      },
      "CreateCorporateContractRequestCustomer": {
        "type": "object",
        "required": [
          "lastName",
          "firstName",
          "addresses"
        ],
        "properties": {
          "requestCorrelationId": {
            "type": "string",
            "description": "Unique alias provided by the issuer for each new customer.\nDuring the corporate contract creation processing, this alias is used to assign a new customer to certain customer roles (cardholder, contract owner, account owner, guarantor)."
          },
          "issuerCustomerExternalReference": {
            "type": "string",
            "description": "Refer to CustomerIdentifier.issuerCustomerExternalReference"
          },
          "active": {
            "type": "boolean",
            "description": "DEPRECATED"
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Refer to Customer.courtesyTitle"
          },
          "lastName": {
            "type": "string",
            "description": "Refer to Customer.lastName"
          },
          "firstName": {
            "type": "string",
            "description": "Refer to Customer.firstName"
          },
          "onlineRiskCategory": {
            "type": "string",
            "description": "Categorizes the person for online  risk management.\n List of possible values is defined per Issuer (eg.Business, Student, Teenager, Standard).\n Mandatory if no default value is defined"
          },
          "offlineRiskCategory": {
            "type": "string",
            "description": "Categorizes the person for offline risk management.\n List of possible values is defined per Issuer (eg.Business, Student, Teenager, Standard).\n Mandatory if no default value is defined"
          },
          "commercialStatus": {
            "type": "string",
            "description": "Refer to Customer.commercialStatus"
          },
          "customerReference": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "secondFirstName": {
            "type": "string",
            "description": "Refer to Customer.secondFirstName"
          },
          "maidenName": {
            "type": "string",
            "description": "Refer to Customer.maidenName"
          },
          "sex": {
            "type": "string",
            "description": "Refer to Customer.sex"
          },
          "birthDate": {
            "type": "string",
            "description": "Refer to Customer.birthDate",
            "format": "date-time"
          },
          "birthPlace": {
            "type": "string",
            "description": "Refer to Customer.birthPlace"
          },
          "nationality": {
            "type": "string",
            "description": "Refer to Customer.nationality"
          },
          "profession": {
            "type": "string",
            "description": "Refer to Customer.profession"
          },
          "employerName": {
            "type": "string",
            "description": "Refer to Customer.employerName"
          },
          "employerAddress": {
            "type": "string",
            "description": "Refer to Customer.employerAddress"
          },
          "monthlySalary": {
            "type": "string",
            "description": "Refer to Customer.monthlySalary"
          },
          "maritalStatus": {
            "type": "string",
            "description": "Refer to Customer.maritalStatus"
          },
          "preferredCorrespondenceLanguage": {
            "type": "string",
            "description": "Refer to Customer.preferredCorrespondenceLanguage"
          },
          "picture": {
            "type": "string",
            "description": "Refer to Customer.picture"
          },
          "url1": {
            "type": "string",
            "description": "Refer to Customer.url1"
          },
          "url2": {
            "type": "string",
            "description": "Refer to Customer.url2"
          },
          "secretQuestion": {
            "type": "string",
            "description": "Refer to Customer.secretQuestion"
          },
          "secretAnswer": {
            "type": "string",
            "description": "Refer to Customer.secretAnswer"
          },
          "vatNumber": {
            "type": "string",
            "description": "Refer to Customer.vatNumber"
          },
          "vatCountry": {
            "type": "string",
            "description": "Refer to Customer.vatCountry"
          },
          "customerClass": {
            "type": "string",
            "description": "Refer to Customer.customerClass"
          },
          "employee": {
            "type": "boolean",
            "description": "Refer to Customer.employee"
          },
          "partnerExternalReference": {
            "type": "string",
            "description": "Refer to Customer.partnerExternalReference"
          },
          "doNotContact": {
            "type": "boolean",
            "description": "Refer to Customer.doNotContact"
          },
          "specificFields": {
            "type": "object",
            "description": "Refer to Customer.specificFields",
            "additionalProperties": {
              "type": "string"
            }
          },
          "addresses": {
            "type": "array",
            "description": "The Main postal address (addressLabel as MAIN_POSTAL_ADDRESS)  has to be provided because used as default address by all business processes if no address usage is defined.\n E.g. if no address usage as CARD_DELIVERY is attached to a customer's address then the Main postal address is used as card order delivery address.",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestAddress"
            }
          }
        },
        "title": "CreateCorporateContractRequest.Customer"
      },
      "CreateCorporateContractRequestAddress": {
        "type": "object",
        "required": [
          "addressLabel",
          "addressType"
        ],
        "properties": {
          "addressLabel": {
            "type": "string",
            "description": "Refer to Address.addressLabel"
          },
          "addressType": {
            "type": "string",
            "description": "Refer to Address.addressType"
          },
          "postalAddress": {
            "description": "Refer to Address.postalAddress",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressRequestMailAddress"
              }
            ]
          },
          "emailAddress": {
            "description": "Refer to Address.eMail",
            "allOf": [
              {
                "$ref": "#/definitions/EmailAddress"
              }
            ]
          },
          "phone": {
            "description": "Refer to Address.phone",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressRequestPhoneNumber"
              }
            ]
          },
          "addressUsages": {
            "type": "array",
            "items": {
              "description": "Refer to Address.addressUsages",
              "allOf": [
                {
                  "$ref": "#/definitions/AddressUsage"
                }
              ]
            }
          },
          "mainAddress": {
            "type": "boolean",
            "description": "Deprecated"
          },
          "issuerAddressExternalReference": {
            "type": "string",
            "description": "Refer to AddressIdentifier.issuerAddressExternalReference"
          }
        },
        "title": "CreateCorporateContractRequest.Address"
      },
      "CreateCorporateContractRequestCompany": {
        "type": "object",
        "required": [
          "corporateName",
          "commercialStatus",
          "addresses"
        ],
        "properties": {
          "requestCorrelationId": {
            "type": "string",
            "description": "Unique alias provided by the issuer for each new company. During the contract creation processing, this alias is used to assign a new company to certain company roles (contract owner, account owner, guarantor)."
          },
          "issuerCustomerExternalReference": {
            "type": "string",
            "description": "Customer (as company) identifier provided by the Issuer"
          },
          "active": {
            "type": "boolean",
            "description": "DEPRECATED"
          },
          "corporateName": {
            "type": "string",
            "description": "Refer to Company.corporateName"
          },
          "nationalFiscalIdentifier": {
            "type": "string",
            "description": "Refer to Company.nationalFiscalIdentifier"
          },
          "vatCode": {
            "type": "string",
            "description": "Refer to Company.vatCode"
          },
          "type": {
            "type": "string",
            "description": "Refer to Company.type"
          },
          "size": {
            "type": "string",
            "description": "Refer to Company.size"
          },
          "businessArea": {
            "type": "string",
            "description": "Refer to Company.businessArea"
          },
          "activityCode": {
            "type": "string",
            "description": "Refer to Company.activityCode"
          },
          "revenue": {
            "type": "string",
            "description": "Refer to Company.revenue"
          },
          "legalForm": {
            "type": "string",
            "description": "Refer to Company.legalForm"
          },
          "commercialStatus": {
            "type": "string",
            "description": "Refer to Company.commercialStatus"
          },
          "preferredCorrespondenceLanguage": {
            "type": "string",
            "description": "Refer to Company.preferredCorrespondenceLanguage."
          },
          "specificFields": {
            "type": "object",
            "description": "Refer toCompany.specificFields",
            "additionalProperties": {
              "type": "string"
            }
          },
          "addresses": {
            "type": "array",
            "description": "The Head office (addressLabel as HEAD_OFFICE )  has to be provided because used as default address by all business processes if no address usage is defined.",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestAddress"
            }
          },
          "contacts": {
            "type": "array",
            "description": "The issuer can provide data related to the contacts of the company.",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestContact"
            }
          }
        },
        "title": "CreateCorporateContractRequest.Company"
      },
      "CreateCorporateContractRequestContact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The contact name has to be provided if the department name is not provided."
          },
          "firstName": {
            "type": "string",
            "description": "Refer to Contact.firstName"
          },
          "departmentName": {
            "type": "string",
            "description": "The department name has to be provided if the contact name is not provided."
          },
          "sex": {
            "type": "string",
            "description": "Refer to Contact.sex"
          },
          "description": {
            "type": "string",
            "description": "Refer to Contact.description"
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Refer to Contact.courtesyTitle"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to Contact.birthDate"
          },
          "postalAddress" : {
            "description": "Refer to Contact.postalAddress",
            "allOf": [
                {
                "$ref": "#/definitions/CreateAddressRequestMailAddress"
                }
             ]
          }
        },
        "title": "CreateCorporateContractRequest.Contact"
      },
      "CreateCorporateContractRequestAddCorporateContractEntity": {
        "type": "object",
        "required": [
          "issuerProductExtensionExternalReference",
          "level",
          "companyEntityExternalReference",
          "parentCompanyEntityExternalReference",
          "corporateContractEntityAccounts"
        ],
        "properties": {
          "issuerProductExtensionExternalReference": {
            "type": "string",
            "description": "The issuer provides the reference of the product extension to be used to add a new entity in the company organization."
          },
          "level": {
            "type": "integer",
            "description": "The issuer must provide the level number of the new entity in the company organization (e.g. 2 corresponding to country). \nThe level must be greater than 1 (the level 1 being the root entity level).",
            "example" :  2
          },
          "companyEntityExternalReference": {
            "type": "string",
            "description": "The issuer must provide the external reference of the new entity within the company organization (e.g. a code representing the country: FRAN for France). This reference is unique in the corporate contract."
          },
          "parentCompanyEntityExternalReference": {
            "type": "string",
            "description": "The issuer must provide the external reference of the parent entity to which the entity has to be attached. "
          },
          "deliveryChannel": {
            "description": "The issuer can specify the channel for letter delivery used for the entity (corresponding to an entity of the company organization except the root entity).\nCurrently, only the values WEB, LETTER or LETTER_AND_WEB can be used.",
            "allOf": [
              {
                "$ref": "#/definitions/DeliveryChannel"
              }
            ]
          },
          "advertisementFlags": {
            "description": "The issuer can specify which advertisement flags are enabled (Email, Letter, Phone, etc.) used for the entity (corresponding to an entity of the company organization except the root entity).",
            "allOf": [
              {
                "$ref": "#/definitions/AdvertisementFlags"
              }
            ]
          },
          "corporateContractEntityAccounts": {
            "type": "array",
            "description": "The issuer must provide the list of accounts for the new entity.",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestCorporateContractEntityAccount"
            }
          }
        },
        "title": "CreateCorporateContractRequest.AddCorporateContractEntity"
      },
      "CreateCorporateContractRequestCorporateContractEntityAccount": {
        "type": "object",
        "properties": {
          "account": {
            "description": "Data related to each account have to be provided.",
            "allOf": [
              {
                "$ref": "#/definitions/CreateCorporateContractRequestAccount"
              }
            ]
          }
        },
        "title": "CreateCorporateContractRequest.CorporateContractEntityAccount"
      },
      "CreateCorporateContractRequestAddCorporateEmployeeCardsAndAccounts": {
        "type": "object",
        "required": [
          "issuerProductExtensionExternalReference",
          "parentCompanyEntityExternalReference",
          "companyEntityExternalReference"
        ],
        "properties": {
          "issuerProductExtensionExternalReference": {
            "type": "string",
            "description": "The issuer provides the reference of the product extension to be used to add an employee, its card(s) and account(s). Usually an employee is added with its corporate card and related card account."
          },
          "parentCompanyEntityExternalReference": {
            "type": "string",
            "description": "The issuer must provide the external reference of the parent company entity to which the employee cards and accounts have to be attached."
          },
          "corporateEmployeeAccounts": {
            "type": "array",
            "description": "Data related to each employee account have to be provided.",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestCorporateEmployeeAccount"
            }
          },
          "companyEntityExternalReference": {
            "type": "string",
            "description": "The issuer must provide the value of the external reference of the company entity."
          },
          "corporateEmployeeCards": {
            "type": "array",
            "description": "Data related to each employee card have to be provided.",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestCorporateEmployeeCard"
            }
          }
        },
        "title": "CreateCorporateContractRequest.AddCorporateEmployeeCardsAndAccounts"
      },
      "CreateCorporateContractRequestAddCorporateVcaServiceCardsAndAccounts": {
        "type": "object",
        "required": [
          "issuerProductExtensionExternalReference",
          "parentCompanyEntityExternalReference"
        ],
        "properties": {
          "issuerProductExtensionExternalReference": {
            "type": "string",
            "description": "The issuer provides the reference of the product extension to be used to add corporate service virtual card and account"
          },
          "parentCompanyEntityExternalReference": {
            "type": "string",
            "description": "The issuer must provide the external reference of the parent company entity under which the VCA service virtual card needs to be created"
          },
          "corporateEmployeeAccounts": {
            "type": "array",
            "description": "Data related to each VCA service virtual card account has to be provided.",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestCorporateEmployeeAccount"
            }
          },
          "companyEntityExternalReference": {
            "type": "string",
            "description": "The issuer must provide the value of the external reference of the company entity."
          },
          "corporateEmployeeVcaServiceCards": {
            "type": "array",
            "description": "Data related to the corporate VCA service card accounts to be provided",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestCorporateVcaServiceCard"
            }
          }
        },
        "title": "CreateCorporateContractRequest.AddCorporateVcaServiceCardsAndAccounts"
      },
      "CreateCorporateContractRequestCorporateEmployeeAccount": {
        "type": "object",
        "properties": {
          "deliveryChannel": {
            "description": "The issuer can specify the channel for letter delivery used for this account.\nCurrently, only the values WEB, LETTER or LETTER_AND_WEB can be used.",
            "allOf": [
              {
                "$ref": "#/definitions/DeliveryChannel"
              }
            ]
          },
          "advertisementFlags": {
            "description": "The issuer can specify which advertisement flags are enabled (Email, Letter, Phone, etc.).",
            "allOf": [
              {
                "$ref": "#/definitions/AdvertisementFlags"
              }
            ]
          },
          "waiveFee": {
            "type": "boolean",
            "description": "The issuer can indicate if contract related fees, membership fee and account setup fee, are waived (true) or not (false, by default) for this employee account."
          },
          "postingAccountForMembershipFee": {
            "type": "string",
            "description": "The issuer can indicate if the membership fees are paid by the employee (posted to its card account), intermediate entity (posted to the entity account) or by the company (can be posted to the root currently) if the value is different from the default one defined at corporate contract level. \nPossible values:\n- ROOT_ACCOUNT \n- CARD_ACCOUNT\n- ENTITY_ACCOUNT"
          },
          "postingAccountForAccountSetupFee": {
            "type": "string",
            "description": "The issuer can indicate if the account setup fees are paid by the employee (posted to its card account), intermediate entity (posted to the entity account) or by the company (can be posted to the root currently) if the value is different from the default one defined at corporate contract level.\nPossible values:\n- ROOT_ACCOUNT \n- CARD_ACCOUNT\n- ENTITY_ACCOUNT"
          },
          "contractFee": {
            "description": "The issuer can replace both default membership fee and account set up fee models for each account (usually card account). ",
            "allOf": [
              {
                "$ref": "#/definitions/CreateCorporateContractRequestContractFee"
              }
            ]
          },
          "account": {
            "description": "The issuer must provide data related to the employee account.",
            "allOf": [
              {
                "$ref": "#/definitions/CreateCorporateContractRequestAccount"
              }
            ]
          },
          "entityIdentifierMembershipFeePosting": {
            "description": "It is mandatory to provide one of the attributes of this data type in case postingAccountForMembershipFee = ENTITY_ACCOUNT. The issuer will provide the exact entity on which Membership Fee will be posted",
            "allOf": [
              {
                "$ref": "#/definitions/FeePostingEntityIdentifier"
              }
            ]
          },
          "entityIdentifierAccountSetupFeePosting": {
            "description": "It is mandatory to provide one of the attributes of this data type in case postingAccountForAccountSetupFee = ENTITY_ACCOUNT. The issuer will provide the exact entity on which Account Setup Fee will be posted",
            "allOf": [
              {
                "$ref": "#/definitions/FeePostingEntityIdentifier"
              }
            ]
          }
        },
        "title": "CreateCorporateContractRequest.CorporateEmployeeAccount"
      },
      "CreateCorporateContractRequestContractFee": {
        "type": "object",
        "properties": {
          "accountSetupFeeModelReference": {
            "type": "string",
            "description": "Account setup fee model to be used for the account"
          },
          "membershipFeeModelReference": {
            "type": "string",
            "description": "Membership fee model to be used for the account"
          }
        },
        "title": "CreateCorporateContractRequest.ContractFee"
      },
      "CreateCorporateContractRequestCorporateEmployeeCard": {
        "type": "object",
        "properties": {
          "cardContract": {
            "$ref": "#/definitions/CreateCorporateContractRequestCardContract"
          }
        },
        "title": "CreateCorporateContractRequest.CorporateEmployeeCard"
      },
      "CreateCorporateContractRequestCorporateVcaServiceCard": {
        "type": "object",
        "properties": {
          "vcaServiceCardContract": {
            "$ref": "#/definitions/CreateCorporateContractRequestVcaServiceCardContract"
          }
        },
        "title": "CreateCorporateContractRequest.CorporateVcaServiceCard"
      },
      "CreateCorporateContractRequestCardContract": {
        "type": "object",
        "description": "Data related to each card contract and card have to be provided.\nIf there is no card at creation time then no data to be provided.",
        "properties": {
          "issuerCardContractExternalReference": {
            "type": "string",
            "description": "The issuer can provide the external reference for the new card contract.\nRefer to CardContractIdentifier.cardContractReference."
          },
          "artwork": {
            "type": "string",
            "description": "The issuer can provide the artwork to be used for the card contract creation, among those allowed, instead of the default one retrieved from the card template."
          },
          "cardHolderRequestCorrelationId": {
            "type": "string",
            "description": "Not to be provided if the cardholder is the same as the account owner of the default account of the card.\nOtherwise the issuer can provide the correlation id of the new customer which represent the cardholder (defined in the data block CreateCorporateContractRequest.Customer)."
          },
          "cardHolderIdentifier": {
            "description": "Not to be provided if the cardholder is the same as the account owner of the default account of the card.\nIf the cardholder already exists in our system then the issuer has to provide the customer reference or the issuer external customer reference of the existing customer.\nIf the cardholder does not exist in our system then cardholderRequestCorrelationId has to be filled.",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "issuerBranchCode": {
            "type": "string",
            "description": "The issuer can provide the issuer branch code of the card contract. If not provided, then the contract issuer branch code is used."
          },
          "forcedEmbossingName": {
            "type": "string",
            "description": "The first line of the name to be embossed on the physical card for the new card can be provided.\nThe field is mandatory depending on the issuer configuration.\nThe character \"*\" is not allowed in the line 1 of the embossing name."
          },
          "forcedEmbossingName2ndLine": {
            "type": "string",
            "description": "The second line of the name to be embossed on the physical card for the new card can be provided (if allowed by the product configuration).\nThe character \"*\" is not allowed in the line 2 of the embossing name."
          },
          "selectedModels": {
            "type": "array",
            "description": "The issuer can replace one or several card contract models by providing new card contract model references, otherwise the default ones from the card contract template are used.\n List of possible models that can be replaced:\n • EVENT_FEE_MODEL \n • DISTRIBUTION_MODEL \n • CARD_CREATION_MODEL \n • TECHNOLOGY_AND_APPLICATION_MODEL ",
            "items": {
              "$ref": "#/definitions/CardContractModel"
            }
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide the Specific Fields for the new card contract.\nIt is a list of values (label:value|) related to the card contract (pass-thru data)",
            "additionalProperties": {
              "type": "string"
            }
          },
          "photoReference": {
            "type": "string",
            "description": "The issuer can provide the photo reference for the new card.\nRefer to Card.photoReference"
          },
          "pictureReference": {
            "type": "string",
            "description": "The issuer can provide the picture reference for the new card.\nRefer to Card.pictureReference"
          },
          "logoReference": {
            "type": "string",
            "description": "A logo reference can be provided for corporate card only (is also used for next cards in case of renewal, replacement)."
          },
          "card": {
            "$ref": "#/definitions/CreateCorporateContractRequestCard"
          },
          "corporateContractAddOnsSubscriptions": {
            "type": "array",
            "description": "The issuer can subscribe to additional services (e.g. new letter, travel insurance)",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestAddOnSubscription"
            }
          }
        },
        "title": "CreateCorporateContractRequest.CardContract"
      },
      "CreateCorporateContractRequestVcaServiceCardContract": {
        "type": "object",
        "description": "Data related to each VCA service virtual card contract needs to be provided",
        "properties": {
          "issuerCardContractExternalReference": {
            "type": "string",
            "description": "The issuer can provide the external reference for the new card contract."
          },
          "cardHolderRequestCorrelationId": {
            "type": "string",
            "description": "Not to be provided if the cardholder is the same as the account owner of the default account of the card.\nOtherwise the issuer can provide the correlation id of the new customer which represent the cardholder (defined in the data block CreateCorporateContractRequest.Customer)."
          },
          "cardHolderIdentifier": {
            "description": "Not to be provided if the cardholder is the same as the account owner of the default account of the card.\nIf the cardholder already exists in our system then the issuer has to provide the customer reference or the issuer external customer reference of the existing customer.\nIf the cardholder does not exist in our system then cardholderRequestCorrelationId has to be filled.",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "issuerBranchCode": {
            "type": "string",
            "description": "The issuer can provide the issuer branch code of the card contract. If not provided, then the contract issuer branch code is used."
          },
          "selectedModels": {
            "type": "array",
            "description": "The issuer can replace one or several card contract models by providing new card contract model references, otherwise the default ones from the card contract template are used.\n List of possible models that can be replaced:\n • EVENT_FEE_MODEL \n • DISTRIBUTION_MODEL \n • CARD_CREATION_MODEL \n • TECHNOLOGY_AND_APPLICATION_MODEL ",
            "items": {
              "$ref": "#/definitions/CardContractModel"
            }
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide the Specific Fields for the new card contract.\nIt is a list of values (label:value|) related to the card contract (pass-thru data)",
            "additionalProperties": {
              "type": "string"
            }
          },
          "vcaServiceCard": {
            "$ref": "#/definitions/CreateCorporateContractRequestVcaServiceCard"
          },
          "forcedEmbossingName": {
            "type": "string",
            "description": "The first line of the name to be embossed on the physical card for the new card can be provided.\nThe character \"*\" is not allowed in the line 1 of the embossing name.\nDefault value is set to \"VCAForcedname\""
          },
          "corporateContractAddOnsSubscriptions": {
            "type": "array",
            "description": "The issuer can subscribe to additional services (e.g. new letter, travel insurance)",
            "items": {
              "$ref": "#/definitions/CreateCorporateContractRequestAddOnSubscription"
            }
          }
        },
        "title": "CreateCorporateContractRequest.VcaServiceCardContract"
      },
      "CreateCorporateContractRequestCard": {
        "type": "object",
        "description": "Card related data to be provided for the creation of the card.",
        "properties": {
          "pan": {
            "type": "string",
            "description": "The issuer can provide the Primary Account Number (PAN) or card number if this is allowed by the product configuration only. The provided PAN must belong to the card product BIN range."
          },
          "issuerCardExternalReference": {
            "type": "string",
            "description": "The issuer can provide the external reference for the new card (maximum length is 50 characters). This external reference must be unique per issuer.\nIf not provided, the card will not have an external reference."
          },
          "embossingLine5": {
            "type": "string",
            "description": "The issuer must provide the embossing line 5 if required within card Technology and Application model. Otherwise the issuer can provide it and the embossing line 5 will be sent to the embosser."
          },
          "expiryDate": {
            "type": "string",
            "description": "The issuer can provide the expiry date of the card if allowed by the product configuration (note that the provided expiry date must belong to the range allowed by the product, e.g. [expiry date calculated by our system - 12 months, expiry date calculated by our system + 12 months].\nIf provided and not allowed then an error is raised.\nFormat is MMYY (month and year)."
          },
          "pinInheritanceCardReference": {
            "type": "string",
            "description": "Deprecated"
          },
          "pinInheritanceCardIdentifier": {
            "description": "If the PIN inheritance is authorized for the issuer, the issuer can provide the reference of a card (card reference in the Issuing Back Office system or external card reference provided by the issuer) to inherit the PIN from a another card (if the provided card reference does not exist in the system, no PIN inheritance could be used).",
            "allOf": [
              {
                "$ref": "#/definitions/PinInheritanceCardIdentifier"
              }
            ]
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide the Specific Fields for the new card.\nIt is a list of values (label:value|) related to the card (pass-thru data).",
            "additionalProperties": {
              "type": "string"
            }
          },
          "cardOrder": {
            "$ref": "#/definitions/CreateCorporateContractRequestCardOrder"
          },
          "pinMailerOrder": {
            "$ref": "#/definitions/CreateCorporateContractRequestPinMailerOrder"
          }
        },
        "title": "CreateCorporateContractRequest.Card"
      },
      "CreateCorporateContractRequestVcaServiceCard": {
        "type": "object",
        "description": "Card related data to be provided for the creation of the card.",
        "properties": {
          "issuerCardExternalReference": {
            "type": "string",
            "description": "The issuer can provide the external reference for the new card (maximum length is 50 characters). This external reference must be unique per issuer.\nIf not provided, the card will not have an external reference."
          },
          "expiryDate": {
            "type": "string",
            "description": "The issuer can provide the expiry date of the card if allowed by the product configuration (note that the provided expiry date must belong to the range allowed by the product, e.g. [expiry date calculated by our system - 12 months, expiry date calculated by our system + 12 months].\nIf provided and not allowed then an error is raised.\nFormat is MMYY (month and year)."
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide the Specific Fields for the new card.\nIt is a list of values (label:value|) related to the card (pass-thru data).",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "title": "CreateCorporateContractRequest.VcaServiceCard"
      },
      "CreateCorporateContractRequestCardOrder": {
        "type": "object",
        "description": "The issuer can provide data related to the card order if physical card is requested.\nIf not provided and required then the default sending mode is retrieved from product configuration.",
        "properties": {
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide the Specific Fields for the card order.\nIt is a list of values (label:value|) related to the card order provided to the embosser (pass-thru data).",
            "additionalProperties": {
              "type": "string"
            }
          },
          "cardProducer": {
            "type": "string",
            "description": "The issuer can provide the card producer if it is different than the default one (defined in the card profile)."
          },
          "sendingMode": {
            "type": "string",
            "description": "The issuer can provide the sending mode if a physical card (card order) is requested. Default sending mode is retrieved from configuration.\nExample: Normal, Urgent, Ultra Urgent"
          },
          "skipCardOrderGeneration": {
            "type": "boolean",
            "description": "If this field is true, the card order will not be generated (no plastic).\nBy default, a card order is requested (except if it is a virtual card configured in the Technology and Application model)."
          }
        },
        "title": "CreateCorporateContractRequest.CardOrder"
      },
      "CreateCorporateContractRequestPinMailerOrder": {
        "type": "object",
        "description": "The issuer can provide data related to a PIN mailer order if it is configured as required in the PIN production model.\nIf not provided and required then the default sending mode is retrieved from product configuration.",
        "properties": {
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide the Specific Fields for the PIN mailer order.\nIt is a list of values (label:value|) related to the card order provided to the embosser (pass-thru data).",
            "additionalProperties": {
              "type": "string"
            }
          },
          "sendingMode": {
            "type": "string",
            "description": "The issuer can provide the sending mode if  a PIN mailer (PIN mailer order) is requested. Default sending mode is retrieved from configuration.\nExample: Normal, Urgent, Ultra Urgent"
          },
          "skipPinMailerOrderGeneration": {
            "type": "boolean",
            "description": "The issuer can provide data related to a PIN mailer order if it is configured as required in the PIN production model.\nIf not provided and required then the default sending mode is retrieved from product configuration."
          }
        },
        "title": "CreateCorporateContractRequest.PinMailerOrder"
      },
      "CreateCorporateContractRequestSepaMandate": {
        "type": "object",
        "description": "The issuer must provide SEPA mandate if payment processing channel is SEPA (SEPA indicator is true) and payment mode is AUTOPAYMENT",
        "required": [
          "mandateContractId"
        ],
        "properties": {
          "mandateContractId": {
            "type": "string",
            "description": "Mandate underlying contract identifier (external reference) used by the issuer. E.g., if the mandate is set up along with the contract creation, it may contain the application number, etc. "
          },
          "debtorId": {
            "type": "string",
            "description": "Deprecated field - not to be used"
          },
          "debtorName": {
            "type": "string",
            "description": "Deprecated field - not to be used"
          },
          "debtorAddressType": {
            "type": "string",
            "description": "Deprecated field - not to be used"
          },
          "debtorPostalAddress": {
            "allOf": [
              {
                "$ref": "#/definitions/SepaMandateMailAddress"
              }
            ],
            "description": "Address lines 1 and 2, street name, building number, post code, town name, country and country subdivision can be provided in certain cases - refer to SEPA rules when debtor's address is required."
          },
          "debtorPhoneNumber": {
            "type": "string",
            "description": "SEPA debtor phone number"
          },
          "debtorEmail": {
            "type": "string",
            "description": "SEPA debtor e-mail"
          },
          "mandateNatureType": {
            "type": "string",
            "description": "SEPA mandate nature type. PAPER_MANDATE is taken as a default.\nList of mandate possible nature types (for future usage only, not to be used):\nCOMPUTING_MIGRATION_NO_SIGNATURE, COMPUTING_MIGRATION_WITH_SIGNATURE, FR_MIGRATION_DOMESTIC_FILES,\nMANDATE_FROMDIGITALIZATION, e_MANDATE, SIGNATURE_MANDATE, MYBANK_e_MANDATE, IDEAL_e_MANDATE"
          },
          "mandateSignDate": {
            "type": "string",
            "description": "The mandate signature date has to be provided except if the SEPA mandate UMR is provided (comes from another system).",
            "format": "date-time"
          },
          "mandateSignCity": {
            "type": "string",
            "description": "SEPA mandate city of signature "
          },
          "sepaMandateUmr": {
            "type": "string",
            "description": "Unique reference to identify the SEPA mandate. Can be provided to our system if mandate is created explicitly by another system."
          },
          "validateMandate": {
            "type": "boolean",
            "description": "Deprecated field - not to be used\nNot to be overridden, as there is a risk for an internal business process."
          },
          "futureMandateExternalReference": {
            "type": "string",
            "description": "Deprecated field - not to be used"
          }
        },
        "title": "CreateCorporateContractRequest.SepaMandate"
      },
      "ModifyCorporateEmployeeAccountRequest": {
        "type": "object",
        "x-wl-patch-request": true,
        "properties": {
          "corporateEmployeeAccount": {
            "description": "The issuer can modify some data related to an employee account .",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyCorporateEmployeeAccountRequestCorporateEmployeeAccount"
              }
            ]
          },
          "contractFee": {
            "description": "The issuer can replace both membership fee and account set up fee models for each account (usually card account). ",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyCorporateEmployeeAccountRequestContractFee"
              }
            ]
          }
        },
        "title": "ModifyCorporateEmployeeAccountRequest"
      },
      "ModifyCorporateEmployeeAccountRequestCorporateEmployeeAccount": {
        "type": "object",
        "x-wl-patch-request": true,
        "properties": {
          "companyEntityExternalReference": {
            "description": "The issuer can modify the value of the external reference of the employee account",
            "type": "string"
          },
          "deliveryChannel": {
            "description": "Specify the channel for letter delivery to be updated for the account.\nCurrently, only the values WEB, LETTER or LETTER_AND_WEB can be used.",
            "allOf": [
              {
                "$ref": "#/definitions/DeliveryChannel"
              }
            ]
          },
          "advertisementFlags": {
            "description": "Advertisement channels can be updated for the account",
            "allOf": [
              {
                "$ref": "#/definitions/AdvertisementFlags"
              }
            ]
          },
          "waiveFee": {
            "description": "Whether contract fees (membership and account setup) are both waived during contract fee calculation (at contract creation, etc)",
            "type": "boolean"
          },
          "postingAccountForMembershipFee": {
            "description": "The issuer can change if the membership fees are paid by the employee (posted to its card account), intermediate account (posted to entity account) or by the company (can be posted to the root currently) if the value is different from the default one defined at corporate contract level.\nPossible values:\n- ROOT_ACCOUNT \n- CARD_ACCOUNT\n- ENTITY_ACCOUNT",
            "type": "string",
            "enum": [
              "ROOT_ACCOUNT",
              "CARD_ACCOUNT",
              "ENTITY_ACCOUNT"
            ]
          },
          "postingAccountForAccountSetupFee": {
            "description": "The issuer can change if the account setup fees are paid by the employee (posted to its card account), intermediate account (posted to entity account) or by the company (can be posted to the root currently) if the value is different from the default one defined at corporate contract level.\nPossible values:\n- ROOT_ACCOUNT \n- CARD_ACCOUNT\n- ENTITY_ACCOUNT",
            "type": "string",
            "enum": [
              "ROOT_ACCOUNT",
              "CARD_ACCOUNT",
              "ENTITY_ACCOUNT"
            ]
          },
          "entityIdentifierMembershipFeePosting": {
            "description": "In case postingAccountForMembershipFee = ENTITY_ACCOUNT, then the issuer must provide the exact entity on which Membership Fee will be posted among one of the following fields : postingEntityAccountIdentifier, postingEntityCompanyExternalReference or postingEntityLevel.",
            "allOf": [
              {
            "$ref": "#/definitions/FeePostingEntityIdentifier"
              }
            ]
          },
          "entityIdentifierAccountSetupFeePosting": {
            "description": "In case postingAccountForAccountSetupFee = ENTITY_ACCOUNT, then the issuer must provide the exact entity on which Account Setup Fee will be posted among one of the following fields : postingEntityAccountIdentifier, postingEntityCompanyExternalReference or postingEntityLevel.",
            "allOf": [
              {
            "$ref": "#/definitions/FeePostingEntityIdentifier"
          }
            ]
          }
        },
        "title": "ModifyCorporateEmployeeAccountRequest.CorporateEmployeeAccount"
      },
      "ModifyCorporateEmployeeAccountRequestContractFee": {
        "type": "object",
        "x-wl-patch-request": true,
        "properties": {
          "accountSetupFeeModelReference": {
            "description": "Account setup fee model to be used for the account",
            "type": "string"
          },
          "membershipFeeModelReference": {
            "description": "Membership fee model to be used for the account",
            "type": "string"
          }
        },
        "title": "ModifyCorporateEmployeeAccountRequest.ContractFee"
      },
      "ModifyCompanyRequest": {
        "x-wl-patch-request": true,
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "DEPRECATED",
            "default": true
          },
          "commercialStatus": {
            "type": "string",
            "example": "Normal",
            "description": "Refer to Customer.commercialStatus"
          },
          "corporateName": {
            "type": "string",
            "description": "Refer to Customer.corporateName"
          },
          "nationalFiscalIdentifier": {
            "type": "string",
            "description": "Refer to Customer.nationalFiscalIdentifier"
          },
          "preferredCorrespondenceLanguage": {
            "type": "string",
            "description": "Refer to Customer.preferredCorrespondenceLanguage"
          },
          "type": {
            "type": "string",
            "description": "Refer to Customer.type"
          },
          "size": {
            "type": "string",
            "description": "Refer to Customer.size"
          },
          "businessArea": {
            "type": "string",
            "description": "Refer to Customer.businessArea"
          },
          "activityCode": {
            "type": "string",
            "description": "Refer to Customer.activityCode"
          },
          "revenue": {
            "type": "string",
            "description": "Refer to Customer.revenue"
          },
          "legalForm": {
            "type": "string",
            "description": "Refer to Customer.legalForm"
          },
          "vatCode": {
            "type": "string",
            "description": "Refer to Customer.vatCode"
          },
            "partnerExternalReference": {
            "type": "string",
            "description": "External Reference provided by the issuer"
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can update Specific Fields for the company.It is a list of values (label:value|) related to the company (pass-thru data).",
            "additionalProperties": {
              "type": "string"
            }
          },
          "contacts": {
            "type": "array",
            "description": "The list of Contacts for the Company",
            "items": {
              "$ref": "#/definitions/ModifyCompanyRequestContact"
            }
          }
        },
        "title": "ModifyCompanyRequest"
      },
      "ModifyCustomerResponse": {
        "type": "object",
        "required": [
          "customerIdentifier"
        ],
        "properties": {
          "customerIdentifier": {
            "$ref": "#/definitions/CustomerIdentifier"
          }
        },
        "title": "ModifyCustomerResponse"
      },
      "ModifyCompanyResponse": {
        "type": "object",
        "required": [
          "customerIdentifier"
        ],
        "properties": {
          "customerIdentifier": {
            "description": "Identification of the company either by Issuer customer external reference or by customer reference",
            "allOf": [
              {
            "$ref": "#/definitions/CustomerIdentifier"
          }
            ]
          }
        },
        "title": "ModifyCompanyResponse"
      },
      "ModifyLegitimacyDocumentRequest": {
        "type": "object",
        "properties": {
          "legitimacyDocumentType": {
            "type": "string",
            "description": "Type of the legitimacy document (example: passport) to be modified"
          },
          "legitimacyDocumentId": {
            "type": "string",
            "description": "Id of the legitimacy document (example: the number of the passport)  to be modified"
          },
          "legitimacyDocumentDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the legitimacy document to be modified"
          },
          "legitimacyDocumentExpiryDate": {
            "type": "string",
            "format": "date-time",
            "description": "Expiry date of the legitimacy document to be modified"
          },
          "legitimated": {
            "type": "boolean",
            "description": "Indicates if the document is legitimated. Can be modified"
          }
        },
        "title": "ModifyLegitimacyDocumentRequest"
      },
      "ModifyLegitimacyDocumentResponse": {
        "type": "object",
        "properties": {
          "legitimacyDocumentType": {
            "type": "string",
            "description": "Type of the legitimacy document"
          },
          "legitimacyDocumentId": {
            "type": "string",
            "description": "Id of the legitimacy document"
          },
          "legitimacyDocumentDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the legitimacy document"
          },
          "legitimacyDocumentExpiryDate": {
            "type": "string",
            "format": "date-time",
            "description": "Expiry date of the legitimacy document"
          },
          "legitimated": {
            "type": "boolean",
            "description": "Indicates if the document is legitimated"
          }
        },
        "title": "ModifyLegitimacyDocumentResponse"
      },
      "SwitchPrincipalCardRequest": {
        "type": "object",
        "required": [
          "cardHolderIdentifier"
        ],
        "properties": {
          "cardHolderIdentifier": {
            "description": "identification of the card holder in the contract that will become the contract owner and therefore hold the principal card",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "cardContractIdentifier": {
            "description": "in case the card holder hold more than one card, identification of the card contract that will become the principal one",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          }
        },
        "title": "SwitchPrincipalCardRequest"
      },
      "ApiResponseEntitySwitchPrincipalCardResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/SwitchPrincipalCardResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntitySwitchPrincipalCardResponse"
      },
      "SwitchPrincipalCardResponse": {
        "type": "object",
        "properties": {
          "contract": {
            "$ref": "#/definitions/SwitchPrincipalCardResponseContract"
          }
        },
        "title": "SwitchPrincipalCardResponse"
      },
      "SwitchPrincipalCardResponseContract": {
        "type": "object",
        "properties": {
          "contractIdentifier": {
            "$ref": "#/definitions/ContractIdentifier"
          },
          "contractOwnerIdentifier": {
            "description": "new owner of the contract",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "cardContracts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SwitchPrincipalCardResponseCardContract"
            }
          }
        },
        "title": "SwitchPrincipalCardResponseContract"
      },
      "SwitchPrincipalCardResponseCardContract": {
        "type": "object",
        "properties": {
          "cardContractIdentifier": {
            "$ref": "#/definitions/CardContractIdentifier"
          },
          "principalSupplementaryCardIndicator": {
            "type": "string",
            "description": "Indicates if it is a Principal card or an additional card (mandatory)\nPossible values: PRINCIPAL, SUPPLEMENTARY"
          }
        },
        "title": "SwitchPrincipalCardResponseCardContract"
      },
      "ProductChangeInformation": {
        "type": "object",
        "description": "Only if a product change is triggered by card replacement. Represents product change information",
        "properties": {
          "targetProductIdentifier": {
            "description": "Target product of the product change identified either by the Issuer Product External Reference or the Product Reference.",
            "allOf": [
              {
                "$ref": "#/definitions/ProductIdentifier"
              }
            ]
          },
          "closingReason": {
            "type": "string",
            "description": "Closing reason used at the contract termination.\nFree text"
          },
          "feeReimbursementAtCardContractClosing": {
            "type": "boolean",
            "description": "Indicates whether the membership & account setup fees shall be reimbursed for the old contract at the contract termination (per card contract)"
          },
          "cardCreationSendingMode": {
            "type": "string",
            "description": "Sending mode used for all physical cards ordered in the contract\nSame value as provided in the Product change request"
          },
          "pinMailerSendingMode": {
            "type": "string",
            "description": "Sending mode used for all PIN mailers created for the contract\nSame value as provided in the Product change request"
          },
          "cardChanges": {
            "type": "array",
            "description": "List of card changes requested during the product change (optional).\nSame value as provided in the Product change request ",
            "items": {
              "$ref": "#/definitions/CardChange"
            }
          },
          "productChangeTrigger": {
            "type": "string",
            "description": "This field indicates when the product change is triggered once the product change request is received. \nIt depends of the product change configuration.\nPossible values are : \n- IMMEDIATE\n- ON_RENEWAL"
          },
          "productChangeReference": {
            "type": "string",
            "description": "External reference of the configured Product Change definition used for the product change."
          },
          "productChangeStatus": {
            "type": "string",
            "description": "Status of the product change\nPossible values are :\n- PENDING (for scheduled product change, date not reached)\n- PROCESSED (for immediate product change, or scheduled product change when date is reached)\n- CANCELLED (When a scheduled product change is cancelled before the scheduled product change date is reached)"
          },
          "futureChangeDate": {
            "type": "string",
            "format": "date-time",
            "description": "Future date of the product change. \nCalculated by the system in case of product change on renewal (= anticipated card renewal date (when only one card) or first anticipated card renewal date within the contract when contract has several cards).\nUTC time zone.\nFormat: \"yyyy-MM-dd'T'HH:mm:ssZ\""
          },
          "productChangeStatusDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date the status of the product change was last updated.\nUTC time zone.\nFormat: \"yyyy-MM-dd'T'HH:mm:ssZ\""
          }
        },
        "title": " ChangeProductResponse.ProductChangeInformation"
      },
      "ChangeProductRequest": {
        "type": "object",
        "required": [
          "targetProductIdentifier",
          "closingReason"
        ],
        "properties": {
          "targetProductIdentifier": {
            "description": "Target product to be used for the product change to create the new contract  identified either by the Issuer Product External Reference or the Product Reference.",
            "allOf": [
              {
                "$ref": "#/definitions/ProductIdentifier"
              }
            ]
          },
          "closingReason": {
            "type": "string",
            "description": "Closing reason to be used when the old contract is terminated (Free text)."
          },
          "feeReimbursementAtCardContractClosing": {
            "type": "boolean",
            "description": "Indicates whether the membership & account setup fees shall be reimbursed for the old contract at the contract termination (per card contract)"
          },
          "cardCreationSendingMode": {
            "type": "string",
            "description": "Sending mode applied to all physical cards,  in the new contract, sent to embosser among those allowed as per card product configuration (for physical cards only, if not provided then default one is retrieved from card product configuration if required)."
          },
          "pinMailerSendingMode": {
            "type": "string",
            "description": "Sending mode applied to all PIN mailers,  in the new contract, if any and sent to printer among those allowed as per card product configuration (if not provided then default one is retrieved from card product configuration if required)."
          },
          "productChangeTrigger": {
            "type": "string",
            "description": "Not used"
          },
          "cardChanges": {
            "type": "array",
            "description": "List of card changes requested during the product change (optional).\n(Currently only card class can be changed)\n\nFor each card within the new contract, the issuer can provide a new \"card class\" among the ones allowed by the target product.",
            "items": {
              "$ref": "#/definitions/CardChange"
            }
          }
        },
        "title": "ChangeProductRequest"
      },
      "CardChange": {
        "type": "object",
        "properties": {
          "cardContractIdentifier": {
            "description": "Card contract to which the card change is applied in the new card contract identified either by the Issuer card contract external reference or the Card contract reference.\nMandatory if a card change is requested.",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "cardClass": {
            "type": "string",
            "description": "Card class for the new card"
          }
        },
        "title": "CardChange"
      },
      "ApiResponseEntityChangeProductResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ChangeProductResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityChangeProductResponse"
      },
      "ChangeProductResponse": {
        "type": "object",
        "properties": {
          "originalContract": {
            "$ref": "#/definitions/OriginalContract"
          },
          "changedContract": {
            "$ref": "#/definitions/ChangedContract"
          },
          "productChangeInformation": {
            "$ref": "#/definitions/ProductChangeInformation"
          }
        },
        "title": "ChangeProductResponse"
      },
      "OriginalContract": {
        "type": "object",
        "description":"Only if a product change is triggered by card replacement. Represents the original contract data before product change has occured",
        "properties": {
          "contractIdentifier": {
            "description": "Identification of the contract either by the Issuer contract external reference or the Contract reference.",
            "allOf": [
              {
                "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Current status of the contract.\nRefer to Contract.status"
          },
          "productIdentifier": {
            "description": "Identification of the product change identified either by the Issuer Product External Reference or the Product Reference.",
            "allOf": [
              {
                "$ref": "#/definitions/ProductIdentifier"
              }
            ]
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OriginalAccount"
            }
          },
          "cardContracts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OriginalCardContract"
            }
          },
          "closingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of cloture of the contract"
          },
          "changedContractIdentifier": {
            "description": "Identification of the new contract either by the Issuer contract external reference or the Contract reference.",
            "allOf": [
              {
                "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          }
        },
        "title": " ChangeProductResponse.OriginalContract"
      },
      "OriginalAccount": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "description": "Identification of the account either by the Issuer account external reference or the account reference.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Current status of the account.\nRefer to Account.status"
          },
          "changedAccountIdentifier": {
            "description": "Identification of the new account either by the Issuer account external reference or the account reference.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          }
        },
        "title": "OriginalAccount"
      },
      "OriginalCardContract": {
        "type": "object",
        "properties": {
          "cardContractIdentifier": {
            "description": "Identification of the card contract either by the Issuer card contract external reference or the card contract reference.",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Current status of the card contract.\nRefer to CardContract.status"
          },
          "changedCardContractIdentifier": {
            "description": "Identification of the new card contract either by the Issuer card contract external reference or the card contract reference.",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/OriginalCard"
            }
          }
        },
        "title": "OriginalCardContract"
      },
      "OriginalCard": {
        "type": "object",
        "properties": {
          "cardIdentifier": {
            "description": "Identification of the card either by the Issuer card external reference or the card reference.",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "maskedPan": {
            "type": "string",
            "description": "Masked Pan"
          },
          "expiryDate": {
            "description": "Expiry Date",
            "type": "string",
            "format": "date-time"
          },
          "panSequenceNumber": {
            "type": "string",
            "description": "Pan Sequence Number"
          },
          "status": {
            "type": "string",
            "description": "Current status of the card.\nRefer to Card.internalStatus"
          }
        },
        "title": "OriginalCard"
      },
      "ChangedContract": {
        "type": "object",
        "description":"Only if a product change is triggered by card replacement. Represents the new contract data after product change has occured",
        "properties": {
          "contractIdentifier": {
            "description": "Identification of the contract either by the Issuer contract external reference or the Contract reference.",
            "allOf": [
              {
                "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Current status of the contract.\nRefer to Contract.status"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of creation of the contract"
          },
          "signatureDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of signature of the contract"
          },
          "contractOwnerIdentifier": {
            "description": "contract owner identifier",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "productIdentifier": {
            "description": "Identification of the product change identified either by the Issuer Product External Reference or the Product Reference.",
            "allOf": [
              {
                "$ref": "#/definitions/ProductIdentifier"
              }
            ]
          },
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ChangedAccount"
            }
          },
          "cardContracts": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ChangedCardContract"
            }
          },
          "originalContractIdentifier": {
            "description": "Identification of the original contract either by the Issuer contract external reference or the Contract reference.",
            "allOf": [
              {
                "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          }
        },
        "title": " ChangeProductResponse.ChangedContract"
      },
      "ChangedAccount": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "description": "Identification of the account either by the Issuer account external reference or the account reference.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "root": {
            "type": "boolean",
            "description": "Indicate whether this account is the root account or not."
          },
          "accountOwnerIdentifier": {
            "description": "account owner identifier",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "accountGuarantorIdentifier": {
            "description": "account guarantor identifier",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Current status of the account.\nRefer to Account.status"
          },
          "originalAccountIdentifier": {
            "description": "Identification of the new account either by the Issuer account external reference or the account reference.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          }
        },
        "title": "ChangedAccount"
      },
      "ChangedCardContract": {
        "type": "object",
        "properties": {
          "cardContractIdentifier": {
            "description": "Identification of the card contract either by the Issuer card contract external reference or the card contract reference.",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Current status of the card contract.\nRefer to CardContract.status"
          },
          "card": {
            "$ref": "#/definitions/ChangedCard"
          },
          "cardHolderIdentifier": {
            "description": "card holder identifier",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "principalSupplementaryCardIndicator": {
            "type": "string",
            "description": "Indicates whether the card is a Principal or Supplementary card."
          },
          "relatedAccounts": {
            "type": "array",
            "description": "Related Accounts",
            "items": {
              "$ref": "#/definitions/AccountRelation"
            }
          },
          "originalCardContractIdentifier": {
            "description": "Identification of the original card contract either by the Issuer card contract external reference or the card contract reference.",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          }
        },
        "title": "ChangedCardContract"
      },
      "ChangedCard": {
        "type": "object",
        "properties": {
          "cardIdentifier": {
            "description": "Identification of the card either by the Issuer card external reference or the card reference.",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "maskedPan": {
            "type": "string",
            "description": "Masked Pan"
          },
          "expiryDate": {
            "description": "Expiry Date",
            "type": "string",
            "format": "date-time"
          },
          "pan": {
            "type": "string",
            "description": "Pan (depends on user rights)"
          },
          "panReference": {
            "type": "string",
            "description": "Reference related to the PAN"
          },
          "orders": {
            "type": "array",
            "description": "Orders",
            "items": {
              "$ref": "#/definitions/ChangeProductResponseOrder"
            }
          },
          "panSequenceNumber": {
            "type": "string",
            "description": "Pan Sequence Number"
          },
          "status": {
            "type": "string",
            "description": "Current status of the card.\nRefer to Card.status"
          }
        },
        "title": "ChangedCard"
      },
      "ChangeProductResponseOrder": {
        "type": "object",
        "properties": {
          "orderIdentifier": {
            "description": "Identification of the order either by the Issuer order external reference or the order reference.",
            "allOf": [
              {
                "$ref": "#/definitions/OrderIdentifier"
              }
            ]
          },
          "orderType": {
            "type": "string",
            "description": "Order type"
          },
          "currentInternalStatus": {
            "type": "string",
            "description": "Current status of the order.\nRefer to Order.currentInternalStatus"
          }
        },
        "title": "Order"
      },
      "CancelProductChangeRequest": {
        "type": "object",
        "properties": {
          "feeReimbursementAtCardContractClosingForChangedContract": {
            "type": "boolean",
            "description": "Indicates if the related membership/account setup fees must be partially reimbursed after the closure of the changed contract in case of cancellation of an already processed product change."
          }
        },
        "title": "CancelProductChangeRequest"
      },
      "ApiResponseEntityCancelProductChangeResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CancelProductChangeResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCancelProductChangeResponse"
      },
      "CancelProductChangeResponse": {
        "type": "object",
        "properties": {
          "contractIdentifier": {
            "description": "Identification of the contract either by the Issuer contract external reference or the Contract reference.",
            "allOf": [
              {
                "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "productChangeStatus": {
            "type": "string",
            "description": "Status of the ProductChange (CANCELLED)"
          },
          "originalContract": {
            "description": "Data related to the original contract",
            "allOf": [
              {
            "$ref": "#/definitions/CancelProductChangeResponseOriginalContract"
              }
            ]
          },
          "changedContract": {
            "description": "Data related to the changed contract (new contract from new product),returned only if the product change was already processed.In this case only, the  changed contract is immediately closed.",
            "allOf": [
              {
            "$ref": "#/definitions/CancelProductChangeResponseChangedContract"
          }
            ]
          }
        },
        "title": "CancelProductChangeResponse"
      },
      "CancelProductChangeResponseOriginalContract": {
        "type": "object",
        "properties": {
          "contractIdentifier": {
            "description": "Identification of the contract either by the Issuer contract external reference or the Contract reference.",
            "allOf": [
              {
                "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "productIdentifier": {
            "description": "Original product of the product change identified either by the Issuer Product External Reference or the Product Reference.",
            "allOf": [
              {
                "$ref": "#/definitions/ProductIdentifier"
              }
            ]
          },
          "closingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Closing date of the original contractE.g. in case of cancellation of an already processed product change, no closing date is planned anymore for the original contract"
          },
          "accounts": {
            "type": "array",
            "description": "Data related to the accounts linked to the original contract",
            "items": {
              "$ref": "#/definitions/CancelProductChangeResponseOriginalAccount"
            }
          },
          "cardContracts": {
            "type": "array",
            "description": "Data related to the card contracts linked to the original contract",
            "items": {
              "$ref": "#/definitions/CancelProductChangeResponseOriginalCardContract"
            }
          }
        },
        "title": "CancelProductChangeResponse.OriginalContract"
      },
      "CancelProductChangeResponseOriginalAccount": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "description": "Identification of the account either by the Issuer account external reference or the account reference.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "root": {
            "type": "boolean",
            "description": "Indicates if the account is the root account of the account hierarchy.\nRefer to Account.root"
          },
          "status": {
            "type": "string",
            "description": "Current status of the account (can be ACTIVE, BEING-CLOSED or CLOSED).\nE.g. in case of cancellation of an already processed product change, the original account status stays unchanged but no closing date is planned anymore for the original account."
          }
        },
        "title": "CancelProductChangeResponse.OriginalAccount"
      },
      "CancelProductChangeResponseOriginalCardContract": {
        "type": "object",
        "properties": {
          "cardContractIdentifier": {
            "description": "Current status of the card contract (CLOSED because the changed contract is immediately closed).",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Current status of the card contract (can be CREATED, ACTIVE or CLOSED)E.g. in case of cancellation of an already processed product change, if the original card contract was active with a closing date not reached, it stays active and no closing date is planned anymore for the original card contract and the renewal/replacement of cards are unblocked for the card contract."
          }
        },
        "title": "CancelProductChangeResponse.OriginalCardContract"
      },
      "CancelProductChangeResponseChangedContract": {
        "type": "object",
        "properties": {
          "contractIdentifier": {
            "description": "Identification of the changed contract either by the Issuer account external reference or the account reference.",
            "allOf": [
              {
                "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "productIdentifier": {
            "description": "Target product of the product change identified either by the Issuer Product External Reference or the Product Reference.",
            "allOf": [
              {
                "$ref": "#/definitions/ProductIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Current status of the changed contract (CLOSED because the changed contract is immediately closed)"
          },
          "closingDate": {
            "type": "string",
            "format": "date-time",
            "description": "As the changed contract is immediately closed, its closing date is equal to the current date and time."
          },
          "accounts": {
            "type": "array",
            "description": "Data related to the accounts linked to the changed contract",
            "items": {
              "$ref": "#/definitions/CancelProductChangeResponseChangedAccount"
            }
          },
          "cardContracts": {
            "type": "array",
            "description": "Data related to the card contracts linked to the changed contract",
            "items": {
              "$ref": "#/definitions/CancelProductChangeResponseChangedCardContract"
            }
          }
        },
        "title": "CancelProductChangeResponse.ChangedContract"
      },
      "CancelProductChangeResponseChangedAccount": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "description": "Identification of the account either by the Issuer account external reference or the account reference.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "root": {
            "type": "boolean",
            "description": "Indicate whether this account is the root account or not."
          },
          "status": {
            "type": "string",
            "description": "Current status of the account (BEING_CLOSED because the standard account closing process has to be started and the account can be closed when certain conditions are met (e.g. minimum delay of N days, no pending payment, ...)"
          }
        },
        "title": "CancelProductChangeResponse.ChangedAccount"
      },
      "CancelProductChangeResponseChangedCardContract": {
        "type": "object",
        "properties": {
          "cardContractIdentifier": {
            "description": "Identification of the card contract either by the Issuer card contract external reference or the card contract reference.",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Current status of the card contract.\nRefer to CardContract.status"
          }
        },
        "title": "CancelProductChangeResponseChanged.CardContract"
      },
      "ForceProductChangeRequest": {
        "type": "object",
        "required": [
          "cardIdentifier"
        ],
        "properties": {
          "cardIdentifier": {
            "description": "Identification of the permanently blocked card to be transferred into the new contract (if the card has been blocked after a product change request), not in cancelled status, but in the status configured in the target product. ",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "blockingReason": {
            "type": "string",
            "description": "Blocking reason of the new card"
          }
        },
        "title": "ForceProductChangeRequest"
      },
      "ApiResponseEntityForceProductChangeResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ForceProductChangeResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityForceProductChangeResponse"
      },
      "ApiResponseEntityCorporateEmployeeAccountResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CorporateEmployeeAccount"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCorporateEmployeeAccountResponse"
      },
      "ForceProductChangeResponse": {
        "type": "object",
        "properties": {
          "originalContract": {
            "$ref": "#/definitions/OriginalContract"
          },
          "changedContract": {
            "$ref": "#/definitions/ChangedContract"
          },
          "productChangeInformation": {
            "$ref": "#/definitions/ProductChangeInformation"
          }
        },
        "title": "ForceProductChangeResponse"
      },
      "ChangePayingAccountRequest": {
        "type": "object",
        "required": [
          "payingAccountType"
        ],
        "properties": {
          "payingAccountType": {
            "type": "string",
            "description": "For a certain corporate contract it is possible to change the paying account type for all accounts from paid by the account itself (usually paid by the employee) to paid by the root account (usually paid by the company) or the inverse.\n\nPossible values:\nROOT_PAYS\nITSELF_PAYS\n\nRefer to Account.payingAccountType",
            "enum": [
              "ROOT_PAYS",
              "ITSELF_PAYS"
            ]
          }
        },
        "title": "ChangePayingAccountRequest"
      },
      "ApiResponseEntityChangePayingAccountResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ChangePayingAccountResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityChangePayingAccountResponse"
      },
      "ChangePayingAccountResponse": {
        "type": "object",
        "properties": {
          "corporateContract": {
            "$ref": "#/definitions/ChangePayingAccountResponseCorporateContract"
          }
        },
        "title": "ChangePayingAccountResponse"
      },
      "CancelChangePayingAccountResponse": {
        "type": "object",
        "properties": {
          "contractIdentifier": {
            "description": "Identification of the corporate contract either by Issuer contract external reference or by contract reference",
            "allOf": [
              {
                "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          }
        },
        "title": "CancelChangePayingAccountResponse"
      },
      "ChangePayingAccountResponseCorporateContract": {
        "type": "object",
        "properties": {
          "contractIdentifier": {
            "description": "Identification of the corporate contract either by Issuer contract external reference or by contract reference ",
            "allOf": [
              {
                "$ref": "#/definitions/ContractIdentifier"
              }
            ]
          },
          "rootAccountIdentifier": {
            "description": "Identification of the root account either by Issuer account external reference or by account reference",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "accounts": {
            "type": "array",
            "description": "List of all accounts within the corporate contract",
            "items": {
              "$ref": "#/definitions/ChangePayingAccountResponseAccount"
            }
          }
        },
        "title": "ChangePayingAccountResponseCorporateContract"
      },
      "ChangePayingAccountResponseAccount": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "description": "Identification of the account either by Issuer account external reference or by account reference",
            "allOf": [
              {
            "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Current status of the account"
          },
          "payingAccountIdentifier": {
            "description": "Identification of the paying account either by Issuer account external reference or by account reference",
            "allOf": [
              {
            "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "futureUpdate": {
            "description": "In case change of paying account cannot be executed immediately, future update is scheduled for the account",
            "allOf": [
              {
                "$ref": "#/definitions/ChangePayingAccountResponseAccountFutureUpdate"
              }
            ]
          }
        },
        "title": "ChangePayingAccountResponseAccount"
      },
      "ChangePayingAccountResponseAccountFutureUpdate": {
        "type": "object",
        "properties": {
          "payingAccountType": {
            "type": "string",
            "description": "The new paying account type when the change of paying account will be applied (most upcoming cycle closure date).\n Possible values: \n ROOT_PAYS \n ITSELF_PAYS",
            "enum": [
              "ROOT_PAYS",
              "ITSELF_PAYS"
            ]
          },
          "payingAccountIdentifier": {
            "description": "Identification of the paying account either by Issuer account external reference or by account reference",
            "allOf": [
              {
            "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "futureChangeDate": {
            "description": "Indicates the date when the updates will be processed (mandatory)",
            "type": "string",
            "format": "date-time"
          },
          "creationDate": {
            "description": "Indicates the date when the future update was created (mandatory)",
            "type": "string",
            "format": "date-time"
          }
        },
        "title": "ChangePayingAccountResponseAccountFutureUpdate"
      },
      "ModifyVelocityLimitOverrideRequest": {
        "type": "object",
        "properties": {
          "activationEndTime": {
            "type": "string",
            "format": "date-time",
            "description": "Last point in time at which the override will be considered.\nHas to be later than ActivationStartTime. Can be present without ActivationStartTime.\nIf not provided the override will be taken into account forever.\nExample: 2020-07-28T10:13:15.421Z"
          },
          "activationStartTime": {
            "type": "string",
            "format": "date-time",
            "description": "First point in time at which the override will be considered.\nHas to be before ActivationEndTime. Can be present without ActivationEndTime.\nIf not provided the override will be taken into account immediately.\nExample: 2020-07-28T10:13:15.421Z"
          },
          "maximumAmount": {
            "description": "In most of the cases the value given here will be positive or zero.\nIn case JSON null is provided what is configured on higher levels becomes effective.\nIf MaximumAmountCheck = true then a non-null value must be given. Otherwise the field must be absent.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "maximumAmountCheck": {
            "type": "boolean",
            "description": "In case JSON null is provided what is configured on higher levels becomes effective."
          },
          "maximumCount": {
            "type": "integer",
            "format": "int32",
            "description": "In case JSON null is provided what is configured on higher levels becomes effective.\nIf MaximumCountCheck = true then a non-null value must be given. Otherwise the field must be absent."
          },
          "maximumCountCheck": {
            "type": "boolean",
            "description": "In case JSON null is provided what is configured on higher levels becomes effective."
          },
          "priority": {
            "type": "integer",
            "description": "In case multiple overrides with overlapping activation times are existing this information is used to resolve this situation by applying the overrides one by one starting with the one with lowest priority. The priority needs to be unique accross all overrides with overlapping activation timespans, which are associated with the same velocity check and the same account. That means, two overrides for the same account and same velocity check can have the same priority, if they are not active at the same time. If they are active at the same time, unique priorities must be given. If property is not set, it will be set to a default value of 0"
          }
        },
        "title": "ModifyVelocityLimitOverrideRequest"
      },
      "CreateMandateRequest": {
        "type": "object",
        "properties": {
          "debtorAddressType": {
            "type": "string",
            "description": "Deprecated field - not to be used"
          },
          "debtorEmail": {
            "type": "string",
            "description": "SEPA debtor e-mail "
          },
          "debtorId": {
            "type": "string",
            "description": "Deprecated field - not to be used"
          },
          "debtorName": {
            "type": "string",
            "description": "Deprecated field - not to be used"
          },
          "debtorPhoneNumber": {
            "type": "string",
            "description": "SEPA debtor phone number"
          },
          "debtorPostalAddress": {
            "allOf": [
              {
                "$ref": "#/definitions/SepaMandateMailAddress"
              }
            ],
            "description": "Address lines 1 and 2, street name, building number, post code, town name, country and country subdivision can be provided in certain cases - refer to SEPA rules when debtor's address is required."
          },
          "mandateContractId": {
            "type": "string",
            "description": "Mandate underlying contract identifier (external reference) used by the issuer. E.g., if the mandate is set up along with the contract creation, it may contain the application number, etc."
          },
          "mandateNatureType": {
            "type": "string",
            "description": "SEPA mandate nature type. PAPER_MANDATE is taken as a default.\nList of mandate possible nature types (for future usage only, not to be used):\nCOMPUTING_MIGRATION_NO_SIGNATURE, COMPUTING_MIGRATION_WITH_SIGNATURE, FR_MIGRATION_DOMESTIC_FILES, \nMANDATE_FROMDIGITALIZATION, e_MANDATE, SIGNATURE_MANDATE, MYBANK_e_MANDATE, IDEAL_e_MANDATE"
          },
          "mandateSignCity": {
            "type": "string",
            "description": "SEPA mandate city of signature"
          },
          "mandateSignDate": {
            "type": "string",
            "format": "date-time",
            "description": "The mandate signature date has to be provided except if the SEPA mandate UMR is provided (comes from another system)."
          },
          "sepaMandateUmr": {
            "type": "string",
            "description": "Unique reference to identify the SEPA mandate. Can be provided to our system if mandate is created explicitly by another system."
          },
          "sepaMandateUir": {
            "type": "string",
            "description": "Deprecated field - not to be used\nUnique internal reference of the given mandate. Not to be overridden, as there is a risk for an internal business process."
          },
          "sepaCreditorId": {
            "type": "string",
            "description": "Deprecated field - not to be used\nWill be retrieved from the product itself "
          },
          "debtorIban": {
            "type": "string",
            "description": "Deprecated field - not to be used\niban has been introduced instead."
          },
          "iban": {
            "type": "string",
            "description": "Customer (debtor) Iban used for the repayments via sepa direct debit.\nHas to be provided except if the SEPA mandate UMR is provided (comes from another system)."
          },
          "secondIban": {
            "type": "string",
            "description": "Deprecated field - not to be used"
          },
          "debtorBic": {
            "type": "string",
            "description": "Deprecated field - not to be used\nbic has been introduced instead."
          },
          "bic": {
            "type": "string",
            "description": "Customer (debtor) Bic used for the repayments via sepa direct debit."
          },
          "validateMandate": {
            "type": "boolean",
            "description": "Deprecated field - not to be used\nNot to be overridden, as there is a risk for an internal business process."
          },
          "ibanOwnerName": {
            "type": "string",
            "description": "Customer (debtor) Iban owner name used for the repayments via sepa direct debit.\nHas to be provided except if the SEPA mandate UMR is provided (comes from another system)."
          }
        },
        "title": "CreateMandateRequest"
      },
      "ApiResponseEntityCreateMandateResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "accountIdentifier": {
            "description": "Refer to Account.accountIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "sepaMandateStatus": {
            "type": "string",
            "description": "Refer to Account.sepaMandateStatus"
          },
          "sepaMandateUir": {
            "type": "string",
            "description": "Refer to Account.sepaMandateUir"
          },
          "sepaMandateUmr": {
            "type": "string",
            "description": "Refer to Account.sepaMandateUmr"
          }
        },
        "title": "ApiResponseEntityCreateMandateResponse"
      },
      "CancelMandateRequest": {
        "type": "object",
        "required": [
          "cancellationReason"
        ],
        "properties": {
          "cancellationDate": {
            "type": "string",
            "format": "date-time",
            "description": "SEPA mandate cancellation date.\nA date in the future can be provided (mandate is cancelled when the date is reached), otherwise defaults to the current date (mandate is cancelled immediately)."
          },
          "cancellationReason": {
            "type": "string",
              "description": "SEPA mandate cancellation reason\nList of mandate possible cancelation reasons:\n(RECEIVED_FINAL,USER_ACTION,\nOBSCOLESCENCE,\nREFUSED,\nREVOCATION_ASKED_BY_DEBTOR,\nREVOCATION_ASKED_BY_CREDITOR,\nDELETION_ASKED_BY_DEBTOR,\nDELETION_ASKED_BY_CREDITOR)"
          },
          "validateMandate": {
            "type": "boolean",
            "description": "Deprecated field – not to be used"
          },
          "cancelMandateOnExternalSystem": {
            "type": "boolean",
            "description": "Deprecated field – not to be used"
          }
        },
        "title": "CancelMandateRequest"
      },
      "CreateOperationInterestRequest": {
        "type": "object",
        "required": [
          "externalOperationReference",
          "externalOperationDate",
          "externalOperationServicePoster",
          "interestType",
          "referenceAmount"
        ],
        "properties": {
          "description": {
            "description": "Textual description of the operation\nCan contain a free text that can be used when the operation is presented to the Customer",
            "type": "string"
          },
          "externalOperationReference": {
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nExternal reference of the operation in the caller system to be created.",
            "type": "string"
          },
          "externalOperationDate": {
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe date the operation is performed (in general, the current date should be provided).",
            "type": "string",
            "format": "date-time"
          },
          "externalOperationServicePoster": {
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe identifier of the external system which provides the operation to be posted (free text)",
            "type": "string"
          },
          "externalOperationCode": {
            "description": "The external operation code of the interest operation can be provided to identify the operation type in the issuer system.",
            "type": "string"
          },
          "interestType": {
            "description": "The issuer must provide the type of Interest for an interest operation\nPossible values: CREDIT / DEBIT",
            "type": "string"
          },
          "referenceAmount": {
            "description": "The reference amount has to be provided (amount/exponent/currency values)\nIf a debit operation is posted, the operation amount has to be positive.\nIf a credit operation is posted, the operation amount has to be negative.\nThe currency must be the same as the posting account.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          }
        },
        "title": "CreateOperationInterestRequest"
      },
      "ReverseOperationInterestRequest": {
        "type": "object",
        "required": [
          "externalMatchingOperationReference",
          "externalMatchingOperationDate",
          "externalMatchingOperationServicePoster",
          "externalOperationReference",
          "externalOperationDate",
          "externalOperationServicePoster"
        ],
        "properties": {
          "description": {
            "description": "Textual description of the operation\nCan contain a free text that can be used when the operation is presented to the Customer.",
            "type": "string"
          },
          "externalMatchingOperationReference": {
            "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system.\nIt is used for retrieving the operation to be reversed.\nThe field contains the value of externalOperationReference of the original operation to be reversed.",
            "type": "string"
          },
          "externalMatchingOperationDate": {
            "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system.\nIt is used for retrieving the operation to be reversed.\nThe field contains the value of externalOperationDate of the original operation to be reversed.",
            "type": "string",
            "format": "date-time"
          },
          "externalMatchingOperationServicePoster": {
            "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system.\nIt is used for retrieving the operation to be reversed.\nThe field contains the value of externalOperationServicePoster of the original operation to be reversed.",
            "type": "string"
          },
          "externalOperationReference": {
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nExternal reference of the operation to be created.",
            "type": "string"
          },
          "externalOperationDate": {
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe date the operation is performed (in general, the current date should be provided)",
            "type": "string",
            "format": "date-time"
          },
          "externalOperationServicePoster": {
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe identifier of the external system which provides the operation to be posted (free text).",
            "type": "string"
          }
        },
        "title": "ReverseOperationInterestRequest"
      },
      "CreateOperationBonusRequest": {
        "type": "object",
        "required": [
          "bonusProgramReference",
          "externalOperationReference",
          "externalOperationDate",
          "externalOperationServicePoster"
        ],
        "properties": {
          "description": {
            "description": "Textual description of the operation\nCan contain a free text that can be used when the operation is presented to the Customer",
            "type": "string"
          },
          "bonusProgramReference": {
            "description": "The issuer must provide the reference of the Bonus/Loyalty program for which the reward is applied.",
            "type": "string"
          },
          "externalOperationReference": {
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nExternal reference of the operation to be created.",
            "type": "string"
          },
          "externalOperationDate": {
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe date the operation is performed (in general, the current date should be provided).",
            "type": "string",
            "format": "date-time"
          },
          "externalOperationServicePoster": {
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe identifier of the external system which provides the operation to be posted (free text)",
            "type": "string"
          },
          "externalOperationCode": {
            "description": "The external operation code of the Bonus operation can be provided to identify the operation type in the issuer system.",
            "type": "string"
          },
          "referenceAmount": {
            "description": "The reference amount has to be provided for a monetary operation (amount/exponent/currency values)\nIf a debit operation is posted, the operation amount has to be positive.\nIf a credit operation is posted, the operation amount has to be negative.\nThe currency must be the same as the posting account.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "loyaltyPointAmount": {
            "description": "The loyalty point amount has to be provided for a non-monetary operation (value/unit)\nIf a debit operation is posted, the operation amount has to be positive.\nIf a credit operation is posted, the operation amount has to be negative.\nThe loyalty point unit must be defined by the Bonus/Loyalty program.",
            "allOf": [
              {
                "$ref": "#/definitions/LoyaltyPoint"
              }
            ]
          },
          "rewardedOperationIdentifier": {
            "description": "The issuer can provide the identifier of the operation to be rewarded, if any.\nIf provided, the triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) has not to be provided.",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          },
          "rewardedExternalMatchingOperationReference": {
            "description": "The issuer can provide the triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) of the operation to be rewarded if any.\nIf the triplet is provided, the identifier of the operation to be rewarded has not to be provided.\nExternal reference of the operation to be rewarded.",
            "type": "string"
          },
          "rewardedExternalMatchingOperationDate": {
            "description": "The issuer can provide the triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) of the operation to be rewarded if any.\nIf the triplet is provided, the identifier of the operation to be rewarded has not to be provided.\nOperation date of the operation to be rewarded.",
            "type": "string",
            "format": "date-time"
          },
          "rewardedExternalMatchingOperationServicePoster": {
            "description": "The issuer can provide the triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) of the operation to be rewarded if any.\nIf the triplet is provided, the identifier of the operation to be rewarded has not to be provided.\nIdentifier of the external system of the operation to be rewarded.",
            "type": "string"
          }
        },
        "title": "CreateOperationBonusRequest"
      },
      "ReverseOperationBonusRequest": {
        "type": "object",
        "required": [
          "externalMatchingOperationReference",
          "externalMatchingOperationDate",
          "externalMatchingOperationServicePoster",
          "externalOperationReference",
          "externalOperationDate",
          "externalOperationServicePoster"
        ],
        "properties": {
          "description": {
            "description": "Textual description of the operation\nCan contain a free text that can be used when the operation is presented to the Customer.",
            "type": "string"
          },
          "externalMatchingOperationReference": {
            "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system.\nIt is used for retrieving the operation to be reversed.\nThe field contains the value of externalOperationReference of the original operation to be reversed.",
            "type": "string"
          },
          "externalMatchingOperationDate": {
            "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system.\nIt is used for retrieving the operation to be reversed.\nThe field contains the value of externalOperationDate of the original operation to be reversed.",
            "type": "string",
            "format": "date-time"
          },
          "externalMatchingOperationServicePoster": {
            "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system.\nIt is used for retrieving the operation to be reversed.\nThe field contains the value of externalOperationServicePoster of the original operation to be reversed.",
            "type": "string"
          },
          "externalOperationReference": {
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nExternal reference of the operation to be created.",
            "type": "string"
          },
          "externalOperationDate": {
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe date the operation is performed (in general, the current date should be provided) ",
            "type": "string",
            "format": "date-time"
          },
          "externalOperationServicePoster": {
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe identifier of the external system which provides the operation to be posted (free text).",
            "type": "string"
          }
        },
        "title": "ReverseOperationBonusRequest"
      },
      "CreateCompanyRequest": {
        "type": "object",
        "required": [
          "active",
          "corporateName",
          "commercialStatus",
          "addresses"
        ],
        "properties": {
          "issuerCustomerExternalReference": {
            "type": "string",
            "description": "Customer (as company) identifier provided by the Issuer"
          },
          "active": {
            "type": "boolean",
            "description": "DEPRECATED"
          },
          "corporateName": {
            "type": "string",
            "description": "Name of the company"
          },
          "nationalFiscalIdentifier": {
            "type": "string",
            "description": "National fiscal identifier of the company (for information only)"
          },
          "vatCode": {
            "type": "string",
            "description": "Value added tax code of the company (for information only). Free text."
          },
          "type": {
            "type": "string",
            "description": "Type of company (e.g. Governmental, public company, private company). For information only. Free text"
          },
          "size": {
            "type": "string",
            "description": "Size of the company. Free text (e.g. small, medium, 100)."
          },
          "businessArea": {
            "type": "string",
            "description": "Definition of the activity of the company. Free text."
          },
          "activityCode": {
            "type": "string",
            "description": "Activity of the company (e.g. 'rent car', 'retailer'). Free text."
          },
          "revenue": {
            "type": "string",
            "description": "Annual turnover of the company. Free text"
          },
          "legalForm": {
            "type": "string",
            "description": "Definition of the legal form of the company (e.g. in France : SA, SARL, EURL). Free text."
          },
          "commercialStatus": {
            "type": "string",
            "description": "Commercial status of the company (e.g. 'normal', 'Active in Liquidation', 'Inactive'). List of possible values is determined per issuer. A default value is defined for each issuer."
          },
          "preferredCorrespondenceLanguage": {
            "type": "string",
            "description": "Preferred correspondence language of the company (optional). Free text but ISO639-1 code is recommended (e.g. ‘nl’,’fr’,’de’,’en’). If present, the value can be subject to a validation process if a specific rule has been configured at issuer level."
          },
          "partnerExternalReference": {
            "type": "string",
            "description": "External Reference provided by the issuer"
          },
          "specificFields": {
            "type": "object",
            "description": "A list of values (label:value|) related to a company that can be provided by e.g. the issuer for information or usage by other systems (optional).Those provided values have no impact on our system business processes.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "addresses": {
            "type": "array",
            "description": "Addresses (MAIL, PHONE, EMAIL) created during the company's creation.The HEAD_OFFICE address is mandatory",
            "items": {
              "$ref": "#/definitions/CreateConsumerContractRequestAddress"
            }
          },
          "contacts": {
            "type": "array",
            "description": "Contacts are persons who are accountable for the company",
            "items": {
              "$ref": "#/definitions/CreateContactRequest"
            }
          }
        },
        "title": "CreateCompanyRequest"
      },
      "CreateCustomerRequest": {
        "type": "object",
        "required": [
          "firstName",
          "lastName",
          "addresses"
        ],
        "properties": {
          "issuerCustomerExternalReference": {
            "type": "string",
            "description": "Reference provided by the Issuer"
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Courtesy Title of Person Customer (optional). Free text. If present, the value can be subject to a validation process if a specific rule has been configured at issuer level."
          },
          "firstName": {
            "type": "string",
            "description": "First Name of Person Customer (mandatory)"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name of Person Customer (mandatory)"
          },
          "secondFirstName": {
            "type": "string",
            "description": "Second First Name of Person Customer (optional)"
          },
          "sex": {
            "type": "string",
            "description": "Gender of Person Customer (optional). Free text. If present, the value can be subject to a validation process if a specific rule has been configured at issuer level."
          },
          "maidenName": {
            "type": "string",
            "description": "Maiden Name of Person Customer (optional)"
          },
          "offlineRiskCategory": {
            "type": "string",
            "description": "Categorizes the person for offline risk management. List of possible values is defined per Issuer  (eg.Business, Student, Teenager, Standard). "
          },
          "onlineRiskCategory": {
            "type": "string",
            "description": "Categorizes the person for online risk management. List of possible values is defined per Issuer (eg.Business, Student, Teenager, Standard) "
          },
          "maritalStatus": {
            "type": "string",
            "description": "Marital Status of Person Customer. Free text (optional)"
          },
          "birthDate": {
            "type": "string",
            "format" : "date-time",
            "description": "Birth date of Person Customer (optional). If present, the value can be subject to a validation process if a specific rule has been configured at issuer level."
          },
          "birthPlace": {
            "type": "string",
            "description": "Birth Place of Person Customer (optional) Free text "
           },
          "nationality": {
            "type": "string",
            "description": "Nationality of Person Customer(optional). Free text."
          },
          "profession": {
            "type": "string",
            "description": "Profession of Person Customer. Free text (optional)"
          },
          "employerName": {
            "type": "string",
            "description": "Employer's Name of Person Customer. (optional) Free text"
          },
          "employerAddress": {
            "type": "string",
            "description": "Employer's Address of Person Customer (optional) Free text"
          },
          "monthlySalary": {
            "type": "string",
            "description": "Average monthly salary of Person Customer (optional)"
          },
          "picture": {
            "type": "string",
            "description": "Picture reference of the Person Customer (eg url, filename). Free text. (optional)"
          },
          "url1": {
            "type": "string",
            "description": "First URL of the Person Customer (optional)"
          },
          "url2": {
            "type": "string",
            "description": "Second URL of the Person Customer (optional)"
          },
          "secretQuestion": {
            "type": "string",
            "description": "Secret Question for security (optional)"
          },
          "secretAnswer": {
            "type": "string",
            "description": "Answer to Secret Question for security (optional)"
          },
          "commercialStatus": {
            "type": "string",
            "description": "Defines the commercial status of a Person Customer among a list of possible values configured per issuer. One of the possible values can be set as default value (eg. Normal, Address Only, Bankruptcy, Active Customer). (mandatory)"
          },
          "preferredCorrespondenceLanguage": {
            "type": "string",
            "description": "Preferred correspondence language of the Person Customer (optional). Free text but ISO639-1 code is recommended (e.g. ‘nl’,’fr’,’de’,’en’). If present, the value can be subject to a validation process if a specific rule has been configured at issuer level."
          },
          "vatNumber": {
            "type": "string",
            "description": "Tax number. Useful if Person is indeed a company (optional)"
          },
          "vatCountry": {
            "type": "string",
            "description": "Tax country. Useful if Person is indeed a company (optional)"
          },
          "employee": {
            "type": "boolean",
            "description": "Flag indicating if the Person Customer is an employee of the issuer. If not provided, value is NULL(optional)"
          },
          "partnerExternalReference": {
            "type": "string",
            "description": "External Reference provided by the issuer (optional)"
          },
          "specificFields": {
            "type": "object",
            "description": "List of external data (label:value), separated by a `|` , related to a customer that can be provided by e.g. the issuer for information or for usage by other systems.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "doNotContact": {
            "type": "boolean",
            "description": "if the Person Customer does not want to be contacted by the issuer set to 'true' otherwise to be set to 'false'. If not provided, value is NULL(optional)"
          },
          "vulnerabilities": {
            "description": "List of vulnerabilities applicable to the customer.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Vulnerability"
            }
          },
          "vulnerabilityIndicator": {
            "type": "boolean",
            "description": "Indicates if the client is vulnerable or not"
          },
          "vulnerabilityNote": {
            "type": "string",
            "description": "note about the client's vulnerability (free text)"
          },
          "correspondenceName": {
            "type": "string",
            "description": "Correspondence Name of Person Customer (optional)"
          },
          "addresses": {
            "type": "array",
            "description": "List of active addresses whatever their type (MAIL, EMAIL, PHONE). See the Address's datatype for the detail list of the attributes",
            "items": {
              "$ref": "#/definitions/CreateCustomerRequestAddress"
            }
          },
          "contacts": {
            "type": "array",
            "description": "List of contacts of the customer.",
            "items": {
              "$ref": "#/definitions/CreateContactRequest"
            }
          }
        },
        "title": "CreateCustomerRequest"
      },
      "ApiResponseEntityCancelMandateResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "accountIdentifier": {
            "description": "Refer to Account.accountIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "sepaMandateStatus": {
            "type": "string",
            "description": "Refer to Account.sepaMandateStatus"
          },
          "sepaMandateUir": {
            "type": "string",
            "description": "Refer to Account.sepaMandateUir"
          },
          "sepaMandateUmr": {
            "type": "string",
            "description": "Refer to Account.sepaMandateUmr"
          }
        },
        "title": "ApiResponseEntityCancelMandateResponse"
      },
      "ApiResponseEntityCreateOperationInterestResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateOperationInterestResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateOperationInterestResponse"
      },
      "CreateOperationInterestResponse": {
        "type": "object",
        "required": [
          "operationIdentifier"
        ],
        "properties": {
          "operationIdentifier": {
            "description": "Identifier of the operation created during the interest generation (generated by our system)",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          }
        },
        "title": "CreateOperationInterestResponse"
      },
      "ApiResponseEntityReverseOperationInterestResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ReverseOperationInterestResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityReverseOperationInterestResponse"
      },
      "ReverseOperationInterestResponse": {
        "type": "object",
        "required": [
          "operationIdentifier"
        ],
        "properties": {
          "operationIdentifier": {
            "description": "Identifier of the operation created during the interest reversal (generated by our system)",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          }
        },
        "title": "ReverseOperationInterestResponse"
      },
      "ApiResponseEntityCreateOperationBonusResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateOperationBonusResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateOperationBonusResponse"
      },
      "CreateOperationBonusResponse": {
        "type": "object",
        "required": [
          "operationIdentifier"
        ],
        "properties": {
          "operationIdentifier": {
            "description": "Identifier of the operation created during the Bonus generation (generated by our system)",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          }
        },
        "title": "CreateOperationBonusResponse"
      },
      "ApiResponseEntityReverseOperationBonusResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ReverseOperationBonusResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityReverseOperationBonusResponse"
      },
      "ReverseOperationBonusResponse": {
        "type": "object",
        "required": [
          "operationIdentifier"
        ],
        "properties": {
          "operationIdentifier": {
            "description": "Identifier of the operation created during the Bonus reversal (generated by our system)",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          }
        },
        "title": "ReverseOperationBonusResponse"
      },
      "MonetaryAmountAlphaCurrency": {
        "type": "object",
        "properties": {
          "exponent": {
            "type": "integer",
            "format": "int32",
            "description": "Exponent of Amount. Number of decimal digits (mandatory)."
          },
          "isoCode": {
            "type": "string",
            "description": "Currency code of amount (mandatory)\nThe currency in ISO4217 alphabetic format.\nExample: EUR for Euro"
          },
          "value": {
            "type": "integer",
            "format": "int64",
            "description": "Integer amount value (mandatory).\nEx. if it is two hundred euros and 17 cents, then amount value is 20017 (exponent = 2 digits for currency=EUR)."
          }
        },
        "title": "MonetaryAmountAlphaCurrency"
      },
      "MultiCard": {
        "type": "object",
        "properties": {
          "cardId": {
            "type": "string",
            "description": "Card ID"
          },
          "cardIdentifier": {
            "description": "Unique identifier of the card",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "cardStatus": {
            "type": "string",
            "description": "Current status of the card \n Possible values: CREATED, ACTIVE, BLOCKED, DEACTIVATED, CANCELLED"
          },
          "permanentlyBlocked": {
            "type": "boolean",
            "description": "Indicates if the card is permanently blocked (true) or not (false). Default value is false"
          },
          "renewed": {
            "type": "boolean",
            "description": "Indicates if the card is renewed (true) or not (false). Default value is false"
          },
          "replaced": {
            "type": "boolean",
            "description": "Indicates if the card is replaced (true) or not (false). Default value is false"
          }
        },
        "title": "MultiCard"
      },
      "MultiCardInfo": {
        "type": "object",
        "properties": {
          "multiCardReference": {
            "type": "string",
            "description": "Main card reference"
          },
          "samePin": {
            "type": "boolean",
            "description": "Indicate if multi card set shares same PIN"
          },
          "multiCards": {
            "type": "array",
            "description": "List of multi cards",
            "items": {
              "$ref": "#/definitions/MultiCard"
            }
          }
        },
        "title": "MultiCardInfo"
      },
      "NotFoundErrorApiResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/NotFoundResponseMetadata"
              }
            ]
          }
        },
        "title": "NotFoundErrorApiResponse",
        "description": "Issuer response entity"
      },
      "NotFoundResponseMetadata": {
        "type": "object",
        "required": [
          "correlationId",
          "responseDateTime",
          "statusCode",
          "statusMessage"
        ],
        "properties": {
          "correlationId": {
            "type": "string",
            "example": 12,
            "description": "Wall clock time required from service to generate the response"
          },
          "responseDateTime": {
            "type": "string",
            "example": "format:yyyy-MM-dd'T'HH:mm:ss.SSSZ",
            "description": "Timestamp when response date was generated"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "example": 404,
            "description": "HTTP status code"
          },
          "statusMessage": {
            "type": "string",
            "example": "Not found",
            "description": "Executed REST API status message"
          }
        },
        "title": "NotFoundResponseMetadata"
      },
      "Operation": {
        "type": "object",
        "required": [
          "operationIdentifier",
          "externalOperationDate",
          "externalOperationReference",
          "externalOperationServicePoster",
          "operationKind",
          "postingDate",
          "reversal",
          "postingAccountIdentifier",
          "status"
        ],
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "operationIdentifier": {
            "description": "Internal identifier associated to the transaction to which one this transaction is linked. 16-digit incremental number (1000000000000001)\nEx: TRANSACTION_FEE linked to FP (Parent)",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          },
          "acquirerReferenceData": {
            "type": "string",
            "description": "Acquirer Reference Number (ARN) associated to the transaction\n- MCI : DE 031 - Acquirer Reference Data\n- VISA : TCR0 Acquirer Reference Number pos. 27-49"
          },
          "cardAcceptorCity": {
            "type": "string",
            "description": "Card Acceptor Location (City) associated to the transaction\n\nMCI : DE 043 s3 - Card Acceptor City\nVISA : TCR0 - Merchant City"
          },
          "cardAcceptorCountry": {
            "type": "string",
            "description": "Card Acceptor Country Code associated to the transaction\n\nMCI : DE 043 s6 - Card Acceptor Country Code\nVISA : TCR0 - Merchant Country"
          },
        "cardAcceptorZipCode": {
            "type": "string",
            "description": "Card Acceptor ZIP Code associated to the transaction\n\nMCI : DE 043 s4 - Card Acceptor Postal (ZIP) Code\nVISA : TCR0 - Merchant zip code"
          },
          "cardAcceptorName": {
            "type": "string",
            "description": "Complete Card Acceptor Name / Location (Merchant) associated to the transaction\n\nMCI : DE 043 s1 to s6 - Card Acceptor Name/Location\nVISA : TCR0"
          },
          "description": {
            "type": "string",
            "description": "Textual description of the current operation. Can contain a free text that can be used when the operation is presented to the Customer"
          },
          "externalOperationCode": {
            "type": "string",
            "description": "Value per operation type posted to an Account determined by our system according to specific Issuer configuration"
          },
          "feeType": {
            "type": "string",
            "description": "Type of fee used to create the current operation. Mandatory if the operation is a fee.\nIn the case fee is managed within our system, the complete value list is shared with the issuer and can be for example \"ACCOUNT_SETUP_FEE\", \"TRANSACTION_FEE\". \"EVENT_FEE\",\"CARD_FEE\"."
          },
          "maskedPan": {
            "type": "string",
            "description": "Refer to Card.maskedPan"
          },
          "merchantCategoryCode": {
            "type": "string",
            "description": "Classifies the type of business applicable to the card acceptor"
          },
          "balanceAdjustmentReason ": {
            "type": "string",
            "description": "The reason why the balance adjustment has been requested (conditional)\nMandatory when balance adjustment.\nAllowed value list depends on the issuer configuration"
          },
          "exchangeRate": {
            "type": "number",
            "format": "double",
            "description": "Used to realize the conversion between the original currency and the account currency"
          },
          "exchangeRateDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date of the exchange operation"
          },
          "exchangeRateSource": {
            "type": "string",
            "description": "The source of the exchange rate information. Rate source name or scheme used."
          },
          "operationCode": {
            "type": "string",
            "description": "Transaction category defined by our system describing the current operation (only for Scheme transaction and load operation). Values:\nCASH_ADVANCE,\nCASH_BACK\nCASH_WITHDRAWAL,\nCREDIT,\nFUND_TRANSFER,\nNORMAL_PURCHASE,\nREFUND_PURCHASE\nLOAD"
          },
          "operationKind": {
            "type": "string",
            "description": "Indicates the operation class.\nValues:\nBAL (balance transfer)\nFEE (fee operation)\nINT (interest operation)\nLOAD (load operation)\nPAY (payment operation)\nRMB (reimbursement operation)\nTRN (transaction operation from scheme)\nDISPUTE (refund / redebit operation triggered from our Dispute module)\nRST_BAL (reset balance operation)\nSUBPAYOP (apportionment operation)\nWRITE_OFF (write off - esp account closing)\nCRD_INST (instalment operation)\nCRD_INST_INIT (Instalment credit operation)\nADJ (balance adjustment operation)"
          },
          "postingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and Time when the transaction is posted to the account"
          },
          "reconciliationAmount": {
            "description": "Transaction amount provided by the scheme in the currency agreed between the scheme and the issuer/WL. \nMandatory for 1st presentment.\nScheme Reconciliation Amount / Currency  / Exponent\n- MCI: DE 005 / DE 050 / associated PDS 0148\n- VISA: Destination Amount / Destination Currency",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "referenceAmount": {
            "description": "Amount impacting the Cardholder account",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "reversal": {
            "type": "boolean",
            "description": "This flag indicates if this operation is a reversal (true) or not (false)"
          },
          "reversalReason": {
            "type": "string",
            "description": "The reason why the reversal has been created. Determined by the calling service depending information of the original message (conditional) Mandatory, if the operation is reversal"
          },
          "subFeeType": {
            "type": "string",
            "description": "Sub Type of internal fee created and impacting the Cardholder Account (free text)"
          },
          "frequency": {
            "description": "Free text describing the frequency of the operation performed (daily, monthly, yearly...) (optional)",
            "type": "string"
          },
          "transactionAmount": {
            "description": "DE 4 (Amount, Transaction) is the amount of funds the cardholder requested in the currency appearing on the transaction information document (TID), which may be the acquirer’s local currency or a currency acceptable to the cardholder and card acceptor that the acquirer supports, exclusive of PDS 0146 (Amounts, Transaction Fee). If no currency is identified on the TID, the transaction is deemed to have taken place in the currency that is legal tender at the point of interaction.\nAmount of the transaction. This field contains numerics. Two decimal positions are implied. If the Original Source Currency code is 392 (Japanese Yen), any value other than zero after the decimal produces an Invalid Amount error.\nMCI DE 004\nVISA TCR0\nThe value can be both positive and negative.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "transactionDate": {
            "type": "string",
            "format": "date-time",
            "description": "Transaction Date in Merchant site when transaction has been performed\nE.g. : 2023-02-04T00:00:00+01:00\n- MCI: DE 012 (Date and Time, Local Transaction)\n- VISA : TCR0 pos. 58-61"
          },
          "valueDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date the operation impacts balances or counters. If not set, the valueDate will be set to operationDate if operationDate is not in the past, today otherwise (conditional)"
          },
          "walletId": {
            "type": "string",
            "description": "Indicates the identifier of the wallet (Apple Pay or other token requestor) used for the operation"
          },
          "authorizationBusinessCaseIdentifier": {
            "description": "Internal identifier provided by the WLP Front Office in each Authorisation Message received. Only present if operation (first presentment) matched with an authorization.",
            "allOf": [
              {
                "$ref": "#/definitions/AuthorizationBusinessCaseIdentifier"
              }
            ]
          },
          "cardIdentifier": {
            "description": "Refer to Card.cardIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "disputeFolderIdentifier": {
            "description": "Refer to disputeFolderIdentifier object description (technical field)",
            "allOf": [
              {
                "$ref": "#/definitions/DisputeFolderIdentifier"
              }
            ]
          },
          "panTokenIdentifier": {
            "description": "Token Requestor Identifier value associated to the transaction\n- MCI : PDS 0059 - Token Requestor ID\n- VISA : TCR5 Token Requestor ID pos. 149-159",
            "allOf": [
              {
                "$ref": "#/definitions/PanTokenIdentifier"
              }
            ]
          },
          "externalOperationDate": {
            "type": "string",
            "format": "date-time",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe date is provided by the caller and must not be modified in case of reprocess (idempotency)"
          },
          "externalOperationReference": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe reference is provided by the caller and must not be modified in case of reprocess (idempotency)"
          },
          "externalOperationServicePoster": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe Service Poster depends on the caller. This is a free text. When the  value is ITP, OPC, IDM, CMS, CAS, WLP-CAS or WLP_CAS, operations are considered \"internal\"."
          },
          "businessCaseId": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "pointOfServiceDataCode": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "travelInformation": {
            "description": "DEPRECATED",
            "allOf": [
              {
                "$ref": "#/definitions/TravelInformation"
              }
            ]
          },
          "pan": {
            "type": "string",
            "description": "Refer to Card.pan (optional)"
          },
          "panReference": {
            "type": "string",
            "description": "Pan reference only if the card is associated to the operation"
          },
          "acquisitionMaterial": {
            "type": "string",
            "description": "Only for scheme transaction.\nType of material used to realize the operation.\nPossible values:\nATM, POS, INTERNET, MANUAL, VOICE_PHONE, UNATTENDED_TERMINAL, MOBILE, UNKNOWN",
            "enum": [
              "ATM",
              "POS",
              "VOICE_PHONE",
              "MANUAL",
              "UNATTENDED_TERMINAL",
              "MOBILE",
              "INTERNET",
              "UNKNOWN"
            ]
          },
          "cardAcceptorIdCode": {
            "type": "string",
            "description": "Identifies the card acceptor ID assigned by the acquirer. This ID must represent a unique identifier for each merchant name/location within the acquiring BIN.\nCard Acceptor (Merchant) Identifier associated to the transaction\n- MCI : DE 042 - Card Acceptor ID Code\n- VISA : TCR5 - Acquirer's Business ID"
          },
          "entryMode": {
            "type": "string",
            "description": "Precise how the card information have been read. Conversion of the native fields.\nPossible values :\nUNKNOWN\nOCR: Optical Character Reader\nMANUAL\nMAGSTRIPE: Magnetic Stripe read\nCONTACTLESS: Contactless read (called proximity payment or Mobile Chip system)\nCHIP: Chip read\nBARCODE: Bar Code read"
          },
          "approvalCode": {
            "type": "string",
            "description": "Authorization Approval Code associated to the transaction\n* MCI : DE 038 - Approval Code\n* VISA : TCR0 Authorization Code pos. 152-157"
          },
          "authorization": {
            "description": "Data retrieved from the authorization matched to the transaction",
            "allOf": [
              {
                "$ref": "#/definitions/OperationAuthorization"
              }
            ]
          },
          "pointOfSaleEnvironment": {
            "type": "string",
            "description": "Recurring transaction indicator, indicating that the cardholder\nand merchant have agreed to periodic billing for goods and services, such as\nutility bills, internet connection, and magazine subscriptions.\nValues:\nSpace = default\nR = Recurring Payment Transaction\nI = Installment Payment\nC = Credential on File"
          },
          "mailPhoneEcommerceAndPaymentIndicator": {
            "type": "string",
            "description": "Mail Phone Ecommerce and Payment Indicator indicates if transaction was initiated as mail order, telephone order or electronic commerce. \nUsed in Visa interchange validation and determination.  \nRequired in input for Visa transactions. \nBase II mapped from Draft data TCR1 position 116. \nDomain: \nSpace - Field not applicable or acquirer did not specify.  \n1 - Mail/Phone Order (MO/TO). \n2 - Recurring transaction (valid only for U.S. acquired transactions). \n3 - Instalment payment.  \n4 - Unknown classification/other mail order.  \n5 - Secure Electronic Commerce Transaction. \n6 - Non-Authenticated Security Transaction at a 3-D Secure-capable merchant, and merchant attempted to authenticate the cardholder using 3-D secure. \n7 - Non-Authenticated Security Transaction \n8 - Non-secure transaction. \n9 - For optional regional use only."
          },
          "posDataCode": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "pointOfService": {
            "description": "Represents series of codes that identify terminal capability, terminal environment, and point-of interaction (POI) security data (both for VISA and MCI)",
            "allOf": [
              {
                "$ref": "#/definitions/PointOfService"
              }
            ]
          },
          "acquirerId": {
            "description": "VISA mapping is the following: TC05, TCR0; Field: Acquirer Reference Number POS 27-49. Should be taken positions 2-7 of this field (Acquirer BIN).\nMCI mapping is the following: DE 31 Acquirer Reference Data. Should be taken positions 2-7 of this field.",
            "type": "string"
          },
          "destinationId": {
            "description": "VISA mapping is the following: Determined based on transaction data.\nMCI mapping is the following: DE 93 transaction Destination Institution ID code.",
            "type": "string"
          },
          "detailedFeeAmounts": {
            "type": "array",
            "description": "Details of the insurance fee when this latter is a percentage of the account balance and covers several risks e.g. Payment protection insurance covering Unemployment, Incapacity for work and disability/life. \nEach detail amount represents a part of the insurance fee for a given risk and contains the following information : the covered risk (name), the related amount, the percentage applied on the account balance, the related external operation code.",
            "items": {
              "$ref": "#/definitions/DetailedFeeAmount"
            }
          },
          "loyaltyPoint": {
            "description": "Used when the operation has loyalty points",
            "allOf": [
              {
                "$ref": "#/definitions/LoyaltyPoint"
              }
            ]
          },
          "schemeTransactionIdentifier": {
            "type": "string",
            "description": "This field will contain the transaction identifier, a unique value that schemas assign to each transaction. It can be used to maintain an audit trailthroughout the life cycle of the transaction and all related transactions, such as reversals, adjustments, confirmations, and dispute financials\nThe corresponding mapping is:\n- VISA: TC05 TCR5 payment service, pos 5-19 \n- MCI: DE 063 - Transaction Life Cycle ID, subfield 2 - Trace ID"
          },
          "transactionType": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "rewardedOperationIdentifier": {
            "description": "Internal identifier associated to the transaction linked to a Bonus operation 16-digit incremental number (1000000000000001). Used only if a Bonus operation is related to.",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          },
          "lodgingInformation": {
            "description": "The list of lodging information parameters from the clearing file",
            "allOf": [
              {
                "$ref": "#/definitions/LodgingInformation"
              }
            ]
          },
          "carRentalInformation": {
            "description": "The list of car rental information parameters from the clearing file",
            "allOf": [
              {
                "$ref": "#/definitions/CarRentalInformation"
              }
            ]
          },
          "airItineraryInformation": {
            "description": "The list of air itinerary parameters from the clearing file",
            "allOf": [
              {
                "$ref": "#/definitions/AirItineraryInformation"
              }
            ]
          },
          "disputed": {
            "type": "boolean",
            "description": "The attribute shows weather the operation was disputed or not"
          },
          "printOnStatement": {
            "type": "boolean",
            "description": "Flag indicating whether to include some manual operations in the statements. Defaul values - yes\nValues: \nyes, \nno"
          },
          "cardAcceptorAddress": {
            "type": "string",
            "description": "The attribute represents card acceptor address received from scheme"
          },
          "cardAcceptorStateProvinceRegionCode": {
            "type": "string",
            "description": "The attribute represents card acceptor state province region code received from scheme"
          },
          "postingAccountIdentifier": {
            "description": "Identifier of the account on which the operation was posted",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Status of the transaction \n* PROCESSED\n* IN_ERROR\n* CAS_IN_DISPUTE (when the transaction is disputed)\n* CAS_PENDING"
          },
          "operationType": {
            "type": "string",
            "description": "Defines the operation type that is configured in 'Operation type tree' in the Issuer Configuration"
          },
          "parentOperationIdentifier": {
            "description": "Internal identifier associated to the transaction to which one this transaction is linked. 16-digit incremental number (1000000000000001)\nEx: TRANSACTION_FEE linked to FP (Parent)",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          },
          "virtualCardService": {
            "description": "Data related to Virtual Card Service are provided. These are the ones used by Virtual Card Engine in scope of Virtual Card Service programData related to Virtual Card Service. These are the ones used by Virtual Card Engine in scope of Virtual Card Service program.",
            "allOf": [
              {
                "$ref": "#/definitions/VirtualCardService"
              }
            ]
          },
          "virtualServiceCardReference":{
            "type": "string",
            "description": "Virtual service card number of the operation. Also referred as VCC PAN"
          },
          "origin": {
            "type": "string",
            "description": "Origin used during the creation of the operation."
          },
          "username": {
            "type": "string",
            "description": "Name of the user who initiated the operation"
          }
        },
        "title": "Operation"
      },
      "VirtualCardService":{
      "type": "object",
        "properties": {
          "virtualServiceCardExternalReference": {
            "type": "string",
            "description": "The external reference calculated for VCC by the Virtual Card Engine (VCE)"
          },
          "issuerCompanyExternalReference": {
            "type": "string",
             "description": "This attribute will represent a unique identifier of company (the corporate customer of the Issuer)"
          },
          "maskedVirtualServiceCardNumber": {
            "type": "string",
            "description": "Masked Virtual Service Card Number. This is the VCC (Virtula Credit Card) PAN in masked format"
          },
          "virtualServicesFields": {
            "type": "object",
            "description": "This attribute will return specific informative fields related to VCC (Virtual Credit Card) that the Virtual Card Engine will provide to the Issuing Back Office system,\nList of external data (label:value), separated by a \"|'\", related to a virtual card that can be provided by e.g. the issuer for information or for usage by other systems.\nExample : label1:value|label2:value\nThose provided data have no impact on our system business processes.",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "title": "VirtualCardService"
      },
      "OperationAuthorization": {
        "type": "object",
        "properties": {
          "transactionDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time on which the transaction was approved. Data is retrieved from the matched authorization transaction."
          }
        },
        "title": "OperationAuthorization"
      },
      "TravelDetail": {
        "type": "object",
        "properties": {
          "flightNumber": {
            "type": "string",
            "description": "flightNumber (customer travel details)"
          },
          "originCity": {
            "type": "string",
            "description": "originCity (customer travel details)"
          },
          "destinationCity": {
            "type": "string",
            "description": "destinationCity (customer travel details) "
          }
        },
        "title": "TravelDetail"
      },
      "TravelInformation": {
        "type": "object",
        "properties": {
          "passengerName": {
            "type": "string",
            "description": "passengerName (customer travel information) "
          },
          "ticketNumber": {
            "type": "string",
            "description": "ticketNumber (customer travel information) "
          },
          "travelDetailList": {
            "type": "array",
            "description": "List of TravelDetail ",
            "items": {
              "$ref": "#/definitions/TravelDetail"
            }
          }
        },
        "title": "TravelInformation"
      },
      "OperationDetails": {
        "type": "object",
        "required": [
          "debit",
          "status",
          "productIdentifier"
        ],
        "allOf": [
          {
            "$ref": "#/definitions/Operation"
          },
          {
            "properties": {
              "acquisitionMaterial": {
                "type": "string",
                "description": "Only for scheme transaction.\nType of material used to realize the operation.\nPossible values:\nATM, POS, INTERNET, MANUAL, VOICE_PHONE, UNATTENDED_TERMINAL, MOBILE, UNKNOWN"
              },
              "adjustment": {
                "type": "boolean",
                "description": "This flag indicates if this operation is an adjustment or not.\nValue:\ntrue : this operation adjusts already posted operation\nfalse : this operation does not adjust the posted operation"
              },
              "adjustmentReason": {
                "type": "string",
                "description": "The reason why the adjustment has been created. (conditional)\nMandatory when adjustment is true.\n AdjustmentReasonType (DISPUTE_RESULT, COMMERCIAL_ADJUSTMENT, INVALID_OPERATION, ERROR_DURING_ACQUISITION, CONFIGURATION_REPROCESSING)"
              },
              "alternativeIban": {
                "type": "string",
                "description": "Corresponds to PAN token received from the scheme"
              },
              "automaticPayment": {
                "type": "boolean",
                "description": "For credit cards, indicate if it is an automatic payment operation posted to an account in case of direct debit issued to repay an account (this account is automatically paid after N business days)"
              },
              "brand": {
                "type": "string",
                "description": "Brand associated to the Issuer Account Range (BIN) such as \"MCC\" (MasterCard) , \"DMC\" (Debit MasterCard), \"MSI\" (Maestro), \"CIR\" (Cirrus), \"VIS\" (VISA)."
              },
              "cardAcceptorIdCode": {
                "type": "string",
                "description": "Identifies the card acceptor ID assigned by the acquirer. This ID must represent a unique identifier for each merchant name/location within the acquiring BIN.\nCard Acceptor (Merchant) Identifier associated to the transaction\n- MCI : DE 042 - Card Acceptor ID Code\n- VISA : TCR5 - Acquirer's Business ID"
              },
              "cardAcceptorZipCode": {
                "type": "string",
                "description": "Card Acceptor ZIP Code associated to the transaction\n\nMCI : DE 043 s4 - Card Acceptor Postal (ZIP) Code\nVISA : TCR0 - Merchant zip code"
              },
              "cardScheme": {
                "type": "string",
                "description": "Short name of national or international network, if implicated."
              },
              "cardTypeCode": {
                "type": "string",
                "description": "Scheme Product associated to the Issuer Account Range"
              },
              "cashAmount": {
                "description": "Additional Amount / Currency / Exponent for Cash Back transaction amount\n* MCI : DE 054 s2 = 40 - Amount, Cash Back\n* VISA : TCR1 pos. 158-166 Cashback",
                "allOf": [
                  {
                    "$ref": "#/definitions/Amount"
                  }
                ]
              },
              "cashAmountAccountCurrency": {
                "description": "Additional Amount / Currency / Exponent for Cash Back transaction amount converted in Cardholder Account Currency",
                "allOf": [
                  {
                    "$ref": "#/definitions/Amount"
                  }
                ]
              },
              "dccIndicator": {
                "type": "string",
                "description": "This field must contain one of these values (optional):\n1 = DCC performed\nspace = default, no DCC has been performed"
              },
              "debit": {
                "type": "boolean",
                "description": "Sign associated to the transaction according to the Cardholder side\n* D = Cardholder debited\n* C = Cardholder credited"
              },
              "destinationIban": {
                "type": "string",
                "description": "IBAN used for reimbursement operation"
              },
              "directDebitEndToEndId": {
                "type": "string",
                "description": "Identifier of the Direct Debit order linked to payment operation"
              },
              "entryMode": {
                "type": "string",
                "description": "Precise how the card information have been read. Conversion of the native fields.\nPossible values :\nUNKNOWN\nOCR: Optical Character Reader\nMANUAL\nMAGSTRIPE: Magnetic Stripe read\nCONTACTLESS: Contactless read (called proximity payment or Mobile Chip system)\nCHIP: Chip read\nBARCODE: Bar Code read"
              },
              "externalMatchingOperationDate": {
                "type": "string",
                "format": "date-time",
                "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system.\nIt is used for matching the current operation with the original operation.\nMandatory in case of reversal.\nThe field contains the value of externalOperationDate of the original operation (conditional)."
              },
              "externalMatchingOperationReference": {
                "type": "string",
                "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system.\nIt is used for matching the current operation with the original operation.\nMandatory in case of reversal.\nThe field contains the value of externalOperationReference of the original operation (conditional)."
              },
              "externalMatchingOperationServicePoster": {
                "type": "string",
                "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system.\nIt is used for matching the current operation with the original operation.\nMandatory in case of reversal.\nThe field contains the value of externalOperationServicePoster of the original operation (conditional)."
              },
              "gratuityAmount": {
                "description": "Additional Amount / Currency / Exponent for Gratuity transaction amount in the transaction currency\nOnly for MC",
                "allOf": [
                  {
                    "$ref": "#/definitions/Amount"
                  }
                ]
              },
              "gratuityAmountAccountCurrency": {
                "description": "Additional Amount / Currency / Exponent for Gratuity transaction amount converted by our system in Cardholder Account Currency ",
                "allOf": [
                  {
                    "$ref": "#/definitions/Amount"
                  }
                ]
              },
              "interestCondition": {
                "type": "string",
                "description": "Free zone, used to store description like rates, algorithm and values calculated."
              },
              "interestStartDate": {
                "type": "string",
                "format": "date-time",
                "description": "The starting date used to calculate interest. Present for information purpose."
              },
              "interestEndDate": {
                "type": "string",
                "format": "date-time",
                "description": "The ending date used to calculate interest. Present for information purpose."
              },
              "interestType": {
                "type": "string",
                "description": "Type of Interest for an interest operation : CREDIT / DEBIT"
              },
              "operationDate": {
                "type": "string",
                "format": "date-time"
              },
              "originatingAccountNumber": {
                "type": "string",
                "description": "The account number of the current balance transfer in the previous institution. For information purpose."
              },
              "originatingInstitution": {
                "type": "string",
                "description": "The information about the originating financial institution having this balance. For information purpose."
              },
              "pan": {
                "type": "string",
                "description": "Refer to Card.pan"
              },
              "panExpiryDate": {
                "type": "string",
                "description": "Refer to Card.expiryDate"
              },
              "panSequenceNumber": {
                "type": "string",
                "description": "Refer to Card.panSequenceNumber"
              },
              "partialOperation": {
                "type": "boolean",
                "description": "Indicates whether this operation is partial or not."
              },
              "paymentChannel": {
                "type": "string",
                "description": "Indicates the channel of incoming payment operation from an external system (e.g. bank)\nEx. CHEQUE, CASH, ONLINE_MONEY, NO_CHANNEL_PROVIDED, INSTALMENT, INCOMING_PAYMENT.\nINSTALMENT - set for payments generated for CreditInstalmentContract"
              },
              "poiAmount": {
                "description": "Additional Amount / Currency / Exponent for DCC (Dynamic Currency Conversion) transaction amount - Only for MC",
                "allOf": [
                  {
                    "$ref": "#/definitions/Amount"
                  }
                ]
              },
              "poiAmountAccountCurrency": {
                "description": "POI Amount in the Cardholder account currency  - Only for MC",
                "allOf": [
                  {
                    "$ref": "#/definitions/Amount"
                  }
                ]
              },
              "sepa": {
                "type": "boolean",
                "description": "Indicates if an operation (e.g. incoming payment received from the issuer) was in SEPA format (e.g. SEPA payment)."
              },
              "status": {
                "type": "string",
                "description": "Status of the transaction \n* PROCESSED\n* IN_ERROR\n* CAS_IN_DISPUTE (when the transaction is disputed)\n* CAS_PENDING"
              },
              "surchargeAmount": {
                "description": "Additional Amount / Currency / Exponent for surcharge transaction amount in Transaction Currency",
                "allOf": [
                  {
                    "$ref": "#/definitions/Amount"
                  }
                ]
              },
              "surchargeAmountAccountCurrency": {
                "description": "Additional Amount / Currency / Exponent for Surcharge transaction amount converted in Cardholder Account Currency",
                "allOf": [
                  {
                    "$ref": "#/definitions/Amount"
                  }
                ]
              },
              "validationMode": {
                "type": "string",
                "description": "Precise how the transaction has been validated. Conversion based on information of the original message\nMC : DE 022\nVISA : TCR0 POS Entry Mode /Cardholder ID Method/POS Terminal Capability\nPossible values: PIN, SIGNATURE, UNKNOWN"
              },
              "terminalId": {
                "type": "string",
                "description": "Code that identifies the card acceptor terminal or ATM."
              },
              "parentOperation": {
                "description": "This field is expandable and if needed - shows the list of operations linked to parentOperationIdentifier\nEx: TRANSACTION_FEE linked to FP (Parent)",
                "allOf": [
                  {
                    "$ref": "#/definitions/Operation"
                  }
                ]
              },
              "parentOperationIdentifier": {
                "description": "Internal identifier associated to the transaction to which one this transaction is linked. 16-digit incremental number (1000000000000001)\nEx: TRANSACTION_FEE linked to FP (Parent)",
                "allOf": [
                  {
                    "$ref": "#/definitions/OperationIdentifier"
                  }
                ]
              },
              "productIdentifier": {
                "description": "OPC product identifier code",
                "allOf": [
                  {
                    "$ref": "#/definitions/ProductIdentifier"
                  }
                ]
              },
              "overPaymentAccountIdentifier": {
                "description": "The identifier of the account in overpayment ",
                "allOf": [
                  {
                    "$ref": "#/definitions/AccountIdentifier"
                  }
                ]
              },
              "loyaltyPoint": {
                "description": "Used when the operation has loyalty points",
                "allOf": [
                  {
                    "$ref": "#/definitions/LoyaltyPoint"
                  }
                ]
              },
              "rewardedOperationIdentifier": {
                "description": "Internal identifier associated to the transaction linked to a Bonus operation 16-digit incremental number (1000000000000001). Used only if a Bonus operation is related to.",
                "allOf": [
                  {
                    "$ref": "#/definitions/OperationIdentifier"
                  }
                ]
              },
              "lodgingInformation": {
                "description": "The list of lodging information parameters from the clearing file",
                "allOf": [
                  {
                    "$ref": "#/definitions/LodgingInformation"
                  }
                ]
              },
              "carRentalInformation": {
                "description": "The list of car rental information parameters from the clearing file",
                "allOf": [
                  {
                    "$ref": "#/definitions/CarRentalInformation"
                  }
                ]
              },
              "airItineraryInformation": {
                "description": "The list of air itinerary parameters from the clearing file",
                "allOf": [
                  {
                    "$ref": "#/definitions/AirItineraryInformation"
                  }
                ]
              },
              "subOperationIdentifiers": {
                "type": "array",
                "description": "List of suboperation identifiers for the parent operation",
                "items": {
                  "$ref": "#/definitions/OperationIdentifier"
                }
              },
              "correction": {
                "type": "boolean",
                "description": "Represents weather the operation is a correction or not"
              },
              "intermediateAmount": {
                "description": "Calculated Cardholder Amount after potential Currency Conversion but before adding the Conversion Charge",
                "allOf": [
                  {
                    "$ref": "#/definitions/Amount"
                  }
                ]
              },
              "billingAmount": {
                "description": "Cardholder Billing amount\nMCI only - DE6 Amount, Cardholder Billing",
                "allOf": [
                  {
                    "$ref": "#/definitions/Amount"
                  }
                ]
              },
              "overallExhangeRate": {
                "type": "number",
                "format": "double",
                "description": "Currency Rate shows the rate of the complete conversion from Transaction Amount to Posted Cardholder Amount"
              }
            }
          }
        ],
        "title": "OperationDetails"
      },
      "OperationIdentifier": {
        "type": "object",
        "required": [
          "operationId"
        ],
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Internal operation identifier. 16-digit incremental number"
          }
        },
        "title": "OperationIdentifier"
      },
      "DetailedFeeAmount": {
        "type": "object",
        "properties": {
          "percentage": {
            "type": "string",
            "description": "Percentage used for amount calculation of the covered risk"
          },
          "name": {
            "type": "string",
            "description": "Name of the covered risk"
          },
          "feeAmount": {
            "description": "Amount / Currency / Exponent of the covered risk",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "externalOperationCode": {
            "type": "string",
             "description": "External operation code the covered risk"
          },
          "includeInOtherDetailFeeAmount": {
            "type": "boolean",
            "description": "Indicates if the detail fee amount is part of another detail fee amount"
          }
        },
        "title": "DetailedFeeAmount"
      },
      "Order": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "orderType": {
            "type": "string",
            "description": "The order can correspond to a card, a PIN mailer or a TAN mailer.\nPossible values are : CardOrder, PinMailerOrder, TanMailerOrder"
          },
          "orderIdentifier": {
            "description": "Unique identifier of the order (mandatory)\nRefer to OrderIdentifier data type for detail information",
            "allOf": [
              {
                "$ref": "#/definitions/OrderIdentifier"
              }
            ]
          },
          "currentExternalStatus": {
            "type": "string",
            "description": "Current external status of the order (optional)\nThe list of external statuses is configurable per issuer.\nThe external status can be used to follow the card producing status for the card order e.g. received, embossed, sent, etc."
          },
          "currentExternalStatusDate": {
            "type": "string",
            "format": "date-time",
            "description": "Modification date of the last external status of the order (optional)"
          },
          "currentInternalStatus": {
            "type": "string",
            "description": "Current internal status of the order (mandatory)\nPossible values: are: CREATED, CONFIRMED, ORDERED, EXTRACTION_FAILED, REJECTED, CANCELLED, FINISHED, ORDERABLE"
          },
          "currentInternalStatusDate": {
            "type": "string",
            "format": "date-time",
            "description": "Last modification date of the internal status of the order (optional)"
          },
          "sendingMode": {
            "type": "string",
            "description": "Code identifying the desired sending mode for the order (mandatory)\nExample: Normal, Urgent, Ultra Urgent"
          },
          "deliveryChannel": {
            "type": "string",
            "description": "Code of the delivery channel for the card\nThe list of delivery channels is configurable per Issuer."
          },
          "deliveryType": {
            "type": "string",
            "description": "Indicates whether the delivery of the card should be to branch or customer (instead of the one from the distribution rule of the card product) (optional)\nPossible values: CUSTOMER (the card is to be delivered to the customer address, BRANCH (the card is to be delivered to the bank branch)"
          },
          "orderReason": {
            "type": "string",
            "description": "Reason why the order is done (mandatory)\nPossible values are: CARD_RENEWAL, PIN_CARD_RENEWAL, FIRST_CARD_ISSUE, FIRST_PIN_CARD_ISSUE, CARD_REPLACEMENT, PIN_CARD_REPLACEMENT, PIN_REMINDER, PIN_REORDER, TAN_REQUEST, ORDER_CANCELLATION"
          },
          "statusHistory": {
            "type": "array",
            "description": "List of order status history data\nRefer to OrderStatusHistory data type for detail information",
            "items": {
              "$ref": "#/definitions/OrderStatusHistory"
            }
          },
          "cardProducer": {
            "type": "string",
            "description": "It is the card producer or embosser.\nIt is present if it is different than the default one (defined in the card profile) and was provided when requesting the card creation.\nThe list of allowed card producer is configurable per issuer."
          },
          "pinMailerEditor": {
            "type": "string",
            "description": "It is the PIN mailer printer.\nIt is present if it is different than the default one (defined in the card profile) and was provided when requesting the card/PIN creation.\nThe list of allowed PIN mailer editors is configurable by issuer."
          },
          "deliveryBranchCode": {
            "type": "string",
            "description": "Code of the delivery branch (mandatory only if card delivery type is BRANCH)\nThe list of issuer branches is configurable  per Issuer.\nThe branch code is used to access a preconfigured Postal address (configured in the system)."
          },
          "customDeliveryAddressee": {
            "type": "string",
            "description": "Custom postal address to send the order \n Depending on countries, the address format (mainly for line1, line 2, line3, line4 and line5) can have specific conditions such as length restriction. The customer should contact WL to check the address format and have more information."
          },
          "customDeliveryAddress": {
            "description": "Custom postal address to send the order\nDepending on countries, the address format (mainly for line1, line 2, line3, line4 and line5) can have specific conditions such as length restriction. The customer should contact WL to check the address format and have more information.",
            "allOf": [
              {
                "$ref": "#/definitions/MailAddress"
              }
            ]
          },
          "customDeliveryPhone": {
            "description": "Custom phone to send the card.\nNOT USED",
            "allOf": [
              {
                "$ref": "#/definitions/PhoneNumber"
              }
            ]
          },
          "customDeliveryEmail": {
            "description": "Custom email to send the card.\nNOT USED",
            "allOf": [
              {
                "$ref": "#/definitions/EmailAddress"
              }
            ]
          },
          "specificFields": {
            "type": "object",
            "description": "List of external data (label:value), separated by a \"|'\", related to an order that can be provided by e.g. the issuer for information or for usage by other systems.\nExample : label1:value|label2:value\nThose provided data have no impact on our system business processes.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "card": {
            "description": "Card information related to the order",
            "allOf": [
              {
                "$ref": "#/definitions/Card"
              }
            ]
          },
          "cardIdentifier": {
            "description": "Unique identifier of the card",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "embossingFileName": {
            "type": "string",
            "description": "Embossing file name in CardOrder"
          },
          "tanOrigin": {
            "type": "string",
            "description": "Origin of the TAN request, e.g. GUI. (free text)"
          },
          "tanExpiryDate": {
            "type": "string",
            "format": "date-time",
            "description": "Expiry date of the TAN, date until which the TAN can used (mandatory for TanMailerOrder)"
          },
          "tanStatus": {
            "type": "string",
            "description": "Status of the TAN (mandatory for TanMailerOrder)\nPossible values: CREATED, FAILED, ACTIVE, USED, EXPIRED"
          },
          "freeTanMailerCounter": {
            "type": "integer",
            "description": "Number of free TAN requests (optional)"
          },
          "tanUsageDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the TAN was used to change the PIN (optional)"
          },
          "free": {
            "type": "boolean",
            "description": "Indicates if the operation is free (true) or not (false). Default value is false (mandatory)"
          },
          "tanValue": {
            "type": "string",
            "description": "Clear value of the TAN (mandatory for TanMailerOrder)"
          },
          "feeConditions": {
            "type": "array",
            "description": "Conditions of the fee generation (if fee configured in the product) (optional)",
            "items": {
              "$ref": "#/definitions/FeeCondition"
            }
          },
          "notExtractedReason": {
            "type": "string",
            "description": "In case the order will not be extracted because of invalid customer address, then it will be indicated in this field"
          },
          "notExtractedUpdateDate": {
            "type": "string",
            "format": "date-time",
            "description": "The last update date of notExtractedReason field"
          },
          "waitingPin": {
            "type": "boolean",
            "format": "date-time",
            "description": "This flag is used only for a card order or a PIN mailer order.\n- If this flag is true, the PIN is waiting to be provided by the cardholder (the mode “Self Selected Pin” is activated in the PIN production model). Depending on the configuration, after x days, the card is extracted with a default PIN if the cardholder has not provided a PIN.\n- If this flag is false, the PIN is not waiting to be provided , e.g. the PIN has been generated by PMM or provided by the cardholder."
          }
        },
        "title": "Order"
      },
      "OrderIdentifier": {
        "type": "object",
        "description":"Order reference calculated by the Issuing Back Office system. Refer to Order.orderIdentifier",
        "properties": {
          "orderReference": {
            "type": "string",
            "description": "The reference of the order in our system, unique per platform\nThis reference is calculated from an algorithm configurable per issuer (currently a unique algorithm is defined).\nThe reference is composed of the  creation date of the order (YYYYMMDD) + a sequence number of 16 digits (e;g; 202203212000000000097002, where 20220321 is the date when the order is created)"
          }
        },
        "title": "OrderIdentifier"
      },
      "OrderStatusHistory": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the history order status (mandatory)\nPossible values: InternalStatus or ProducerStatus"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the history order status (mandatory)"
          },
          "status": {
            "type": "string",
            "description": "Status of the history order (mandatory)\nThe possible values are the same the ones defined for the current internal status and the current external status depending on the type of the order status.  "
          }
        },
        "title": "OrderStatusHistory"
      },
      "PanTokenIdentifier": {
        "type": "object",
        "required": [
          "panTokenReference"
        ],
        "properties": {
          "panTokenReference": {
            "type": "string",
            "description": "Pan Token Reference"
          }
        },
        "title": "PanTokenIdentifier"
      },
      "PhoneNumber": {
        "type": "object",
        "required": [
          "localPhoneNumber"
        ],
        "properties": {
          "countryCode": {
            "type": "string",
            "description": "Country dialing code (optional). Free text. It is recommended to provide a region dialing code (e.g. +33, +49)."
          },
          "localPhoneNumber": {
            "type": "string",
            "description": "Free text (mandatory). It’s recommended to provide an international phone number in accordance with the value provided in the country code.\nEx : \n- country code = ‘+’33’ and localPhoneNumber = ‘0622334455’ \n- country code = empty and localPhoneNumber = ‘+33622334455’\nThe value can be subject to a validation process if a specific rule has been configured at issuer level."
          },
          "internationalPhoneNumber": {
            "type": "string",
            "description": "Free text (mandatory). It’s recommended to provide an international phone number in accordance with the value provided in the country code.\nEx : \n- country code = ‘+’33’ and localPhoneNumber = ‘0622334455’ \n- country code = empty and localPhoneNumber = ‘+33622334455’\nThe value can be subject to a validation process if a specific rule has been configured at issuer level."
          }
        },
        "title": "PhoneNumber"
      },
      "ProductIdentifier": {
        "type": "object",
        "properties": {
          "issuerProductExternalReference": {
            "type": "string",
            "description": "Product External Reference provided by the issuer"
          },
          "productReference": {
            "type": "string",
            "description": "Reference of the product in our system, unique per platform"
          }
        },
        "title": "ProductIdentifier"
      },
      "ProductExtensionIdentifier": {
        "properties": {
          "issuerProductExtensionExternalReference": {
            "description": "External reference of the product extension provided by the issuer and defined for a product (e.g. it can be used when adding cards and accounts to a contract )",
            "type": "string"
          }
        },
        "title": "ProductExtensionIdentifier",
        "type": "object"
      },
      "ReleaseOrderResponse": {
        "type": "object",
        "properties": {
          "orderIdentifier": {
            "description": "Order Identifier",
            "allOf": [
              {
                "$ref": "#/definitions/OrderIdentifier"
              }
            ]
          },
          "currentInternalStatus": {
            "type": "string",
            "description": "Current Internal Status"
          },
          "statusDate": {
            "type": "string",
            "format": "date-time",
            "description": "Current Internal Status Date"
          }
        },
        "title": "ReleaseOrderResponse"
      },
      "ReleasedOrder": {
        "type": "object",
        "required": [
          "orderIdentifier",
          "orderType",
          "orderReason",
          "currentInternalStatus"
        ],
        "properties": {
          "orderIdentifier": {
            "description": "Order Identifier",
            "allOf": [
              {
                "$ref": "#/definitions/OrderIdentifier"
              }
            ]
          },
          "orderType": {
            "type": "string",
            "description": "The order can correspond to a card, a PIN mailer or a TAN mailer.Possible values are : CardOrder, PinMailerOrder, TanMailerOrder"
          },
          "orderReason": {
            "type": "string",
            "description": "Reason why the order is done "
          },
          "currentInternalStatus": {
            "type": "string",
            "description": "Current internal status of the order"
          },
          "currentInternalStatusDate": {
            "type": "string",
            "format": "date-time",
            "description": "Last modification date of the internal status of the order"
          }
        },
        "title": "ReleasedOrder"
      },
      "ReleaseOrdersResponse": {
        "type": "object",
        "properties": {
          "releasedOrders": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ReleasedOrder"
            }
          }
        },
        "title": "ReleaseOrdersResponse"
      },
      "RemindPINRequest": {
        "type": "object",
        "required": [
          "sendingMode"
        ],
        "properties": {
          "sendingMode": {
            "type": "string",
            "description": "The issuer must provide a sending mode among ones allowed."
          },
          "deliveryType": {
            "type": "string",
            "description": "Indicates whether the delivery of the PIN mailer should be to branch or customer (instead of the one from the distribution rule of the card product)\nPossible values are: CUSTOMER, BRANCH\nTo override the delivery address, the card delivery type must not be provided and only one of these fields must be provided: customDeliveryAddress, customDeliveryEmail or customDeliveryPhone."
          },
          "deliveryBranchCode": {
            "type": "string",
            "description": "The issuer must provide the card delivery branch code If the delivery type is provided and is BRANCH.\nNot to be provided if the delivery type is different from BRANCH (ignored if provided and not needed)."
          },
          "customDeliveryAddressee": {
            "type": "string",
            "description": "Can be provided in case of customised delivery address.\nWhen the customDeliveryAddress is provided, the field must also be provided."
          },
          "customDeliveryAddress": {
            "description": "Custom postal address to send the PIN mailer.\nWhen the customDeliveryAddressee is provided, the field must also be provided.\nTo be provided when delivery type is empty, but not in combination with Email for PIN and/or Phone for PIN.",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressRequestMailAddress"
              }
            ]
          },
          "customDeliveryEmail": {
            "description": "Custom email address to send the PIN mailer\nTo be provided when delivery type is empty, but not in combination with Phone for PIN and/or Postal address for PIN.",
            "allOf": [
              {
                "$ref": "#/definitions/EmailAddress"
              }
            ]
          },
          "customDeliveryPhone": {
            "description": "Custom phone number to send the PIN mailer\nTo be provided when delivery type is empty, but not in combination with Email for PIN and/or Postal address for PIN.",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressRequestPhoneNumber"
              }
            ]
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can update the list of external data related to the order during the PIN reminding.\nA new data can be added or an existing data can be updated (label1 = new value) or removed (label1 = null).\nAny existing data that is not present in this list is not updated in the order. Refer to Order.specificFields.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "resetPinTryCounter": {
            "type": "boolean",
            "description": "A reset of the PIN try counter can be requested (message is sent to the Front Office to reset the PIN).",
            "default": false
          },
          "waiveFee": {
            "type": "boolean",
            "description": "Indicates if the configured fee (if any) is waived (true) or not (false) while reminding PIN. By default is false.",
            "default": false
          }
        },
        "title": "RemindPINRequest"
      },
      "RemindPINResponse": {
        "type": "object",
        "properties": {
          "orderIdentifier": {
            "description": "Order reference calculated by our system. Refer to Order.orderIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/OrderIdentifier"
              }
            ]
          },
          "currentInternalStatus": {
            "type": "string",
            "description": "Current internal status of the order after the remind PIN request\n- CONFIRMED: if the order is validated by the branch\n- ORDERABLE: if ready to be issued (depending on the configuration, e.g. PIN is generated and available)"
          },
          "orderType": {
            "type": "string",
            "description": "Type of the order (PinMailerOrder)"
          }
        },
        "title": "RemindPINResponse"
      },
      "RemoveAddOnSubscriptionRequest": {
        "type": "object",
        "required": [
          "addonReference",
          "serviceTypeReference"
        ],
        "properties": {
          "addonReference": {
            "type": "string",
            "description": "Reference of the add-on."
          },
          "serviceTypeReference": {
            "type": "string",
            "description": "Reference of the type of add-on service."
          },
          "accountIdentifier": {
            "description": "The reference of the Account for which to unsubscribe from the add-on.\n*One of cardContractIdentifier/ accountIdentifier must be provided.",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "cardContractIdentifier": {
            "description": "The reference of the CardContract for which to unsubscribe from the add-on.\n*One of cardContractIdentifier/ accountIdentifier must be provided.",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "unsubscriptionDate": {
            "type": "string",
            "description": "If provided, this date will be used as the starting date of the addon unsubscription.",
            "format": "date-time"
          }
        },
        "title": "RemoveAddOnSubscriptionRequest"
      },
      "RemoveAddOnSubscriptionResponse": {
        "type": "object",
        "required": [
          "addonReference",
          "unsubscriptionDate"
        ],
        "properties": {
          "addonReference": {
            "type": "string",
            "description": "Reference of the type of add-on service."
          },
          "unsubscriptionDate": {
            "type": "string",
            "description": "Refer to AddOnServiceParameter.unsubscriptionDate",
            "format": "date-time"
          },
          "accountIdentifier": {
            "description": "The accountIdentifier of the Account on which the subscription has been done",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "cardContractIdentifier": {
            "description": "The cardContractIdentifier of the Card Contract on which the subscription has been done",
            "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          }
        },
        "title": "RemoveAddOnSubscriptionResponse"
      },
      "ReorderPINRequest": {
        "type": "object",
        "required": [
          "sendingMode"
        ],
        "properties": {
          "sendingMode": {
            "type": "string",
            "example": "Normal",
            "description": "Sending mode selected among the ones allowed by the card product e.g. 'Normal'"
          },
          "deliveryType": {
            "type": "string",
            "description": "Indicates whether the delivery of the PIN mailer should be to branch or customer (instead of the one from the distribution rule of the card product)\nPossible values are: CUSTOMER, BRANCH\nTo override the delivery address, the delivery type must not be provided and only one of these fields must be provided: customDeliveryAddress, customDeliveryEmail or customDeliveryPhone."
          },
          "deliveryBranchCode": {
            "type": "string",
            "description": "Delivery branch code to be provided (among the ones configured for the issuer) if the delivery type is BRANCH.\nNot to be provided if the delivery type is different from BRANCH (ignored if provided and not needed)."
          },
          "customDeliveryAddressee": {
            "type": "string",
            "description": "Can be provided in case of customised delivery address.\nWhen the customDeliveryAddress is provided, the field must also be provided.\nPostal recipient’s name used for delivery, usually card holder’s full name."
          },
          "customDeliveryAddress": {
            "description": "Custom postal address to send the PIN mailer.\nWhen the customDeliveryAddressee is provided, the field must also be provided.\nTo be provided when delivery type is empty, but not in combination with Email for PIN and/or Phone for PIN.",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressRequestMailAddress"
              }
            ]
          },
          "customDeliveryEmail": {
            "description": "Custom email address to send the PIN mailer.\nTo be provided when delivery type is empty, but not in combination with Phone for PIN and/or Postal address for PIN.",
            "allOf": [
              {
                "$ref": "#/definitions/EmailAddress"
              }
            ]
          },
          "customDeliveryPhone": {
            "description": "Custom phone number to send the PIN mailer.\nTo be provided when delivery type is empty, but not in combination with Email for PIN and/or Postal address for PIN.",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressRequestPhoneNumber"
              }
            ]
          },
          "specificFields": {
            "type": "object",
            "example": "label1:value|label2:value",
            "description": "List of external data (label:value), separated by a '|', related to an order that can be provided by e.g. the issuer for information or for usage by other systems.Those provided data have no impact on our system business processes.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "deliveryChannel": {
            "type": "string",
            "description": "Delivery channel for pin mailer order among the channels configured for the issuer (if any)."
          },
          "waiveFee": {
            "type": "boolean",
            "description": "Indicates if the configured fee (if any) is waived (true) or not (false) while reordering PIN. By default is false.",
            "default": false
          }
        },
        "title": "ReorderPINRequest"
      },
      "ReorderPINResponse": {
        "type": "object",
        "properties": {
          "orderIdentifier": {
            "$ref": "#/definitions/OrderIdentifier"
          },
          "currentInternalStatus": {
            "type": "string",
            "example": "ORDERABLE",
            "description": "Current internal status of the order (mandatory)."
          },
          "orderType": {
            "type": "string",
            "example": "CardOrder, TanMailerOrder, PinMailerOrder",
            "description": " Type of the order."
          }
        },
        "title": "ReorderPINResponse"
      },
      "ReplaceCardRequest": {
        "type": "object",
        "required": [
          "replacementReason"
        ],
        "properties": {
          "waiveFee": {
            "type": "boolean",
            "description": "Indicates if the configured fee (if any) is waived (true) or not (false) while replacing card.\nBy default is false.",
            "default": false
          },
          "replacementReason": {
            "type": "string",
            "description": "Reason of the card replacement\nRefer to Card.replacementReason"
          },
          "cardContract": {
            "description": "Card Contract",
            "allOf": [
              {
                "$ref": "#/definitions/ReplaceCardRequestCardContract"
              }
            ]
          },
          "overrideDistributionRules": {
            "type": "boolean",
            "description": "DEPRECATED",
            "default": false
          },
          "forceNewPin": {
            "type": "boolean",
            "description": "The attribute can be set to true when a new pin change is needed in the process of replacing a card and it is not foreseen by default process (it is not possible however to inhibit the new pin change if it is foreseen by the default process)",
            "default": false
          }
        },
        "title": "ReplaceCardRequest"
      },
      "ReplaceCardRequestCardContract": {
        "type": "object",
        "properties": {
          "specificFields": {
            "type": "object",
            "description": "The issuer can update the list of external data related to the card contract during the card replacement.\nA new data can be added or an existing data can be updated (label1 = new value) or removed ( (label1 = null).\nAny existing data that is not present in this list is not updated in the card contract.\nRefer to CardContract.specificFields",
            "additionalProperties": {
              "type": "string"
            }
          },
          "card": {
            "description": "Card",
            "allOf": [
              {
                "$ref": "#/definitions/ReplaceCardRequestCardContractCard"
              }
            ]
          },
          "cardHolder": {
            "description": "Card holder data to update before replacing the card (in related customer resource having customerIdentifier equals to CardContract.cardHolderIdentifier). Only the fields provided in request will be updated, others will remain unchanged.",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyCustomerRequest"
              }
            ]
          },
          "selectedModels": {
            "type": "array",
            "description": "The issuer can replace one or several models linked to the card contract if this latest is active (only applicable for TECHNOLOGY_AND_APPLICATION_MODEL for the moment)",
            "items": {
              "$ref": "#/definitions/CardContractModel"
            }
          }
        },
        "title": "ReplaceCardRequest.CardContract"
      },
      "ReplaceCardRequestCardContractCard": {
        "type": "object",
        "properties": {
          "pan": {
            "type": "string",
            "description": "The issuer can provide the Primary Account Number (PAN) or card number of the new card  if this is allowed by the product configuration only (allowed by the numbering model and the replacement reason). The provided PAN must belong to the card product BIN range. "
          },
          "issuerCardExternalReference": {
            "type": "string",
            "description": "The issuer can provide the Issuer Card External Reference for the new card."
          },
          "expiryDate": {
            "type": "string",
            "description": "The issuer can provide the expiry date of the new card if allowed by the product (replacement model).\nFormat is MMYY (month and year)",
            "pattern": "^(?:0[1-9]|1[0-2])(\\d{2})$"
          },
          "embossingName": {
            "type": "string",
            "description": "The issuer can provide the embossing mame (first line of the name embossed on the physical card) for the new card if allowed within card Technology and Application model.\nBy default, the previous value is used.\nThe character \"*\" is not allowed in the line 1 of the embossing name."
          },
          "embossingName2ndLine": {
            "type": "string",
            "description": "The issuer can provide the 2nd Line of embossing name for the new card if the first line of embossing name is provided and if it is allowed by the embossing name calculation algorithm.\nBy default, the previous value is used.\nThe character \"*\" is not allowed in the line 2 of the embossing name."
          },
          "embossingLine5": {
            "type": "string",
            "description": "The issuer can provide the embossing line 5 (additional embossing line) for the new card.\nBy default, the previous value is used."
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide the list of external data for the new card.\nRefer to Card.specificFields",
            "additionalProperties": {
              "type": "string"
            }
          },
          "cardOrder": {
            "description": "Card Order for the new card Empty if no card order needed for the card",
            "allOf": [
              {
                "$ref": "#/definitions/ReplaceCardRequestCardOrder"
              }
            ]
          },
          "pinMailerOrder": {
            "description": "Pin Mailer Order for the new card Empty if no PIN mailer order needed",
            "allOf": [
              {
                "$ref": "#/definitions/ReplaceCardRequestPinMailerOrder"
              }
            ]
          },
          "encryptedPin": {
            "description": "Encrypted Pin for the new card",
            "allOf": [
              {
                "$ref": "#/definitions/ReplaceCardRequestEncryptedPIN"
              }
            ]
          },
          "blockingReason": {
            "type": "string",
            "description": "When replacing a card, the issuer can temporarily block the card immediately after issuing, providing temporary blocking reason only. This can happen, for example, if the cardholder was not properly authenticated (or for other business reason). The card will be activated when, for instance, the cardholder calls the contact center and passes the respective procedures."
          },
          "externalCobadgedCardNumber": {
            "type": "string",
            "description": "This is an external card number used for Giro card in Germany."
          },
          "externalCobadgedSequenceNumber": {
            "type": "string",
            "description": "Sequence Number of Cobadged card"
          },
          "externalCobadgedExpiryDate": {
            "type": "string",
            "description": "ExpiryDate of Cobadged card"
          },
          "cardDeactivationRuleOverride": {
            "type": "string",
            "description": "Indicates which card deactivation rule is enabled for the card.\n\t\t\t\t\t\t\t\tIt overrides the product card deactivation rule\n\t\t\t\t\t\t\t\tPossible value :\n\t\t\t\t\t\t\t•FIRST_APPROVED_AUTHO (1st approved online authorization))"
          },
          "externalAuthorizationsRestrictions": {
            "type": "array",
            "description": "List of external authorization restrictions related to the card",
            "items": {
              "$ref": "#/definitions/ExternalAuthorizationsRestriction"
            }
          }
        },
        "title": "ReplaceCardRequest.CardContract.Card"
      },
      "ReplaceCardRequestCardOrder": {
        "type": "object",
        "description": "Card Order for the new card.Empty if no card order needed for the card",
        "properties": {
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide the list of external data for the card order.\nRefer to Order.specificFields",
            "additionalProperties": {
              "type": "string"
            }
          },
          "cardProducer": {
            "type": "string",
            "description": "The issuer can indicate a card producer (to be used instead of the default one from card profile)."
          },
          "sendingMode": {
            "type": "string",
            "description": "The issuer must provide the sending mode for a physical card if no default sending mode is defined for the replacement reason in the replacement model.\nIn the other cases, the sending mode is optional (for a virtual card or if the skipCardOrderGeneration field is set to true or for a physical card if a default sending mode has been defined for the replacement reason)."
          },
          "deliveryChannel": {
            "type": "string",
            "description": "The issuer can provide the delivery channel if a creation of a card order is requested (if skipCardOrderGeneration field is set to false).\nBy default, the delivery channel from the distribution rule of the card product will be used."
          },
          "deliveryType": {
            "type": "string",
            "description": "Indicates whether the delivery of the card should be to branch or customer (instead of the one from the distribution rule of the card product)\nPossible values are: CUSTOMER, BRANCH\nTo override the delivery address, the card delivery type must not be provided and only one of these fields must be provided: customDeliveryAddress, customDeliveryEmail or customDeliveryPhone."
          },
          "deliveryBranchCode": {
            "type": "string",
            "description": "The issuer must provide the card delivery branch code if the delivery type is BRANCH.\nRefer to Order.deliveryBranchCode"
          },
          "customDeliveryAddressee": {
            "type": "string",
            "description": "Refer to Order.customDeliveryAddressee\nWhen the customDeliveryAddress is provided, the field must also be provided."
          },
          "customDeliveryAddress": {
            "description": "Refer to Order.customDeliveryAddress.\nThe customDeliveryAddressee must also be provided when the field is provided.",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressRequestMailAddress"
              }
            ]
          },
          "customDeliveryEmail": {
            "description": "Refer to  Order.customDeliveryEmail",
            "allOf": [
              {
                "$ref": "#/definitions/EmailAddress"
              }
            ]
          },
          "customDeliveryPhone": {
            "description": "Refer to Order.customDeliveryPhone",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressRequestPhoneNumber"
              }
            ]
          },
          "skipCardOrderGeneration": {
            "type": "boolean",
            "description": "Card order will be not generated if this field is true.\nIf this field is false or empty, the card order will be generated as per the product configuration.\nBy default, value is false.",
            "default": false
          }
        },
        "title": "ReplaceCardRequest.CardOrder"
      },
      "ReplaceCardRequestEncryptedPIN": {
        "type": "object",
        "required": [
          "keyId",
          "pinAlgorithmId",
          "pinBlock",
          "pinBlockFormat"
        ],
        "properties": {
          "pinBlock": {
            "type": "string",
            "description": "The encrypted pin block"
          },
          "pinBlockFormat": {
            "type": "string",
            "description": "Format of the encrypted PIN (e.g. ISO-1-BAPOF)"
          },
          "pinAlgorithmId": {
            "type": "string",
            "description": "The encryption algorithm identifier:\n- format numeric-2\n- value '05' = BAPOF"
          },
          "key": {
            "type": "string",
            "description": "This is the session key (can be provided)"
          },
          "keyId": {
            "type": "string",
            "description": "Encryption key identifier\nFormat: numeric-2\nCurrent possible values: ‘01’, ‘02’ (this list depends on number of keys configured in the HSM)"
          },
          "requestId": {
            "type": "string",
            "description": "Identifier of the request"
          },
          "requestorId": {
            "type": "string",
            "description": "Identifier of the requestor"
          }
        },
        "title": "ReplaceCardRequest.EncryptedPIN"
      },
      "ReplaceCardRequestPinMailerOrder": {
        "type": "object",
        "description": "Pin Mailer Order for the new card.Empty if no PIN mailer order needed",
        "properties": {
          "pinMailerEditor": {
            "type": "string",
            "description": "Refer to Order.pinMailerEditor"
          },
          "sendingMode": {
            "type": "string",
            "description": "The issuer must provide the sending mode for a physical card if no default sending mode is defined for the replacement reason in the replacement model.\nIn the other cases, the sending mode is optional (for a virtual card or if the skipPinMailerOrderGeneration field is set to true or for a physical card if a default sending mode has been defined for the replacement reason)."
          },
          "deliveryChannel": {
            "type": "string",
            "description": "The issuer can provide the delivery channel if a creation of a PIN order is requested (if the skipPinMailerOrderGeneration field is set to false).\nBy default, the delivery channel from the distribution rule of the card product will be used."
          },
          "deliveryType": {
            "type": "string",
            "description": "Indicates whether the delivery of the PIN should be to branch or customer (instead of the one from the distribution rule of the card product)\nPossible values are: CUSTOMER, BRANCH\nTo override the delivery address, the pin mailer delivery type must not be provided and only one of these fields must be provided: customDeliveryAddress, customDeliveryEmail or customDeliveryPhone."
          },
          "deliveryBranchCode": {
            "type": "string",
            "description": "The issuer must provide the PIN delivery branch code if the delivery type is BRANCH.\nRefer to Order.deliveryBranchCode"
          },
          "customDeliveryAddressee": {
            "type": "string",
            "description": "Refer to Order.customDeliveryAddressee\nWhen the customDeliveryAddress is provided, the field must also be provided."
          },
          "customDeliveryAddress": {
            "description": "Refer to Order.customDeliveryAddress.\nThe customDeliveryAddressee must also be provided when the field is provided.",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressRequestMailAddress"
              }
            ]
          },
          "customDeliveryEmail": {
            "description": "Refer to  Order.customDeliveryEmail",
            "allOf": [
              {
                "$ref": "#/definitions/EmailAddress"
              }
            ]
          },
          "customDeliveryPhone": {
            "description": "Refer to Order.customDeliveryPhone",
            "allOf": [
              {
                "$ref": "#/definitions/CreateAddressRequestPhoneNumber"
              }
            ]
          },
          "specificFields": {
            "type": "object",
            "description": "The issuer can provide the list of external data for the pin mailer order.\nRefer to Order.specificFields",
            "additionalProperties": {
              "type": "string"
              }
           },
          "skipPinMailerOrderGeneration": {
            "type": "boolean",
            "description": "Pin mailer will be not generated if this field is true.\nIf this field is false or empty, the pin mailer order will be generated as per the product configuration.\nBy default, value is false.",
            "default": false
          }
        },
        "title": "ReplaceCardRequest.PinMailerOrder"
      },
      "ReplaceCardResponse": {
        "type": "object",
        "properties": {
          "card": {
            "description": "Card Information Mandatory for card replacement process Not filled in case of product change, triggered by card replacement (originalContract and changedContract include card information)",
            "allOf": [
              {
                "$ref": "#/definitions/ReplaceCardResponseCard"
              }
            ]
          },
          "replacementForCardStatus": {
            "type": "string",
            "description": "Card Status of the card to be replaced (mandatory for card replacement process)"
          },
          "replacementReason": {
            "type": "string",
            "description": "Replacement Reason provided in the request (mandatory for card replacement process)"
          },
          "cardReplacementDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "System Date time when the card is replaced by our system (mandatory for card replacement process)"
          },
          "newRelatedCardList": {
            "description": "List of cards linked to the replaced card that have been replaced as well (cards from multi cards product)\nFor each replaced card, information such as card status, cardReference/issuerCardExternalReference, replacement reason, card replacement date and time is returned, new PAN.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/ReplaceCardResponse"
            }
          },
          "originalContract": {
            "description": "Only if a product change is triggered by card replacement.Represents the original contract data before product change has occured",
            "allOf": [
              {
                "$ref": "#/definitions/OriginalContract"
              }
            ]
          },
          "changedContract": {
            "description": "Only if a product change is triggered by card replacement.Represents the new contract data after product change has occured",
            "allOf": [
              {
                "$ref": "#/definitions/ChangedContract"
              }
            ]
          },
          "productChangeInformation": {
            "description": "Only if a product change is triggered by card replacement.Represents product change information",
            "allOf": [
              {
                "$ref": "#/definitions/ProductChangeInformation"
              }
            ]
          }
        },
        "title": "ReplaceCardResponse"
      },
      "ReplaceCardResponseCard": {
        "type": "object",
        "description": "Card Information Mandatory for card replacement process Not filled in case of product change, triggered by card replacement (originalContract and changedContract include card information)",
        "required": [
          "cardIdentifier",
          "panSequenceNumber",
          "status",
          "replacementFor"
        ],
        "properties": {
          "cardIdentifier": {
            "description": "CardIdentifier of the new card",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "pan": {
            "type": "string",
            "description": "PAN of the new card"
          },
          "maskedPan": {
            "type": "string",
            "description": "Masked PAN of the new card"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry Date of the new card\nFormat is MMYY (month and year)."
          },
          "panSequenceNumber": {
            "type": "string",
            "description": "Pan Sequence Number of the new card"
          },
          "status": {
            "type": "string",
            "description": "Card status of the new card (CREATED or ACTIVE, depending on the configuration of the card creation model)"
          },
          "externalStatus": {
            "type": "string",
            "description": "External status of the card\nPossible values are:\n- IN_PROGRESS (it implies the card has not registered in all the WL systems)\n- CREATED (it implies the card is registered in all the WL systems and ready for use)\n- ERROR (the synchronization process between WL systems is failed)"
          },
          "replacementFor": {
            "description": "CardIdentifier of the replaced card",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "orders": {
            "type": "array",
            "description": "List of orders linked to the new card",
            "items": {
              "$ref": "#/definitions/ReplaceCardResponseOrder"
            }
          },
          "orderIdentifier": {
            "description": "Order Identifier",
            "allOf": [
              {
                "$ref": "#/definitions/OrderIdentifier"
              }
            ]
          },
          "panReference": {
            "type": "string",
            "description": "Reference related to the PAN for the new card. Refer to Card.panReference"
          },
          "automaticDeactivationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Automatic deactivation date of the replaced card. Relevant if the feature is enabled for the issuer."
          }
        },
        "title": "ReplaceCardResponse.Card"
      },
      "ReplaceCardResponseOrder": {
        "type": "object",
        "properties": {
          "orderIdentifier": {
            "description": "Order reference calculated by the Issuing Back Office system. Refer to Order.orderIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/OrderIdentifier"
              }
            ]
          },
          "orderType": {
            "type": "string",
            "description": "Refer to Order.orderType"
          },
          "currentInternalStatus": {
            "type": "string",
            "description": "Refer to  Order.currentInternalStatus"
          }
        },
        "title": "ReplaceCardResponse.Order"
      },
      "ReprintHistory": {
        "type": "object",
        "properties": {
          "requestedDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date of the reprinting request (mandatory)"
          },
          "origin": {
            "type": "string",
            "description": "Origin used when the reprinting of the statement was requested."
          },
          "username": {
            "type": "string",
            "description": "Name of the user who requested to reprint the statement"
          }
        },
        "title": "ReprintHistory"
      },
      "ReprintStatementResponse": {
        "type": "object",
        "properties": {
          "accountIdentifier": {
            "description": "Refer to Account.accountIdentifier attribute",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "requestedDate": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to ReprintHistory.requestedDate"
          }
        },
        "title": "ReprintStatementResponse"
      },
      "Reserve": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
          },
          "approvalCode": {
            "type": "string"
          },
          "billingAmount": {
            "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
          },
          "businessCaseIdentifier": {
            "$ref": "#/definitions/BusinessCaseIdentifier"
          },
          "cardAcceptorCity": {
            "type": "string"
          },
          "cardAcceptorCountry": {
            "type": "string"
          },
          "cardAcceptorName": {
            "type": "string"
          },
          "expiryTime": {
            "type": "string"
          },
          "financialType": {
            "type": "string"
          },
          "firstAuthorizationIdentifier": {
            "$ref": "#/definitions/AuthorizationIdentifier"
          },
          "maskedCardNumber": {
            "type": "string"
          },
          "merchantCategoryCode": {
            "type": "string"
          },
          "operationTime": {
            "type": "string"
          }
        },
        "title": "Reserve"
      },
      "ReverseOperationBalanceAdjustmentRequest": {
        "type": "object",
        "required": [
          "reversalReason",
          "externalMatchingOperationReference",
          "externalMatchingOperationDate",
          "externalMatchingOperationServicePoster",
          "externalOperationReference",
          "externalOperationDate",
          "externalOperationServicePoster"
        ],
        "properties": {
          "reversalReason": {
            "type": "string",
            "description": "The reason why the reversal has been created. \nPossible value:\nREVERSAL_ON_DEMAND"
          },
          "description": {
            "type": "string",
            "description": "Textual description of the operation\nCan contain a free text that can be used when the operation is presented to the Customer."
          },
          "externalMatchingOperationReference": {
            "type": "string",
            "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system. \nIt is used for retrieving the operation to be reversed. \nThe field contains the value of externalOperationReference of the original operation to be reversed."
          },
          "externalMatchingOperationDate": {
            "format": "date-time",
            "type": "string",
            "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system. \nIt is used for retrieving the operation to be reversed.\nThe field contains the value of externalOperationDate of the original operation to be reversed."
          },
          "externalMatchingOperationServicePoster": {
            "type": "string",
            "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system. \nIt is used for retrieving the operation to be reversed.\nThe field contains the value of externalOperationServicePoster of the original operation to be reversed."
          },
          "referenceAmount": {
            "description": "The amount of the operation is requested for partial reversal (amount/exponent/currency values).\nIf not provided, the total amount of the original amount is reversed.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "externalOperationReference": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nExternal reference of the operation to be created."
          },
          "externalOperationDate": {
            "format": "date-time",
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe date the operation is performed (in general, the current date should be provided)"
          },
          "externalOperationServicePoster": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe identifier of the external system which provides the operation to be posted (free text)."
          }
        },
        "title": "ReverseOperationBalanceAdjustmentRequest"
      },
      "ReverseOperationBalanceAdjustmentResponse": {
        "required": [
          "operationIdentifier"
        ],
        "properties": {
          "operationIdentifier": {
            "description": "Identifier of the operation created during the balance adjustment reversal (generated by our system)",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          }
        },
        "title": "ReverseOperationBalanceAdjustmentResponse"
      },
      "ReverseOperationFeeRequest": {
        "type": "object",
        "required": [
          "reversalReason",
          "externalMatchingOperationReference",
          "externalMatchingOperationDate",
          "externalMatchingOperationServicePoster",
          "externalOperationReference",
          "externalOperationDate",
          "externalOperationServicePoster"
        ],
        "properties": {
          "reversalReason": {
            "type": "string",
            "description": "The reason why the reversal has been created.\nPossible value:\nREVERSAL_ON_DEMAND"
          },
          "description": {
            "type": "string",
            "description": "Textual description of the operation\nCan contain a free text that can be used when the operation is presented to the Customer."
          },
          "externalMatchingOperationReference": {
            "type": "string",
            "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system. \nIt is used for retrieving the operation to be reversed. \nThe field contains the value of externalOperationReference of the original operation to be reversed."
          },
          "externalMatchingOperationDate": {
            "format": "date-time",
            "type": "string",
            "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system. \nIt is used for retrieving the operation to be reversed.\nThe field contains the value of externalOperationDate of the original operation to be reversed."
          },
          "externalMatchingOperationServicePoster": {
            "type": "string",
            "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system. \nIt is used for retrieving the operation to be reversed.\nThe field contains the value of externalOperationServicePoster of the original operation to be reversed."
          },
          "referenceAmount": {
            "description": "The amount of the operation is requested for partial reversal (amount/exponent/currency values).\nIf not provided, the total amount of the original amount is reversed.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "externalOperationReference": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nExternal reference of the operation to be created."
          },
          "externalOperationDate": {
            "format": "date-time",
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe date the operation is performed (in general, the current date should be provided)."
          },
          "externalOperationServicePoster": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe identifier of the external system which provides the operation to be posted (free text)."
          }
        },
        "title": "ReverseOperationFeeRequest"
      },
      "ReverseOperationFeeResponse": {
        "required": [
          "operationIdentifier"
        ],
        "properties": {
          "operationIdentifier": {
            "description": "Identifier of the operation created during the fee reversal (generated by our system)",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          }
        },
        "title": "ReverseOperationFeeResponse"
      },
      "ReverseOperationPaymentRequest": {
        "type": "object",
        "required": [
          "reversalReason",
          "externalMatchingOperationReference",
          "externalMatchingOperationDate",
          "externalMatchingOperationServicePoster",
          "externalOperationReference",
          "externalOperationDate",
          "externalOperationServicePoster"
        ],
        "properties": {
          "reversalReason": {
            "type": "string",
            "description": "The reason why the reversal has been created.\nPossible value:\nREVERSAL_ON_DEMAND"
          },
          "description": {
            "type": "string",
            "description": "Textual description of the operation\nCan contain a free text that can be used when the operation is presented to the Customer."
          },
          "externalMatchingOperationReference": {
            "type": "string",
            "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system. \nIt is used for retrieving the operation to be reversed. \nThe field contains the value of externalOperationReference of the original operation to be reversed."
          },
          "externalMatchingOperationDate": {
            "format": "date-time",
            "type": "string",
            "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system. \nIt is used for retrieving the operation to be reversed.\nThe field contains the value of externalOperationDate of the original operation to be reversed."
          },
          "externalMatchingOperationServicePoster": {
            "type": "string",
            "description": "The triplet (externalMatchingOperationDate, externalMatchingOperationReference, externalMatchingOperationServicePoster) uniquely identifies the original operation in our system. \nIt is used for retrieving the operation to be reversed.\nThe field contains the value of externalOperationServicePoster of the original operation to be reversed."
          },
          "externalOperationReference": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nExternal reference of the operation to be created."
          },
          "externalOperationDate": {
            "format": "date-time",
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe date the operation is performed (in general, the current date should be provided)"
          },
          "externalOperationServicePoster": {
            "type": "string",
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\nThe identifier of the external system which provides the operation to be posted (free text)."
          }
        },
        "title": "ReverseOperationPaymentRequest"
      },
      "ReverseOperationPaymentResponse": {
        "required": [
          "operationIdentifier"
        ],
        "properties": {
          "operationIdentifier": {
            "description": "Identifier of the operation created during the payment reversal (generated by our system)",
            "allOf": [
              {
                "$ref": "#/definitions/OperationIdentifier"
              }
            ]
          }
        },
        "title": "ReverseOperationPaymentResponse"
      },
      "SearchCardRequest": {
        "type": "object",
        "properties": {
          "pan": {
            "type": "string",
            "description": "Primary Account Number (PAN) also called card number\nEither the PAN or the PAN reference is mandatory to search a card.\nIf both are provided, the search will be done only on the PAN and on optional fields if provided."
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date of the card.\nFormat is MMYY (month and year)",
            "pattern": "^(?:0[1-9]|1[0-2])(\\d{2})$"
          },
          "panSequenceNumber": {
            "type": "string",
            "description": "Number identifying cards either with same PAN or with same PAN and same Expiry date (depending of the card product configuration), e.g 1"
          },
          "panReference":{
              "type": "string",
              "description": "Refer to Card.panReference\nEither the PAN or the PAN reference is mandatory to search a card.\nIf both are provided, the search will be done only on the PAN and on optional fields if provided."
          }
        },
        "title": "SearchCardRequest"
      },
      "SearchContractRequest": {
        "type": "object",
        "properties": {
          "iban": {
            "type": "string",
            "description": "All the accounts  with the provided IBAN (exact matching) are selected to retrieve contracts.\nRefer to Account.iban"
          },
          "retrievePreviousCards": {
            "type": "boolean",
            "default": false,
            "description": "If true, all cards of the card contract will be retrieved in cardContracts.cards else only the latest card issued (by PAN) in card contract will be available in response (only used when embed attribute cardContracts.cards is requested)"
          },
          "accountIdentifier": {
            "description": "Refer to Account.accountIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "accountMembershipNumber1": {
            "type": "string"
          },
          "accountMembershipNumber2": {
            "type": "string"
          },
          "partnerExternalReference": {
            "type": "string"
          },
          "customerAttributes": {
            "$ref": "#/definitions/CustomerAttributes"
          },
          "customerIdentifier": {
            "$ref": "#/definitions/CustomerIdentifier"
          },
          "cardContractIdentifier": {
            "$ref": "#/definitions/CardContractIdentifier"
          },
          "cardIdentifier": {
            "$ref": "#/definitions/CardIdentifier"
          },
          "pan": {
            "type": "string"
          },
          "retrieveParentAccount": {
            "type": "boolean",
            "default": false
          },
          "retrieveParentChildAccounts": {
            "type": "boolean",
            "default": false
          },
          "phoneticSearch": {
            "type": "boolean",
            "default": "false"
          },
          "phoneticAlgorithm": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "title": "SearchContractRequest"
      },
      "CustomerAttributes": {
        "type": "object",
        "properties": {
          "lastName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "birthdate": {
            "type": "string",
            "format": "date-time"
          },
          "zipCode": {
            "type": "string"
          },
          "streetName": {
            "type": "string"
          },
          "buildingNumber": {
            "type": "string"
          }
        }
      },
      "Statement": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "accountIdentifier": {
            "description": "Refer to Account.accountIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "cycleClosureDate": {
            "type": "string",
            "format": "date-time",
            "description": "Cycle closure date (mandatory)"
          },
          "reprintHistory": {
            "type": "array",
            "description": "Historic data of reprinting if any (optional),",
            "items": {
              "$ref": "#/definitions/ReprintHistory"
            }
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of creation of the statement (mandatory)"
          },
          "paymentDueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Deprecated"
          },
          "directDebitAmount": {
            "description": "Amount of the direct debit that is issued for payment when the payment mode is autopayment (direct debit).\nDepending on the issuer configuration, the direct Debit Amount can be different from the amount calculated at the cycle closure date (field theoricDirectDebitAmount) if credit operations (reversal, credit voucher…) are posted to the account between the cycle closure date and the date the direct debit is issued.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "theoricDirectDebitAmount": {
            "description": "Direct debit amount calculated at the cycle closure date when the payment mode is autopayment (direct debit) and depending on the payment conditions.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "cycleBalance": {
            "description": "Balance amount for the statement",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "previousCycleBalance": {
            "description": "Balance amount of the previous cyclic closure (start balance of the statement).\nNot provided for a non-closed cycle.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "totalOfPayment": {
            "description": "Sum of all payment operations received during the cycle.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "loyaltyPoints": {
            "type": "array",
            "description": "Refer to LoyaltyPoint.loyaltyPoints",
            "items": {
              "$ref": "#/definitions/LoyaltyPoint"
            }
          },
          "previousCycleClosureDate": {
            "type": "string",
            "format": "date-time",
            "description": "The closure date of the previous cycle (optional)"
          },
          "nextCycleClosureDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date of the next cycle closure (optional)"
          },
          "amountDue": {
            "description": "Minimum payment amount calculated by our system depending  on the payment conditions of the customer (full payer/partial payer) the customer has to pay to reimburse his debt.",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "initialPastAmountDue": {
            "description": "Remaining amount due of the previous cycle, set at cycle closure (optional, no past amount due for the first cycle or if the amount due was fully repaid for during the previous cycle).",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "initialRemainingAmountDue": {
            "description": "Sum of the amountDue (minimum payment amount) of the cycle and the initialPastAmountDue (optional).",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "statementDuplicatedForCompany": {
            "type": "boolean",
            "description": "Indicates if the company receives a duplicate for statement generated by other paying accounts in the corporate contract"
          },
          "iban": {
            "type": "string",
            "description": "International Bank Account Number of the customer (debtor)"
          },
          "payingAccountIdentifier": {
            "description": "The reference of paying account",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "cycleInformation": {
            "description": "Dates related to the closure calendar for the closure cycle",
            "allOf": [
              {
                "$ref": "#/definitions/CycleInformation"
              }
            ]
          }
        },
        "title": "Statement"
      },
      "Subscription": {
        "type": "object",
        "required": [
          "cardContractReference",
          "services"
        ],
        "properties": {
          "cardContractReference": {
            "type": "string",
            "example": 999990000000000000001
          },
          "customerInfo": {
            "type": "object",
            "example": {
              "additionalKey1": "some-value",
              "additionalKey2": "another-value"
            },
            "description": "Key/value object, entries will be part of each notification for this subscription (max. length of the keys is 32 characters)",
            "additionalProperties": {
              "type": "string"
            }
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SubscriptionService"
            }
          },
          "subscriptionIdentifier": {
            "$ref": "#/definitions/SubscriptionIdentifier"
          }
        },
        "title": "Subscription"
      },
      "SubscriptionContact": {
        "type": "object",
        "required": [
          "type",
          "value"
        ],
        "properties": {
          "pushDeviceType": {
            "type": "string",
            "description": "Type of (mobile) device (required if type is PUSH)",
            "enum": [
              "ANDROID",
              "IOS"
            ]
          },
          "type": {
            "type": "string",
            "example": "MSISDN",
            "enum": [
              "MSISDN",
              "EMAIL",
              "PUSH"
            ]
          },
          "value": {
            "type": "string",
            "example": "+49171000000001"
          }
        },
        "title": "SubscriptionContact"
      },
      "SubscriptionEvent": {
        "type": "object",
        "required": [
          "eventName"
        ],
        "properties": {
          "eventName": {
            "type": "string",
            "example": "XX_Approve_FO"
          },
          "externalReference": {
            "type": "string",
            "description": "Optional external event identifier"
          },
          "parameters": {
            "type": "array",
            "description": "Optional list of parameters to customize the criteria values for events",
            "items": {
              "$ref": "#/definitions/SubscriptionParameter"
            }
          },
          "subscriptionEventIdentifier": {
            "$ref": "#/definitions/SubscriptionEventIdentifier"
          }
        },
        "title": "SubscriptionEvent"
      },
      "SubscriptionEventIdentifier": {
        "type": "object",
        "properties": {
          "subscriptionEventReference": {
            "type": "string"
          }
        },
        "title": "SubscriptionEventIdentifier"
      },
      "SubscriptionEventResponse": {
        "type": "object",
        "properties": {
          "subscriptionIdentifier": {
            "$ref": "#/definitions/SubscriptionEventIdentifier"
          }
        },
        "title": "SubscriptionEventResponse"
      },
      "SubscriptionIdentifier": {
        "type": "object",
        "properties": {
          "subscriptionReference": {
            "type": "string"
          }
        },
        "title": "SubscriptionIdentifier"
      },
      "SubscriptionParameter": {
        "type": "object",
        "required": [
          "criteria",
          "value"
        ],
        "properties": {
          "criteria": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "title": "SubscriptionParameter"
      },
      "SubscriptionResponse": {
        "type": "object",
        "properties": {
          "subscriptionIdentifier": {
            "$ref": "#/definitions/SubscriptionIdentifier"
          }
        },
        "title": "SubscriptionResponse"
      },
      "SubscriptionService": {
        "type": "object",
        "required": [
          "serviceType"
        ],
        "properties": {
          "contacts": {
            "type": "array",
            "description": "List of addresses for an ALERT subscription (required if serviceType is ALERT)",
            "items": {
              "$ref": "#/definitions/SubscriptionContact"
            }
          },
          "events": {
            "type": "array",
            "description": "List of events this subscription will be notified for",
            "items": {
              "$ref": "#/definitions/SubscriptionEvent"
            }
          },
          "packet": {
            "type": "string",
            "description": "ALERT packet name from the issuer configuration (required if serviceType is ALERT)"
          },
          "serviceType": {
            "type": "string",
            "example": "MESSAGE_SERVICE",
            "enum": [
              "ALERT",
              "INSTALMENT",
              "MESSAGE_SERVICE"
            ]
          },
          "subscriptionServiceIdentifier": {
            "$ref": "#/definitions/SubscriptionServiceIdentifier"
          }
        },
        "title": "SubscriptionService"
      },
      "SubscriptionServiceIdentifier": {
        "type": "object",
        "properties": {
          "subscriptionServiceReference": {
            "type": "string"
          }
        },
        "title": "SubscriptionServiceIdentifier"
      },
      "SubscriptionServiceResponse": {
        "type": "object",
        "properties": {
          "subscriptionIdentifier": {
            "$ref": "#/definitions/SubscriptionServiceIdentifier"
          }
        },
        "title": "SubscriptionServiceResponse"
      },
      "SupportContact": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "title": "SupportContact"
      },
      "TemporaryCreditLimit": {
        "type": "object",
        "properties": {
          "temporaryCreditLimitIdentifier": {
             "description": "Unique identifier of the temporary credit limit",
            "allOf": [
              {
                "$ref": "#/definitions/TemporaryCreditLimitIdentifier"
              }
            ]
          },
          "activationStartTime": {
            "type": "string",
            "format": "date-time",
            "description": "Start date of the temporary credit limit (mandatory)"
          },
          "activationEndTime": {
            "type": "string",
            "format": "date-time",
            "description": "End date of the temporary credit limit (mandatory)"
          },
          "temporaryCreditLimitAmount": {
            "description": "Active temporary credit limit (it means that current date is between start date to end date) (mandatory)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          }
        },
        "title": "TemporaryCreditLimit"
      },
      "RelatedTemporaryCreditLimit": {
        "type": "object",
        "required": [
          "accountIdentifier",
          "root",
          "temporaryCreditLimitIdentifier"
        ],
        "properties": {
          "accountIdentifier": {
            "description": "Reference of the account involved by the temporary credit limit",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "root": {
            "type": "boolean",
            "description": "Indicates if the account is a root account (true) or not (false)."
          },
          "temporaryCreditLimitIdentifier": {
            "description": "Refer to TemporaryCreditLimit.temporaryCreditLimitIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/TemporaryCreditLimitIdentifier"
              }
            ]
          }
        },
        "title": "RelatedTemporaryCreditLimit"
      },
      "TemporaryCreditLimitIdentifier": {
        "type": "object",
        "properties": {
          "temporaryCreditLimitReference": {
            "type": "string",
            "description": "Reference of the temporary credit limitt."
          }
        },
        "title": "TemporaryCreditLimitIdentifier"
      },
  
      "UnauthorizedErrorApiResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/UnauthorizedResponseMetadata"
              }
            ]
          }
        },
        "title": "UnauthorizedResponseMetadata",
        "description": "Issuer response entity"
      },
      "UnauthorizedResponseMetadata": {
        "type": "object",
        "required": [
          "correlationId",
          "responseDateTime",
          "statusCode",
          "statusMessage"
        ],
        "properties": {
          "correlationId": {
            "type": "string",
            "example": 12,
            "description": "Wall clock time required from service to generate the response"
          },
          "responseDateTime": {
            "type": "string",
            "example": "format:yyyy-MM-dd'T'HH:mm:ss.SSSZ",
            "description": "Timestamp when response date was generated"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "example": 401,
            "description": "HTTP status code"
          },
          "statusMessage": {
            "type": "string",
            "example": "Unauthorized",
            "description": "Executed REST API status message"
          }
        },
        "title": "UnauthorizedResponseMetadata"
      },
      "UnblockAllCardsRequest": {
        "type": "object",
        "properties": {
          "pan": {
            "type": "string",
            "description": "The issuer provides the pan to unblock all the cards having this PAN. Mandatory if pan reference is not provided.\nRefer to Card.pan"
          },
          "panReference": {
            "type": "string",
            "description": "The issuer provides the pan reference to unblock all the cards having this pan reference. Mandatory if pan is not provided.Refer to Card.panReference"
          },
          "comment": {
            "type": "string",
            "description": "Comment to be provided when unblocking the card "
          },
          "cancelScheduledCardBlocking": {
            "type": "boolean",
            "description": "Flag indicating the scheduled blocking is cancelling\nFalse by default\n- If True, scheduled card blocking is cancelled if any\n- If false, scheduled card blocking is kept if any",
            "default": false
          },
          "unblockingReason": {
            "type": "string",
            "description": "Unblocking reason (optional)\nPossible values : TEMPORARY_UNBLOCK,  FALSE_POSITIVE (Those values are mainly used in the context of Fraud management) "
          }
        },
        "title": "UnblockAllCardsRequest"
      },
      "UnblockAllCardsResponse": {
        "type": "object",
        "required": [
          "cards"
        ],
        "properties": {
          "cards": {
            "type": "array",
            "description": "List of cards and associated data",
            "items": {
              "$ref": "#/definitions/UnblockAllCardsResponseCard"
            }
          }
        },
        "title": "UnblockAllCardsResponse"
      },
      "UnblockAllCardsResponseCard": {
        "type": "object",
        "required": [
          "status",
          "cardIdentifier",
          "cardUnblockingDateTime",
          "comment"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Card status after the unblocking request  (ACTIVE)"
          },
          "cardIdentifier": {
            "description": "Refer to Card.cardIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "comment": {
            "type": "string",
            "description": "Comment for unblocking the card provided in the request"
          },
          "cardUnblockingDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the card has been unblocked in the system"
          }
        },
        "title": "UnblockAllCardsResponse.Card"
      },
      "UnblockCardRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "Comment to be provided when unblocking the card "
          },
          "cancelScheduledCardBlocking": {
            "type": "boolean",
            "description": "Flag indicating the scheduled blocking is cancelling\nFalse by default\n- If True, scheduled card blocking is cancelled if any\n- If false, scheduled card blocking is kept if any",
            "default": false
          },
          "unblockingReason": {
            "type": "string",
            "description": "Unblocking reason (optional)\nPossible values : TEMPORARY_UNBLOCK,  FALSE_POSITIVE (Those values are mainly used in the context of Fraud management) "
          }
        },
        "title": "UnblockCardRequest"
      },
      "UnblockCardResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Card status after the unblocking request  (ACTIVE)"
          },
          "cardIdentifier": {
            "description": "Refer to Card.Identifier",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "comment": {
            "type": "string",
            "description": "Comment provided in the request for the card unblocking"
          },
          "cardUnblockingDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the card has been unblocked in the system"
          }
        },
        "title": "UnblockCardResponse"
      },
      "VelocityLimit": {
        "type": "object",
        "properties": {
          "amount": {
            "description": "Cumulated authorization amount in period. Debits have a positive sign whereas credits have a negative one. \nThe returned value is the one being effective at operation execution time.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "description": "minimum: 0\nmaximum: 999999999\nCurrent number of transactions in period. \nThe returned value is the one being effective at operation execution time."
          },
          "issuerId": {
            "type": "string",
            "description": "Not used, will be removed."
          },
          "maximumAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nMaximum threshold for the cumulated authorization amount in period. \nIn most of the cases the value given here will be positive. \nThe returned value is the one being effective at operation execution time. \nOnly present in case MaximumAmountCheck is true.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "maximumAmountCheck": {
            "type": "boolean",
            "description": "Indicates whether the cumulated authorization amount in period is compared with a maximum threshold or not. \nThe returned value is the one being effective at operation execution time."
          },
          "maximumAmountCheckOrigin": {
            "type": "string",
            "description": "Examples: List [ \"Default\", \"Exception\", \"Override\", \"Other\" ]\nIndicates from which entity MaximumAmountCheck has been taken."
          },
          "maximumAmountOrigin": {
            "type": "string",
            "description": "Indicates from which level MaximumAmountCheck has been taken\nOnly present in case MaximumAmount is present.\nEnum:\n[ Default, Exception, Override, Other ]"
          },
          "maximumCount": {
            "type": "integer",
            "format": "int32",
            "description": "minimum: 0\nmaximum: 999999999\nMaximum threshold for the number of transactions in period. The returned value is the one being effective at operation execution time. Only present in case MaximumCountCheck is true. "
          },
          "maximumCountCheck": {
            "type": "boolean",
            "description": "Indicates whether the number of transactions in period is compared with a maximum threshold or not. \nThe returned value is the one being effective at operation execution time. "
          },
          "maximumCountCheckOrigin": {
            "type": "string",
            "description": "Examples: List [ \"Default\", \"Exception\", \"Override\", \"Other\" ]\nIndicates from which entity MaximumCountCheck has been taken."
          },
          "maximumCountOrigin": {
            "type": "string",
            "description": "Examples: List [ \"Default\", \"Exception\", \"Override\", \"Other\" ]\nIndicates from which entity MaximumCount has been taken.\nOnly present if the maximum count check has been performed."
          },
          "minimumAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nMinimum threshold for the cumulated authorization amount in period. \nIn most of the cases the value given here will be negative. \nThe returned value is the one being effective at operation execution time. \nOnly present in case MinimumAmountCheck is true.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "minimumAmountCheck": {
            "type": "boolean",
            "description": "Indicates whether the cumulated authorization amount in period is compared with a minimum threshold or not. \nThe returned value is the one being effective at operation execution time."
          },
          "minimumAmountCheckOrigin": {
            "type": "string",
            "description": "Examples: List [ \"Default\", \"Exception\", \"Override\", \"Other\" ]\nIndicates from which entity MinimumAmountCheck has been taken."
          },
          "minimumAmountOrigin": {
            "type": "string",
            "description": "Indicates from which level MinimumAmountCheck has been taken.  \nPossible values: Default, Exception, Override, Other.\nOnly present in case MinimumAmount is present."
          },
          "name": {
            "type": "string",
            "description": "minLength: 1\nDescriptive text for the velocity limit, e.g. DAILY CASH"
          },
          "velocityLimitIdentifier": {
            "$ref": "#/definitions/VelocityLimitIdentifier"
          },
          "velocityLimitOverrideReference": {
            "type": "string"
          },
          "velocityLimitOverrideStartdate": {
            "type": "string",
            "format": "date-time"
          },
          "velocityLimitOverrideEnddate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "title": "VelocityLimit"
      },
      "VelocityLimitHistory": {
        "type": "object",
        "required": [
          "changeTime",
          "changeType",
          "maximumAmount",
          "velocityCheckOverrideReference"
        ],
        "properties": {
          "activationEndTime": {
            "type": "string",
            "description": "First point in time at which the override will be considered. If not provided the override will be taken into account immediately.\nDate Time format:  DD/MM/YYYY"
          },
          "activationStartTime": {
            "type": "string",
            "description": "First point in time at which the override will be considered. If not provided the override will be taken into account immediately.\nDate Time format:  DD/MM/YYYY \n"
          },
          "changeTime": {
            "type": "string",
            "description": "Time when the modification has been performed. UTC time zone.\nDate Time format: yyyy-MM-dd’T’HH:mm:ssZ \n"
          },
          "changeType": {
            "type": "string",
            "description": "Indicates which kind of modification has been performed on the velocity check override. Possible values are:\n-\tDelete (no attributes are provided at all)\n-\tReplace (all attributes are provided and not only the changed ones)\n"
          },
          "currencyCode": {
            "type": "string"
          },
          "maximumAmount": {
            "description": "Overrides what is configured on higher levels for the corresponding velocity check attribute",
            "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
          },
          "maximumAmountCheck": {
            "type": "boolean"
          },
          "maximumCount": {
            "type": "integer",
            "format": "int32",
            "description": "Overrides what is configured on higher levels for the corresponding velocity check attribute"
          },
          "maximumCountCheck": {
            "type": "boolean"
          },
          "minimumAmount": {
            "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
          },
          "minimumAmountCheck": {
            "type": "boolean"
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "userReference": {
            "type": "string"
          },
          "velocityCheckOverrideReference": {
            "type": "string",
            "description": "Identifies the velocity check override."
          }
        },
        "title": "VelocityLimitHistory"
      },
      "VelocityLimitIdentifier": {
        "type": "object",
        "properties": {
          "velocityLimitReference": {
            "type": "string",
            "description": "minLength: 1\nmaxLength: 60\nIdentifies the velocity check."
          }
        },
        "title": "VelocityLimitIdentifier"
      },
      "VelocityLimitCheck": {
        "type": "object",
        "properties": {
          "amount": {
            "description": "Cumulated authorization amount in period. Debits have a positive sign whereas credits have a negative one. \nThe returned value is the one being effective at operation execution time.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "count": {
            "type": "integer",
            "format": "int32",
            "description": "minimum: 0\nmaximum: 999999999\nCurrent number of transactions in period. \nThe returned value is the one being effective at operation execution time."
          },
          "issuerId": {
            "type": "string",
            "description": "Not used, will be removed."
          },
          "maximumAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nMaximum threshold for the cumulated authorization amount in period. \nIn most of the cases the value given here will be positive. \nThe returned value is the one being effective at operation execution time. \nOnly present in case MaximumAmountCheck is true.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "maximumAmountCheck": {
            "type": "boolean",
            "description": "Indicates whether the cumulated authorization amount in period is compared with a maximum threshold or not. \nThe returned value is the one being effective at operation execution time."
          },
          "maximumAmountCheckOrigin": {
            "type": "string",
            "description": "Examples: List [ \"Default\", \"Exception\", \"Override\", \"Other\" ]\nIndicates from which entity MaximumAmountCheck has been taken."
          },
          "maximumAmountOrigin": {
            "type": "string",
            "description": "Indicates from which level MaximumAmountCheck has been taken\nOnly present in case MaximumAmount is present.\nEnum:\n[ Default, Exception, Override, Other ]"
          },
          "maximumCount": {
            "type": "integer",
            "format": "int32",
            "description": "minimum: 0\nmaximum: 999999999\nMaximum threshold for the number of transactions in period. The returned value is the one being effective at operation execution time. Only present in case MaximumCountCheck is true. "
          },
          "maximumCountCheck": {
            "type": "boolean",
            "description": "Indicates whether the number of transactions in period is compared with a maximum threshold or not. \nThe returned value is the one being effective at operation execution time. "
          },
          "maximumCountCheckOrigin": {
            "type": "string",
            "description": "Examples: List [ \"Default\", \"Exception\", \"Override\", \"Other\" ]\nIndicates from which entity MaximumCountCheck has been taken."
          },
          "maximumCountOrigin": {
            "type": "string",
            "description": "Examples: List [ \"Default\", \"Exception\", \"Override\", \"Other\" ]\nIndicates from which entity MaximumCount has been taken.\nOnly present if the maximum count check has been performed."
          },
          "minimumAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nMinimum threshold for the cumulated authorization amount in period. \nIn most of the cases the value given here will be negative. \nThe returned value is the one being effective at operation execution time. \nOnly present in case MinimumAmountCheck is true.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "minimumAmountCheck": {
            "type": "boolean",
            "description": "Indicates whether the cumulated authorization amount in period is compared with a minimum threshold or not. \nThe returned value is the one being effective at operation execution time."
          },
          "minimumAmountCheckOrigin": {
            "type": "string",
            "description": "Examples: List [ \"Default\", \"Exception\", \"Override\", \"Other\" ]\nIndicates from which entity MinimumAmountCheck has been taken."
          },
          "minimumAmountOrigin": {
            "type": "string",
            "description": "Indicates from which level MinimumAmountCheck has been taken.  \nPossible values: Default, Exception, Override, Other.\nOnly present in case MinimumAmount is present."
          },
          "velocityLimitIdentifier": {
            "$ref": "#/definitions/VelocityLimitIdentifier"
          }
        },
        "title": "VelocityLimitCheck"
      },
      "VelocityLimitOverride": {
        "type": "object",
        "properties": {
          "activationEndTime": {
            "type": "string",
            "description": "Last point in time at which the override will be considered. Has to be later than ActivationStartTime. Can be present without ActivationStartTime. If not provided the override will be taken into account forever."
          },
          "activationStartTime": {
            "type": "string",
            "description": "First point in time at which the override will be considered. Has to be before ActivationEndTime. Can be present without ActivationEndTime. If not provided the override will be taken into account immediately."
          },
          "defaultVelocityLimitReference": {
            "$ref": "#/definitions/VelocityLimitIdentifier"
          },
          "deleted": {
            "type": "boolean",
            "description": "Indicates whether the override is still taken into account or has been deleted."
          },
          "issuerId": {
            "type": "string",
            "description": "Not used, to be removed"
          },
          "maximumAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nMaximum threshold for the cumulated authorization amount in period. In most of the cases the value given here will be positive. The returned value is the one being effective at operation execution time. Only present in case MaximumAmountCheck is true.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "maximumAmountCheck": {
            "type": "boolean",
            "description": "Indicates whether the cumulated authorization amount in period is compared with a maximum threshold or not. The returned value is the one being effective at operation execution time."
          },
          "maximumCount": {
            "type": "integer",
            "format": "int32",
            "description": "minimum: 0\nmaximum: 999999999\nMaximum threshold for the number of transactions in period. The returned value is the one being effective at operation execution time. Only present in case MaximumCountCheck is true."
          },
          "maximumCountCheck": {
            "type": "boolean",
            "description": "Indicates whether the cumulated authorization amount in period is compared with a maximum threshold or not. The returned value is the one being effective at operation execution time."
          },
          "minimumAmount": {
            "description": "minimum: -1000000000000000000\nmaximum: 1000000000000000000\nMinimum threshold for the cumulated authorization amount in period. In most of the cases the value given here will be negative. The returned value is the one being effective at operation execution time. Only present in case MinimumAmountCheck is true.",
            "allOf": [
              {
                "$ref": "#/definitions/MonetaryAmountAlphaCurrency"
              }
            ]
          },
          "minimumAmountCheck": {
            "type": "boolean",
            "description": "Indicates whether the cumulated authorization amount in period is compared with a minimum threshold or not. The returned value is the one being effective at operation execution time."
          },
          "priority": {
            "type": "string",
            "description": "minimum: 0\nmaximum: 9999\nIn case multiple overrides with overlapping activation times are existing this information is used to resolve this situation by applying the overrides one by one starting with the one with lowest priority. The priority needs to be unique across all overrides associated with a velocity check and an account. Required field when inserting."
          },
          "velocityLimitOverrideIdentifier": {
            "$ref": "#/definitions/VelocityLimitOverrideIdentifier"
          }
        },
        "title": "VelocityLimitOverride"
      },
      "VelocityLimitOverrideIdentifier": {
        "type": "object",
        "properties": {
          "velocityLimitOverrideReference": {
            "type": "string",
            "description": "minLength: 1\nmaxLength: 100\nIdentifies the velocity limit override which replaces the default velocity limit."
          }
        },
        "title": "VelocityLimitOverrideIdentifier"
      },
      "CreateDisputeRequest": {
        "type": "object",
        "properties": {
          "disputeReason": {
            "type": "string",
            "description": "Indicates the dispute reason. Example of values are : UNKNOWN_CARD, HIGH_AMOUNT, DUPLICATE_TRANSACTION, LATE_PRESENTMENT , INVALID_PAYMENT, INACTIVE_CARD, CREATED_CARD, COUNTERFEIT_CARD, BLOCKED_CARD, ACTIVE_CARD_TED."
          },
          "refundRedebitIndicator": {
            "type": "string",
            "description": "Indicator to perform or not a Refund (for Debit transaction) / Redebit (for Credit transaction) on 'Cardholder Account' on the disputed transaction. Possible values:\n- FULL: Refund Redebit the full amount of the transaction.\n- PARTIAL : Refund Redebit a partial amount, the partial amount should be provided in the field Refund Redebit Amount\n- NONE : no refund redebit is requested, this is the default value"
          },
          "refundRedebitAmount": {
            "description": "The issuer should provide the Amount to Refund or Redebit when Refund Redebit Indicator is PARTIAL. Otherwise it is not checked",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "declareFraudIndicator": {
            "type": "boolean",
            "description": "Indicator to perform a fraud declaration. Possible values:\ntrue: fraud declaration will be sent to the scheme.\nfalse: No fraud declaration, this is the default value."
          },
          "issuerDisputeExternalReference": {
            "type": "string",
            "description": "The issuer Dispute External Reference : should be unique by issuer, there is no constraint regarding the format, only  maximum length is 50 CHAR."
          },
          "disputePostings": {
            "type": "array",
            "description": "Issuer can provide a posting operation to perform on the created dispute folder, example:\n- Do a refund towards the cardholder account\n- Do a write-off towards an issuer account (Profit and Loss, Fraud,..)\n- do a Foreign exchange fee, Financial Advice Exchange Rate Difference",
            "items": {
              "$ref": "#/definitions/CreatePostingRequest"
            }
          },
          "disputeEvents": {
            "type": "array",
            "description": "Issuer can provide an event to add to the created dispute folder.\nThis manual event will be added to events generated internally by our system.\nFor example, the issuer can add an event to indicate that there is a communication from/to cardholder.",
            "items": {
              "$ref": "#/definitions/CreateEventRequest"
            }
          },
          "disputeDocuments": {
            "type": "array",
            "description": "Issuer can provide a list of Documents to add to the created dispute folder.",
            "items": {
              "$ref": "#/definitions/CreateDocumentRequest"
            }
          }
        },
        "title": "CreateDisputeRequest"
      },
      "CreateDisputeResponse": {
        "type": "object",
        "required": [
          "disputeFolderIdentifier"
        ],
        "properties": {
          "disputeFolderIdentifier": {
            "description": "Dispute Folder Identifier",
            "allOf": [
              {
                "$ref": "#/definitions/DisputeFolderIdentifier"
              }
            ]
          },
          "disputePostings": {
            "type": "array",
            "description": "Posting operation to perform on the created dispute folder, example:\n- Do a refund towards the cardholder account\n- Do a write-off towards an issuer account (Profit and Loss, Fraud,..)\n- do a Foreign exchange fee, Financial Advice Exchange Rate Difference",
            "items": {
              "$ref": "#/definitions/CreatePostingResponse"
            }
          },
          "disputeEvents": {
            "type": "array",
            "description": "Event to add to the created dispute folder.",
            "items": {
              "$ref": "#/definitions/CreateEventResponse"
            }
          },
          "disputeDocuments": {
            "type": "array",
            "description": "List of Documents to add to the created dispute folder",
            "items": {
              "$ref": "#/definitions/CreateDocumentResponse"
            }
          }
        },
        "title": "CreateDisputeResponse"
      },
      "Dispute": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer Identifier (unique per platform)"
          },
          "disputeFolderIdentifier": {
            "description": "Dispute Folder Identifier",
            "allOf": [
              {
                "$ref": "#/definitions/DisputeFolderIdentifier"
              }
            ]
          },
          "events": {
            "type": "array",
            "description": "Events attached to the dispute folder.Event can be triggered by our system or  added by the issuer (purpose can to indicate a communication from/to cardholder)",
            "items": {
              "$ref": "#/definitions/DisputeEvent"
            }
          },
          "postings": {
            "type": "array",
            "description": "Posted operation on the dispute folder, example : Do a refund towards the cardholder account, \nDo a write-off towards an issuer account (Profit and Loss, Fraud,..), \ndo a Foreign exchange fee, Financial Advice Exchange Rate Difference",
            "items": {
              "$ref": "#/definitions/DisputePosting"
            }
          },
          "documents": {
            "type": "array",
            "description": "Documents added to the dispute folder",
            "items": {
              "$ref": "#/definitions/DisputeDocument"
            }
          },
          "messages": {
            "type": "array",
            "description": "Messages exchanged with the scheme linked to the dispute folder",
            "items": {
              "$ref": "#/definitions/DisputeMessage"
            }
          },
          "acquirerReferenceData": {
            "type": "string",
            "description": "Acquiring Reference Number (ARN) related to the disputed transaction"
          },
          "transactionType": {
            "type": "string",
            "description": "DEPRECATED"
          },
          "transactionTime": {
            "type": "string",
            "format": "date-time",
            "description": "Transaction Date and Time on the Merchant site related to the disputed transaction"
          },
          "transactionAmount": {
            "description": "Transaction Amount (Value/Currency/Currency Exponent) related to the disputed transaction",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "reconciliationAmount": {
            "description": "Scheme Reconciliation Amount (Value/Currency/Currency Exponent) related to the disputed transaction",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "billingAmount": {
            "description": "Cardholder Billing Amount (Value/Currency/Currency Exponent) related to the disputed transaction on Cardholder point of view",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "billingFees": {
            "description": "Cardholder Billing Fees Amount (Value/Currency/Currency Exponent)  associated to the disputed transaction on Cardholder point of view",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "outstandingBalance": {
            "description": "Cardholder Outstanding balance (Value/Currency/Currency Exponent) associated to the disputed transaction",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "issuerAccountingBalance": {
            "description": "Issuer Accounting Balance (Value/Currency/Currency Exponent) related to the dispute on issuer point of view",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "statusCode": {
            "type": "string",
            "description": "Dispute status (open, closed) associated to the Dispute Folder"
          },
          "reason": {
            "type": "string",
            "description": "Dispute Reason associated to the Dispute Folder"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the Dispute Folder creation"
          },
          "cardAcceptorName": {
            "type": "string",
            "description": "Merchant Address Name related to the disputed transaction"
          },
          "cardAcceptorCity": {
            "type": "string",
            "description": "Merchant Address City related to the disputed transaction"
          },
          "cardAcceptorCountry": {
            "type": "string",
            "description": "Merchant Address Country Code (num-3) related to the disputed transaction"
          },
          "cardAcceptorIdCode": {
            "type": "string",
            "description": "Merchant Identifier related to the disputed transaction"
          },
          "cardAcceptorZipCode": {
            "type": "string",
            "description": "Merchant Address Zip Code related to the disputed transaction"
          },
          "userInCharge": {
            "type": "string",
            "description": "User in charge of the Dispute Folder"
          },
          "cardIdentifier": {
            "description": "Card Identifier related to the disputed transaction",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "lastMessageType": {
            "type": "string",
            "description": "Type of the last Message of the Dispute Folder"
          },
          "lastMessageDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the last Message of the Dispute Folder"
          },
          "lastMessageStatus": {
            "type": "string",
            "description": "Status of the last Message of the Dispute Folder"
          },
          "superFolderReference": {
            "type": "string",
            "description": "Super folder reference if super folder exists"
          },
          "transactionCategory": {
            "type": "string",
            "description": "Internal Transaction category (SALES, CASH_WITHDRAWAL,  etc ..) related to the disputed transaction"
          },
          "transmissionDate": {
            "type": "string",
            "format": "date-time",
            "description": "Transmission date from the scheme\nMCI : PDS 0158 - s5 Central Site Business Date\nVISA : TCR0 164-167 Central Processing Date (YDDD)"
          },
          "clientOpenDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the cardholder has raised the Dispute, used to track the receipt of the cardholder dispute"
          }
        },
        "title": "Dispute"
      },
      "DisputeDocument": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "Contains the document (letter) attached to the Dispute Folder encoded in Base64"
          },
          "type": {
            "type": "string",
            "description": "Type of the document attached to the Dispute Folder"
          },
          "label": {
            "type": "string",
            "description": "Label of the external document attached to the Dispute Folder"
          },
          "fileName": {
            "type": "string",
            "description": "File name of the external document attached to the Dispute Folder"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the external document creation attached to the Dispute Folder"
          }
        },
        "title": "DisputeDocument"
      },
      "DisputeEvent": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Dispute Event Type  (values shared between WL and the issuer)"
          },
          "message": {
            "type": "string",
            "description": "Description of the event"
          },
          "external": {
            "type": "boolean",
            "description": "Indicates if the event is external (value true) or internal (value false)"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the event creation"
          }
        },
        "title": "DisputeEvent"
      },
      "DisputeMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Identifies the type de the message FIRST_PRESENTMENT, CHARGEBACK etc ... associated to the Dispute Folder"
          },
          "status": {
            "type": "string",
            "description": "Status of the message  associated to the Dispute Folder"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the message creation associated to the Dispute Folder"
          },
          "amount": {
            "description": "Amount in Scheme Reconciliation Currency of the message creation associated to the Dispute Folder",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "reasonCode": {
            "type": "string",
            "description": "Reason Code of the message associated to the Dispute Folder"
          },
          "reasonCodeDescription": {
            "type": "string",
            "description": "Description of the Reason Code of the message associated to the Dispute Folder"
          },
          "reverseFlag": {
            "type": "boolean",
            "description": "Identifies if the message is reversed or not"
          },
          "schemeCaseId": {
            "type": "string",
            "description": "The Scheme Case Id received from the Scheme VROL or MasterCom related to a chargeback message"
          }
        },
        "title": "DisputeMessage"
      },
      "DisputePosting": {
        "type": "object",
        "properties": {
          "postingAmount": {
            "description": "Amount in Scheme Reconciliation Currency associated to the posting (message, write off, cardholder refund ...)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "message": {
            "type": "string",
            "description": "Message information for the posting"
          },
          "immediateReimbursement": {
            "type": "boolean",
            "description": "Optional parameter for impacting cardholder account immediatly"
          },
          "postingTypeReference": {
            "type": "string",
            "description": "Identifier of the external reference of the posting. The list of values are configured by issuer:\nThree family of postings type:\n- Cardholder: For impacting the cardholder account, possible values can be: 'Cardholder Account', 'POST TO OTHER ACCOUNT'\n- Issuer: Write off: possible values can be 'ISSUER_ACCOUNT', 'PROFIT AND LOSS', 'FRAUD'\n- Foreign exchange fee ('FOREIGN_EXCHANGE_FEE'), Financial Advice Exchange Rate Difference ('ADVANCE_EXCHANGE_RATE_DIFFERENCE'):  the dispute officer can manually create a dispute posting amount to this account"
          },
          "operationReference": {
            "type": "string",
            "description": "Internal reference of a transaction in external service, is needed for posting to cardholder account."
          },
          "disputeAdjustmentType": {
            "type": "string",
            "description": "Dispute adjustment type"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of posting creation"
          }
        },
        "title": "DisputePosting"
      },
      "CreatePostingRequest": {
        "type": "object",
        "required": [
          "postingAmount",
          "postingTypeReference"
        ],
        "properties": {
          "postingAmount": {
            "description": "Mandatory parameter specifying the posting amount. The posting amount can be negative amount (- sign in the beginning of the amount digits)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "message": {
            "type": "string",
            "description": "Description message that will associated to the posted operation in the statement"
          },
          "immediateReimbursement": {
            "type": "boolean",
            "description": "Optional parameter for impacting card holder account immediately"
          },
          "postingTypeReference": {
            "type": "string",
            "description": "The issuer must provide the identifier of the external reference of the posting. The list of values are configured by issuer:\nThree family of postings type:\n- Cardholder: For impacting the cardholder account, possible values can be: 'Cardholder Account', 'POST TO OTHER ACCOUNT'\n- Issuer: Write off: possible values can be 'ISSUER_ACCOUNT', 'PROFIT AND LOSS', 'FRAUD'\n- Foreign exchange fee ('FOREIGN_EXCHANGE_FEE'), Financial Advice Exchange Rate Difference ('ADVANCE_EXCHANGE_RATE_DIFFERENCE'):  the dispute officer can manually create a dispute posting amount to this account"
          }
        },
        "title": "CreatePostingRequest"
      },
      "CreatePostingResponse": {
        "type": "object",
        "required": [
          "postingAmount",
          "postingTypeReference",
          "creationDate"
        ],
        "properties": {
          "postingAmount": {
            "description": "Mandatory parameter specifying the posting amount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "postingTypeReference": {
            "type": "string",
            "description": "Contains the identifier of the external reference of the posting"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "The effective date of creation of the posting"
          }
        },
        "title": "CreatePostingResponse"
      },
      "ApiResponseEntityCreatePostingResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreatePostingResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreatePostingResponse"
      },
      "ApiResponseEntityCreateSubscription": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/SubscriptionResponse"
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntityCreateSubscription",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityCreateSubscriptionEvent": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/SubscriptionEventResponse"
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntityCreateSubscriptionEvent",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityCreateSubscriptionService": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/SubscriptionServiceResponse"
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntityCreateSubscriptionService",
        "description": "Issuer response entity"
      },
      "ApiResponseEntitySearchSubscription": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntitySearchSubscription",
        "description": "Issuer response entity"
      },
      "CreateEventRequest": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Contains the dispute Event Type label of the Event to post to the Dispute Folder.\nThe allowed event type list is configured per issuer in the platform. Type value generally used by issuers: 'Comment'"
          },
          "message": {
            "type": "string",
            "description": "Contains a free defined input that will be displayed in the eventMessage in the Dispute Folder"
          }
        },
        "title": "CreateEventRequest"
      },
      "CreateEventResponse": {
        "type": "object",
        "required": [
          "type",
          "creationDate"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Contains the dispute Event Type label of the Event to post to the Dispute Folder."
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "The effective date of creation of the event"
          }
        },
        "title": "CreateEventResponse"
      },
      "ApiResponseEntityCreateEventResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateEventResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateEventResponse"
      },
      "VtsApplePushDataRequest": {
        "type": "object",
        "properties": {
          "authCode": {
            "type": "string"
          },
          "nonce": {
            "type": "string"
          },
          "pan": {
            "type": "string"
          },
          "panExpiryDate": {
            "type": "string"
          }
        },
        "title": "VtsApplePushDataRequest"
      },
      "VtsMobileBankingAuthCode": {
        "type": "object",
        "properties": {
          "authCode": {
            "type": "string"
          },
          "pan": {
            "type": "string"
          }
        },
        "title": "VtsMobileBankingAuthCode"
      },
      "VtsPaymentInstrumentsDetailsRequest": {
        "type": "object",
        "properties": {
          "billingAddressline1": {
            "type": "string"
          },
          "billingAddressline2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "clientAppId": {
            "type": "string"
          },
          "clientDeviceId": {
            "type": "string"
          },
          "clientWalletAccountId": {
            "type": "string"
          },
          "clientWalletProvider": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "pan": {
            "type": "string"
          },
          "panExpiryDate": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "title": "VtsPaymentInstrumentsDetailsRequest"
      },
      "VtsPushProvisioningResponse": {
        "type": "object",
        "properties": {
          "paymentInstrumentDetails": {
            "type": "string"
          }
        },
        "title": "VtsPushProvisioningResponse"
      },
      "ApiResponseApplePayPushProvisioning": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ApplePayPushProvisioningResponse"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseApplePayPushProvisioning",
        "description": "Issuer response entity"
      },
      "ApplePayPushProvisioningResponse": {
        "type": "object",
        "properties": {
          "mbpac": {
            "type": "string"
          },
          "mbpad": {
            "type": "string"
          }
        },
        "title": "ApplePayPushProvisioningResponse"
      },
      "ApiResponseEntityMobileBankingAppAuthCodeResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/MobileBankingAppAuthCodeResponse"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityMobileBankingAppAuthCodeResponse",
        "description": "Issuer response entity"
      },
      "MobileBankingAppAuthCodeResponse": {
        "type": "object",
        "properties": {
          "mbaac": {
            "type": "string"
          }
        },
        "title": "MobileBankingAppAuthCodeResponse"
      },
      "ApiResponseEntityVtsPushProvisioningResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/VtsPushProvisioningResponse"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityVtsPushProvisioningResponse",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityCreateAuthorizationRestrictionOverride": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/AuthorizationRestrictionOverrideIdentifier"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityCreateAuthorizationRestrictionOverride",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityModifyAuthorizationRestrictionOverride": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/AuthorizationRestrictionOverrideIdentifier"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityModifyAuthorizationRestrictionOverride",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityDeleteAuthorizationRestrictionOverride": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/AuthorizationRestrictionOverrideIdentifier"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityDeleteAuthorizationRestrictionOverride",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityCreateVelocityLimitOverride": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/VelocityLimitOverrideIdentifier"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityCreateVelocityLimitOverride",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityModifyVelocityLimitOverride": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/VelocityLimitOverrideIdentifier"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityModifyVelocityLimitOverride",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityCardPinState": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CardStateResponse"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "ApiResponseEntityCardPinState",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityCardPinStateList": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/CardStateResponse"
            }
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntityCardPinStateList",
        "description": "Issuer response entity"
      },
      "RetrieveCardPinStateRequest": {
        "description": "One of cardNumber, alternativeCardNumber or cardReference is mandatory",
        "type": "object",
        "properties": {
          "pan": {
            "type": "string",
            "description": "minLength: 1\nmaxLength: 28\nIdentifies the cards those details have to be provided. \nEither CardReference, CardNumber, AlternativeCardNumber must be provided."
          },
          "alternativePan": {
            "type": "string",
            "description": "minLength: 1\nmaxLength: 100\nIdentifies the cards those details have to be provided. \nEither CardReference, CardNumber, AlternativeCardNumber must be provided."
          },
          "cardReference": {
            "type": "string",
            "description": "minLength: 1\nmaxLength: 100\nIdentifies the cards those details have to be provided. \nEither CardReference, CardNumber, AlternativeCardNumber must be provided."
          }
        },
        "title": "RetrieveCardPinStateRequest"
      },
      "CardStateResponse": {
        "type": "object",
        "properties": {
          "accountReference": {
            "type": "string",
            "description": "DynamicReference\nminLength: 1\nmaxLength: 100"
          },
          "alternativePan": {
            "type": "string",
            "description": "AlternativeCardNumber\nminLength: 1\nmaxLength: 100"
          },
          "pan": {
            "type": "string",
            "description": "CardNumber\nminLength: 1\nmaxLength: 28"
          },
          "cardReference": {
            "type": "string",
            "description": "DynamicReference\nminLength: 1\nmaxLength: 100"
          },
          "maximumPinTryCounter": {
            "type": "string",
            "description": "minimum: 0\nmaximum: 9999\nThe maximum amount of failed PIN tries which the cardholder can do. \nAfter that every PIN based transaction is declined until the PIN try counter is reset. \nNo matter whether the PIN is correct or not."
          },
          "nfcStatus": {
            "type": "string",
            "description": "Indicates the status of the NFC antenna. \nPossible values are:\n- None (NFC antenna is not present)\n- Enabled (NFC antenna is enabled)\n- EnablingInProgress (Enabling of NFC antenna has been initiated but is not yet finished)\n- Disabled (NFC antenna is disabled)\n- DisablingInProgress (Disabling of NFC antenna has been initiated but is not yet finished)\n- Locked (NFC antenna is disabled for transport but will be automatically enabled by the card once the card is used)"
          },
          "nfcStatusChangeCounter": {
            "type": "string",
            "description": "minimum: 0\nmaximum: 9999\nNumber of changes performed on NfcStatus. Present in case NfcStatus is present."
          },
          "nfcStatusChangeTime": {
            "type": "string",
            "description": "Example: 20200518235959\nTime of the last NfcStatus modification. Present in case NfcStatus is present."
          },
          "offlinePinChangeStatus": {
            "type": "string",
            "description": "Examples: List [ \"Pending\", \"InProgress\", \"Successful\", \"Failed\" ]\nIndicates the current status of adapting the offline PIN. \nPossible values are:\nPending (offline PIN needs to be changed but no script has been sent so far)\nInProgress (at least one PIN change script has been sent; receipt of a positive or negative confirmation is outstanding)\nSuccessful (offline PIN change finished successfully)\nFailed (offline PIN change did not finish successfully)"
          },
          "offlinePinChangeStatusChangeTime": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the pinCheckParameterStatus was changed.\nExample: 2012-12-31T22:00:00.000"
          },
          "offlinePinChangeTryCounter": {
            "type": "string",
            "description": "minimum: 0\nmaximum: 9999\nNumber of attempts to adapt the offline PIN, i.e. number of times a PIN change script has been sent in a response message. \nPresent in case OfflinePinChangeStatus is present."
          },
          "pinCheckParameter1": {
            "type": "string",
            "description": "minLength: 1\nmaxLength: 64\nDepending on the used PIN verification method this field has different format and meaning:\n- IBM 3642 algorithm: PIN offset, decimal digits\n- German DK (Deutsche Kreditwirtschaft),: PRW (PIN-Referenzwert), 64 hexadecimal digits\n- German Proprietary: PRW (PIN-Referenzwert), 32 hexadecimal digits\nVISA: PVV, 4 decimal digits"
          },
          "pinCheckParameter2": {
            "type": "string",
            "description": "minLength: 1\nmaxLength: 64\nDepending on the used PIN verification method this field has different format and meaning:\n- German DK (Deutsche Kreditwirtschaft): Random value, 8 hexadecimal digits\n- German Proprietary: PCC (PIN Change Counter), 4 decimal digits"
          },
          "pinCheckParameterStatus": {
            "type": "string",
            "description": "Examples: List [ \"Active\", \"Blocked\" ]\nStatus of PIN check parameters. \nPossible values are:\nActive\nBlocked"
          },
          "pinCheckParameterStatusChangeTime": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the OfflinePinChangeStatus was changed.\nExample: 2012-12-31T22:00:00.000"
          },
          "pinTryCounter": {
            "type": "string",
            "description": "minimum: 0\nmaximum: 9999\nNumber of failed PIN entries."
          },
          "pinTryCounterChangeTime": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp pattern: ^[0-9]{4}([0][1-9]|[1][012])(0[0-9]|[12][0-9]|3[01])(2[0-3]|[01][0-9])([0-5][0-9])([0-5][0-9])$|^$\nExample: 20200518235959"
          },
          "pinTryCounterResetTime": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp pattern: ^[0-9]{4}([0][1-9]|[1][012])(0[0-9]|[12][0-9]|3[01])(2[0-3]|[01][0-9])([0-5][0-9])([0-5][0-9])$|^$\nExample: 20200518235959"
          },
          "pinTryCounterResetType": {
            "type": "string",
            "description": "Examples: List [ \"Daily\", \"Fixed\", \"Never\", \"Other\" ]\nIndicates the algorithm to reset the PIN try counter after exceeding the maximum number of allowed wrong entries.\n- Daily (Every day at a certain time)\n- Fixed (After expiry of a time interval)\n- Never (No automatic reset)"
          },
          "expiryDate": {
            "type": "string",
            "description": "The expiry date of the card\nFormat is MMYY"
          },
          "status": {
            "type": "string",
            "description": "The status of the card"
          },
          "blockingReason": {
            "type": "string",
            "description": "The reason why the card was blocked (if the card status is blocked)"
          }
        },
        "title": "CardStates"
      },
      "apiResponseEntityHealthCheckStatus": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/HealthCheckStatus"
              }
            ]
          },
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          }
        },
        "title": "apiResponseEntityHealthCheckStatus",
        "description": "Issuer response entity"
      },
      "HealthCheckStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        },
        "title": "HealthCheckStatus"
      },
      "CreateDocumentRequest": {
        "type": "object",
        "required": [
          "data",
          "type",
          "fileName"
        ],
        "properties": {
          "data": {
            "type": "string",
            "description": "The issuer must provide the data of the document in Base64 encoding format that has to be attached to the Dispute Folder.\nThe maximum size per document is:\n- 10 Mo for PDF, TIFF or JPEG format (for Visa or Mastercard)\n- 15 Mo for ZIP format (only for Mastercard)"
          },
          "type": {
            "type": "string",
            "description": "The issuer must provide the document type,  Possible values:\n- 'image/jpeg':  data of attached document in JPEG format\n- 'image/tiff':  data of attached document in TIFF format\n- 'application/pdf':  data of attached document in PDF format\n- 'application/zip': data of attached document in ZIP format for Mastercard only"
          },
          "label": {
            "type": "string",
            "description": "Contains optional label to be displayed on the event generated in the Dispute Folder"
          },
          "fileName": {
            "type": "string",
            "description": "Contains Mandatory File Name of the document to be displayed on the event generated in the Dispute Folder\nOnly for a Mastercard operation, the file name must have a maximum lenght of 16 with only alpha and numeric values (no constraint for a VISA operation)"
          },
          "documentTypeId": {
            "type": "string",
            "description": "Contains optional document type Id"
          }
        },
        "title": "CreateDocumentRequest"
      },
      "CreateDocumentResponse": {
        "type": "object",
        "required": [
          "fileName",
          "creationDate"
        ],
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Contains Mandatory File Name of the document to be displayed on the event generated in the Dispute Folder"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "The effective date of creation of the document"
          },
          "documentTypeId": {
            "type": "string",
            "description": "Contains Mandatory document Type Id of the document to be displayed on the event generated in the Dispute Folder"
          }
        },
        "title": "CreateDocumentResponse"
      },
      "ApiResponseEntityCreateDocumentResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateDocumentResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityCreateDocumentResponse"
      },
      "GenerateChargebackRequest": {
        "type": "object",
        "required": [
          "chargebackType"
        ],
        "properties": {
          "chargebackType": {
            "type": "string",
            "description": "The issuer must provide the type of chargeback. Possible values are:\n- FULL :  Full Chargeback is performed using the transaction Reconciliation amount of the disputed transaction (the chargebackAmount if provided is ignored)\n- PARTIAL : a Partial Chargeback is performed using the provided chargebackAmount\n- HIGH : 2 times FULL reconciliation amount  this is in case for example : the merchant instead of refunding cardholder, he did another debit. In this case he should  reimburse cardholder  2 times (credit HIGH_AMOUNT)."
          },
          "chargebackAmount": {
            "description": "The Amount to use in case of Partial Chargeback ( chargebackType = PARTIAL)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "chargebackScenario": {
            "type": "string",
            "description": "Mandatory for VISA\nDefined values associated to specific scenario that allows WL dispute management service to recognize the template of the ChargeBack to generate :\nChargeBack scenario 1: 10-E-commerce fraud, Value = VISECOMFRAUD\nChargeBack scenario 2: 12.6 Duplicate Processing, Value = VISDUPLIC\nChargeBack scenario 3: 13.9 Non-Receipt of Cash, Value = VISNOCASH\nIf the value is not a known value, the request is rejected."
          },
          "reasonCode": {
            "type": "string",
            "description": "Mandatory for MCI : MCI chargeback reason code (possible values in MCI MPE file), for VISA this field is not provided.\nIf the value is not a known value , WL dispute management service rejects the ChargeBack generation.\nOne of the fields ChargebackScenario (VISA) or ReasonCode (MCI) should be present."
          },
          "chargebackDocument": {
            "description": "Contains the document that has to be attached to the ChargeBack depending on the chargebackScenario ( VISA Scheme ) or ReasonCode (MCI Scheme)\nFor VISA Scheme : chargebackDocument is Mandatory when ChargebackScenario is VISECOMFRAUD or VISNOCASH\nFor MCI Scheme : see  scheme document Chargeback Guide ",
            "allOf": [
              {
                "$ref": "#/definitions/DisputeDocument"
              }
            ]
          },
          "duplicatedTransactionIdentifier": {
            "type": "string",
            "description": "When the disputed transaction is for \"duplicate\", provide the \"Transaction Identifier\" value of the non disputed transaction\nIf chargebackScenario= VISDUPLIC, and the duplicatedTransactionIdentifier is not provided, WL dispute management service rejects the ChargeBack generation."
          }
        },
        "title": "GenerateChargebackRequest"
      },
      "CreateContactRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the contact. Mandatory if the departmentName attribute is not provided."
          },
          "firstName": {
            "type": "string",
            "description": "First name of the contact"
          },
          "departmentName": {
            "type": "string",
            "description": "Department name to which the contact is attached. Free text. Mandatory if the contact name is not provided"
          },
          "sex": {
            "type": "string",
            "description": "Gender of the contact"
          },
          "description": {
            "type": "string",
            "description": "Description of the role of the contact within the company (e.g. 'sales manager'). Free text"
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Title of the contact. Free text"
          },
          "type": {
            "type": "string",
            "description": "The contact type (e.g. Power of Attorney, Legal Representative)"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "description": "The contact's date of birth"
          },
          "postalAddress" : {
            "description": "The postal adress of the contact",
            "allOf": [
                {
                "$ref": "#/definitions/CreateAddressRequestMailAddress"
                }
             ]
          }
        },
        "title": "CreateContactRequest"
      },
      "ModifyContactRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the contact. Mandatory if the departmentName attribute is not provided."
          },
          "firstName": {
            "type": "string",
            "description": "First name of the contact"
          },
          "departmentName": {
            "type": "string",
            "description": "Department name to which the contact is attached. Free text. Mandatory if the contact name is not provided"
          },
          "sex": {
            "type": "string",
            "description": "Gender of the contact"
          },
          "description": {
            "type": "string",
            "description": "Description of the role of the contact in the company (e.g. 'sales manager'). Free text"
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Title of the contact. Free text"
          },
          "type": {
            "type": "string",
            "description": "The contact type (e.g. Power of Attorney, Legal Representative)"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "description": "The contact's date of birth"
          },
          "postalAddress" : {
            "description": "The postal adress of the contact",
            "allOf": [
                {
                "$ref": "#/definitions/ModifyAddressRequestMailAddress"
                }
             ]
          }
        },
        "title": "ModifyContactRequest"
      },
      "ApiResponseEntityCreateContactResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateContactResponse"
              }
            ]
          }
        },
        "description": "Create contact response entity",
        "title": "ApiResponseEntityCreateContactResponse"
      },
      "ApiResponseEntityModifyContactResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyContactResponse"
              }
            ]
          }
        },
        "description": "Modify contact response entity",
        "title": "ApiResponseEntityModifyContactResponse"
      },
      "ApiResponseEntityRemoveAddOnSubscriptionResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/RemoveAddOnSubscriptionResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityRemoveAddOnSubscriptionResponse"
      },
      "ApiResponseEntityRemoveContactResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/DeleteContactResponse"
              }
            ]
          }
        },
        "description": "Remove contact response entity",
        "title": "ApiResponseEntityRemoveContactResponse"
      },
      "CreateContactResponse": {
        "type": "object",
        "properties": {
          "contactIdentifier": {
            "description": "Contact Identifier of Contact",
            "allOf": [
              {
                "$ref": "#/definitions/ContactIdentifier"
              }
            ]
          }
        },
        "title": "CreateContactResponse"
      },
      "ModifyContactResponse": {
        "type": "object",
        "properties": {
          "contactIdentifier": {
            "description": "Contact Identifier of Contact",
            "allOf": [
              {
                "$ref": "#/definitions/ContactIdentifier"
              }
            ]
          }
        },
        "title": "ModifyContactResponse"
      },
      "DeleteContactResponse": {
        "type": "object",
        "properties": {
          "contactIdentifier": {
            "description": "Contact Identifier of Contact",
            "allOf": [
              {
                "$ref": "#/definitions/ContactIdentifier"
              }
            ]
          }
        },
        "title": "DeleteContactResponse"
      },
      "ContactInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of ContactInfo"
          },
          "firstname": {
            "type": "string",
            "description": "First Name of ContactInfo"
          },
          "departmentName": {
            "type": "string",
            "description": "Department Name of ContactInfo"
          },
          "sex": {
            "type": "string",
            "description": "Sex of ContactInfo"
          },
          "description": {
            "type": "string",
            "description": "Description of ContactInfo"
          },
          "courtesyTitle": {
            "type": "string",
            "description": "Courtesy Title of ContactInfo"
          },
          "reference": {
            "type": "string",
            "description": "Reference Title of ContactInfo"
          },
          "type": {
            "type": "string",
            "description": "Type of the contact"
          },
          "birthDate": {
            "type": "string",
            "format": "date",
            "description": "Birth date of the contact"
          },
          "postalAddress": {
            "description": "Address of the contact",
            "allOf": [
              {
                "$ref": "#/definitions/MailAddress"
              }
            ]
          }
        },
        "title": "ContactInfo"
      },
      "ApiResponseEntityGenerateChargebackResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/GenerateChargebackResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityGenerateChargebackResponse"
      },
      "GenerateChargebackResponse": {
        "type": "object",
        "properties": {
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "description": "The effective date of creation of the chargeback"
          },
          "schemeCaseId": {
            "type": "string",
            "description": "The \"Scheme Case Id\" received from the Scheme VROL or MasterCom.\nMandatory in the following cases: \n- Present if CBK1 is created by the WS REQUEST in real time with VROL or MasterCom. \n- Present if CBK1 is accepted by VROL or MasterCom"
          }
        },
        "title": "GenerateChargebackResponse"
      },
      "ExternalRestriction": {
        "type": "object",
        "required": [
          "externalRestrictionIdentifier"
        ],
        "properties": {
          "externalRestrictionIdentifier": {
            "description": "Reference value for external restriction (Velocity limit) (mandatory)",
            "allOf": [
              {
                "$ref": "#/definitions/ExternalRestrictionIdentifier"
              }
            ]
          },
          "maximumAmount": {
            "description": "Maximum amount of provided velocity limit (optional)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "minimumAmount": {
            "description": "Minimum amount of provided velocity limit (optional)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "maximumCount": {
            "type": "integer",
            "description": "Maximum count of transaction to be done using velocity limit"
          },
          "priority": {
            "type": "string",
            "description": "In case multiple overrides with overlapping activation times are existing this information is used to resolve this situation by applying the overrides one by one starting with the one with lowest priority. The priority needs to be unique across all overrides associated with a velocity check and an account"
          }
        },
        "title": "ExternalRestriction"
      },
       "ExternalVelocityLimit": {
        "type": "object",
        "required": [
          "externalVelocityLimitIdentifier"
        ],
        "properties": {
          "externalVelocityLimitIdentifier": {
            "description": "Unique reference of the external velocity limit",
            "allOf": [
              {
                "$ref": "#/definitions/ExternalVelocityLimitIdentifier"
              }
            ]
          },
          "maximumAmount": {
            "description": "Maximum amount of provided velocity limit (optional)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "minimumAmount": {
            "description": "Minimum amount of provided velocity limit (optional)",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "maximumCount": {
            "type": "integer",
            "description": "Maximum count of transaction to be done using velocity limit"
          },
          "priority": {
            "type": "string",
            "description": "In case multiple overrides with overlapping activation times are existing this information is used to resolve this situation by applying the overrides one by one starting with the one with lowest priority. The priority needs to be unique across all overrides associated with a velocity check and an account"
          },
          "activationStartTime":{
            "type": "string",
            "format": "date-time",
            "description": "The date time the velocity limit is active"
           },
           "activationEndTime":{
            "type": "string",
            "format": "date-time",
            "description": "The date time the velocity limit finished if present"
           }
        },
        "title": "ExternalVelocityLimit"
      },
      "ExternalAuthorizationsRestriction": {
        "type": "object",
        "required": [
          "externalAuthorizationsRestrictionIdentifier"
        ],
        "properties": {
          "externalAuthorizationsRestrictionIdentifier": {
            "description": "Reference identifier for external authorization restriction",
            "allOf": [
              {
                "$ref": "#/definitions/ExternalAuthorizationsRestrictionIdentifier"
              }
            ]
          },
          "activationStartTime": {
           "type": "string",
            "description": "First point in time at which the override will be considered. Has to be before end date time. Can be present without end date time. If not provided the override will be taken into account immediately (optional)"
          },
          "activationEndTime": {
          "type": "string",
           "description": "Last point in time at which the override will be considered. Has to be later than start date time. Can be present without start date time. If not provided the override will be taken into account forever (optional)"
          },
          "conditionCheck": {
            "type": "boolean",
            "description": "Overrides the default configured for the corresponding restriction attribute. In case nothing is provided then the default becomes effective."
          },
         
          "priority": {
            "type": "string",
            "description": "In case multiple overrides with overlapping activation times are existing this information is used to resolve this situation by applying the overrides one by one starting with the one with lowest priority. The priority needs to be unique across all overrides associated with the same velocity check/restriction and the same account (card)"
          }
          
        },
        "title": "ExternalAuthorizationsRestriction"
      },
      "ExternalRestrictionIdentifier": {
        "type": "object",
        "properties": {
          "externalRestrictionReference": {
            "type": "string"
          }
        },
        "title": "ExternalRestrictionIdentifier"
      },
      "ExternalVelocityLimitIdentifier": {
        "type": "object",
        "properties": {
          "externalVelocityLimitReference": {
            "description":"Reference value for external Velocity limit (mandatory)",
            "type": "string"
          }
        },
        "title": "ExternalVelocityLimitIdentifier"
      },
      "ExternalAuthorizationsRestrictionIdentifier": {
        "type": "object",
        "properties": {
          "authorizationRestrictionReference": {
            "type": "string"
          }
        },
        "title": "ExternalAuthorizationsRestrictionIdentifier"
      },
       "HierarchyOperationStatus": {
        "type": "object",
        "properties": {
          "paymentsBlocking": {
           "type": "boolean",
            "description": "Indicates if the online payments are blocked for the account hierarchy (true) or not (false).By default, value is false."
          },
          "reimbursementsBlocking": {
          "type": "boolean",
           "description": "Indicates if the online reimbursements are blocked for the account hierarchy (true) or not (false).By default, value is false."
          },
          "authorizationsBlocking": {
            "type": "boolean",
            "description": "Indicates if the authorizations are blocked for the account hierarchy (true) or not (false).By default, value is false."
          },
          "statusDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the last change."
          }
          
        },
        "title": "HierarchyOperationStatus"
      },
      "HierarchyOperationStatusHistory": {
        "type": "object",
        "properties": {
          "paymentsBlocking": {
           "type": "boolean",
            "description": "Indicates if the online payments are blocked for the account hierarchy (true) or not (false).By default, value is false."
          },
          "reimbursementsBlocking": {
          "type": "boolean",
           "description": "Indicates if the online reimbursements are blocked for the account hierarchy (true) or not (false).By default, value is false."
           },
          "authorizationsBlocking": {
            "type": "boolean",
            "description": "Indicates if the authorizations are blocked for the account hierarchy (true) or not (false).By default, value is false."
          },
          "statusDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the change."
          },
          "blockingReason": {
            "type": "string",
            "description": "Reason why the operations are blocked."
          },
          "comment": {
            "type": "string",
            "description": "Comment for blocking operations Free text."
          }
          
        },
        "title": "HierarchyOperationStatusHistory"
      },
      
      "DeclareCounterfeitCardRequest": {
        "type": "object",
        "required": [
          "pan"
        ],
        "properties": {
          "pan": {
            "type": "string",
            "description": "The PAN of the counterfeit card must be provided."
          },
          "expiryDate": {
            "type": "string",
            "description": "The expiry date can be provided if the counterfeit card has an expiry date in  Format 'mmyy'"
          },
          "panSequenceNumber": {
            "type": "string",
            "description": "The PAN sequence number can be provided if the counterfeit card has a PSN."
          },
          "comment": {
            "type": "string",
            "description": "A comment associated with the instantiate counterfeit card action can be provided (free text)."
          },
          "ccpFlag": {
            "type": "boolean",
            "description": "DEPRECATED"
          },
          "fraudProcess": {
            "type": "string",
            "description": "Fraud process which leads to card blocking.\n\t\t\t\t\tPossible values : \n\t\t\t\t•CPP : the card is in CCP list\n\t\t\t\t•TFI : Fraud detected for a single card\n\t\t\t\t•MBA : Fraud detected for several cards (Mass action)"
          }
        },
        "title": "DeclareCounterfeitCardRequest"
      },
      "DeclareCounterfeitCardResponse": {
        "type": "object",
        "required": [
          "counterfeitCardCreationDate"
        ],
        "properties": {
          "counterfeitCardCreationDate": {
            "description": "Creation date of the counterfeit card",
            "type": "string",
            "format": "date-time"
          }
        },
        "title": "DeclareCounterfeitCardResponse"
      },
      "CycleInformation": {
        "type": "object",
        "description": "Dates related to the closure calendar for the open closure cycle",
        "properties": {
          "cycleStartDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the cycle is opened"
          },
          "cycleClosureDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the open cycle is closed"
          },
          "statementGenerationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the statement is produced for the cycle"
          },
          "directDebitIssuingDate": {
            "type": "string",
            "format": "date-time",
            "description": "Direct debit issuing date of the cycle"
          },
          "directDebitDueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Direct debit due date of the cycle"
          },
          "gracePeriodEndDate": {
            "type": "string",
            "format": "date-time",
            "description": "Grace period end date of the cycle"
          },
          "dueDateForSelfPayer": {
            "type": "string",
            "format": "date-time",
            "description": "Due date for self payer of the cycle"
          },
          "cycleDueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Due date of the cycle, used for monitoring process (delinquency)"
          }
        },
        "title": "CycleInformation"
      },
      "GlobalSearchTransactionRequest": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "The search is performed by default on all issuers allowed for the user (depending on its rights)\n- The user can limit the search to one issuer (optional).\n- If provided, the list of issuerIds must not be provided, otherwise the search is not performed (an error is generated)."
          },
          "includeSubIssuers": {
            "type": "boolean",
            "description": "The user can request to include in the search the sub issuers of an issuer, limited to issuers allowed for the user depending on its rights, only if an issuerId is provided.\nDefault value is false.",
            "default": false
          },
          "issuerIds": {
            "type": "array",
            "description": "The search is performed by default on all issuers allowed for the user (depending on its rights)\n- The user can limit the search to a list of issuers (optional)\n- If provided, the issuerId must not be provided, otherwise the search is not performed (an error is generated).\n- If at least one issuer is not allowed for this user among the provided list of issuers, the search is not performed (an error is generated).",
            "items": {
              "type": "string"
            }
          },
          "pan": {
            "type": "string",
            "description": "Refer to Transaction.pan\nOne of pan, virtualServiceCardNumber, panToken, acquirerReferenceDataList, cardIdentifier, accountIdentifier or transactionIdentifiers is mandatory"
          },
          "cardScheme": {
            "type": "string",
            "description": "Refer to Transaction.cardScheme"
          },
          "merchantCategoryCode": {
            "type": "string",
            "description": "Refer to Transaction.merchantCategoryCode"
          },
          "cardAcceptorName": {
            "type": "string",
            "description": "Refer to Transaction.cardAcceptorName"
          },
          "panToken": {
            "type": "string",
            "description": "Refer to Transaction.panToken\nOne of pan, virtualServiceCardNumber, panToken, acquirerReferenceDataList, cardIdentifier, accountIdentifier or transactionIdentifiers is mandatory"
          },
          "acquirerReferenceDataList": {
            "type": "array",
            "description": "Refer to Transaction.acquirerReferenceData\nOne of pan, virtualServiceCardNumber, panToken, acquirerReferenceDataList, cardIdentifier, accountIdentifier or transactionIdentifiers is mandatory",
            "items": {
              "type": "string"
            }
          },
          "transactionAmount": {
            "description": "Refer to Transaction.transactionAmount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "transactionAmountCurrency": {
            "type": "string",
            "description": "Used to search on the transaction original amount currency. In ISO4217 alphabetic format."
          },
          "transactionIdentifiers": {
            "type": "array",
            "description": "Refer to Transaction.transactionIdentifier\nOne of pan, virtualServiceCardNumber, panToken, acquirerReferenceDataList, cardIdentifier, accountIdentifier or transactionIdentifiers is mandatory",
            "items": {
              "$ref": "#/definitions/TransactionIdentifier"
            }
          },
          "transactionDateFrom": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to Transaction.transactionDate"
          },
          "transactionDateTo": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to Transaction.transactionDate"
          },
          "disputedTransactions": {
            "type": "string",
            "description": "To search transaction based on dispute status.\n\nPossible values : \n- \"ALL\" : all transaction regardless the dispute status\n- \"YES\" : only disputed transactions \n- \"NO\" : only non disputed transactions\n\nDefault value : \"ALL"
          },
          "fraudulentTransactions": {
            "type": "string",
            "description": "To search transaction based on fraudulent status.\n\nPossible values : \n- \"ALL\" : all transaction regardless the fraud status\n- \"YES\" : only fraudulent transactions \n- \"NO\" : only non fraudulent transactions\n\nDefault value : \"ALL"
          },
          "virtualServiceCardNumber": {
            "type": "string",
            "description": "Refer to Transaction.virtualServiceCardNumber\nOne of pan, virtualServiceCardNumber, panToken, acquirerReferenceDataList, cardIdentifier, accountIdentifier or transactionIdentifiers is mandatory"
          },
          "status": {
            "type": "string",
            "description": "Refer to Transaction.status\n\nPossible values :\n- CREATED\n- ABANDON\n- IN_ERROR\n- DELETED\n- REPROCESS\n- PROCESSED\n- EMBARGO_WAIT\n\nDefault value : \"PROCESSED"
          },
          "processingDateFrom": {
            "type": "string",
            "format": "date-time",
            "description": "Date the transaction has been processed by the system"
          },
          "processingDateTo": {
            "type": "string",
            "format": "date-time",
            "description": "Date the transaction has been processed by the system"
          },
          "transactionTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Internal transaction type\nPossible values : BILL_PAYMENT, CASH, CASH_WITHDRAWAL, CREDIT, CREDIT_ADJUSTMENT, CREDIT_FEE, CREDIT_PAYMENT, DEBIT_ADJUSTMENT, DEBIT_FEE, DEBIT_PAYMENT, FUND_TRANSFER, LOAD, PAYMENT, REFUND_PURCHASE, SALES, SALES_CASHBACK"
          },
          "cardIdentifier": {
           "description": "Identification of the card either by Issuer card external reference or by card reference\nOne of pan, virtualServiceCardNumber, panToken, acquirerReferenceDataList, cardIdentifier, accountIdentifier or transactionIdentifiers is mandatory",
            "allOf": [
              {
           "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "accountIdentifier": {
            "description": "Identification of the account either by Issuer account external reference or by account reference.\nOne of pan, virtualServiceCardNumber, panToken, acquirerReferenceDataList, cardIdentifier, accountIdentifier or transactionIdentifiers is mandatory",
            "allOf": [
              {
            "$ref": "#/definitions/AccountIdentifier"
          }
            ]
          }
        }
      },
      "GlobalSearchCorporateContractRequest": {
        "type": "object",
        "required": [
          "contractCompany"
        ],
        "properties": {
          "contractCompany": {
            "type": "object",
            "description": "The issuer must provide some information related to the company to filter the corporate contracts to be returned.",
            "allOf": [
              {
            "$ref": "#/definitions/GlobalSearchCorporateContractRequestCompany"
              }
            ]
          },
          "issuerId": {
            "type": "string",
            "description": "The search is performed by default on all issuers allowed for the user (depending on its rights)\n- The user can limit the search to one issuer (optional).\n- If provided, the list of issuerIds must not be provided, otherwise the search is not performed (an error is generated)."
          },
          "includeSubIssuers": {
            "type": "boolean",
            "description": "The user can request to include in the search the sub issuers of an issuer, limited to issuers allowed for the user depending on its rights, only if an issuerId is provided.\nDefault value is false.",
            "default": false
          },
          "issuerIds": {
            "type": "array",
            "description": "The search is performed by default on all issuers allowed for the user (depending on its rights)\n- The user can limit the search to a list of issuers (optional)\n- If provided, the issuerId must not be provided, otherwise the search is not performed (an error is generated).\n- If at least one issuer is not allowed for this user among the provided list of issuers, the search is not performed (an error is generated).",
            "items": {
              "type": "string"
            }
          },
          "retrieveContractOwner": {
            "type": "boolean",
            "description": "Optional parameter to enrich the information retrieved.\n If the parameter is set to true, the contract owner will be retrieved in the list of companies.\n If the embed parameter contractCompanies is not requested and the parameter is set to true, an error will be raised."
          }
        },
        "title": "GlobalSearchCorporateContractRequest"
      },
      "GlobalSearchCorporateContractRequestCompany": {
        "type": "object",
        "required": [
          "corporateName"
        ],
        "properties": {
          "corporateName": {
            "type": "string",
            "description": "The corporate name is used to filter the corporate contracts where the company is the corporate contract owner or an account owner.\n The field accept wildcards ('%' allows to achieve a search with only a partial input, 'Plat%', '%hill', 'Al%gang'). A miniimum of 3 significative characters are expected else an error will be raised."
          },
          "postalAddress": {
            "type": "object",
            "description": "The issuer can provide some information related to the address of the company to filter the corporate contracts to be returned.",
            "allOf": [
              {
            "$ref": "#/definitions/GlobalSearchCorporateContractRequestPostalAddress"
          }
            ]
          }
        },
        "title": "GlobalSearchCorporateContractRequest.Company"
      },
      "GlobalSearchCorporateContractRequestPostalAddress": {
        "type": "object",
        "properties": {
          "streetName": {
            "type": "string",
            "description": "The street name where is located the company.\nThis criteria is optional and accept wildcards ('%' allows to achieve a search with only a partial input, 'Plat%', '%hill', 'Al%gang')"
          },
          "buildingNumber": {
            "type": "string",
            "description": "The building number where is located the company.\nThis criteria is optional and accept wildcards ('%' allows to achieve a search with only a partial input, '12t%', '%4bll')"
          },
          "postCode": {
            "type": "string",
            "description": "The postal code where is located the company.\nThis criteria is optional and accept wildcards ('%' allows to achieve a search with only a partial input, '91%', '%41l')"
          }
        },
        "title": "GlobalSearchCorporateContractRequest.PostalAddress"
      },
      "RefundFeeOnDemandRequest": {
        "type": "object",
        "required": [
          "cardContractIdentifier",
          "feeType"
        ],
        "properties": {
          "cardContractIdentifier": {
            "description": "Identification of the card contract either by Issuer card contract external reference or by card contract reference.",
            "allOf": [
              {
            "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "feeType": {
            "type": "string",
            "description": "The fee type should be provided for which refund needs to triggered. Acceptable values: ACCOUNT_SETUP_FEE; MEMBERSHIP_FEE"
          }
        },
        "title": "RefundFeeOnDemandRequest"
      },
      "ApiResponseEntityRefundFeeOnDemandResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/RefundFeeOnDemandResponse"
              }
            ]
          }
        },
        "description": "Refund Fee On Demand response entity",
        "title": "ApiResponseEntityRefundFeeOnDemandResponse"
      },
      "RefundFeeOnDemandResponse": {
        "type": "object",
        "properties": {
          "cardContractIdentifier": {
            "description": "Identification of the card contract either by Issuer card contract external reference or by card contract reference.",
            "allOf": [
              {
            "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "feeType": {
            "type": "string",
            "description": "The fee type provided in the request"
          },
          "refundAmount": {
            "type": "string",
            "description": "The pro rata refund amount calculated by our system for unused period"
          }
        },
        "title": "RefundFeeOnDemandResponse"
      },
      "ReallocateEmployeeRequest": {
        "type": "object",
        "required": [
          "targetAccountIdentifier"
        ],
        "properties": {
          "targetAccountIdentifier": {
            "description": "Identification of the target employee account either by Issuer account external reference or by account reference",
            "allOf": [
              {
            "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "targetContractIdentifier": {
            "description": "Identification of the target corporate contract either by Issuer contract external reference or by contract reference.\n Must be provided if employee reallocation is foreseen within two different contracts",
            "allOf": [
              {
            "$ref": "#/definitions/ContractIdentifier"
          }
            ]
          }
        },
        "title": "ReallocateEmployeeRequest"
      },
      "ApiResponseEntitySubscription": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/Subscription"
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntitySubscription",
        "description": "Issuer response entity"
      },
      "ApiResponseEntitySubscriptionEvent": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/SubscriptionEvent"
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntitySubscriptionEvent",
        "description": "Issuer response entity"
      },
      "ApiResponseEntitySubscriptionEvents": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SubscriptionEvent"
            }
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntitySubscriptionEvents",
        "description": "Issuer response entity"
      },
      "ApiResponseEntitySubscriptionService": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/SubscriptionService"
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntitySubscriptionService",
        "description": "Issuer response entity"
      },
      "ApiResponseEntitySubscriptionServices": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SubscriptionService"
            }
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntitySubscriptionServices",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityModifySubscription": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/SubscriptionResponse"
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntityModifySubscription",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityModifySubscriptionEvent": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/SubscriptionEventResponse"
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntityModifySubscriptionEvent",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityModifySubscriptionService": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/SubscriptionServiceResponse"
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntityModifySubscriptionService",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityDeleteSubscription": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/SubscriptionResponse"
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntityDeleteSubscription",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityDeleteSubscriptionEvent": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/SubscriptionEventResponse"
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntityDeleteSubscriptionEvent",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityDeleteSubscriptionService": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/SubscriptionServiceResponse"
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntityDeleteSubscriptionService",
        "description": "Issuer response entity"
      },
      "ApiResponseEntityReallocateEmployeeResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ReallocateEmployeeResponse"
              }
            ]
          }
        },
        "description": "Reallocate Employee response entity",
        "title": "ApiResponseEntityReallocateEmployeeResponse"
      },
      "ReallocateEmployeeResponse": {
        "type": "object",
        "required": [
          "originalCorporateEmployeeAccount",
          "changedCorporateEmployeeAccount"
        ],
        "properties": {
          "originalCorporateEmployeeAccount": {
            "$ref": "#/definitions/ReallocateEmployeeResponseOriginalCorporateEmployeeAccount"
          },
          "changedCorporateEmployeeAccount": {
            "$ref": "#/definitions/ReallocateEmployeeResponseChangedCorporateEmployeeAccount"
          }
        },
        "title": "ReallocateEmployeeResponse"
      },
      "ReallocateEmployeeResponseOriginalCorporateEmployeeAccount": {
        "type": "object",
        "required": [
          "accountIdentifier",
          "account"
        ],
        "properties": {
          "accountIdentifier": {
            "description": "Identification of the original account either by Issuer account external reference or by account reference",
            "allOf": [
              {
            "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "account": {
            "description": "Information related to the original employee account",
            "allOf": [
              {
            "$ref": "#/definitions/ReallocateEmployeeResponseOriginalAccount"
          }
            ]
          }
        },
        "title": "ReallocateEmployeeResponse.OriginalCorporateEmployeeAccount"
      },
      "ReallocateEmployeeResponseOriginalAccount": {
        "type": "object",
        "required": [
          "status",
          "changedAccountIdentifier",
          "changedAccountIdentifierType",
          "contractIdentifier"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Current status of the original account"
          },
          "changedAccountIdentifier": {
            "description": "Identification of the changed account either by Issuer account external reference or by account reference",
            "allOf": [
              {
            "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "changedAccountIdentifierType": {
            "type": "string",
            "description": "Type of the changed account"
          },
          "contractIdentifier": {
            "description": "Identification of the original contract either by Issuer contract external reference or by contract reference",
            "allOf": [
              {
            "$ref": "#/definitions/ContractIdentifier"
          }
            ]
          }
        },
        "title": "ReallocateEmployeeResponse.OriginalAccount"
      },
      "ReallocateEmployeeResponseChangedCorporateEmployeeAccount": {
        "type": "object",
        "required": [
          "accountIdentifier",
          "account",
          "cardContract"
        ],
        "properties": {
          "accountIdentifier": {
            "description": "Identification of the changed account either by Issuer account external reference or by account reference",
            "allOf": [
              {
            "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "account": {
            "description": "Information related to the changed employee account",
            "allOf": [
              {
            "$ref": "#/definitions/ReallocateEmployeeResponseChangedAccount"
              }
            ]
          },
          "cardContract": {
            "description": "Information related to the employee card contract reallocated from original account to changed account",
            "allOf": [
              {
            "$ref": "#/definitions/ReallocateEmployeeResponseChangedCardContract"
          }
            ]
          }
        },
        "title": "ReallocateEmployeeResponse.ChangedCorporateEmployeeAccount"
      },
      "ReallocateEmployeeResponseChangedAccount": {
        "type": "object",
        "required": [
          "status",
          "changedAccountIdentifier",
          "changedAccountIdentifierType",
          "contractIdentifier"
        ],
        "properties": {
          "status": {
            "type": "string",
            "description": "Current status of the changed account"
          },
          "originalAccountIdentifier": {
            "description": "Identification of the original account either by Issuer account external reference or by account reference",
            "allOf": [
              {
            "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "originalAccountIdentifierType": {
            "type": "string",
            "description": "Type of the original account"
          },
          "contractIdentifier": {
            "description": "Identification of the target contract if provided in the request,otherwise identification of the original contract either by Issuer contract external reference or by contract reference",
            "allOf": [
              {
            "$ref": "#/definitions/ContractIdentifier"
          }
            ]
          }
        },
        "title": "ReallocateEmployeeResponse.ChangedAccount"
      },
      "ReallocateEmployeeResponseChangedCardContract": {
        "type": "object",
        "required": [
          "cardContractIdentifier",
          "status",
          "relatedAccounts"
        ],
        "properties": {
          "cardContractIdentifier": {
            "description": "Identification of the card contract either by Issuer card contract external reference or by card contract reference",
            "allOf": [
              {
            "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Current status of the card contract"
          },
          "relatedAccounts": {
            "type": "array",
            "description": "List of posting accounts linked to the card contract",
            "items": {
              "$ref": "#/definitions/AccountRelation"
            }
          }
        },
        "title": "ReallocateEmployeeResponse.ChangedCardContract"
      },
      "BrandAdviceRequest": {
        "type": "object",
        "properties": {
          "issuerProductExternalReference": {
            "description": "The issuer must provide the external reference of the product if the card identifier (card reference and issuer card external reference) is not provided.",
            "type": "string"
          },
          "cardReference": {
            "description": "Only provided for card replacement. In this case the external reference of the product must not be provided.Either the card reference or the issuer card external reference can be provided.",
            "type": "string"
          },
          "issuerCardExternalReference": {
            "description": "Only provided for card replacement. In this case the external reference of the product must not be provided.Either the card reference or the issuer card external reference can be provided.",
            "type": "string"
          }
        },
        "title": "BrandAdviceRequest"
      },
    "GlobalSearchContractRequest": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "The search is performed by default on all issuers allowed for the user (depending on its rights)\n- The user can limit the search to one issuer (optional).\n- If provided, the list of issuerIds must not be provided, otherwise the search is not performed (an error is generated)."
          },
          "includeSubIssuers": {
            "type": "boolean",
            "description": "The user can request to include in the search the sub issuers of an issuer, limited to issuers allowed for the user depending on its rights, only if an issuerId is provided.\nDefault value is false.",
            "default": false
          },
          "issuerIds": {
            "description": "The search is performed by default on all issuers allowed for the user (depending on its rights)\n- The user can limit the search to a list of issuers (optional)\n- If provided, the issuerId must not be provided, otherwise the search is not performed (an error is generated).\n- If at least one issuer is not allowed for this user among the provided list of issuers, the search is not performed (an error is generated).",
            "type": "array",
             "items": {
              "type": "string"
            }
          },
          "account": {
            "description": "If the search is based on account's criteria, the issuer must provide only one of the following data: \n- iban of the account \n- account reference \n- issuer account external reference \n- account membership number 1 \n- account membership number 2",
            "allOf": [
              {
            "$ref": "#/definitions/GlobalSearchContractRequestAccount"
              }
            ]
          },
           "customer": {
            "description": "If the search is based on customer's criteria, the issuer must provide : \n- either personal data (with at least the first name and last name of the customer)  or\n- customer identifier : customer reference or issuer customer external reference  \n- or partner external reference",
            "allOf": [
              {
            "$ref": "#/definitions/GlobalSearchContractRequestCustomer"
              }
            ]
          },
           "card": {
            "description": "If the search is based on card's criteria, the issuer must provide only one of the following data: \n-PAN of the card \n-card Contract Reference  \n-issuer Card Contract External Reference  \n-cardReference  \n-issuerCardExternalReference",
            "allOf": [
              {
            "$ref": "#/definitions/GlobalSearchContractRequestCard"
              }
            ]
          },
          "retrieveParentAccount" :{
            "description": "Optional criteria to enrich the response. Can only be used if the search criteria refers to an account's criteria. \n If false (empty), only the account corresponding to the initial criteria will be returned. \n Else, the parent account in the hierarchy will be also returned (only the level n+1).\n Only applicable if the expendable params  ‘Accounts’ or ‘AccountIdentifiers’ are requested.\n- Customer data response : based on the account found, every customers, owner of one of these accounts are returned in the response.\n- Card data response : based on the accounts found, every card contracts and their cards associated to one of these accounts are returned.",
          "type" : "boolean"
          },
          "retrieveChildAccounts" :{
            "description": "Optional criteria to enrich the response. Can only be used if the search criteria refers to an account's criteria.  \n If false (empty), only the account corresponding to the initial criteria will be returned. \n Else, the children accounts in the hierarchy will be also returned (only the level n-1). \n Only applicable if the expendable params  ‘Accounts’ or ‘AccountIdentifiers’ are requested.\n- customer data response : based on the account found, every customers, owner of one of these accounts are returned in the response.\n- Card data response : based on the accounts found, every card contracts and their cards associated to one of these accounts are returned.",
          "type" : "boolean"
          },
          "retrievePreviousCards" :{
          "description" : "Optional criteria to enrich the response. By default, the value is false. If true, all cards of the card contract will be retrieved in cardContracts.cards else only the latest card issued (by PAN) in card contract will be available in response (only used when embed field cardContracts.cards is requested)",
          "type" : "boolean"
          }
        },
        "title": "GlobalSearchContractRequest"
      },
      "GlobalSearchOperationRequest": {
        "type": "object",
        "properties": {
          "issuerCompanyExternalReference": {
            "description": "Refer to Operation.issuerCompanyExternalReference\nAt least issuerCompanyExternalReference or postingAccountIdentifier or virtualServiceCardReference or virtualServiceCardNumber should be provided",
            "type": "string"
          },
          "postingAccountIdentifier": {
           "description": "Refer to Operation.postingAccountIdentifier\nAt least issuerCompanyExternalReference or postingAccountIdentifier or virtualServiceCardExternalReference or virtualServiceCardNumber should be provided",
            "allOf": [
              {
           "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "virtualServiceCardExternalReference": {
           "description": "Refer to Operation.virtualServiceCardExternalReference\nAt least issuerCompanyExternalReference or postingAccountIdentifier or virtualServiceCardExternalReference or virtualServiceCardNumber should be provided",
           "type": "string"
          },
          "virtualServiceCardNumber": {
           "description": "Refer to Operation.virtualServiceCardNumber\nAt least issuerCompanyExternalReference or postingAccountIdentifier or virtualServiceCardExternalReference virtualServiceCardNumber should be provided",
           "type": "string"
          },
          "transactionDateFrom" :{
           "description" : "Refer to Operation.transactionDate\nEither the transactionDate range or postingDate range should be provided",
           "type": "string",
           "format": "date-time"
          },
          "transactionDateTo" :{
           "description" : "Refer to Operation.transactionDate\nEither the transactionDate range or postingDate range should be provided",
           "type": "string",
           "format": "date-time"
          },
          "postingDateFrom" :{
           "description" : "Refer to Operation.postingDate\nEither the transactionDate range or postingDate range should be provided",
           "type": "string",
           "format": "date-time"
          },
          "postingDateTo" :{
           "description" : "Refer to Operation.postingDate\nEither the transactionDate range or postingDate range should be provided",
           "type": "string",
           "format": "date-time"
          },
          "referenceAmountFrom" :{
           "description": "Refer to Operation.referenceAmount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "referenceAmountTo" :{
           "description": "Refer to Operation.referenceAmount",
            "allOf": [
              {
                "$ref": "#/definitions/Amount"
              }
            ]
          },
          "approvalCode": {
           "description": "Refer to Operation.approvalCode",
           "type": "string"
          },
          "cardAcceptorName": {
           "description": "Refer to Operation.cardAcceptorName. This criteria is optional and accept wildcards ('%' allows to achieve a search with only a partial input, 'Plat%', '%hill', 'Al%gang')",
           "type": "string"
          },
          "operationKinds": {
            "description": "Refer to Operation.operationKind",
            "type": "array",
             "items": {
              "type": "string"
            }
          }
        },
        "title": "GlobalSearchOperationRequest"
      },
      "GlobalSearchContractRequestAccount": {
        "type": "object",
        "properties": {
          "iban": {
            "description": "IBAN of an account is a criteria that is exclusive when searching with account's criteria.",
            "type": "string"
          },
           "accountMembershipNumber1": {
            "description": "Account membership number 1 is a criteria that is exclusive when searching with account's criteria.",
            "type": "string"
          },
           "accountMembershipNumber2": {
            "description": "Account membership number 2 is a criteria that is exclusive when searching with account's criteria.",
            "type": "string"
          },
           "accountIdentifier": {
           "description": "Account reference or issuer account external reference is a criteria that is exclusive when searching with account's criteria.",
            "allOf": [
              {
           "$ref": "#/definitions/AccountIdentifier"
          }
            ]
          }
        },
        "title": "GlobalSearchContractRequest.Account"
      },
      "GlobalSearchContractRequestCustomer": {
        "type": "object",
        "properties": {
           "customerCriteria": {
            "description": "If Personal Data are used as customer's criteria, the issuer must provide : : \n- first name and last name of the customer  \n- and optionally birth date, postal address (postal code, street name and/or building number), phonetic criteria",
            "allOf": [
              {
            "$ref": "#/definitions/GlobalSearchContractRequestPersonalData"
              }
            ]
          },
          "customerIdentifier": {
           "description": "Customer reference or issuer external reference of the customer is a criteria that is exclusive when searching with customer's criteria.",
            "allOf": [
              {
           "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "partnerExternalReference": {
           "description": "Partner external reference is a criteria that is exclusive when searching with customer's criteria.",
           "type":"string"
          }
        },
        "title": "GlobalSearchContractRequest.Customer"
      },
      "GlobalSearchContractRequestPersonalData": {
        "type": "object",
        "required" :[
         "firstName",
         "lastName"
        ],
        "properties": {
           "postalAddress": {
            "$ref": "#/definitions/GlobalSearchContractRequestPostalAddress"
          },
           "phoneticCriteria": {
            "$ref": "#/definitions/GlobalSearchContractRequestPhoneticCriteria"
          },
           "firstName": {
           "description": "First name of the customer ('%' allows to achieve a search with only a partial input, 'Phil%', '%urchill', 'Al%gang') is a mandatory criteria when searching customer with PersonalData.",
           "type": "string"
          },
           "lastName": {
            "description": "Last name of the customer ('%' allows to achieve a search with only a partial input, 'Phil%', '%urchill', 'Al%gang')  is a mandatory criteria when searching customer with PersonalData.",
           "type": "string"
          },
           "birthDate": {
           "description": "Birthdate of the customer ('%' allows to achieve a search with only a partial input, '12/%', '%1970', '12%80') is an optional criteria when searching customer with PersonalData.",
           "type": "string",
           "format": "date-time"
          }
        },
        "title": "GlobalSearchContractRequest.PersonalData"
      },
      "GlobalSearchContractRequestPostalAddress": {
        "type": "object",
        "properties": {
          "postCode": {
           "description": "Postal code ('%' allows to achieve a search with only a partial input, '12/%', '%10', '01%0') is an optional criteria when searching customer with PersonalData.",
           "type": "string"
          },
           "streetName": {
           "description": "Street name of the postal address ('%' allows to achieve a search with only a partial input, 'Plat%', '%urchill', 'Al%gang') is an optional criteria when searching customer with PersonalData.",
           "type": "string"
          },
           "buildingNumber": {
           "description": "Building number of the postal address ('%' allows to achieve a search with only a partial input, '4b%', '%201', '17%a') is an optional criteria when searching customer with PersonalData.",
           "type": "string"
          }
        },
        "title": "GlobalSearchContractRequest.PostalAddress"
      },
      "GlobalSearchContractRequestPhoneticCriteria": {
        "type": "object",
        "properties": {
          "phoneticSearch": {
           "description": "Can only be used if the search criteria refers to PersonalData. Indicate if a specific phonetic algorithm must be applied on first name and last name",
           "type": "boolean"
          },
           "phoneticAlgorithm": {
           "description": "Can only be used if the search criteria refers to PersonalData. The list of possible phonetic algorithms are determined for each issuer (configuration). If the indicator is set to true but no phonetic algorithm is provided then all configured phonetic algorithms are applied for the research.",
             "type": "array",
             "items": {
              "type": "string"
            }
          }
        },
        "title": "GlobalSearchContractRequest.PhoneticCriteria"
      },
      "GlobalSearchContractRequestCard": {
        "type": "object",
        "properties": {
          "pan": {
           "description": "PAN of a card is a criteria that is exclusive when searching with card's criteria.",
           "type": "string"
          },
           "cardIdentifier": {
           "description": "Card reference or issuer card external reference is a criteria that is exclusive when searching with card's criteria.",
            "allOf": [
              {
           "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
           "cardContractIdentifier": {
           "description": "Card contract reference or issuer card contract external reference is a criteria that is exclusive when searching with card's criteria.",
            "allOf": [
              {
           "$ref": "#/definitions/CardContractIdentifier"
          }
            ]
          }
        },
        "title": "GlobalSearchContractRequest.Card"
      },
      "ApiResponseEntityGlobalSearchContract": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/Contract"
            }
          }
        },
        "title": "ApiResponseEntityGlobalSearchContract",
        "description": "Global Search Contract response"
      },
      "ApiResponseEntityGlobalSearchOperation": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
            "description": "Response data",
            "items": {
              "$ref": "#/definitions/Operation"
            }
          }
        },
        "title": "ApiResponseEntityGlobalSearchOperation",
        "description": "Global Search Operation response"
      },
      "ApiResponseEntityBrandAdvice": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/BrandAdviceResponse"
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntityBrandAdvice",
        "description": "Brand advice response"
      },
      "BrandAdviceResponse": {
        "type": "object",
        "properties": {
          "cardIdentifier": {
            "description": "Unique identifier of the card provided in the request",
            "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "productIdentifier": {
            "description": "Unique identifier of the product provided in the request",
            "allOf": [
              {
                "$ref": "#/definitions/ProductIdentifier"
              }
            ]
          },
          "productExtensionReference": {
            "type": "string",
            "description": "Reference of the product extension advised to be used for the card creation"
          }
        }
      },
      "ApiResponseEntityBrandAdviceConfig": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/BrandAdviceConfigResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityBrandAdviceConfig"
      },
      "BrandAdviceConfigResponse": {
        "type": "object",
        "properties": {
          "brandAdviceConfiguration": {
            "description": "Brand Advice configuration",
            "allOf": [
              {
                "$ref": "#/definitions/BrandAdviceConfig"
              }
            ]
          }
        },
        "title": "BrandAdviceConfigResponse"
      },
      "ApiResponseEntityModifyBrandAdviceConfigResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ModifyBrandAdviceConfigResponse"
              }
            ]
          }
        },
        "description": "Issuer response entity",
        "title": "ApiResponseEntityModifyBrandAdviceConfigResponse"
      },
      "ModifyBrandAdviceConfigRequest": {
        "type": "object",
        "x-wl-patch-request": true,
        "properties": {
          "deviceTokensThreshold": {
            "type": "integer",
            "description": "Threshold on the device tokens number"
          },
          "merchantTokensThreshold": {
            "type": "integer",
            "description": "Threshold on the merchant tokens number"
          },
          "profiles": {
            "type": "array",
            "description": "The issuer can modify the percentages of one or several profiles",
            "items": {
              "$ref": "#/definitions/ModifyBrandAdviceConfigProfile"
            }
          }
        },
        "title": "ModifyBrandAdviceConfigRequest"
      },
      "ModifyBrandAdviceConfigResponse": {
        "type": "object",
        "properties": {
          "newBrandAdviceConfiguration": {
            "description": "Brand Advice configuration",
            "allOf": [
              {
                "$ref": "#/definitions/BrandAdviceConfig"
              }
            ]
          }
        },
        "title": "ModifyBrandAdviceConfigResponse"
      },
      "ReplaceCustomerInContractRequest": {
        "type": "object",
        "required": [
          "previousCustomerIdentifier",
          "targetCustomer"
        ],
        "x-wl-patch-request": true,
        "properties": {
          "previousCustomerIdentifier": {
            "description": "The issuer has to provide either the issuer customer external reference or the customer reference of the customer belonging to the contract that he wants to replace by another existing one or by a new customer.\nThe customer (as person) to be replaced can be the contract owner, the account owner, the cardholder, etc...of the contract.",
            "allOf": [
              {
                "$ref": "#/definitions/CustomerIdentifier"
              }
            ]
          },
          "targetCustomer": {
            "description": "The issuer has to provide the target customer (as person) for replacement, either an existing customer in our system or a new one.",
            "allOf": [
              {
                "$ref": "#/definitions/ReplaceCustomerInContractRequestTargetCustomer"
              }
            ]
          }
        },
        "title": "ReplaceCustomerInContractRequest"
      },
      "ReplaceCustomerInConsumerContractResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "contract": {
            "$ref": "#/definitions/ReplaceCustomerInConsumerContractResponseContract"
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ReplaceCustomerInConsumerContractResponse"
      },
      "BrandAdviceConfig": {
        "type": "object",
        "properties": {
          "deviceTokensThreshold": {
            "type": "integer",
            "description": "Threshold on the device tokens number"
          },
          "merchantTokensThreshold": {
            "type": "integer",
            "description": "Threshold on the merchant tokens number"
          },
          "profiles": {
            "type": "array",
            "description": "Refer to BrandAdviceConfig.Profile",
            "items": {
              "$ref": "#/definitions/BrandAdviceConfigProfile"
            }
          }
        }
      },
      "BrandAdviceConfigProfile": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the profile"
          },
          "currentCardTemplateReference": {
            "type": "string",
            "description": "Reference of the card template of the existing card when calling the Brand Advice algorithm"
          },
          "deviceTokensOperator": {
            "type": "string",
            "description": "Operator used by the algorithm to compare the device tokens counter to the threshold for this profile"
          },
          "merchantTokensOperator": {
            "type": "string",
            "description": "Operator used by the algorithm to compare the merchant tokens counter to the threshold for this profile"
          },
          "percentages": {
            "type": "array",
            "description": "Refer to BrandAdviceConfig.Percentage",
            "items": {
              "$ref": "#/definitions/BrandAdviceConfigPercentage"
            }
          }
        }
      },
      "BrandAdviceConfigPercentage": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "description": "Value in % of this percentage entity (e.g. 60 means 60%)"
          },
          "productExtensionReference": {
            "type": "string",
            "description": "Reference of the product extension advised by this percentage to be used for the card creation"
          }
        }
      },
      "ModifyBrandAdviceConfigProfile": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the profile to modify"
          },
          "percentages": {
            "type": "array",
            "description": "Refer to BrandAdviceConfig.Percentage",
            "items": {
              "$ref": "#/definitions/BrandAdviceConfigPercentage"
            }
          }
        }
      },
      "FeePostingEntityIdentifier": {
        "type": "object",
        "properties": {
          "postingEntityAccountIdentifier": {
            "description": "The account identifier of the entity on which Membership Fee or Account setup Fee will be posted",
            "allOf": [
              {
                "$ref": "#/definitions/AccountIdentifier"
              }
            ]
          },
          "postingEntityCompanyExternalReference": {
            "type": "string",
            "description": "The external reference of the entity, provided by the Company, on which Membership Fee or Account setup Fee will be posted"
          },
          "postingEntityLevel": {
            "type": "integer",
            "description": "The corporate entitity level number on which Membership Fee or Account setup Fee will be posted"
          }
        },
        "title": "FeePostingEntityIdentifier"
      },
      "Vulnerability": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of vulnerability applicable to the customer (free text)."
          },
          "comment": {
            "type": "string",
            "description": "Details about the vulnerability of the customer (free text)."
          }
        }
      },
      "AuthorizationDataValidation": {
        "type": "object",
        "description": "The issuer can indicate cardholder data used by the Front Office for verification (AVS/ANI).",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name of the cardholder"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the cardholder"
          },
          "secondFirstName": {
            "type": "string",
            "description": "Second first name of the cardholder"
          },
          "streetName": {
            "type": "string",
            "description": "Street name of the cardholder address"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip code of the cardholder address"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "description": "Birth date of the cardholder"
          }
        }
      },
      "CardContractSourceInheritance": {
        "type": "object",
        "properties": {
          "sourceCardContractIdentifier":{
             "description": "Card Contract identifier of the previous card contract",
              "allOf": [
              {
                "$ref": "#/definitions/CardContractIdentifier"
              }
            ]
          },
          "sourceCardIdentifier":{
            "description": "Card identifier of the previous card ",
             "allOf": [
              {
                "$ref": "#/definitions/CardIdentifier"
              }
            ]
          },
          "replacementReason":{
            "type":"string",
            "description": "replacement reason for brand change "
          },
          "forceNewPin":{
            "type":"boolean",
            "description": "indicate if forced new pin is required"
          }
        }
      },
      "InquireOperationRequest":{
        "type": "object",
        "required": [
          "externalOperationReference",
          "externalOperationServicePoster",
          "externalOperationDate"
        ],
        "properties": {
          "externalOperationReference": {
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\n The External reference of the operation must be provided.",
            "type": "string"
          },
          "externalOperationServicePoster": {
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\n The identifier of the external system must be provided.",
            "type": "string"
          },
          "externalOperationDate": {
            "description": "The triplet (externalOperationDate, externalOperationReference, externalOperationServicePoster) uniquely identifies the operation in our system.\n The date the operation must be provided.",
            "format": "date-time",
            "type": "string"
          }
        },
        "title": "InquireOperationRequest"
      },
      "ApiResponseEntityInquireOperationResponse": {
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/OperationDetails"
              }
            ]
          },
          "responseMetadata": {
            "$ref": "#/definitions/ResponseMetadata"
          }
        },
        "title": "ApiResponseEntityInquireOperationResponse",
        "description": "Inquire Operation response"
      },
    "ApiResponseEntityDeleteCardLetterResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/DeleteCardLetterResponse"
              }
            ]
          }
        },
        "description": "Delete Card Letter response entity",
        "title": "ApiResponseEntityDeleteCardLetterResponse"
      },
      "ApiResponseEntityRetrieveLetter": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/Letter"
              }
            ]
          }
        },
        "description": "Retrieve Card Letter response entity",
        "title": "ApiResponseEntityRetrieveLetter"
      },
       "ApiResponseEntityRetrieveLetterTemplate": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/LetterTemplate"
              }
            ]
          }
        },
        "description": "Retrieve Letter Template response entity",
        "title": "ApiResponseEntityRetrieveLetterTemplate"
      },
      "ApiResponseEntityRetrieveLetterTemplates": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "type":"array",
            "items": {
                "$ref": "#/definitions/LetterTemplate"
              }
          }
        },
        "description": "Retrieve Letter Templates response entity",
        "title": "ApiResponseEntityRetrieveLetterTemplates"
      },
      "ApiResponseEntityPrefilledLetterTemplatesResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/PrefilledLetterTemplate"
              }
            ]
          }
        },
        "description": "Prefilled Letter Template  Response",
        "title": "ApiResponseEntityPrefilledLetterTemplatesResponse"
      },
      "ApiResponseEntityValidateCardLetterResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/ValidateCardLetterResponse"
              }
            ]
          }
        },
        "description": "Validate Card Letter Response",
        "title": "ApiResponseEntityValidateCardLetterResponse"
      },
      "ApiResponseEntityGenerateCardLetterResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/GenerateCardLetterResponse"
              }
            ]
          }
        },
        "description": "Generate Card Letter Response",
        "title": "ApiResponseEntityGenerateCardLetterResponse"
      },
      "DeleteCardLetterResponse": {
        "type": "object",
        "required": [
          "letterIdentifier"
        ],
        "properties": {
          "letterIdentifier": {
            "description": "Refer to Letter.letterIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/LetterIdentifier"
              }
            ]
          }
        },
        "title": "DeleteCardLetterResponse"
      },
      "Letter": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "letterIdentifier": {
             "allOf": [
              {
               "$ref": "#/definitions/LetterIdentifier"
              }
              ],
            "description": "Unique identifier of the letter"
          },
            "name": {
            "type": "string",
            "description": "Name of the letter template, used to generate the letter"
          },
           "description": {
            "type": "string",
            "description": "Description of the letter. Free text field"
          },
          "content": {
            "type": "string",
            "description": "Content of the generated letter in Base64 format"
          },
          "outputFormat": {
            "type": "string",
            "description": "Output format of the template used to generate a letter. Possible values are:\n•\tPDF\n•\tXML\n•\tWORD"
          },
          "category": {
            "type": "string",
            "description": "Category of the letter template used to generate the letter"
          },
          "owner": {
            "type": "string",
            "description": "The owner of the letter (from the generate letter request)"
          },
          "validationStatus": {
            "type": "string",
            "description": "Validation status of the letter. Possible values are:\n•VALIDATION_NEEDED\n•VALIDATED"
          },
          "generationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the letter generation"
          }
        },
        "title": "Letter"
      },
       "LetterTemplate": {
        "type": "object",
        "properties": {
          "issuerId": {
            "type": "string",
            "description": "Issuer identifier (unique per platform)"
          },
          "letterTemplateIdentifier": {
            "allOf": [
              {
               "$ref": "#/definitions/LetterTemplateIdentifier"
              }
              ],
            "description": "Identifier of the letter template"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LetterTemplateParameter"
            },
            "description": "List of the parameters related to the template, containing template parameter properties fetched from the Letter Generation Service configuration file"
          },
           "description": {
            "type": "string",
            "description": "Description of the letter template. Free text field"
          },
          "structure": {
            "type": "string",
            "description": "Used for Jasper letters. Defines the structure of the Jasper template"
          },
          "outputFormat": {
            "type": "string",
            "description": "Output format of the template to define the output format. Possible values are:\n•\tPDF\n•\tXML\n•\tWORD"
          },
          "category": {
            "type": "string",
            "description": "Category of the template.Examples:\n-\t CARD \n- DISPUTE \n- FRAUD"
          },
          "transformerType": {
            "type": "string",
            "description": "The transformer type defines the format of the template and so technologies that will be used to generate the letter. Possible values are:\n•\tJASPER\n•\tXSLT"
          }
        },
        "title": "LetterTemplate"
      },
     "LetterTemplateIdentifier": {
        "type": "object",
        "properties": {
          "letterTemplateReference": {
            "type": "string",
            "description": "Reference of the letter template"
          }
        },
        "title": "LetterTemplateIdentifier"
      },
      "PrefilledLetterTemplate": {
        "type": "object",
        "required":[
        "letterTemplateIdentifier"
        ],
        "properties": {
            "issuerId": {
            "type": "string",
            "description": "Issuer id"
          },
          "letterTemplateIdentifier": {
            "allOf": [
              {
               "$ref": "#/definitions/LetterTemplateIdentifier"
              }
              ],
            "description": "Identifier of the letter template"
          },
          "parametersValues": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LetterTemplateParameterValue"
            },
            "description": "List of the parameters used for letter template prefilling"
          },
           "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LetterTemplateParameter"
            },
            "description": "List of the parameters related to the template, containing template parameter properties fetched from the LGS configuration file"
          },
            "description": {
            "type": "string",
            "description": "Description of the letter template. Free text field"
          },
            "outputFormat": {
            "type": "string",
            "description": "Output format of the template to define the output format. Possible values are:\n•\tPDF\n•\tXML\n•\tWORD"
          },
          "structure": {
            "type": "string",
            "description": "Used for Jasper letters. Defines the structure of the Jasper template"
          },
          "category": {
            "type": "string",
            "description": "Category of the template.Examples:\n-\t CARD \n- DISPUTE \n- FRAUD"
          },
          "transformerType": {
            "type": "string",
            "description": "The transformer type defines the format of the template and so technologies that will be used to generate the letter. Possible values are:\n•\tJASPER\n•\tXSLT"
          }
        },
        "title": "PrefilledLetterTemplate"
      },
      "ValidateCardLetterResponse": {
        "type": "object",
        "required":[
        "letterIdentifier",
        "validationStatus"
        ],
        "properties": {
          "letterIdentifier": {
            "description": "Refer to Letter.letterIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/LetterIdentifier"
              }
            ]
          },
          "validationStatus": {
            "type": "string",
            "description": "Refer to Letter.validationStatus"
          }
        },
        "title": "ValidateCardLetterResponse"
      },
        "GenerateCardLetterResponse": {
        "type": "object",
        "required":[
        "letterIdentifier",
        "name",
        "generationDate"
        ],
        "properties": {
          "letterIdentifier": {
            "description": "Refer to Letter.letterIdentifier",
            "allOf": [
              {
                "$ref": "#/definitions/LetterIdentifier"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "Refer to Letter.name"
          },
          "generationDate": {
            "type": "string",
            "format": "date-time",
            "description": "Refer to Letter.generationDate"
          }
        },
        "title": "GenerateCardLetterResponse"
      },
       "GenerateCardLetterRequest": {
        "type": "object",
        "required":[
        "letterTemplateIdentifier"
        ],
        "properties": {
           "letterTemplateIdentifier": {
            "description": "Identifier of letter template which will be used to generate the letter",
            "allOf": [
              {
                "$ref": "#/definitions/LetterTemplateIdentifier"
              }
            ]
          },
          "letterTemplateParameterValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LetterTemplateParameterValue"
            },
            "description": "The values assigned to the parameters of the letter"
          },
          "validationNeeded": {
            "type": "boolean",
            "description": "In case the parameter is set to True, than the letter must be validated afterwards"
          }
        },
        "title": "GenerateCardLetterRequest"
      },
      "LetterTemplateParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the template parameter"
          },
           "displayType": {
            "type": "string",
            "description": "Indicates how the template parameter should be displayed in an UI. Possible values:\n- \"text\" for text fields\n- \"list\" for drop down lists\n- \"date\" for date fields\n- \"no_display\" when field should not be displayed"
          },
           "source": {
            "type": "string",
            "description": "Source of the template parameter. Indicates how the field is populated. Can be a fixed value or a list of fixed values for a static variable, or a property of a business object for a dynamic variable. The Prefill parameters for the defined letter templates API should be used to return dynamic values."
          },
           "sourceType": {
            "type": "string",
            "description": "Type of the source Possible values: \n- \"date\" when the source is a date\n- \"list\" when the source is a list\n- \"collection\" when the source is a collection and contains sub parameters (Note : list of parameters of the collection is currently not returned)"
          },
           "defined": {
            "type": "boolean",
            "description": "Indicates if the template parameter is defined in the configuration (true) or not (false)"
          },
           "invalid": {
            "type": "boolean",
            "description": "Indicates if the template parameter is invalid (true) or not (false)"
          },
          "editable": {
            "type": "boolean",
            "description": "If true, the template parameter can be displayed as modifiable in an UI."
          },
          "description": {
            "type": "string",
            "description": "Description of the template parameter"
          },
          "validation": {
            "type": "string",
            "description": "Regular expression used to validate the value of the template parameter (ex : length), either in an UI or during Generate a letter API call"
          },
          "format": {
            "type": "string",
            "description": "Format of the template parameter. Indicates how the value is formatted and will be displayed in an UI. Used for dates and amounts (ex : yyyy-mm-dd in case of date). Default format for date fields is dd/mm/yyyy"
          },
           "displayOrder": {
            "type": "string",
            "description": "Display order of the template parameter"
          },
          "subParameters": {
            "description": "List of sub parameters of the letter template",
            "type": "array",
            "items": {
              "$ref": "#/definitions/LetterTemplateParameter"
            }
          }
        },
        "title": "LetterTemplateParameter"
      },
      "LetterTemplateParameterValue": {
        "type": "object",
        "properties": {
         "value": {
            "type": "string",
            "description": "Template parameter value prefilled"
          },
          "parameterName": {
            "type": "string",
            "description": "Template parameter name"
          },
          "valueList": {
            "type": "array",
            "description" : "List of the parameters values which have been prefilled from business object data",
            "items": {
              "$ref": "#/definitions/LetterTemplateValueItem"
            }
          }
        },
        "title": "LetterTemplateParameterValue"
      },
      "LetterIdentifier": {
        "type": "object",
        "properties": {
          "letterId": {
            "type": "string",
            "description": "Unique ID of the letter, generated in the system"
          }
        },
        "title": "LetterIdentifier"
      },
      "LetterTemplateValueItem": {
        "type": "object",
        "properties": {
          "subParameters": {
          "type": "array",
            "description": "List of subparameters values associated to the letter parameter",
            "items": {
              "$ref": "#/definitions/LetterTemplateSubParameterValue"
            }
            }
        },
        "title": "LetterTemplateValueItem"
      },
       "LetterTemplateSubParameterValue": {
        "type": "object",
        "properties": {
          "subParameterName": {
            "type": "string",
            "description": "sub parameter name"
          },
           "value": {
            "type": "string",
            "description": "sub parameter value"
          }
        },
        "title": "LetterTemplateSubParameterValue"
      },
      "ApiResponseEntityDeleteAddress": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/DeleteAddressResponse"
              }
            ]
          }
        },
        "description": "Delete address response entity",
        "title": "ApiResponseEntityDeleteAddress"
      },
      "DeleteAddressResponse": {
        "type": "object",
        "required": [
          "addressIdentifier",
          "addressVersionIdentifier"
        ],
        "properties": {
          "addressIdentifier": {
            "description": "Identification of the customer address either by Issuer address external reference or by address reference",
            "allOf": [
              {
                "$ref": "#/definitions/AddressIdentifier"
              }
            ]
          },
          "addressVersionIdentifier": {
            "description": "Identification of the address version by address version reference",
            "allOf": [
              {
                "$ref": "#/definitions/AddressVersionIdentifier"
              }
            ]
          }
        },
        "title": "DeleteAddressResponse"
      },
      "AddressVersionIdentifier": {
        "type": "object",
        "properties": {
          "addressVersionReference": {
            "type": "string",
            "description": "Identifies the version of the address\nA new version of the address is created when a change is done on the address."
          }
        },
        "title": "AddressVersionIdentifier"
      },
      "ApiResponseEntityAddressVersions": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "type": "array",
             "items": {
              "$ref": "#/definitions/Address"
            },
            "description": "Response data"
          }
        },
        "description": "Retrieve address versions response entity",
        "title": "ApiResponseEntityAddressVersions"
      },
      "ApiResponseCreateSuperFolderResponse": {
        "x-wl-api-response": true,
        "type": "object",
        "required": [
          "responseMetadata"
        ],
        "properties": {
          "responseMetadata": {
            "description": "Response metadata",
            "allOf": [
              {
                "$ref": "#/definitions/ResponseMetadata"
              }
            ]
          },
          "data": {
            "description": "Response data",
            "allOf": [
              {
                "$ref": "#/definitions/CreateSuperFolderResponse"
              }
            ]
          }
        },
        "description": "Create Superfolder Response entity",
        "title": "ApiResponseCreateSuperFolderResponse"
      },
      "CreateSuperFolderRequest": {
        "type": "object",
        "required": [
          "disputeFolderIdentifiers"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The issuer can provide the name of the super folder to be created.Free Text."
          },
          "disputeFolderIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/DisputeFolderIdentifier"
            },
            "description": "The issuer must provide the list of dispute folder identifiers to be attached to the super folder.The dispute folder references must exist in our system and be associated to the same PAN otherwise the super folder will not be created."
      }
        },
        "title": "CreateSuperFolderRequest"
      },
      "CreateSuperFolderResponse": {
        "type": "object",
        "required": [
          "disputeFolderIdentifiers"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the super folder if provided in the request."
          },
          "superFolderIdentifier": {
            "description": "Identification of the super folder",
            "allOf": [
              {
                "$ref": "#/definitions/SuperFolderIdentifier"
              }
            ]
          }
        },
        "title": "CreateSuperFolderResponse"
      },
      
      "SuperFolderIdentifier": {
        "type": "object",
        "properties": {
          "superFolderReference": {
            "type": "string",
            "description": "The Dispute Super Folder external reference"
          }
        },
        "title": "SuperFolderIdentifier"
    },
    "ResponseMetadata": {
      "required": [
        "correlationId",
        "responseDateTime",
        "statusCode",
        "statusMessage",
        "timeTakenMs"
      ],
      "type": "object",
      "properties": {
        "correlationId": {
          "type": "string",
          "description": "Unique ID for the API response. This is the same ID (WL-Correlation-ID) that is sent in the API request header, which must be sent back in response",
          "example": "QQI8qq6jIKq5gO78BocFzSSMI9cI2ReD"
        },
        "statusMessage": {
          "type": "string",
          "description": "Value of applicative responseCode",
          "example": "OK",
          "enum": [
            "OK",
            "ACCEPTED",
            "EMPTY_RESULT",
            "UNPROCESSABLE",
            "NOT_ALLOWED",
            "NOT_FOUND",
            "DECLINED",
            "BAD_DATA",
            "TECHNICAL_ERROR",
            "EXPIRED",
            "FUNCTIONAL_ERROR",
            "FUNCTIONAL_CONFLICT_ERROR",
            "TOKEN_ALREADY_IN_REQUESTED_STATUS",
            "MISMATCH",
            "NO_ID"
          ]
        },
        "statusCode": {
          "maximum": 999,
          "type": "integer",
          "description": "HTTP return code",
          "format": "int32",
          "example": 200
        },
        "responseDateTime": {
          "maxLength": 24,
          "minLength": 24,
          "type": "string",
          "description": "GMT date & time of reply of service by I-TSP. Format ISO8601 : yyyy-MM-ddTHH:mm:ss.SSSZ",
          "example": "2023-02-09T10:23:30.747Z"
        },
        "timeTakenMs": {
          "type": "integer",
          "description": "Duration of service processing by I-TSP, in msec",
          "format": "int64",
          "example": 120
        }
      },
      "description": "Common structure that contains information on service processing. It can be used by API management for monitoring purpose"
    },
    "ResponseV2": {
      "required": [
        "responseMetadata"
      ],
      "type": "object",
      "properties": {
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata"
        },
        "data": {
          "type": "object"
        }
      }
    },
    "TokenSelfcareUpdateRequest": {
      "required": [
        "operationType",
        "tokenRequestorId"
      ],
      "type": "object",
      "properties": {
        "tokenRequestorId": {
          "maximum": 99999999999,
          "minimum": 0,
          "type": "integer",
          "description": "ID of the token requestor, assigned by the token service provider",
          "format": "int64"
        },
        "operationType": {
          "type": "string",
          "description": "Type of requested action regarding Card",
          "enum": [
            "ACTIVATE",
            "CLOSE",
            "BLOCK",
            "UNBLOCK"
          ]
        }
      }
    },
    "AddBaseRequest": {
      "required": [
        "tokenProviderID"
      ],
      "type": "object",
      "properties": {
        "tokenProviderID": {
          "pattern": "VTS|MDES",
          "type": "string",
          "description": "Information about the token provider. Values are MDES, VTS"
        }
      }
    },
    "GetCryptoOTPV2Response": {
      "type": "object",
      "properties": {
        "cryptoOTP": {
          "type": "string",
          "description": "For tokenProviderId VTS : format MBAAC-1-1-ciphertext, in base64 format. For MDES : TAV/activationData"
        }
      }
    },
    "ResponseV2GetCryptoOTPV2Response": {
      "required": [
        "responseMetadata"
      ],
      "type": "object",
      "properties": {
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata"
        },
        "data": {
          "$ref": "#/definitions/GetCryptoOTPV2Response"
        }
      }
    },
    "InitiateVCEHRequest": {
      "required": [
        "clientWalletProvider",
        "country"
      ],
      "type": "object",
      "properties": {
        "clientWalletProvider": {
          "maxLength": 50,
          "minLength": 1,
          "type": "string",
          "description": "Client Wallet Provider is the token requestor's ID (TRID) on which the provisioning is to be performed",
          "example": "40010075338"
        },
        "clientAppID": {
          "maxLength": 36,
          "minLength": 1,
          "type": "string",
          "description": "Unique Identifier for the client application, used to provide some of the encrypted values",
          "example": "Issuer's AppID"
        },
        "locale": {
          "maxLength": 5,
          "minLength": 5,
          "type": "string",
          "description": "Consumer preferred locale (language and country). This information will be useful to the Token Requestor to offer the best consumer experience during digitization. \r\nFormat: Two letter ISO 639-1 language in lowercase, with a underscore, followed by two letter ISO 3166-1 country code in uppercase",
          "example": "en_US"
        },
        "callbackURI": {
          "maxLength": 256,
          "minLength": 1,
          "type": "string",
          "description": "The URL for the token requestor to use to pass control back to the Issuer. This needs to be an absolute URL containing the scheme. Both iOS and Android support custom schemes that allow the browser to open an application",
          "example": "http://www.tokenIssuer1.com/pushtoken"
        },
        "callbackURIType": {
          "type": "string",
          "description": "The kind of URI for the return app",
          "enum": [
            "IOS",
            "ANDROID",
            "WEB"
          ]
        },
        "phoneNumber": {
          "maxLength": 16,
          "minLength": 1,
          "pattern": "^\\+\\d*",
          "type": "string",
          "description": "Cardholder phone number, to be used for the wallet provisioning, in the format +XXXXXXX (international prefix included). Required for Click-to-Pay",
          "example": "+33612345678"
        },
        "emailAddress": {
          "maxLength": 48,
          "minLength": 1,
          "pattern": "[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})",
          "type": "string",
          "description": "Cardholder email address. Required for Click-to-Pay. Format: [_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})",
          "example": "john.doe@gmail.com"
        },
        "line1": {
          "maxLength": 64,
          "minLength": 1,
          "pattern": "[ A-Za-z0-9\\.,'\\-_#:\\/]*",
          "type": "string",
          "description": "Part of billing address. Permitted characters: Whitespace, a-z, A-Z, 0-9, Symbols: .,'-_#:/\\r\\n Required for Click-to-Pay"
        },
        "line2": {
          "maxLength": 64,
          "minLength": 1,
          "pattern": "[ A-Za-z0-9\\.,'\\-_#:\\/]*",
          "type": "string",
          "description": "Part of billing address. Same format as line1"
        },
        "postalCode": {
          "maxLength": 10,
          "minLength": 1,
          "type": "string",
          "description": "Part of billing address. Required for Click-to-Pay"
        },
        "city": {
          "maxLength": 32,
          "minLength": 1,
          "pattern": "[ A-Za-z0-9\\.'\\-]*",
          "type": "string",
          "description": "Part of billing address.\r\nPermitted characters: Whitespace, a-z, A-Z, 0-9, Symbols: .'-\r\nRequired for Click-to-Pay"
        },
        "state": {
          "maxLength": 2,
          "minLength": 1,
          "type": "string",
          "description": "Part of billing address. State or province code associated with the address for US"
        },
        "country": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string",
          "description": "Part of billing address. Country code as defined in alpha2 ISO 3166. Required for Click-to-Pay"
        },
        "name": {
          "maxLength": 27,
          "minLength": 4,
          "pattern": "^[a-zA-Z]+(( [a-zA-Z]+( [a-zA-Z]+)?)|([/][a-zA-Z]+([/][a-zA-Z]+)?))$",
          "type": "string",
          "description": "The name of the account holder"
        },
        "cardholderReference": {
          "maxLength": 32,
          "minLength": 1,
          "type": "string",
          "description": "Unique identifier of the Consumer under a given Issuer. Required for Click-to-Pay",
          "example": "54566488990"
        }
      }
    },
    "InitiateVCEHResponse": {
      "type": "object",
      "properties": {
        "tokenRequestorPushMethods": {
          "$ref": "#/definitions/PushMethod"
        }
      }
    },
    "PushMethod": {
      "type": "object",
      "properties": {
        "pushMethodType": {
          "type": "string",
          "description": "Type of URI to call",
          "enum": [
            "IOS",
            "ANDROID",
            "WEB"
          ]
        },
        "pushMethodURI": {
          "maxLength": 128,
          "minLength": 1,
          "type": "string",
          "description": "The URI to open the Token Requestor's application or website.",
          "example": "http://www.tokenrequestor1.com/pushtoken"
        }
      },
      "description": "Wallet provider URI to be called by mobile application"
    },
    "ResponseV2InitiateVCEHResponse": {
      "required": [
        "responseMetadata"
      ],
      "type": "object",
      "properties": {
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata"
        },
        "data": {
          "$ref": "#/definitions/InitiateVCEHResponse"
        }
      }
    },
    "InitiateMDESTokenConnectRequest": {
      "required": [
        "clientWalletProvider"
      ],
      "type": "object",
      "properties": {
        "clientWalletProvider": {
          "maxLength": 11,
          "minLength": 11,
          "type": "string",
          "description": "Client Wallet Provider is the token requestor’s ID (TRID) on which the provisioning is to be performed"
        },
        "locale": {
          "maxLength": 5,
          "minLength": 0,
          "pattern": "[a-z]{2}_[A-Z]{2}",
          "type": "string",
          "description": "Consumer preferred locale (language and country). This information will be useful to the Token Requestor to offer the best consumer experience during digitization"
        },
        "callBackURI": {
          "maxLength": 256,
          "minLength": 1,
          "type": "string",
          "description": "The URL for the token requestor to use to pass control back to the Issuer. This needs to be an absolute URL containing the scheme. Both iOS and Android support custom schemes that allow the browser to open an application"
        },
        "callbackURIType": {
          "type": "string",
          "description": "The kind of URI for the return this.app",
          "enum": [
            "IOS",
            "ANDROID",
            "WEB"
          ]
        },
        "phoneNumber": {
          "pattern": "\\+\\d{4,15}",
          "type": "string",
          "description": "Cardholder phone number, to be used for the wallet provisioning"
        },
        "emailAddress": {
          "maxLength": 70,
          "minLength": 1,
          "type": "string",
          "description": "Cardholder email address, that is used"
        },
        "line1": {
          "maxLength": 64,
          "minLength": 1,
          "pattern": "[\\s\\w.'\\-:#/]*",
          "type": "string",
          "description": "Part of billing address."
        },
        "line2": {
          "maxLength": 64,
          "minLength": 1,
          "pattern": "[\\s\\w.'\\-:#/]*",
          "type": "string",
          "description": "Part of billing address."
        },
        "postalCode": {
          "maxLength": 16,
          "minLength": 3,
          "type": "string",
          "description": "Part of billing address. This field is required for Click-to-Pay"
        },
        "city": {
          "maxLength": 32,
          "minLength": 1,
          "type": "string",
          "description": "Part of billing address. This field is required for Click-to-Pay"
        },
        "state": {
          "maxLength": 12,
          "minLength": 1,
          "type": "string",
          "description": "Part of billing address. State or province code",
          "example": "US"
        },
        "country": {
          "maxLength": 2,
          "minLength": 2,
          "pattern": "[a-zA-z]*",
          "type": "string",
          "description": "Part of billing address. This field is required for Click-to-Pay. Country code, three digit country code as defined in alpha2 ISO 3166"
        },
        "name": {
          "maxLength": 27,
          "minLength": 1,
          "pattern": "^[a-zA-Z]+(( [a-zA-Z]+( [a-zA-Z]+)?)|([/][a-zA-Z]+([/][a-zA-Z]+)?))$",
          "type": "string",
          "description": "The name of the account holder"
        }
      }
    },
    "InitiateMDESTokenConnectResponse": {
      "type": "object",
      "properties": {
        "pushAccountReceipt": {
          "maxLength": 64,
          "minLength": 1,
          "type": "string",
          "description": "The data that must be returned to the mobile application and transmitted to wallet provider. This is the “voucher” to complete the token provisioning. Its validity is 30 minutes"
        },
        "tokenRequestorPushMethods": {
          "type": "array",
          "description": "Array of wallet provider URI to be called by mobile application in order to provide the pushAccountReceipt voucher. Up to client to filter regarding its own operating system and capacities",
          "items": {
            "$ref": "#/definitions/PushMethod"
          }
        }
      }
    },
    "ResponseV2InitiateMDESTokenConnectResponse": {
      "required": [
        "responseMetadata"
      ],
      "type": "object",
      "properties": {
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata"
        },
        "data": {
          "$ref": "#/definitions/InitiateMDESTokenConnectResponse"
        }
      }
    },
    "VtsCommonPushProvisioningRequest": {
      "required": [
        "clientAppID",
        "clientDeviceId",
        "clientWalletAccountID",
        "clientWalletProvider",
        "country"
      ],
      "type": "object",
      "properties": {
        "clientWalletAccountID": {
          "maxLength": 24,
          "minLength": 1,
          "type": "string",
          "description": "Wallet Id as presented by the Wallet service provider (token Requestor)"
        },
        "clientWalletProvider": {
          "maxLength": 11,
          "minLength": 11,
          "type": "string",
          "description": "Client Wallet Provider is the token requestor's ID (TRID) which is returned to the WP as part of onboarding"
        },
        "clientDeviceId": {
          "maxLength": 24,
          "minLength": 1,
          "type": "string",
          "description": "Device Id as presented by the Wallet service provider (token requestor)"
        },
        "clientAppID": {
          "maxLength": 36,
          "minLength": 1,
          "type": "string",
          "description": "Unique identifier for the client mobile application. Must be the App ID matching to the cryptographic profile on Visa developer zone"
        },
        "postalCode": {
          "maxLength": 16,
          "minLength": 3,
          "type": "string",
          "description": "The postal code associated with the enrolled payment instrument. Required only for countryCode GB, US or CA"
        },
        "country": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string",
          "description": "Country code, two digit country code as defined in alpha2 ISO 3166-1"
        },
        "state": {
          "maxLength": 2,
          "minLength": 0,
          "type": "string",
          "description": "State or province code in ISO 3166-2 format. Required only for countryCode GB, US or CA"
        },
        "city": {
          "maxLength": 100,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\s.'-]+$",
          "type": "string",
          "description": "City associated with the enrolled payment instrument. Required only for countryCode GB, US or CA"
        },
        "line1": {
          "maxLength": 140,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\s\\.,'\\-_#:\\/]*$",
          "type": "string",
          "description": "Street 1 on billing address for the payment instrument. Required only for countryCode GB, US or CA"
        },
        "line2": {
          "maxLength": 140,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\s\\.,'\\-_#:\\/]*$",
          "type": "string",
          "description": "Street 2 on billing address for the payment instrument. Required only for countryCode GB, US or CA"
        }
      }
    },
    "CreateVtsTokenizedCardV2Response": {
      "type": "object",
      "properties": {
        "paymentInstrumentDetails": {
          "type": "string",
          "description": "The data that must be returned to the mobile application and transmitted to wallet provider. JWE structure as described in VTS Push Provisioning - Payment Instrument Details v12 specification"
        }
      }
    },
    "ResponseV2CreateVtsTokenizedCardV2Response": {
      "required": [
        "responseMetadata"
      ],
      "type": "object",
      "properties": {
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata"
        },
        "data": {
          "$ref": "#/definitions/CreateVtsTokenizedCardV2Response"
        }
      }
    },
    "CreateMdesTokenizedCardV2Request": {
      "required": [
        "clientWalletProvider"
      ],
      "type": "object",
      "properties": {
        "clientWalletProvider": {
          "maxLength": 11,
          "minLength": 11,
          "type": "string",
          "description": "Client Wallet Provider is the token requestor's ID (TRID) that designate the encryption key set. For Google, TRID is 50120834693, and Samsung is 50139059239",
          "example": "50120834693"
        }
      }
    },
    "CreateMdesTokenizedCardV2Response": {
      "type": "object",
      "properties": {
        "issuerInitiatedDigitizationData": {
          "$ref": "#/definitions/MdesIssuerDigitizationDataResponse"
        }
      }
    },
    "EncryptedPayload": {
      "required": [
        "encryptedData",
        "encryptedKey",
        "publicKeyFingerprint"
      ],
      "type": "object",
      "properties": {
        "publicKeyFingerprint": {
          "maxLength": 64,
          "minLength": 1,
          "type": "string",
          "description": "The fingerprint of the public key used to encrypt the ephemeral AES key. Hex-encoded data (case-insensitive)",
          "example": "fingerprint1245421"
        },
        "encryptedKey": {
          "maxLength": 512,
          "minLength": 1,
          "type": "string",
          "description": "One-time use AES key encrypted by the Mastercard public key (as\r\nidentified by 'publicKeyFingerprint') using the OAEP or RSA Encryption\r\nStandard PKCS #1 v1.5 (depending on the value of\r\n'oaepHashingAlgorithm'.\r\nRequirement is for a 128-bit key (with 256-bit key supported as an\r\noption). Hex-encoded data (case-insensitive)",
          "example": "ECD12A55458552152154"
        },
        "oaepHashingAlgorithm": {
          "maxLength": 6,
          "minLength": 0,
          "pattern": "SHA256|SHA512",
          "type": "string",
          "description": "Hashing algorithm used with the OAEP scheme. If omitted, then the RSA Encryption Standard PKCS #1 v1.5 will be used",
          "example": "SHA512"
        },
        "iv": {
          "maxLength": 32,
          "minLength": 0,
          "type": "string",
          "description": "The initialization vector used when encrypting data using the one-time\r\nuse AES key. Must be exactly 16 bytes (32 character hex string) to\r\nmatch the block size.If not present, an IV of zero is assumed. Hex-encoded data (case-insensitive)",
          "example": "000000000000"
        },
        "encryptedData": {
          "maxLength": 256000,
          "minLength": 1,
          "type": "string",
          "description": "Contains an encrypted json object. Encrypted by the ephemeral AES key\r\nusing CBC mode (IV as provided in 'iv', or zero if none provided) and\r\nPKCS#7 padding. The JSON object being encrypted will be defined in\r\nthe context of the API call. Hex-encoded data (case-insensitive)",
          "example": "fqeftrq1s6541c5v161f2d151e12"
        }
      },
      "description": "EncryptedPayload object containing a FundingAccountData object"
    },
    "FundingAccountInfo": {
      "required": [
        "encryptedPayload"
      ],
      "type": "object",
      "properties": {
        "panUniqueReference": {
          "maxLength": 64,
          "minLength": 0,
          "type": "string",
          "description": "Reference to the PAN that is unique per Wallet Provider",
          "example": "DNHI12354321571354"
        },
        "tokenUniqueReference": {
          "maxLength": 64,
          "minLength": 0,
          "type": "string",
          "description": "A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime. Required in NotifyServiceActivated",
          "example": "1234567896ABCD456456564"
        },
        "encryptedPayload": {
          "$ref": "#/definitions/EncryptedPayload"
        }
      },
      "description": "Json structure containing encrypted payload"
    },
    "MdesIssuerDigitizationDataResponse": {
      "required": [
        "tokenizationAuthenticationValue"
      ],
      "type": "object",
      "properties": {
        "fundingAccountInfo": {
          "$ref": "#/definitions/FundingAccountInfo"
        },
        "tokenizationAuthenticationValue": {
          "type": "string",
          "description": "TAV structure, in Base 64 format",
          "example": "qzmernbhmlkjndpifjnzqef534ez1f65315z4ef61ez"
        }
      },
      "description": "The data that must be returned to the mobile application and transmitted to wallet provider"
    },
    "ResponseV2CreateMdesTokenizedCardV2Response": {
      "required": [
        "responseMetadata"
      ],
      "type": "object",
      "properties": {
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata"
        },
        "data": {
          "$ref": "#/definitions/CreateMdesTokenizedCardV2Response"
        }
      }
    },
    "CreateAppleTokenizedCardV2Request": {
      "required": [
        "applePublicKey",
        "nonce",
        "nonceSignature",
        "tokenProviderID"
      ],
      "type": "object",
      "properties": {
        "tokenProviderID": {
          "pattern": "VTS|MDES",
          "type": "string",
          "description": "Information about the token provider. Values are MDES, VTS"
        },
        "nonce": {
          "pattern": "[0-9a-fA-F]+",
          "type": "string",
          "description": "Nonce generated by Apple, HEX encoded. Upper or lower letters accepted."
        },
        "nonceSignature": {
          "pattern": "[0-9a-fA-F]+",
          "type": "string",
          "description": "Nonce signature generated by Apple, HEX encoded. Upper or lower letters accepted."
        },
        "applePublicKey": {
          "type": "string",
          "description": "Apple ECDSA public key, in Base 64 format, retrieved from the Apple public certificate"
        }
      }
    },
    "CreateAppleTokenizedCardV2Response": {
      "type": "object",
      "properties": {
        "encryptedPassData": {
          "type": "string",
          "description": "EncryptedPassData (encrypted card data). Present if responseCode OK"
        },
        "activationData": {
          "type": "string",
          "description": "MBPAC element (encrypted activation code). TAV value for MDES or MBPAC value for VTS. Present if responseCode OK"
        },
        "ephemeralPublicKey": {
          "type": "string",
          "description": "Ephemeral ECDSA public key, prefixed with 0x04. Always Base64 in V2 service. Present if responseCode OK"
        }
      }
    },
    "ResponseV2CreateAppleTokenizedCardV2Response": {
      "required": [
        "responseMetadata"
      ],
      "type": "object",
      "properties": {
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata"
        },
        "data": {
          "$ref": "#/definitions/CreateAppleTokenizedCardV2Response"
        }
      }
    },
    "ClickToPayRemoveRequest": {
      "type": "object",
      "properties": {
        "removeAll": {
          "type": "boolean"
        }
      }
    },
    "BillingAddress": {
      "required": [
        "city",
        "country",
        "line1",
        "postalCode"
      ],
      "type": "object",
      "properties": {
        "line1": {
          "maxLength": 64,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\s\\.,'\\-_#:\\/]{1,64}$",
          "type": "string",
          "description": "Part of billing address",
          "example": "1000 Main Street"
        },
        "line2": {
          "maxLength": 64,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\s\\.,'\\-_#:\\/]{1,64}$",
          "type": "string",
          "description": "Part of billing address",
          "example": "Building 56"
        },
        "line3": {
          "maxLength": 64,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\s\\.,'\\-_#:\\/]{1,64}$",
          "type": "string",
          "description": "Part of billing address",
          "example": "Suite 100"
        },
        "city": {
          "maxLength": 10,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\s\\.,']{1,64}$",
          "type": "string",
          "description": "Part of billing address",
          "example": "San Francisco"
        },
        "state": {
          "maxLength": 2,
          "minLength": 1,
          "type": "string",
          "description": "Part of billing address",
          "example": "CA"
        },
        "postalCode": {
          "maxLength": 10,
          "minLength": 1,
          "type": "string",
          "description": "Part of billing address",
          "example": "94105"
        },
        "country": {
          "maxLength": 3,
          "minLength": 3,
          "type": "string",
          "description": "Part of billing address. Country code as defined in alpha3 ISO 3166",
          "example": "USA"
        }
      }
    },
    "ClickToPayEnrollRequest": {
      "type": "object",
      "properties": {
        "consumerInformation": {
          "$ref": "#/definitions/ConsumerInformation"
        },
        "billingAddress": {
          "$ref": "#/definitions/BillingAddress"
        }
      }
    },
    "ConsumerInformation": {
      "required": [
        "countryCode",
        "emailAddresses",
        "name",
        "phoneNumbers"
      ],
      "type": "object",
      "properties": {
        "name": {
          "maxLength": 27,
          "minLength": 1,
          "pattern": "\\p{L}*\\s\\p{L}*|\\p{L}*\\s\\p{L}*\\s\\p{L}*",
          "type": "string",
          "description": "The name of the account holder, in the format \"firstname middlename lastname\" or \"firstname lastname\" (separator space)",
          "example": "John Doe"
        },
        "phoneNumbers": {
          "maxItems": 5,
          "minItems": 1,
          "type": "array",
          "description": "List of phone numbers, with international prefix",
          "example": "+33612345678",
          "items": {
            "pattern": "\\+[1-9]\\d+",
            "type": "string",
            "description": "List of phone numbers, with international prefix",
            "example": "+33612345678"
          }
        },
        "emailAddresses": {
          "maxItems": 5,
          "minItems": 1,
          "type": "array",
          "description": "List of email addresses",
          "example": "john.doe@mydomain.com",
          "items": {
            "pattern": "[_A-Za-z0-9-+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})",
            "type": "string",
            "description": "List of email addresses",
            "example": "john.doe@mydomain.com"
          }
        },
        "locale": {
          "maxLength": 5,
          "minLength": 5,
          "pattern": "[a-z]{2}_[A-Z]{2}",
          "type": "string",
          "description": "Language and country in which the product communicates with the consumer. Format : ISO-639-1",
          "example": "en_US"
        },
        "countryCode": {
          "pattern": "[A-Z]{3}",
          "type": "string",
          "description": "Country code using 3-character ISO 3166 (Alpha 3) format",
          "example": "USA"
        },
        "consentVersion": {
          "maxLength": 9,
          "minLength": 1,
          "type": "string",
          "description": "Specific version of the terms and conditions that the customer has accepted for the user solution",
          "example": "1.0"
        },
        "consentPresenter": {
          "maxLength": 30,
          "minLength": 1,
          "type": "string",
          "description": "Identifies the presenter of consent to the consumer",
          "example": "Bank A"
        },
        "timeOfConsent": {
          "pattern": "\\d{4}(-\\d{2}){2}T(\\d{2}:){2}\\d{2}\\.\\d{3}Z",
          "type": "string",
          "description": "Date/Time from which the consent is valid. Format ISO8601 : yyyy-MM-ddTHH:mm:ss.SSSZ",
          "example": "2023-02-09T10:23:30.747Z"
        }
      },
      "description": "Structure used for information related to click-to-pay account"
    },
    "GetTokenDataRequest": {
      "type": "object",
      "properties": {
        "encryptedCard": {
          "maxLength": 46,
          "minLength": 32,
          "type": "string",
          "description": "PAN, ciphered with key referenced keyId, using AES-GCM 256, in HEX format"
        },
        "keyId": {
          "type": "string",
          "description": "Key identifier of the shared encryption key. Mandatory in case of encryptedCard"
        },
        "iv": {
          "maxLength": 24,
          "minLength": 0,
          "type": "string",
          "description": "12-bytes length random initialization vector used for AES ciphering, in HEX format. Mandatory in case of encryptedCard"
        },
        "mac": {
          "maxLength": 32,
          "minLength": 0,
          "type": "string",
          "description": "Associated authentication tag (signature), in HEX format. Mandatory in case of encryptedCard"
        },
        "card": {
          "maxLength": 23,
          "minLength": 16,
          "type": "string",
          "description": "The cardnumber of the customer"
        },
        "issuerCardId": {
          "maxLength": 64,
          "minLength": 1,
          "type": "string",
          "description": "Anonymized card identifier (Surrogate of PAN), as defined by Issuer. Either encryptedCard or clear-text card, or issuerCardId must be provided"
        }
      }
    },
    "AddTokenData": {
      "required": [
        "tokenProviderID",
        "tokenReferenceID",
        "tokenStatus"
      ],
      "type": "object",
      "properties": {
        "tokenProviderID": {
          "type": "string",
          "description": "MDES or VTS"
        },
        "tokenReferenceID": {
          "maxLength": 64,
          "minLength": 1,
          "type": "string",
          "description": "Token reference ID, assigned by the token service provider. Unique under a tokenProviderID"
        },
        "tokenStatus": {
          "type": "string",
          "description": "The status of the Token. Possible values are :\r\n IAC (Inactive), ACT (Active), SUS (Suspended), DEA (Deactivated)"
        },
        "tokenRequestorID": {
          "maximum": 99999999999,
          "type": "integer",
          "description": "ID of the token requestor, assigned by the token service provider",
          "format": "int64"
        },
        "tokenRequestorName": {
          "maxLength": 32,
          "minLength": 0,
          "type": "string",
          "description": "Name of the Token Requestor"
        },
        "tokenRequestorCategory": {
          "maxLength": 32,
          "minLength": 0,
          "type": "string",
          "description": "Token Requestor category found in token_requestor table, default value: ecom_cof"
        },
        "tokenExpiryMonth": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string",
          "description": "The month of the token expiration date. For example 11",
          "example": "11"
        },
        "tokenExpiryYear": {
          "maxLength": 4,
          "minLength": 4,
          "type": "string",
          "description": "The year of the token expiration date. For example 2023",
          "example": "2024"
        },
        "tokenType": {
          "type": "string",
          "description": "Usage scope of token : SE, HCE, COF, ECOM",
          "enum": [
            "SE",
            "HCE",
            "COF",
            "ECOM"
          ]
        },
        "deviceID": {
          "maxLength": 48,
          "minLength": 0,
          "type": "string",
          "description": "For SE or HCE only. Secure Element Id or Digital Wallet ID. Format Hex binary"
        },
        "walletID": {
          "maxLength": 48,
          "minLength": 0,
          "type": "string",
          "description": "Wallet account identifier of the wallet provider"
        }
      },
      "description": "Structure used for filling information related to the found tokens. Present if minimum one token found"
    },
    "GetTokenDataResponse": {
      "required": [
        "responseCode"
      ],
      "type": "object",
      "properties": {
        "responseCode": {
          "pattern": "OK|NOT_ALLOWED|NOT_FOUND|DECLINED|BAD_DATA|TECHNICAL_ERROR",
          "type": "string",
          "description": "response code returned",
          "enum": [
            "OK",
            "NOT_ALLOWED",
            "NOT_FOUND",
            "DECLINED",
            "BAD_DATA",
            "NO_ID",
            "MISMATCH",
            "TECHNICAL_ERROR"
          ]
        },
        "cardLastDigits": {
          "maxLength": 4,
          "minLength": 4,
          "type": "string",
          "description": "The 4 last digits of the cardnumber of the customer (PAN)"
        },
        "cardExpiryMonth": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string",
          "description": "The month of the card expiry date.",
          "example": "11"
        },
        "cardExpiryYear": {
          "maxLength": 4,
          "minLength": 4,
          "type": "string",
          "description": "The year of the card expiry date.",
          "example": "2023"
        },
        "tokenDataList": {
          "type": "array",
          "description": "Structure used for filling information related to the found tokens. Present if minimum one token found",
          "items": {
            "$ref": "#/definitions/AddTokenData"
          }
        }
      }
    },
    "GetCryptoOTPRequest": {
      "required": [
        "tokenProviderID"
      ],
      "type": "object",
      "properties": {
        "tokenProviderID": {
          "pattern": "VTS|MDES",
          "type": "string",
          "description": "Information about the token provider. Values are MDES, VTS"
        },
        "issuerCardId": {
          "maxLength": 64,
          "minLength": 1,
          "type": "string",
          "description": "Anonymized card identifier (Surrogate of PAN), as defined by Issuer. Mandatory in case of tokenReferenceId is absent."
        },
        "tokenReferenceID": {
          "maxLength": 64,
          "minLength": 1,
          "type": "string",
          "description": "Token reference ID, assigned by the token service provider."
        },
        "authCode": {
          "maxLength": 6,
          "minLength": 6,
          "type": "string",
          "description": "Auth code generated by issuer. Must contains a 6-character code (0 through 9 and A through Z) that is specific to the current provisioning request"
        }
      }
    },
    "GetCryptoOTPResponse": {
      "required": [
        "responseCode"
      ],
      "type": "object",
      "properties": {
        "responseCode": {
          "pattern": "OK|NOT_ALLOWED|NOT_FOUND|DECLINED|BAD_DATA|TECHNICAL_ERROR",
          "type": "string",
          "description": "response code returned",
          "enum": [
            "OK",
            "NOT_ALLOWED",
            "NOT_FOUND",
            "DECLINED",
            "BAD_DATA",
            "NO_ID",
            "MISMATCH",
            "TECHNICAL_ERROR"
          ]
        },
        "cryptoOTP": {
          "type": "string",
          "description": "For tokenProviderId VTS : Provisioning Authentication Data (MBAAC), format MBAAC-1-1-ciphertext, in base64 format."
        }
      }
    },
    "GetCardIdFromTokenRequest": {
      "required": [
        "tokenProviderID",
        "tokenReferenceID"
      ],
      "type": "object",
      "properties": {
        "tokenProviderID": {
          "pattern": "VTS|MDES",
          "type": "string",
          "description": "Information about the token provider. Values are MDES, VTS"
        },
        "tokenReferenceID": {
          "maxLength": 64,
          "minLength": 0,
          "type": "string",
          "description": "Token reference ID, assigned by the token service provider."
        },
        "tokenRequestorID": {
          "maximum": 99999999999,
          "minimum": 0,
          "type": "integer",
          "description": "ID of the token requestor, assigned by the token service provider. Typically a wallet service provider or merchant. Provided if response code OK",
          "format": "int64"
        }
      }
    },
    "GetCardIdFromTokenResponse": {
      "required": [
        "responseCode"
      ],
      "type": "object",
      "properties": {
        "responseCode": {
          "pattern": "OK|NOT_ALLOWED|NOT_FOUND|DECLINED|BAD_DATA|TECHNICAL_ERROR",
          "type": "string",
          "description": "response code returned",
          "enum": [
            "OK",
            "NOT_ALLOWED",
            "NOT_FOUND",
            "DECLINED",
            "BAD_DATA",
            "NO_ID",
            "MISMATCH",
            "TECHNICAL_ERROR"
          ]
        },
        "cardLastDigits": {
          "maxLength": 4,
          "minLength": 4,
          "type": "string",
          "description": "The 4 last digits of the cardnumber of the customer (PAN)"
        },
        "cardExpiryMonth": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string",
          "description": "The month of the card expiry date.",
          "example": "11"
        },
        "cardExpiryYear": {
          "maxLength": 4,
          "minLength": 4,
          "type": "string",
          "description": "The year of the card expiry date.",
          "example": "2023"
        },
        "issuerCardId": {
          "maxLength": 64,
          "minLength": 0,
          "type": "string",
          "description": "Anonymized card identifier (Surrogate of PAN), as defined by Issuer. Present if response OK",
          "example": "superIssuerId"
        },
        "tokenType": {
          "pattern": "SECURE_ELEMENT|HCE|CARD_ON_FILE|ECOMMERCE|QRC",
          "type": "string",
          "description": "Values are: SECURE_ELEMENT, HCE, CARD_ON_FILE, ECOMMERCE, QRC.",
          "example": "HCE"
        }
      }
    },
    "CreateVtsTokenizedCardPushProvisioningRequest": {
      "required": [
        "clientAppID",
        "clientDeviceId",
        "clientWalletAccountID",
        "clientWalletProvider",
        "country",
        "issuerCardId"
      ],
      "type": "object",
      "properties": {
        "clientWalletAccountID": {
          "maxLength": 24,
          "minLength": 1,
          "type": "string",
          "description": "Wallet Id as presented by the Wallet service provider (token Requestor)"
        },
        "clientWalletProvider": {
          "maxLength": 11,
          "minLength": 11,
          "type": "string",
          "description": "Client Wallet Provider is the token requestor's ID (TRID) which is returned to the WP as part of onboarding"
        },
        "clientDeviceId": {
          "maxLength": 24,
          "minLength": 1,
          "type": "string",
          "description": "Device Id as presented by the Wallet service provider (token requestor)"
        },
        "clientAppID": {
          "maxLength": 36,
          "minLength": 1,
          "type": "string",
          "description": "Unique identifier for the client mobile application. Must be the App ID matching to the cryptographic profile on Visa developer zone"
        },
        "postalCode": {
          "maxLength": 16,
          "minLength": 3,
          "type": "string",
          "description": "The postal code associated with the enrolled payment instrument. Required only for countryCode GB, US or CA"
        },
        "country": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string",
          "description": "Country code, two digit country code as defined in alpha2 ISO 3166-1"
        },
        "state": {
          "maxLength": 2,
          "minLength": 0,
          "type": "string",
          "description": "State or province code in ISO 3166-2 format. Required only for countryCode GB, US or CA"
        },
        "city": {
          "maxLength": 100,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\s.'-]+$",
          "type": "string",
          "description": "City associated with the enrolled payment instrument. Required only for countryCode GB, US or CA"
        },
        "line1": {
          "maxLength": 140,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\s\\.,'\\-_#:\\/]*$",
          "type": "string",
          "description": "Street 1 on billing address for the payment instrument. Required only for countryCode GB, US or CA"
        },
        "line2": {
          "maxLength": 140,
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\s\\.,'\\-_#:\\/]*$",
          "type": "string",
          "description": "Street 2 on billing address for the payment instrument. Required only for countryCode GB, US or CA"
        },
        "issuerCardId": {
          "maxLength": 64,
          "minLength": 1,
          "type": "string",
          "description": "Anonymized card identifier (Surrogate of PAN), as defined by Issuer"
        }
      }
    },
    "CreateVtsTokenizedCardResponse": {
      "required": [
        "responseCode"
      ],
      "type": "object",
      "properties": {
        "responseCode": {
          "pattern": "OK|NOT_ALLOWED|NOT_FOUND|DECLINED|BAD_DATA|TECHNICAL_ERROR",
          "type": "string",
          "description": "response code returned",
          "enum": [
            "OK",
            "NOT_ALLOWED",
            "NOT_FOUND",
            "DECLINED",
            "BAD_DATA",
            "NO_ID",
            "MISMATCH",
            "TECHNICAL_ERROR"
          ]
        },
        "paymentInstrumentDetails": {
          "type": "string",
          "description": "The data that must be returned to the mobile application and transmitted to wallet provider"
        }
      }
    },
    "CreateMdesTokenizedCardRequest": {
      "required": [
        "issuerCardId"
      ],
      "type": "object",
      "properties": {
        "issuerCardId": {
          "maxLength": 64,
          "minLength": 0,
          "type": "string",
          "description": "Anonymized card identifier (Surrogate of PAN), as defined by Issuer"
        },
        "name": {
          "maxLength": 27,
          "minLength": 1,
          "pattern": "^[A-Z]+[/\\ ][A-Z]+$",
          "type": "string",
          "description": "The name of the account holder, in the format LASTNAME/FIRSTNAME or FIRSTNAME LASTNAME. No accented or special characters"
        },
        "clientWalletProvider": {
          "maxLength": 11,
          "minLength": 11,
          "type": "string",
          "description": "Client Wallet Provider is the token requestor's ID (TRID) that designate the encryption key set. For Google, TRID is 50120834693, and Samsung is 50139059239. By default the Google TRID is considered."
        }
      }
    },
    "CreateMdesTokenizedCardResponse": {
      "required": [
        "responseCode"
      ],
      "type": "object",
      "properties": {
        "responseCode": {
          "pattern": "OK|NOT_ALLOWED|NOT_FOUND|DECLINED|BAD_DATA|TECHNICAL_ERROR",
          "type": "string",
          "description": "response code returned",
          "enum": [
            "OK",
            "NOT_ALLOWED",
            "NOT_FOUND",
            "DECLINED",
            "BAD_DATA",
            "NO_ID",
            "MISMATCH",
            "TECHNICAL_ERROR"
          ]
        },
        "issuerInitiatedDigitizationData": {
          "$ref": "#/definitions/MdesIssuerDigitizationDataResponse"
        }
      }
    },
    "CreateAppleTokenizedCardRequest": {
      "required": [
        "applePublicKey",
        "issuerCardId",
        "name",
        "nonce",
        "nonceSignature",
        "tokenProviderID"
      ],
      "type": "object",
      "properties": {
        "tokenProviderID": {
          "pattern": "VTS|MDES",
          "type": "string",
          "description": "Information about the token provider. Values are MDES, VTS"
        },
        "issuerCardId": {
          "maxLength": 64,
          "minLength": 1,
          "type": "string",
          "description": "Anonymized card identifier (Surrogate of PAN), as defined by Issuer"
        },
        "name": {
          "maxLength": 40,
          "minLength": 1,
          "type": "string",
          "description": "The full name of the cardholder, as known by wallet, associated with the enrolled payment instrument; UTF-8 format"
        },
        "authCode": {
          "maxLength": 6,
          "minLength": 6,
          "pattern": "[A-Z0-9]{6}",
          "type": "string",
          "description": "Auth code generated by issuer. Must contains a 6-character code 0 through 9 and A through Z that is specific to the current provisioning request"
        },
        "nonce": {
          "type": "string",
          "description": "Nonce generated by Apple"
        },
        "nonceSignature": {
          "type": "string",
          "description": "Nonce signature generated by Apple"
        },
        "applePublicKey": {
          "type": "string",
          "description": "Apple ECDSA public key, in Base 64 format, retrieved from the Apple public certificate"
        },
        "formatEphemeralKey": {
          "pattern": "hex|base64",
          "type": "string"
        }
      }
    },
    "CreateAppleTokenizedCardResponse": {
      "required": [
        "responseCode"
      ],
      "type": "object",
      "properties": {
        "responseCode": {
          "pattern": "OK|NOT_ALLOWED|NOT_FOUND|DECLINED|BAD_DATA|TECHNICAL_ERROR",
          "type": "string",
          "description": "response code returned",
          "enum": [
            "OK",
            "NOT_ALLOWED",
            "NOT_FOUND",
            "DECLINED",
            "BAD_DATA",
            "NO_ID",
            "MISMATCH",
            "TECHNICAL_ERROR"
          ]
        },
        "encryptedPassData": {
          "type": "string",
          "description": "EncryptedPassData (encrypted card data). Present if responseCode OK"
        },
        "activationData": {
          "type": "string",
          "description": "MBPAC element (encrypted activation code). Present if responseCode OK"
        },
        "ephemeralPublicKey": {
          "type": "string",
          "description": "Ephemeral ECDSA public key, in Hexadecimal-extended format, prefixed with 04. Present if responseCode OK"
        }
      }
    },
    "DetailsDataResponse": {
      "type": "object",
      "properties": {
        "tokenSuffix": {
          "maxLength": 4,
          "minLength": 4,
          "type": "string",
          "description": "Last 4 digits of token value",
          "example": "7890"
        },
        "tokenStatus": {
          "type": "string",
          "description": "The status of the Token. Possible values are :\r\n IAC (Inactive), ACT (Active), SUS (Suspended), DEA (Deactivated)"
        },
        "tokenActivationDate": {
          "type": "string",
          "description": "GMT date & time of token activation (empty if inactive). Format ISO8601 : yyyy-MM-ddTHH:mm:ss.SSSZ",
          "format": "date-time"
        },
        "lastTokenStatusUpdatedDate": {
          "type": "string",
          "description": "GMT date of last status update of the token Format ISO8601 : yyyy-MM-ddTHH:mm:ss.SSSZ",
          "format": "date-time"
        },
        "tokenExpiryDate": {
          "maxLength": 7,
          "minLength": 7,
          "type": "string",
          "description": "The year and month of the token expiry date. Format yyyy-MM",
          "example": "2023-11"
        },
        "deviceID": {
          "maxLength": 48,
          "minLength": 0,
          "type": "string",
          "description": "For SE or HCE only. Secure Element Id or Digital Wallet ID. Format Hex binary",
          "example": "C2ZBY14310005664"
        },
        "deviceType": {
          "type": "string",
          "description": "Type of device",
          "example": "MOBILEPHONE_OR_TABLET",
          "enum": [
            "UNKNOWN",
            "MOBILE_PHONE",
            "TABLET",
            "WATCH",
            "MOBILEPHONE_OR_TABLET",
            "PERSONAL_COMPUTER",
            "OTHER"
          ]
        },
        "deviceName": {
          "type": "string",
          "description": "Readable name for the device. Could contain UTF-8 international characters",
          "example": "John's phone"
        },
        "walletAccountId": {
          "maxLength": 32,
          "minLength": 0,
          "type": "string",
          "description": "User identifier on device for SE or HCE only",
          "example": "A4DF297BD8466140A4DF297BD8466140"
        }
      }
    },
    "ResponseV2DetailsDataResponse": {
      "required": [
        "responseMetadata"
      ],
      "type": "object",
      "properties": {
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata"
        },
        "data": {
          "$ref": "#/definitions/DetailsDataResponse"
        }
      }
    },
    "GetCardIdFromTokenV2Response": {
      "type": "object",
      "properties": {
        "cardLastDigits": {
          "maxLength": 4,
          "minLength": 4,
          "type": "string",
          "description": "The 4 last digits of the cardnumber of the customer (PAN)",
          "example": "4578"
        },
        "cardExpiryMonth": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string",
          "description": "The month of the card expiry date. For example 11",
          "example": "02"
        },
        "cardExpiryYear": {
          "maxLength": 4,
          "minLength": 4,
          "type": "string",
          "description": "The year of the card expiry date. For example 2023",
          "example": "2023"
        },
        "issuerCardId": {
          "maxLength": 64,
          "minLength": 0,
          "type": "string",
          "description": "Anonymized card identifier (Surrogate of PAN), as defined by Issuer. Present if response OK",
          "example": "52936061AAAP8026"
        },
        "tokenType": {
          "pattern": "SECURE_ELEMENT|HCE|CARD_ON_FILE|ECOMMERCE|QRC",
          "type": "string",
          "description": "Values are: SECURE_ELEMENT, HCE, CARD_ON_FILE, ECOMMERCE, QRC.",
          "example": "HCE"
        }
      }
    },
    "ResponseV2GetCardIdFromTokenV2Response": {
      "required": [
        "responseMetadata"
      ],
      "type": "object",
      "properties": {
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata"
        },
        "data": {
          "$ref": "#/definitions/GetCardIdFromTokenV2Response"
        }
      }
    },
    "GetTokenDataV2Response": {
      "type": "object",
      "properties": {
        "cardLastDigits": {
          "maxLength": 4,
          "minLength": 4,
          "type": "string",
          "description": "The 4 last digits of the cardnumber of the customer (PAN)",
          "example": "4578"
        },
        "cardExpiryMonth": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string",
          "description": "The month of the card expiry date. For example 11",
          "example": "02"
        },
        "cardExpiryYear": {
          "maxLength": 4,
          "minLength": 4,
          "type": "string",
          "description": "The year of the card expiry date. For example 2023",
          "example": "2023"
        },
        "tokenDataList": {
          "type": "array",
          "description": "Structure used for filling information related to the found tokens. Present if minimum one token found",
          "items": {
            "$ref": "#/definitions/AddTokenData"
          }
        }
      }
    },
    "ResponseV2GetTokenDataV2Response": {
      "required": [
        "responseMetadata"
      ],
      "type": "object",
      "properties": {
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata"
        },
        "data": {
          "$ref": "#/definitions/GetTokenDataV2Response"
        }
      }
    },
    "CardDetails": {
      "required": [
        "billingAddress",
        "cardExpiryMonth",
        "cardExpiryYear",
        "cardLastDigits",
        "nameOnCard"
      ],
      "type": "object",
      "properties": {
        "cardReference": {
          "maxLength": 64,
          "minLength": 1,
          "type": "string",
          "description": "Anonymized card identifier (Surrogate of PAN), as defined by Issuer Card Management System. Only filled for the card in request",
          "example": "42936061AAAP8026"
        },
        "cardLastDigits": {
          "maxLength": 4,
          "minLength": 4,
          "type": "string",
          "description": "The 4 last digits of the cardnumber of the customer (PAN).",
          "example": "4321"
        },
        "cardExpiryMonth": {
          "maxLength": 2,
          "minLength": 2,
          "type": "string",
          "description": "The month of the card expiry date",
          "example": "11"
        },
        "cardExpiryYear": {
          "maxLength": 4,
          "minLength": 4,
          "type": "string",
          "description": "The year of the card expiry date",
          "example": "2050"
        },
        "nameOnCard": {
          "maxLength": 27,
          "minLength": 1,
          "type": "string",
          "description": "The name cardholder (embossed on card), in the format \"firstname middlename lastname\" or \"firstname lastname\" (separator space), charset  ISO 8859-1 (aka Latin-1)",
          "example": "John Doe"
        },
        "billingAddress": {
          "$ref": "#/definitions/BillingAddress"
        }
      },
      "description": "List of cardDetail structures that contains information on cards associated to a click-to-Pay account. Returned if min one present. See below for subfields"
    },
    "ClickToPayRetrieveAccountDataResponse": {
      "type": "object",
      "properties": {
        "cardholderReference": {
          "type": "string",
          "description": "Anonymized card identifier (Surrogate of PAN), as defined by Issuer Card Management System",
          "example": "42936061AAAP8026"
        },
        "c2pProvider": {
          "type": "string",
          "description": "Click-to-Pay provider : Visa. Returned if card is valid",
          "example": "Visa"
        },
        "consumerInformation": {
          "$ref": "#/definitions/ConsumerInformation"
        },
        "cardDetails": {
          "type": "array",
          "description": "List of cardDetail structures that contains information on cards associated to a click-to-Pay account. Returned if min one present. See below for subfields",
          "items": {
            "$ref": "#/definitions/CardDetails"
          }
        }
      }
    },
    "ResponseV2ClickToPayRetrieveAccountDataResponse": {
      "required": [
        "responseMetadata"
      ],
      "type": "object",
      "properties": {
        "responseMetadata": {
          "$ref": "#/definitions/ResponseMetadata"
        },
        "data": {
          "$ref": "#/definitions/ClickToPayRetrieveAccountDataResponse"
        }
      }
    }
  }
  }
  
  
